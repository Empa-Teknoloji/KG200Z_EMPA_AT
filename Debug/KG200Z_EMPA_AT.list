
KG200Z_EMPA_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000263d0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000363c  08026510  08026510  00027510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08029b4c  08029b4c  0002ab4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08029c24  08029c24  0002b1b4  2**0
                  CONTENTS
  5 .ARM          00000008  08029c24  08029c24  0002ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08029c2c  08029c2c  0002b1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08029c2c  08029c2c  0002ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08029c30  08029c30  0002ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000001b4  20000000  08029c34  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002dac  200001b4  08029de8  0002b1b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002f60  08029de8  0002bf60  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002b1b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051bfe  00000000  00000000  0002b1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c2ac  00000000  00000000  0007cddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e30  00000000  00000000  00089088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002f9d  00000000  00000000  0008ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf78  00000000  00000000  0008fe55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004b878  00000000  00000000  000bcdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d602e  00000000  00000000  00108645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001de673  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010f30  00000000  00000000  001de6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001ef5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b4 	.word	0x200001b4
 800015c:	00000000 	.word	0x00000000
 8000160:	080264f8 	.word	0x080264f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b8 	.word	0x200001b8
 800017c:	080264f8 	.word	0x080264f8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_frsub>:
 80007a8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007ac:	e002      	b.n	80007b4 <__addsf3>
 80007ae:	bf00      	nop

080007b0 <__aeabi_fsub>:
 80007b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007b4 <__addsf3>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	bf1f      	itttt	ne
 80007b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007bc:	ea92 0f03 	teqne	r2, r3
 80007c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007c8:	d06a      	beq.n	80008a0 <__addsf3+0xec>
 80007ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007d2:	bfc1      	itttt	gt
 80007d4:	18d2      	addgt	r2, r2, r3
 80007d6:	4041      	eorgt	r1, r0
 80007d8:	4048      	eorgt	r0, r1
 80007da:	4041      	eorgt	r1, r0
 80007dc:	bfb8      	it	lt
 80007de:	425b      	neglt	r3, r3
 80007e0:	2b19      	cmp	r3, #25
 80007e2:	bf88      	it	hi
 80007e4:	4770      	bxhi	lr
 80007e6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007ee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007f2:	bf18      	it	ne
 80007f4:	4240      	negne	r0, r0
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007fa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007fe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000802:	bf18      	it	ne
 8000804:	4249      	negne	r1, r1
 8000806:	ea92 0f03 	teq	r2, r3
 800080a:	d03f      	beq.n	800088c <__addsf3+0xd8>
 800080c:	f1a2 0201 	sub.w	r2, r2, #1
 8000810:	fa41 fc03 	asr.w	ip, r1, r3
 8000814:	eb10 000c 	adds.w	r0, r0, ip
 8000818:	f1c3 0320 	rsb	r3, r3, #32
 800081c:	fa01 f103 	lsl.w	r1, r1, r3
 8000820:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000824:	d502      	bpl.n	800082c <__addsf3+0x78>
 8000826:	4249      	negs	r1, r1
 8000828:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800082c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000830:	d313      	bcc.n	800085a <__addsf3+0xa6>
 8000832:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000836:	d306      	bcc.n	8000846 <__addsf3+0x92>
 8000838:	0840      	lsrs	r0, r0, #1
 800083a:	ea4f 0131 	mov.w	r1, r1, rrx
 800083e:	f102 0201 	add.w	r2, r2, #1
 8000842:	2afe      	cmp	r2, #254	@ 0xfe
 8000844:	d251      	bcs.n	80008ea <__addsf3+0x136>
 8000846:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800084a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800084e:	bf08      	it	eq
 8000850:	f020 0001 	biceq.w	r0, r0, #1
 8000854:	ea40 0003 	orr.w	r0, r0, r3
 8000858:	4770      	bx	lr
 800085a:	0049      	lsls	r1, r1, #1
 800085c:	eb40 0000 	adc.w	r0, r0, r0
 8000860:	3a01      	subs	r2, #1
 8000862:	bf28      	it	cs
 8000864:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000868:	d2ed      	bcs.n	8000846 <__addsf3+0x92>
 800086a:	fab0 fc80 	clz	ip, r0
 800086e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000872:	ebb2 020c 	subs.w	r2, r2, ip
 8000876:	fa00 f00c 	lsl.w	r0, r0, ip
 800087a:	bfaa      	itet	ge
 800087c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000880:	4252      	neglt	r2, r2
 8000882:	4318      	orrge	r0, r3
 8000884:	bfbc      	itt	lt
 8000886:	40d0      	lsrlt	r0, r2
 8000888:	4318      	orrlt	r0, r3
 800088a:	4770      	bx	lr
 800088c:	f092 0f00 	teq	r2, #0
 8000890:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000894:	bf06      	itte	eq
 8000896:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800089a:	3201      	addeq	r2, #1
 800089c:	3b01      	subne	r3, #1
 800089e:	e7b5      	b.n	800080c <__addsf3+0x58>
 80008a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008a8:	bf18      	it	ne
 80008aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ae:	d021      	beq.n	80008f4 <__addsf3+0x140>
 80008b0:	ea92 0f03 	teq	r2, r3
 80008b4:	d004      	beq.n	80008c0 <__addsf3+0x10c>
 80008b6:	f092 0f00 	teq	r2, #0
 80008ba:	bf08      	it	eq
 80008bc:	4608      	moveq	r0, r1
 80008be:	4770      	bx	lr
 80008c0:	ea90 0f01 	teq	r0, r1
 80008c4:	bf1c      	itt	ne
 80008c6:	2000      	movne	r0, #0
 80008c8:	4770      	bxne	lr
 80008ca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008ce:	d104      	bne.n	80008da <__addsf3+0x126>
 80008d0:	0040      	lsls	r0, r0, #1
 80008d2:	bf28      	it	cs
 80008d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008d8:	4770      	bx	lr
 80008da:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008de:	bf3c      	itt	cc
 80008e0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008e4:	4770      	bxcc	lr
 80008e6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008ea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f2:	4770      	bx	lr
 80008f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008f8:	bf16      	itet	ne
 80008fa:	4608      	movne	r0, r1
 80008fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000900:	4601      	movne	r1, r0
 8000902:	0242      	lsls	r2, r0, #9
 8000904:	bf06      	itte	eq
 8000906:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800090a:	ea90 0f01 	teqeq	r0, r1
 800090e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000912:	4770      	bx	lr

08000914 <__aeabi_ui2f>:
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e004      	b.n	8000924 <__aeabi_i2f+0x8>
 800091a:	bf00      	nop

0800091c <__aeabi_i2f>:
 800091c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000920:	bf48      	it	mi
 8000922:	4240      	negmi	r0, r0
 8000924:	ea5f 0c00 	movs.w	ip, r0
 8000928:	bf08      	it	eq
 800092a:	4770      	bxeq	lr
 800092c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000930:	4601      	mov	r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	e01c      	b.n	8000972 <__aeabi_l2f+0x2a>

08000938 <__aeabi_ul2f>:
 8000938:	ea50 0201 	orrs.w	r2, r0, r1
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	e00a      	b.n	800095c <__aeabi_l2f+0x14>
 8000946:	bf00      	nop

08000948 <__aeabi_l2f>:
 8000948:	ea50 0201 	orrs.w	r2, r0, r1
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000954:	d502      	bpl.n	800095c <__aeabi_l2f+0x14>
 8000956:	4240      	negs	r0, r0
 8000958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800095c:	ea5f 0c01 	movs.w	ip, r1
 8000960:	bf02      	ittt	eq
 8000962:	4684      	moveq	ip, r0
 8000964:	4601      	moveq	r1, r0
 8000966:	2000      	moveq	r0, #0
 8000968:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800096c:	bf08      	it	eq
 800096e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000972:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000976:	fabc f28c 	clz	r2, ip
 800097a:	3a08      	subs	r2, #8
 800097c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000980:	db10      	blt.n	80009a4 <__aeabi_l2f+0x5c>
 8000982:	fa01 fc02 	lsl.w	ip, r1, r2
 8000986:	4463      	add	r3, ip
 8000988:	fa00 fc02 	lsl.w	ip, r0, r2
 800098c:	f1c2 0220 	rsb	r2, r2, #32
 8000990:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000994:	fa20 f202 	lsr.w	r2, r0, r2
 8000998:	eb43 0002 	adc.w	r0, r3, r2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f102 0220 	add.w	r2, r2, #32
 80009a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009b4:	fa21 f202 	lsr.w	r2, r1, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_fmul>:
 80009c4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009cc:	bf1e      	ittt	ne
 80009ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009d2:	ea92 0f0c 	teqne	r2, ip
 80009d6:	ea93 0f0c 	teqne	r3, ip
 80009da:	d06f      	beq.n	8000abc <__aeabi_fmul+0xf8>
 80009dc:	441a      	add	r2, r3
 80009de:	ea80 0c01 	eor.w	ip, r0, r1
 80009e2:	0240      	lsls	r0, r0, #9
 80009e4:	bf18      	it	ne
 80009e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ea:	d01e      	beq.n	8000a2a <__aeabi_fmul+0x66>
 80009ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009f8:	fba0 3101 	umull	r3, r1, r0, r1
 80009fc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a04:	bf3e      	ittt	cc
 8000a06:	0049      	lslcc	r1, r1, #1
 8000a08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a0c:	005b      	lslcc	r3, r3, #1
 8000a0e:	ea40 0001 	orr.w	r0, r0, r1
 8000a12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a16:	2afd      	cmp	r2, #253	@ 0xfd
 8000a18:	d81d      	bhi.n	8000a56 <__aeabi_fmul+0x92>
 8000a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a22:	bf08      	it	eq
 8000a24:	f020 0001 	biceq.w	r0, r0, #1
 8000a28:	4770      	bx	lr
 8000a2a:	f090 0f00 	teq	r0, #0
 8000a2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a32:	bf08      	it	eq
 8000a34:	0249      	lsleq	r1, r1, #9
 8000a36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000a40:	bfc2      	ittt	gt
 8000a42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a4a:	4770      	bxgt	lr
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	dc5d      	bgt.n	8000b14 <__aeabi_fmul+0x150>
 8000a58:	f112 0f19 	cmn.w	r2, #25
 8000a5c:	bfdc      	itt	le
 8000a5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bxle	lr
 8000a64:	f1c2 0200 	rsb	r2, r2, #0
 8000a68:	0041      	lsls	r1, r0, #1
 8000a6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a6e:	f1c2 0220 	rsb	r2, r2, #32
 8000a72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a7a:	f140 0000 	adc.w	r0, r0, #0
 8000a7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a82:	bf08      	it	eq
 8000a84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a88:	4770      	bx	lr
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a92:	bf02      	ittt	eq
 8000a94:	0040      	lsleq	r0, r0, #1
 8000a96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a9a:	3a01      	subeq	r2, #1
 8000a9c:	d0f9      	beq.n	8000a92 <__aeabi_fmul+0xce>
 8000a9e:	ea40 000c 	orr.w	r0, r0, ip
 8000aa2:	f093 0f00 	teq	r3, #0
 8000aa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aaa:	bf02      	ittt	eq
 8000aac:	0049      	lsleq	r1, r1, #1
 8000aae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ab2:	3b01      	subeq	r3, #1
 8000ab4:	d0f9      	beq.n	8000aaa <__aeabi_fmul+0xe6>
 8000ab6:	ea41 010c 	orr.w	r1, r1, ip
 8000aba:	e78f      	b.n	80009dc <__aeabi_fmul+0x18>
 8000abc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	bf18      	it	ne
 8000ac6:	ea93 0f0c 	teqne	r3, ip
 8000aca:	d00a      	beq.n	8000ae2 <__aeabi_fmul+0x11e>
 8000acc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ad0:	bf18      	it	ne
 8000ad2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ad6:	d1d8      	bne.n	8000a8a <__aeabi_fmul+0xc6>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f090 0f00 	teq	r0, #0
 8000ae6:	bf17      	itett	ne
 8000ae8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000aec:	4608      	moveq	r0, r1
 8000aee:	f091 0f00 	teqne	r1, #0
 8000af2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000af6:	d014      	beq.n	8000b22 <__aeabi_fmul+0x15e>
 8000af8:	ea92 0f0c 	teq	r2, ip
 8000afc:	d101      	bne.n	8000b02 <__aeabi_fmul+0x13e>
 8000afe:	0242      	lsls	r2, r0, #9
 8000b00:	d10f      	bne.n	8000b22 <__aeabi_fmul+0x15e>
 8000b02:	ea93 0f0c 	teq	r3, ip
 8000b06:	d103      	bne.n	8000b10 <__aeabi_fmul+0x14c>
 8000b08:	024b      	lsls	r3, r1, #9
 8000b0a:	bf18      	it	ne
 8000b0c:	4608      	movne	r0, r1
 8000b0e:	d108      	bne.n	8000b22 <__aeabi_fmul+0x15e>
 8000b10:	ea80 0001 	eor.w	r0, r0, r1
 8000b14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_fdiv>:
 8000b2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b34:	bf1e      	ittt	ne
 8000b36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b3a:	ea92 0f0c 	teqne	r2, ip
 8000b3e:	ea93 0f0c 	teqne	r3, ip
 8000b42:	d069      	beq.n	8000c18 <__aeabi_fdiv+0xec>
 8000b44:	eba2 0203 	sub.w	r2, r2, r3
 8000b48:	ea80 0c01 	eor.w	ip, r0, r1
 8000b4c:	0249      	lsls	r1, r1, #9
 8000b4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b52:	d037      	beq.n	8000bc4 <__aeabi_fdiv+0x98>
 8000b54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	428b      	cmp	r3, r1
 8000b66:	bf38      	it	cc
 8000b68:	005b      	lslcc	r3, r3, #1
 8000b6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b72:	428b      	cmp	r3, r1
 8000b74:	bf24      	itt	cs
 8000b76:	1a5b      	subcs	r3, r3, r1
 8000b78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b80:	bf24      	itt	cs
 8000b82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b8e:	bf24      	itt	cs
 8000b90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b9c:	bf24      	itt	cs
 8000b9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ba2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	bf18      	it	ne
 8000baa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bae:	d1e0      	bne.n	8000b72 <__aeabi_fdiv+0x46>
 8000bb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb2:	f63f af50 	bhi.w	8000a56 <__aeabi_fmul+0x92>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbc:	bf08      	it	eq
 8000bbe:	f020 0001 	biceq.w	r0, r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bcc:	327f      	adds	r2, #127	@ 0x7f
 8000bce:	bfc2      	ittt	gt
 8000bd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd8:	4770      	bxgt	lr
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	3a01      	subs	r2, #1
 8000be4:	e737      	b.n	8000a56 <__aeabi_fmul+0x92>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0040      	lsleq	r0, r0, #1
 8000bf2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bf6:	3a01      	subeq	r2, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fdiv+0xc2>
 8000bfa:	ea40 000c 	orr.w	r0, r0, ip
 8000bfe:	f093 0f00 	teq	r3, #0
 8000c02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0049      	lsleq	r1, r1, #1
 8000c0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c0e:	3b01      	subeq	r3, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fdiv+0xda>
 8000c12:	ea41 010c 	orr.w	r1, r1, ip
 8000c16:	e795      	b.n	8000b44 <__aeabi_fdiv+0x18>
 8000c18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c1c:	ea92 0f0c 	teq	r2, ip
 8000c20:	d108      	bne.n	8000c34 <__aeabi_fdiv+0x108>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	f47f af7d 	bne.w	8000b22 <__aeabi_fmul+0x15e>
 8000c28:	ea93 0f0c 	teq	r3, ip
 8000c2c:	f47f af70 	bne.w	8000b10 <__aeabi_fmul+0x14c>
 8000c30:	4608      	mov	r0, r1
 8000c32:	e776      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c34:	ea93 0f0c 	teq	r3, ip
 8000c38:	d104      	bne.n	8000c44 <__aeabi_fdiv+0x118>
 8000c3a:	024b      	lsls	r3, r1, #9
 8000c3c:	f43f af4c 	beq.w	8000ad8 <__aeabi_fmul+0x114>
 8000c40:	4608      	mov	r0, r1
 8000c42:	e76e      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c48:	bf18      	it	ne
 8000c4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	d1ca      	bne.n	8000be6 <__aeabi_fdiv+0xba>
 8000c50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c54:	f47f af5c 	bne.w	8000b10 <__aeabi_fmul+0x14c>
 8000c58:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c5c:	f47f af3c 	bne.w	8000ad8 <__aeabi_fmul+0x114>
 8000c60:	e75f      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c62:	bf00      	nop

08000c64 <__gesf2>:
 8000c64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000c68:	e006      	b.n	8000c78 <__cmpsf2+0x4>
 8000c6a:	bf00      	nop

08000c6c <__lesf2>:
 8000c6c:	f04f 0c01 	mov.w	ip, #1
 8000c70:	e002      	b.n	8000c78 <__cmpsf2+0x4>
 8000c72:	bf00      	nop

08000c74 <__cmpsf2>:
 8000c74:	f04f 0c01 	mov.w	ip, #1
 8000c78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d011      	beq.n	8000cb4 <__cmpsf2+0x40>
 8000c90:	b001      	add	sp, #4
 8000c92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c96:	bf18      	it	ne
 8000c98:	ea90 0f01 	teqne	r0, r1
 8000c9c:	bf58      	it	pl
 8000c9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca2:	bf88      	it	hi
 8000ca4:	17c8      	asrhi	r0, r1, #31
 8000ca6:	bf38      	it	cc
 8000ca8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cac:	bf18      	it	ne
 8000cae:	f040 0001 	orrne.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	d102      	bne.n	8000cc0 <__cmpsf2+0x4c>
 8000cba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cbe:	d105      	bne.n	8000ccc <__cmpsf2+0x58>
 8000cc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc4:	d1e4      	bne.n	8000c90 <__cmpsf2+0x1c>
 8000cc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cca:	d0e1      	beq.n	8000c90 <__cmpsf2+0x1c>
 8000ccc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_cfrcmple>:
 8000cd4:	4684      	mov	ip, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4661      	mov	r1, ip
 8000cda:	e7ff      	b.n	8000cdc <__aeabi_cfcmpeq>

08000cdc <__aeabi_cfcmpeq>:
 8000cdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cde:	f7ff ffc9 	bl	8000c74 <__cmpsf2>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	bf48      	it	mi
 8000ce6:	f110 0f00 	cmnmi.w	r0, #0
 8000cea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cec <__aeabi_fcmpeq>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff fff4 	bl	8000cdc <__aeabi_cfcmpeq>
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2001      	moveq	r0, #1
 8000cf8:	2000      	movne	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmplt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffea 	bl	8000cdc <__aeabi_cfcmpeq>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmple>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffe0 	bl	8000cdc <__aeabi_cfcmpeq>
 8000d1c:	bf94      	ite	ls
 8000d1e:	2001      	movls	r0, #1
 8000d20:	2000      	movhi	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmpge>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffd2 	bl	8000cd4 <__aeabi_cfrcmple>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpgt>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffc8 	bl	8000cd4 <__aeabi_cfrcmple>
 8000d44:	bf34      	ite	cc
 8000d46:	2001      	movcc	r0, #1
 8000d48:	2000      	movcs	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_f2uiz>:
 8000d50:	0042      	lsls	r2, r0, #1
 8000d52:	d20e      	bcs.n	8000d72 <__aeabi_f2uiz+0x22>
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d58:	d30b      	bcc.n	8000d72 <__aeabi_f2uiz+0x22>
 8000d5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d409      	bmi.n	8000d78 <__aeabi_f2uiz+0x28>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d70:	4770      	bx	lr
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	4770      	bx	lr
 8000d78:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_f2uiz+0x32>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d102      	bne.n	8000d88 <__aeabi_f2uiz+0x38>
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d86:	4770      	bx	lr
 8000d88:	f04f 0000 	mov.w	r0, #0
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <__aeabi_uldivmod>:
 8000d90:	b953      	cbnz	r3, 8000da8 <__aeabi_uldivmod+0x18>
 8000d92:	b94a      	cbnz	r2, 8000da8 <__aeabi_uldivmod+0x18>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	bf08      	it	eq
 8000d98:	2800      	cmpeq	r0, #0
 8000d9a:	bf1c      	itt	ne
 8000d9c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000da0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000da4:	f000 b96a 	b.w	800107c <__aeabi_idiv0>
 8000da8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db0:	f000 f806 	bl	8000dc0 <__udivmoddi4>
 8000db4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr

08000dc0 <__udivmoddi4>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	9d08      	ldr	r5, [sp, #32]
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14e      	bne.n	8000e6a <__udivmoddi4+0xaa>
 8000dcc:	4694      	mov	ip, r2
 8000dce:	458c      	cmp	ip, r1
 8000dd0:	4686      	mov	lr, r0
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	d962      	bls.n	8000e9e <__udivmoddi4+0xde>
 8000dd8:	b14a      	cbz	r2, 8000dee <__udivmoddi4+0x2e>
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	4091      	lsls	r1, r2
 8000de0:	fa20 f303 	lsr.w	r3, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	4319      	orrs	r1, r3
 8000dea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df2:	fa1f f68c 	uxth.w	r6, ip
 8000df6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb04 f106 	mul.w	r1, r4, r6
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d90a      	bls.n	8000e24 <__udivmoddi4+0x64>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e16:	f080 8112 	bcs.w	800103e <__udivmoddi4+0x27e>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 810f 	bls.w	800103e <__udivmoddi4+0x27e>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a59      	subs	r1, r3, r1
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e36:	fb00 f606 	mul.w	r6, r0, r6
 8000e3a:	429e      	cmp	r6, r3
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x94>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e46:	f080 80fc 	bcs.w	8001042 <__udivmoddi4+0x282>
 8000e4a:	429e      	cmp	r6, r3
 8000e4c:	f240 80f9 	bls.w	8001042 <__udivmoddi4+0x282>
 8000e50:	4463      	add	r3, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	1b9b      	subs	r3, r3, r6
 8000e56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11d      	cbz	r5, 8000e66 <__udivmoddi4+0xa6>
 8000e5e:	40d3      	lsrs	r3, r2
 8000e60:	2200      	movs	r2, #0
 8000e62:	e9c5 3200 	strd	r3, r2, [r5]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d905      	bls.n	8000e7a <__udivmoddi4+0xba>
 8000e6e:	b10d      	cbz	r5, 8000e74 <__udivmoddi4+0xb4>
 8000e70:	e9c5 0100 	strd	r0, r1, [r5]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4608      	mov	r0, r1
 8000e78:	e7f5      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000e7a:	fab3 f183 	clz	r1, r3
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d146      	bne.n	8000f10 <__udivmoddi4+0x150>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xcc>
 8000e86:	4290      	cmp	r0, r2
 8000e88:	f0c0 80f0 	bcc.w	800106c <__udivmoddi4+0x2ac>
 8000e8c:	1a86      	subs	r6, r0, r2
 8000e8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d0e6      	beq.n	8000e66 <__udivmoddi4+0xa6>
 8000e98:	e9c5 6300 	strd	r6, r3, [r5]
 8000e9c:	e7e3      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	f040 8090 	bne.w	8000fc4 <__udivmoddi4+0x204>
 8000ea4:	eba1 040c 	sub.w	r4, r1, ip
 8000ea8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eba:	fb08 4416 	mls	r4, r8, r6, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb07 f006 	mul.w	r0, r7, r6
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x11c>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x11a>
 8000ed4:	4298      	cmp	r0, r3
 8000ed6:	f200 80cd 	bhi.w	8001074 <__udivmoddi4+0x2b4>
 8000eda:	4626      	mov	r6, r4
 8000edc:	1a1c      	subs	r4, r3, r0
 8000ede:	fa1f f38e 	uxth.w	r3, lr
 8000ee2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ee6:	fb08 4410 	mls	r4, r8, r0, r4
 8000eea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eee:	fb00 f707 	mul.w	r7, r0, r7
 8000ef2:	429f      	cmp	r7, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x148>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x146>
 8000f00:	429f      	cmp	r7, r3
 8000f02:	f200 80b0 	bhi.w	8001066 <__udivmoddi4+0x2a6>
 8000f06:	4620      	mov	r0, r4
 8000f08:	1bdb      	subs	r3, r3, r7
 8000f0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f0e:	e7a5      	b.n	8000e5c <__udivmoddi4+0x9c>
 8000f10:	f1c1 0620 	rsb	r6, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f20:	fa04 f301 	lsl.w	r3, r4, r1
 8000f24:	ea43 030c 	orr.w	r3, r3, ip
 8000f28:	40f4      	lsrs	r4, r6
 8000f2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f2e:	0c38      	lsrs	r0, r7, #16
 8000f30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f34:	fbb4 fef0 	udiv	lr, r4, r0
 8000f38:	fa1f fc87 	uxth.w	ip, r7
 8000f3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000f40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f44:	fb0e f90c 	mul.w	r9, lr, ip
 8000f48:	45a1      	cmp	r9, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90a      	bls.n	8000f66 <__udivmoddi4+0x1a6>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f56:	f080 8084 	bcs.w	8001062 <__udivmoddi4+0x2a2>
 8000f5a:	45a1      	cmp	r9, r4
 8000f5c:	f240 8081 	bls.w	8001062 <__udivmoddi4+0x2a2>
 8000f60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	eba4 0409 	sub.w	r4, r4, r9
 8000f6a:	fa1f f983 	uxth.w	r9, r3
 8000f6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f72:	fb00 4413 	mls	r4, r0, r3, r4
 8000f76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f7e:	45a4      	cmp	ip, r4
 8000f80:	d907      	bls.n	8000f92 <__udivmoddi4+0x1d2>
 8000f82:	193c      	adds	r4, r7, r4
 8000f84:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f88:	d267      	bcs.n	800105a <__udivmoddi4+0x29a>
 8000f8a:	45a4      	cmp	ip, r4
 8000f8c:	d965      	bls.n	800105a <__udivmoddi4+0x29a>
 8000f8e:	3b02      	subs	r3, #2
 8000f90:	443c      	add	r4, r7
 8000f92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f96:	fba0 9302 	umull	r9, r3, r0, r2
 8000f9a:	eba4 040c 	sub.w	r4, r4, ip
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	46ce      	mov	lr, r9
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	d351      	bcc.n	800104a <__udivmoddi4+0x28a>
 8000fa6:	d04e      	beq.n	8001046 <__udivmoddi4+0x286>
 8000fa8:	b155      	cbz	r5, 8000fc0 <__udivmoddi4+0x200>
 8000faa:	ebb8 030e 	subs.w	r3, r8, lr
 8000fae:	eb64 040c 	sbc.w	r4, r4, ip
 8000fb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fb6:	40cb      	lsrs	r3, r1
 8000fb8:	431e      	orrs	r6, r3
 8000fba:	40cc      	lsrs	r4, r1
 8000fbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	e750      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000fc4:	f1c2 0320 	rsb	r3, r2, #32
 8000fc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000fd4:	4094      	lsls	r4, r2
 8000fd6:	430c      	orrs	r4, r1
 8000fd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fdc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe0:	fa1f f78c 	uxth.w	r7, ip
 8000fe4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fe8:	fb08 3110 	mls	r1, r8, r0, r3
 8000fec:	0c23      	lsrs	r3, r4, #16
 8000fee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff2:	fb00 f107 	mul.w	r1, r0, r7
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d908      	bls.n	800100c <__udivmoddi4+0x24c>
 8000ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001002:	d22c      	bcs.n	800105e <__udivmoddi4+0x29e>
 8001004:	4299      	cmp	r1, r3
 8001006:	d92a      	bls.n	800105e <__udivmoddi4+0x29e>
 8001008:	3802      	subs	r0, #2
 800100a:	4463      	add	r3, ip
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	b2a4      	uxth	r4, r4
 8001010:	fbb3 f1f8 	udiv	r1, r3, r8
 8001014:	fb08 3311 	mls	r3, r8, r1, r3
 8001018:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800101c:	fb01 f307 	mul.w	r3, r1, r7
 8001020:	42a3      	cmp	r3, r4
 8001022:	d908      	bls.n	8001036 <__udivmoddi4+0x276>
 8001024:	eb1c 0404 	adds.w	r4, ip, r4
 8001028:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800102c:	d213      	bcs.n	8001056 <__udivmoddi4+0x296>
 800102e:	42a3      	cmp	r3, r4
 8001030:	d911      	bls.n	8001056 <__udivmoddi4+0x296>
 8001032:	3902      	subs	r1, #2
 8001034:	4464      	add	r4, ip
 8001036:	1ae4      	subs	r4, r4, r3
 8001038:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800103c:	e739      	b.n	8000eb2 <__udivmoddi4+0xf2>
 800103e:	4604      	mov	r4, r0
 8001040:	e6f0      	b.n	8000e24 <__udivmoddi4+0x64>
 8001042:	4608      	mov	r0, r1
 8001044:	e706      	b.n	8000e54 <__udivmoddi4+0x94>
 8001046:	45c8      	cmp	r8, r9
 8001048:	d2ae      	bcs.n	8000fa8 <__udivmoddi4+0x1e8>
 800104a:	ebb9 0e02 	subs.w	lr, r9, r2
 800104e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001052:	3801      	subs	r0, #1
 8001054:	e7a8      	b.n	8000fa8 <__udivmoddi4+0x1e8>
 8001056:	4631      	mov	r1, r6
 8001058:	e7ed      	b.n	8001036 <__udivmoddi4+0x276>
 800105a:	4603      	mov	r3, r0
 800105c:	e799      	b.n	8000f92 <__udivmoddi4+0x1d2>
 800105e:	4630      	mov	r0, r6
 8001060:	e7d4      	b.n	800100c <__udivmoddi4+0x24c>
 8001062:	46d6      	mov	lr, sl
 8001064:	e77f      	b.n	8000f66 <__udivmoddi4+0x1a6>
 8001066:	4463      	add	r3, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e74d      	b.n	8000f08 <__udivmoddi4+0x148>
 800106c:	4606      	mov	r6, r0
 800106e:	4623      	mov	r3, r4
 8001070:	4608      	mov	r0, r1
 8001072:	e70f      	b.n	8000e94 <__udivmoddi4+0xd4>
 8001074:	3e02      	subs	r6, #2
 8001076:	4463      	add	r3, ip
 8001078:	e730      	b.n	8000edc <__udivmoddi4+0x11c>
 800107a:	bf00      	nop

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800108c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800108e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a4:	68fb      	ldr	r3, [r7, #12]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010c6:	4013      	ands	r3, r2
 80010c8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC_Init+0x94>)
 80010da:	4a24      	ldr	r2, [pc, #144]	@ (800116c <MX_ADC_Init+0x98>)
 80010dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_ADC_Init+0x94>)
 80010e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010e4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_ADC_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_ADC_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_ADC_Init+0x94>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_ADC_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_ADC_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_ADC_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_ADC_Init+0x94>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_ADC_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_ADC_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_ADC_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_ADC_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_ADC_Init+0x94>)
 8001134:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_ADC_Init+0x94>)
 800113c:	2207      	movs	r2, #7
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_ADC_Init+0x94>)
 8001142:	2207      	movs	r2, #7
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_ADC_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_ADC_Init+0x94>)
 8001156:	f002 f977 	bl	8003448 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 fcf8 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001d0 	.word	0x200001d0
 800116c:	40012400 	.word	0x40012400

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <HAL_ADC_MspInit+0x24>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d103      	bne.n	800118a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001182:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001186:	f7ff ff7b 	bl	8001080 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012400 	.word	0x40012400

08001198 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <HAL_ADC_MspDeInit+0x24>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d103      	bne.n	80011b2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f7ff ff7f 	bl	80010b0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40012400 	.word	0x40012400

080011c0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <SYS_InitMeasurement+0x14>)
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <SYS_InitMeasurement+0x18>)
 80011c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200001d0 	.word	0x200001d0
 80011d8:	40012400 	.word	0x40012400

080011dc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int32_t SYS_GetTemperatureLevel(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */
	int32_t ADC_ref_3v3 = *VREFINT_CAL_ADDR;  //1517
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <SYS_GetTemperatureLevel+0x70>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24

		int32_t ADC_ref_raw  = ADC_ReadChannels(ADC_CHANNEL_VREFINT);  //1528, as expected close to ADC_ref_3v3 as we run on 3.3V
 80011e8:	4819      	ldr	r0, [pc, #100]	@ (8001250 <SYS_GetTemperatureLevel+0x74>)
 80011ea:	f000 f86d 	bl	80012c8 <ADC_ReadChannels>
 80011ee:	4603      	mov	r3, r0
 80011f0:	623b      	str	r3, [r7, #32]

		// 314 is way off, should be close to the 30C calibration point at 962
		// 944 is read with the 3 seconds delay, which is a sane value corresponding to 22C
		int32_t ADC_T_raw    = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR); //314 without delay, 944 with delay
 80011f2:	4818      	ldr	r0, [pc, #96]	@ (8001254 <SYS_GetTemperatureLevel+0x78>)
 80011f4:	f000 f868 	bl	80012c8 <ADC_ReadChannels>
 80011f8:	4603      	mov	r3, r0
 80011fa:	61fb      	str	r3, [r7, #28]

		// The temperature reading as if it had been taken at 3v3, which is the unit needed by the temp-sensor calibration.
		int32_t ADC_T = ADC_T_raw * ADC_ref_3v3 / ADC_ref_raw;  //311
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001200:	fb03 f202 	mul.w	r2, r3, r2
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	fb92 f3f3 	sdiv	r3, r2, r3
 800120a:	61bb      	str	r3, [r7, #24]

		//Adc values @ 3v3 vref
		int32_t ADC_T0 = *TEMPSENSOR_CAL1_ADDR;   // 962
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <SYS_GetTemperatureLevel+0x7c>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	617b      	str	r3, [r7, #20]
		int32_t ADC_T1 = *TEMPSENSOR_CAL2_ADDR;   // 1271
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <SYS_GetTemperatureLevel+0x80>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]

		int32_t T0 = TEMPSENSOR_CAL1_TEMP;  // 30
 8001218:	231e      	movs	r3, #30
 800121a:	60fb      	str	r3, [r7, #12]
		int32_t T1 = TEMPSENSOR_CAL2_TEMP;  // 130
 800121c:	2382      	movs	r3, #130	@ 0x82
 800121e:	60bb      	str	r3, [r7, #8]

		// T-t0 = K * (ADC_T - ADC_T0)
		// 1000 * 100 * 4000  (28 bitar som värst, dvs inget overflow möjligt)
		int32_t T = (T1 - T0) * (ADC_T - ADC_T0) / (ADC_T1 - ADC_T0)  + T0;    // -180 without delay, 22 with delay
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	1a8a      	subs	r2, r1, r2
 800122c:	fb03 f202 	mul.w	r2, r3, r2
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	1acb      	subs	r3, r1, r3
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	607b      	str	r3, [r7, #4]

		return T;
 8001240:	687b      	ldr	r3, [r7, #4]
//
//  return (int16_t) temperatureDegreeC;
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001242:	4618      	mov	r0, r3
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	1fff75aa 	.word	0x1fff75aa
 8001250:	b4002000 	.word	0xb4002000
 8001254:	b0001000 	.word	0xb0001000
 8001258:	1fff75a8 	.word	0x1fff75a8
 800125c:	1fff75c8 	.word	0x1fff75c8

08001260 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <SYS_GetBatteryLevel+0x5c>)
 8001270:	f000 f82a 	bl	80012c8 <ADC_ReadChannels>
 8001274:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	80fb      	strh	r3, [r7, #6]
 8001280:	e016      	b.n	80012b0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <SYS_GetBatteryLevel+0x60>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128a:	4293      	cmp	r3, r2
 800128c:	d00b      	beq.n	80012a6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <SYS_GetBatteryLevel+0x60>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001298:	fb03 f202 	mul.w	r2, r3, r2
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	e004      	b.n	80012b0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <SYS_GetBatteryLevel+0x64>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80012b0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	b4002000 	.word	0xb4002000
 80012c0:	1fff75aa 	.word	0x1fff75aa
 80012c4:	004c08d8 	.word	0x004c08d8

080012c8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012e0:	f7ff fef8 	bl	80010d4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012e4:	481a      	ldr	r0, [pc, #104]	@ (8001350 <ADC_ReadChannels+0x88>)
 80012e6:	f002 fece 	bl	8004086 <HAL_ADCEx_Calibration_Start>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012f0:	f000 fc30 	bl	8001b54 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4619      	mov	r1, r3
 8001306:	4812      	ldr	r0, [pc, #72]	@ (8001350 <ADC_ReadChannels+0x88>)
 8001308:	f002 fbda 	bl	8003ac0 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001312:	f000 fc1f 	bl	8001b54 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <ADC_ReadChannels+0x88>)
 8001318:	f002 fab6 	bl	8003888 <HAL_ADC_Start>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001322:	f000 fc17 	bl	8001b54 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001326:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <ADC_ReadChannels+0x88>)
 800132c:	f002 fb24 	bl	8003978 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <ADC_ReadChannels+0x88>)
 8001332:	f002 faef 	bl	8003914 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <ADC_ReadChannels+0x88>)
 8001338:	f002 fbb5 	bl	8003aa6 <HAL_ADC_GetValue>
 800133c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <ADC_ReadChannels+0x88>)
 8001340:	f002 fa16 	bl	8003770 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001344:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001d0 	.word	0x200001d0

08001354 <LL_AHB1_GRP1_EnableClock>:
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001388:	2004      	movs	r0, #4
 800138a:	f7ff ffe3 	bl	8001354 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff ffe0 	bl	8001354 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2102      	movs	r1, #2
 8001398:	200f      	movs	r0, #15
 800139a:	f003 f81a 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800139e:	200f      	movs	r0, #15
 80013a0:	f003 f831 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013b4:	23ff      	movs	r3, #255	@ 0xff
 80013b6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80013be:	d311      	bcc.n	80013e4 <FLASH_IF_Write+0x3c>
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <FLASH_IF_Write+0x48>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	029a      	lsls	r2, r3, #10
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <FLASH_IF_Write+0x4c>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80013ce:	3b01      	subs	r3, #1
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d306      	bcc.n	80013e4 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f85a 	bl	8001494 <FLASH_IF_INT_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80013e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	1fff75e0 	.word	0x1fff75e0
 80013f4:	03fffc00 	.word	0x03fffc00

080013f8 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001404:	23ff      	movs	r3, #255	@ 0xff
 8001406:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800140e:	d311      	bcc.n	8001434 <FLASH_IF_Read+0x3c>
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <FLASH_IF_Read+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	029a      	lsls	r2, r3, #10
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <FLASH_IF_Read+0x4c>)
 8001418:	4013      	ands	r3, r2
 800141a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800141e:	3b01      	subs	r3, #1
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4293      	cmp	r3, r2
 8001424:	d306      	bcc.n	8001434 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f93a 	bl	80016a4 <FLASH_IF_INT_Read>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	1fff75e0 	.word	0x1fff75e0
 8001444:	03fffc00 	.word	0x03fffc00

08001448 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001452:	23ff      	movs	r3, #255	@ 0xff
 8001454:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800145c:	d310      	bcc.n	8001480 <FLASH_IF_Erase+0x38>
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <FLASH_IF_Erase+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	029a      	lsls	r2, r3, #10
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <FLASH_IF_Erase+0x48>)
 8001466:	4013      	ands	r3, r2
 8001468:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800146c:	3b01      	subs	r3, #1
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4293      	cmp	r3, r2
 8001472:	d305      	bcc.n	8001480 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f932 	bl	80016e0 <FLASH_IF_INT_Erase>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	1fff75e0 	.word	0x1fff75e0
 8001490:	03fffc00 	.word	0x03fffc00

08001494 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	@ 0x40
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00c      	beq.n	80014d2 <FLASH_IF_INT_Write+0x3e>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <FLASH_IF_INT_Write+0x3e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d104      	bne.n	80014d2 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80014d2:	f06f 0305 	mvn.w	r3, #5
 80014d6:	e0da      	b.n	800168e <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80014d8:	f000 f992 	bl	8001800 <FLASH_IF_INT_Clear_Error>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 80014e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 80cf 	bne.w	800168a <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80014ec:	f003 fbd6 	bl	8004c9c <HAL_FLASH_Unlock>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 80c6 	bne.w	8001684 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80014f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014fa:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80014fe:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <FLASH_IF_INT_Write+0x204>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0299      	lsls	r1, r3, #10
 8001504:	4b65      	ldr	r3, [pc, #404]	@ (800169c <FLASH_IF_INT_Write+0x208>)
 8001506:	400b      	ands	r3, r1
 8001508:	fbb2 f1f3 	udiv	r1, r2, r3
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001520:	3b01      	subs	r3, #1
 8001522:	4a5d      	ldr	r2, [pc, #372]	@ (8001698 <FLASH_IF_INT_Write+0x204>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	0291      	lsls	r1, r2, #10
 8001528:	4a5c      	ldr	r2, [pc, #368]	@ (800169c <FLASH_IF_INT_Write+0x208>)
 800152a:	400a      	ands	r2, r1
 800152c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001530:	fb01 f202 	mul.w	r2, r1, r2
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	0ada      	lsrs	r2, r3, #11
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d905      	bls.n	8001552 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001556:	e089      	b.n	800166c <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800155e:	02db      	lsls	r3, r3, #11
 8001560:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f925 	bl	80017b4 <FLASH_IF_INT_IsEmpty>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d031      	beq.n	80015d4 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001570:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <FLASH_IF_INT_Write+0x20c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001578:	23fa      	movs	r3, #250	@ 0xfa
 800157a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 800157e:	e07e      	b.n	800167e <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001580:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <FLASH_IF_INT_Write+0x20c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f88a 	bl	80016a4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001590:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <FLASH_IF_INT_Write+0x20c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159a:	4413      	add	r3, r2
 800159c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800159e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015a0:	b292      	uxth	r2, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f021 fb8e 	bl	8022cc4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f896 	bl	80016e0 <FLASH_IF_INT_Erase>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80015ba:	23fe      	movs	r3, #254	@ 0xfe
 80015bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80015c0:	e05d      	b.n	800167e <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80015c6:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <FLASH_IF_INT_Write+0x20c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80015cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e005      	b.n	80015e0 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80015d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 80015d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015da:	623b      	str	r3, [r7, #32]
          current_length = length;
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e4:	e026      	b.n	8001634 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80015e6:	6a3a      	ldr	r2, [r7, #32]
 80015e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ea:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015f2:	2001      	movs	r0, #1
 80015f4:	f003 fb0e 	bl	8004c14 <HAL_FLASH_Program>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d113      	bne.n	8001626 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	4413      	add	r3, r2
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	4299      	cmp	r1, r3
 8001610:	bf08      	it	eq
 8001612:	4290      	cmpeq	r0, r2
 8001614:	d003      	beq.n	800161e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001616:	23fc      	movs	r3, #252	@ 0xfc
 8001618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 800161c:	e00e      	b.n	800163c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	3308      	adds	r3, #8
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
 8001624:	e003      	b.n	800162e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001626:	23fc      	movs	r3, #252	@ 0xfc
 8001628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800162c:	e006      	b.n	800163c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800162e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001630:	3308      	adds	r3, #8
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3d4      	bcc.n	80015e6 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800163c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11b      	bne.n	800167c <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001648:	4413      	add	r3, r2
 800164a:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 800164c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001650:	4413      	add	r3, r2
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800165e:	bf28      	it	cs
 8001660:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	3301      	adds	r3, #1
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4413      	add	r3, r2
 8001672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001674:	429a      	cmp	r2, r3
 8001676:	f4ff af6f 	bcc.w	8001558 <FLASH_IF_INT_Write+0xc4>
 800167a:	e000      	b.n	800167e <FLASH_IF_INT_Write+0x1ea>
          break;
 800167c:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800167e:	f003 fb2f 	bl	8004ce0 <HAL_FLASH_Lock>
 8001682:	e002      	b.n	800168a <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001684:	23fb      	movs	r3, #251	@ 0xfb
 8001686:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800168a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800168e:	4618      	mov	r0, r3
 8001690:	3740      	adds	r7, #64	@ 0x40
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	1fff75e0 	.word	0x1fff75e0
 800169c:	03fffc00 	.word	0x03fffc00
 80016a0:	20000234 	.word	0x20000234

080016a4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <FLASH_IF_INT_Read+0x1c>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80016c0:	f06f 0305 	mvn.w	r3, #5
 80016c4:	e008      	b.n	80016d8 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f021 faf8 	bl	8022cc4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001700:	f06f 0305 	mvn.w	r3, #5
 8001704:	e04e      	b.n	80017a4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001706:	f000 f87b 	bl	8001800 <FLASH_IF_INT_Clear_Error>
 800170a:	4603      	mov	r3, r0
 800170c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800170e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d144      	bne.n	80017a0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001716:	f003 fac1 	bl	8004c9c <HAL_FLASH_Unlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d13d      	bne.n	800179c <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <FLASH_IF_INT_Erase+0xcc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0299      	lsls	r1, r3, #10
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <FLASH_IF_INT_Erase+0xd0>)
 8001732:	400b      	ands	r3, r1
 8001734:	fbb2 f1f3 	udiv	r1, r2, r3
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800174c:	3b01      	subs	r3, #1
 800174e:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <FLASH_IF_INT_Erase+0xcc>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	0291      	lsls	r1, r2, #10
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <FLASH_IF_INT_Erase+0xd0>)
 8001756:	400a      	ands	r2, r1
 8001758:	fbb3 f1f2 	udiv	r1, r3, r2
 800175c:	fb01 f202 	mul.w	r2, r1, r2
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	0ada      	lsrs	r2, r3, #11
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	3301      	adds	r3, #1
 800176a:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800176c:	f107 0214 	add.w	r2, r7, #20
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fb92 	bl	8004ea0 <HAL_FLASHEx_Erase>
 800177c:	4603      	mov	r3, r0
 800177e:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001780:	7fbb      	ldrb	r3, [r7, #30]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001786:	7fbb      	ldrb	r3, [r7, #30]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d101      	bne.n	8001790 <FLASH_IF_INT_Erase+0xb0>
 800178c:	2301      	movs	r3, #1
 800178e:	e001      	b.n	8001794 <FLASH_IF_INT_Erase+0xb4>
 8001790:	f06f 0301 	mvn.w	r3, #1
 8001794:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001796:	f003 faa3 	bl	8004ce0 <HAL_FLASH_Lock>
 800179a:	e001      	b.n	80017a0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800179c:	23fb      	movs	r3, #251	@ 0xfb
 800179e:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80017a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	1fff75e0 	.word	0x1fff75e0
 80017b0:	03fffc00 	.word	0x03fffc00

080017b4 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	e011      	b.n	80017ec <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d2:	bf08      	it	eq
 80017d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80017d8:	d002      	beq.n	80017e0 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
      break;
 80017de:	e009      	b.n	80017f4 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3308      	adds	r3, #8
 80017e4:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3308      	adds	r3, #8
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3e9      	bcc.n	80017c8 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80017f4:	68fb      	ldr	r3, [r7, #12]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001806:	23fb      	movs	r3, #251	@ 0xfb
 8001808:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800180a:	f003 fa47 	bl	8004c9c <HAL_FLASH_Unlock>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d110      	bne.n	8001836 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <FLASH_IF_INT_Clear_Error+0x44>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <FLASH_IF_INT_Clear_Error+0x44>)
 800181a:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <FLASH_IF_INT_Clear_Error+0x44>)
 8001822:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001826:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001828:	f003 fa5a 	bl	8004ce0 <HAL_FLASH_Lock>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	58004000 	.word	0x58004000

08001848 <LL_AHB2_GRP1_EnableClock>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001856:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff ffdb 	bl	8001848 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff ffd8 	bl	8001848 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED5_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f24c 2110 	movw	r1, #49680	@ 0xc210
 800189e:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <MX_GPIO_Init+0x70>)
 80018a0:	f003 fe00 	bl	80054a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ae:	f003 fdf9 	bl	80054a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED5_Pin|LED2_Pin;
 80018b2:	f24c 2310 	movw	r3, #49680	@ 0xc210
 80018b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <MX_GPIO_Init+0x70>)
 80018ca:	f003 fbbd 	bl	8005048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin =LED4_Pin;
 80018ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018dc:	f003 fbb4 	bl	8005048 <HAL_GPIO_Init>

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	48000400 	.word	0x48000400

080018ec <LL_AHB2_GRP1_EnableClock>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001910:	68fb      	ldr	r3, [r7, #12]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_APB1_GRP1_EnableClock>:
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001928:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001938:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001952:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <MX_I2C3_Init+0x78>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0090194B;
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001958:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <MX_I2C3_Init+0x7c>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800195c:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <MX_I2C3_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001962:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001964:	2201      	movs	r2, #1
 8001966:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <MX_I2C3_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_I2C3_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001986:	480e      	ldr	r0, [pc, #56]	@ (80019c0 <MX_I2C3_Init+0x74>)
 8001988:	f003 fdbc 	bl	8005504 <HAL_I2C_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001992:	f000 f8df 	bl	8001b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4809      	ldr	r0, [pc, #36]	@ (80019c0 <MX_I2C3_Init+0x74>)
 800199a:	f004 fd07 	bl	80063ac <HAL_I2CEx_ConfigAnalogFilter>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80019a4:	f000 f8d6 	bl	8001b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_I2C3_Init+0x74>)
 80019ac:	f004 fd48 	bl	8006440 <HAL_I2CEx_ConfigDigitalFilter>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80019b6:	f000 f8cd 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000238 	.word	0x20000238
 80019c4:	40005c00 	.word	0x40005c00
 80019c8:	0090194b 	.word	0x0090194b

080019cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b096      	sub	sp, #88	@ 0x58
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2238      	movs	r2, #56	@ 0x38
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f023 fc36 	bl	802525e <memset>
  if(i2cHandle->Instance==I2C3)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d126      	bne.n	8001a4a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a00:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a02:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 ffd3 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a18:	f000 f89c 	bl	8001b54 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f7ff ff65 	bl	80018ec <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001a22:	2303      	movs	r3, #3
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a32:	2304      	movs	r3, #4
 8001a34:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <HAL_I2C_MspInit+0x8c>)
 8001a3e:	f003 fb03 	bl	8005048 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a42:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a46:	f7ff ff69 	bl	800191c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3758      	adds	r7, #88	@ 0x58
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	48000800 	.word	0x48000800

08001a5c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6c:	f023 0218 	bic.w	r2, r3, #24
 8001a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f001 faef 	bl	800306c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8e:	f000 f807 	bl	8001aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a92:	f7ff fef1 	bl	8001878 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001a96:	f009 fbfb 	bl	800b290 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a9a:	f009 fc01 	bl	800b2a0 <MX_LoRaWAN_Process>
 8001a9e:	e7fc      	b.n	8001a9a <main+0x14>

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09a      	sub	sp, #104	@ 0x68
 8001aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2248      	movs	r2, #72	@ 0x48
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f023 fbd5 	bl	802525e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ac6:	f004 fd07 	bl	80064d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff ffc6 	bl	8001a5c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <SystemClock_Config+0xb0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <SystemClock_Config+0xb0>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <SystemClock_Config+0xb0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aec:	2324      	movs	r3, #36	@ 0x24
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001af0:	2381      	movs	r3, #129	@ 0x81
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001afc:	23b0      	movs	r3, #176	@ 0xb0
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 f831 	bl	8006b70 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b14:	f000 f81e 	bl	8001b54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b18:	234f      	movs	r3, #79	@ 0x4f
 8001b1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fb9c 	bl	8007274 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b42:	f000 f807 	bl	8001b54 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3768      	adds	r7, #104	@ 0x68
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58000400 	.word	0x58000400

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <Error_Handler+0x8>

08001b60 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <LL_APB1_GRP1_EnableClock>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	@ 0x30
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	222c      	movs	r2, #44	@ 0x2c
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f023 fb4e 	bl	802525e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <MX_RTC_Init+0xa0>)
 8001bc6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bc8:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bca:	221f      	movs	r2, #31
 8001bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001be2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bf6:	4815      	ldr	r0, [pc, #84]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001bf8:	f005 fff8 	bl	8007bec <HAL_RTC_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c02:	f7ff ffa7 	bl	8001b54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c06:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001c08:	f006 faee 	bl	80081e8 <HAL_RTCEx_SetSSRU_IT>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c12:	f7ff ff9f 	bl	8001b54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c26:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_RTC_Init+0x9c>)
 8001c36:	f006 f85b 	bl	8007cf0 <HAL_RTC_SetAlarm_IT>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c40:	f7ff ff88 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	@ 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000028c 	.word	0x2000028c
 8001c50:	40002800 	.word	0x40002800

08001c54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b090      	sub	sp, #64	@ 0x40
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	2238      	movs	r2, #56	@ 0x38
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f023 fafa 	bl	802525e <memset>
  if(rtcHandle->Instance==RTC)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	@ (8001cc8 <HAL_RTC_MspInit+0x74>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d125      	bne.n	8001cc0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c78:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fe97 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c90:	f7ff ff60 	bl	8001b54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c94:	f7ff ff64 	bl	8001b60 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c9c:	f7ff ff70 	bl	8001b80 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f002 fb94 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001caa:	2002      	movs	r0, #2
 8001cac:	f002 fbab 	bl	8004406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	202a      	movs	r0, #42	@ 0x2a
 8001cb6:	f002 fb8c 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cba:	202a      	movs	r0, #42	@ 0x2a
 8001cbc:	f002 fba3 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3740      	adds	r7, #64	@ 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40002800 	.word	0x40002800

08001ccc <LL_AHB2_GRP1_EnableClock>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <LL_APB2_GRP1_EnableClock>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d32:	4a1a      	ldr	r2, [pc, #104]	@ (8001d9c <MX_SPI1_Init+0x70>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d44:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_SPI1_Init+0x6c>)
 8001d84:	f006 fabe 	bl	8008304 <HAL_SPI_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8001d8e:	f7ff fee1 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002c4 	.word	0x200002c4
 8001d9c:	40013000 	.word	0x40013000

08001da0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <HAL_SPI_MspInit+0x5c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d117      	bne.n	8001df2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001dc6:	f7ff ff99 	bl	8001cfc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff ff7e 	bl	8001ccc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 8001dd0:	23e0      	movs	r3, #224	@ 0xe0
 8001dd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de0:	2305      	movs	r3, #5
 8001de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dee:	f003 f92b 	bl	8005048 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40013000 	.word	0x40013000

08001e00 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	58000400 	.word	0x58000400

08001e18 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001e34:	f001 f93a 	bl	80030ac <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001e38:	f7ff ffe2 	bl	8001e00 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f004 fbdd 	bl	80065fc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001e4a:	f001 f93d 	bl	80030c8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001e4e:	f000 ff99 	bl	8002d84 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001e5a:	f001 f927 	bl	80030ac <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	2000      	movs	r0, #0
 8001e62:	f004 fb47 	bl	80064f4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001e6e:	f001 f92b 	bl	80030c8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <NMI_Handler+0x4>

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <HardFault_Handler+0x4>

08001e92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e96:	bf00      	nop
 8001e98:	e7fd      	b.n	8001e96 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001ee2:	f006 f9bd 	bl	8008260 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000028c 	.word	0x2000028c

08001ef0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA1_Channel5_IRQHandler+0x10>)
 8001ef6:	f002 fd1d 	bl	8004934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200003d8 	.word	0x200003d8

08001f04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <LPUART1_IRQHandler+0x10>)
 8001f0a:	f007 f8c7 	bl	800909c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000344 	.word	0x20000344

08001f18 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <RTC_Alarm_IRQHandler+0x10>)
 8001f1e:	f006 f84f 	bl	8007fc0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000028c 	.word	0x2000028c

08001f2c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001f32:	f006 fdd7 	bl	8008ae4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000328 	.word	0x20000328

08001f40 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_SUBGHZ_Init+0x20>)
 8001f76:	2208      	movs	r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_SUBGHZ_Init+0x20>)
 8001f7c:	f006 fb30 	bl	80085e0 <HAL_SUBGHZ_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001f86:	f7ff fde5 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000328 	.word	0x20000328

08001f94 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff ffcf 	bl	8001f40 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2032      	movs	r0, #50	@ 0x32
 8001fa8:	f002 fa13 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001fac:	2032      	movs	r0, #50	@ 0x32
 8001fae:	f002 fa2a 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <LL_FLASH_GetUDN+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	1fff7580 	.word	0x1fff7580

08001ff4 <LL_FLASH_GetDEUI>:

__STATIC_INLINE uint32_t LL_FLASH_GetDEUI(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)DEUI_BASE)));
 8001ff8:	4b02      	ldr	r3, [pc, #8]	@ (8002004 <LL_FLASH_GetDEUI+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	0803ffe0 	.word	0x0803ffe0

08002008 <LL_FLASH_GetDEUID>:
/*qqy get deveui*/
__STATIC_INLINE uint32_t LL_FLASH_GetDEUID(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)DEUI_BASE + 1U))) & 0xFFFFFFFFU);
 800200c:	4b02      	ldr	r3, [pc, #8]	@ (8002018 <LL_FLASH_GetDEUID+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	0803ffe4 	.word	0x0803ffe4

0800201c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff ffca 	bl	8001fba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002026:	f022 f9ed 	bl	8024404 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <SystemApp_Init+0x44>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002030:	f000 f982 	bl	8002338 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002034:	f022 fc76 	bl	8024924 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002038:	480a      	ldr	r0, [pc, #40]	@ (8002064 <SystemApp_Init+0x48>)
 800203a:	f022 fd31 	bl	8024aa0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <SystemApp_Init+0x4c>)
 8002040:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002044:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002046:	2002      	movs	r0, #2
 8002048:	f022 fd38 	bl	8024abc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800204c:	f7ff f8b8 	bl	80011c0 <SYS_InitMeasurement>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002050:	f020 fd92 	bl	8022b78 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002054:	2101      	movs	r1, #1
 8002056:	2001      	movs	r0, #1
 8002058:	f020 fdce 	bl	8022bf8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000334 	.word	0x20000334
 8002064:	08002229 	.word	0x08002229
 8002068:	58004000 	.word	0x58004000

0800206c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002070:	f020 fdf2 	bl	8022c58 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002082:	f7ff f8ed 	bl	8001260 <SYS_GetBatteryLevel>
 8002086:	4603      	mov	r3, r0
 8002088:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002090:	4293      	cmp	r3, r2
 8002092:	d902      	bls.n	800209a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002094:	23fe      	movs	r3, #254	@ 0xfe
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	e014      	b.n	80020c4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80020a0:	d202      	bcs.n	80020a8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e00d      	b.n	80020c4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80020ae:	461a      	mov	r2, r3
 80020b0:	4613      	mov	r3, r2
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <GetBatteryLevel+0x58>)
 80020bc:	fba3 2302 	umull	r2, r3, r3, r2
 80020c0:	09db      	lsrs	r3, r3, #7
 80020c2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80020c4:	79fb      	ldrb	r3, [r7, #7]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	1b4e81b5 	.word	0x1b4e81b5

080020d4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (int16_t)(SYS_GetTemperatureLevel() >> 8);
 80020de:	f7ff f87d 	bl	80011dc <SYS_GetTemperatureLevel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	121b      	asrs	r3, r3, #8
 80020e6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80020e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
/*qqy deveui*/
  //val = LL_FLASH_GetUDN();
  val = LL_FLASH_GetDEUI();
 8002100:	f7ff ff78 	bl	8001ff4 <LL_FLASH_GetDEUI>
 8002104:	6178      	str	r0, [r7, #20]

  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800210c:	d138      	bne.n	8002180 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800210e:	f000 ffe9 	bl	80030e4 <HAL_GetUIDw0>
 8002112:	4604      	mov	r4, r0
 8002114:	f000 fffa 	bl	800310c <HAL_GetUIDw2>
 8002118:	4603      	mov	r3, r0
 800211a:	4423      	add	r3, r4
 800211c:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800211e:	f000 ffeb 	bl	80030f8 <HAL_GetUIDw1>
 8002122:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	0e1a      	lsrs	r2, r3, #24
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3307      	adds	r3, #7
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	0c1a      	lsrs	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3306      	adds	r3, #6
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	0a1a      	lsrs	r2, r3, #8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3305      	adds	r3, #5
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0e1a      	lsrs	r2, r3, #24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3303      	adds	r3, #3
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0c1a      	lsrs	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3302      	adds	r3, #2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0a1a      	lsrs	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 16) & 0xFF;
    id[7] = (val >> 24) & 0xFF;
  }

  /* USER CODE END GetUniqueId_2 */
}
 800217e:	e02f      	b.n	80021e0 <GetUniqueId+0xec>
    id[0] = val & 0xFF;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	0a1a      	lsrs	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
    id[2] = (val >> 16) & 0xFF;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	0c1a      	lsrs	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3302      	adds	r3, #2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
    id[3] = (val >> 24) & 0xFF;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	0e1a      	lsrs	r2, r3, #24
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3303      	adds	r3, #3
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDEUID();
 80021ac:	f7ff ff2c 	bl	8002008 <LL_FLASH_GetDEUID>
 80021b0:	6178      	str	r0, [r7, #20]
    id[4] = val & 0xFF;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 8) & 0xFF;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	0a1a      	lsrs	r2, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3305      	adds	r3, #5
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 16) & 0xFF;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	0c1a      	lsrs	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3306      	adds	r3, #6
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
    id[7] = (val >> 24) & 0xFF;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	0e1a      	lsrs	r2, r3, #24
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3307      	adds	r3, #7
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}

080021e8 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80021f0:	f7ff fef6 	bl	8001fe0 <LL_FLASH_GetUDN>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002202:	d10d      	bne.n	8002220 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002204:	f000 ff6e 	bl	80030e4 <HAL_GetUIDw0>
 8002208:	4604      	mov	r4, r0
 800220a:	f000 ff75 	bl	80030f8 <HAL_GetUIDw1>
 800220e:	4603      	mov	r3, r0
 8002210:	405c      	eors	r4, r3
 8002212:	f000 ff7b 	bl	800310c <HAL_GetUIDw2>
 8002216:	4603      	mov	r3, r0
 8002218:	ea84 0203 	eor.w	r2, r4, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}

08002228 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	4618      	mov	r0, r3
 8002238:	f020 fe1e 	bl	8022e78 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002242:	9200      	str	r2, [sp, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <TimestampNow+0x3c>)
 8002246:	2110      	movs	r1, #16
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f81d 	bl	8002288 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fd ff96 	bl	8000180 <strlen>
 8002254:	4603      	mov	r3, r0
 8002256:	b29a      	uxth	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	08026510 	.word	0x08026510

08002268 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f020 fc92 	bl	8022b98 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800227c:	2100      	movs	r1, #0
 800227e:	2002      	movs	r0, #2
 8002280:	f020 fc8a 	bl	8022b98 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002288:	b40c      	push	{r2, r3}
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f021 fd59 	bl	8023d58 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b0:	b002      	add	sp, #8
 80022b2:	4770      	bx	lr

080022b4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_GetTick+0x24>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80022da:	f000 f9ef 	bl	80026bc <TIMER_IF_GetTimerValue>
 80022de:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000334 	.word	0x20000334

080022f0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa65 	bl	80027ca <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <LL_AHB2_GRP1_EnableClock>:
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800233e:	f000 feef 	bl	8003120 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002342:	f000 fef3 	bl	800312c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002346:	f000 fef7 	bl	8003138 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff ffcf 	bl	8002308 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800236a:	2002      	movs	r0, #2
 800236c:	f7ff ffcc 	bl	8002308 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002374:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4619      	mov	r1, r3
 800237a:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <DBG_Init+0x78>)
 800237c:	f002 fe64 	bl	8005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002384:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4809      	ldr	r0, [pc, #36]	@ (80023b0 <DBG_Init+0x78>)
 800238c:	f002 fe5c 	bl	8005048 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002396:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <DBG_Init+0x78>)
 8002398:	f003 f884 	bl	80054a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800239c:	2200      	movs	r2, #0
 800239e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a2:	4803      	ldr	r0, [pc, #12]	@ (80023b0 <DBG_Init+0x78>)
 80023a4:	f003 f87e 	bl	80054a4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	48000400 	.word	0x48000400

080023b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <_kill>:

int _kill(int pid, int sig)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023cc:	f023 f816 	bl	80253fc <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2216      	movs	r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
  return -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_exit>:

void _exit (int status)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffe7 	bl	80023c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <_exit+0x12>

080023f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e00a      	b.n	8002420 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240a:	f3af 8000 	nop.w
 800240e:	4601      	mov	r1, r0
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	60ba      	str	r2, [r7, #8]
 8002416:	b2ca      	uxtb	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	dbf0      	blt.n	800240a <_read+0x12>
  }

  return len;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e009      	b.n	8002458 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60ba      	str	r2, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dbf1      	blt.n	8002444 <_write+0x12>
  }
  return len;
 8002460:	687b      	ldr	r3, [r7, #4]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_close>:

int _close(int file)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002490:	605a      	str	r2, [r3, #4]
  return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <_isatty>:

int _isatty(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f022 ff7e 	bl	80253fc <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	@ (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20010000 	.word	0x20010000
 800252c:	00000800 	.word	0x00000800
 8002530:	20000338 	.word	0x20000338
 8002534:	20002f60 	.word	0x20002f60

08002538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002566:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <TIMER_IF_Init+0x5c>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <TIMER_IF_Init+0x60>)
 8002576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800257c:	f7ff fb18 	bl	8001bb0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002580:	f000 f856 	bl	8002630 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002588:	480c      	ldr	r0, [pc, #48]	@ (80025bc <TIMER_IF_Init+0x60>)
 800258a:	f005 fcbd 	bl	8007f08 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <TIMER_IF_Init+0x60>)
 8002590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002596:	4809      	ldr	r0, [pc, #36]	@ (80025bc <TIMER_IF_Init+0x60>)
 8002598:	f005 fdf4 	bl	8008184 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800259c:	2000      	movs	r0, #0
 800259e:	f000 f9d3 	bl	8002948 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80025a2:	f000 f85f 	bl	8002664 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <TIMER_IF_Init+0x5c>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80025ac:	79fb      	ldrb	r3, [r7, #7]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000033c 	.word	0x2000033c
 80025bc:	2000028c 	.word	0x2000028c

080025c0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	@ 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	222c      	movs	r2, #44	@ 0x2c
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f022 fe41 	bl	802525e <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80025dc:	f000 f828 	bl	8002630 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <TIMER_IF_StartTimer+0x68>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80025f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025fc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80025fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	2201      	movs	r2, #1
 800260a:	4619      	mov	r1, r3
 800260c:	4807      	ldr	r0, [pc, #28]	@ (800262c <TIMER_IF_StartTimer+0x6c>)
 800260e:	f005 fb6f 	bl	8007cf0 <HAL_RTC_SetAlarm_IT>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002618:	f7ff fa9c 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800261c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002620:	4618      	mov	r0, r3
 8002622:	3738      	adds	r7, #56	@ 0x38
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000340 	.word	0x20000340
 800262c:	2000028c 	.word	0x2000028c

08002630 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <TIMER_IF_StopTimer+0x2c>)
 800263c:	2201      	movs	r2, #1
 800263e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002640:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002644:	4806      	ldr	r0, [pc, #24]	@ (8002660 <TIMER_IF_StopTimer+0x30>)
 8002646:	f005 fc5f 	bl	8007f08 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <TIMER_IF_StopTimer+0x30>)
 800264c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002652:	79fb      	ldrb	r3, [r7, #7]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40002800 	.word	0x40002800
 8002660:	2000028c 	.word	0x2000028c

08002664 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002668:	f000 f98e 	bl	8002988 <GetTimerTicks>
 800266c:	4603      	mov	r3, r0
 800266e:	4a03      	ldr	r2, [pc, #12]	@ (800267c <TIMER_IF_SetTimerContext+0x18>)
 8002670:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002672:	4b02      	ldr	r3, [pc, #8]	@ (800267c <TIMER_IF_SetTimerContext+0x18>)
 8002674:	681b      	ldr	r3, [r3, #0]
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000340 	.word	0x20000340

08002680 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002684:	4b02      	ldr	r3, [pc, #8]	@ (8002690 <TIMER_IF_GetTimerContext+0x10>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000340 	.word	0x20000340

08002694 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800269e:	f000 f973 	bl	8002988 <GetTimerTicks>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000340 	.word	0x20000340

080026bc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <TIMER_IF_GetTimerValue+0x24>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80026ce:	f000 f95b 	bl	8002988 <GetTimerTicks>
 80026d2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000033c 	.word	0x2000033c

080026e4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80026ee:	2303      	movs	r3, #3
 80026f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80026fe:	b5b0      	push	{r4, r5, r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002706:	2100      	movs	r1, #0
 8002708:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	2000      	movs	r0, #0
 800270e:	460a      	mov	r2, r1
 8002710:	4603      	mov	r3, r0
 8002712:	0d95      	lsrs	r5, r2, #22
 8002714:	0294      	lsls	r4, r2, #10
 8002716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	4620      	mov	r0, r4
 8002720:	4629      	mov	r1, r5
 8002722:	f7fe fb35 	bl	8000d90 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4613      	mov	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bdb0      	pop	{r4, r5, r7, pc}

08002738 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002738:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002742:	2100      	movs	r1, #0
 8002744:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	2000      	movs	r0, #0
 800274a:	460c      	mov	r4, r1
 800274c:	4605      	mov	r5, r0
 800274e:	4620      	mov	r0, r4
 8002750:	4629      	mov	r1, r5
 8002752:	f04f 0a00 	mov.w	sl, #0
 8002756:	f04f 0b00 	mov.w	fp, #0
 800275a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800275e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002762:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002766:	4650      	mov	r0, sl
 8002768:	4659      	mov	r1, fp
 800276a:	1b02      	subs	r2, r0, r4
 800276c:	eb61 0305 	sbc.w	r3, r1, r5
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0099      	lsls	r1, r3, #2
 800277a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800277e:	0090      	lsls	r0, r2, #2
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	eb12 0804 	adds.w	r8, r2, r4
 8002788:	eb43 0905 	adc.w	r9, r3, r5
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002798:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a0:	4690      	mov	r8, r2
 80027a2:	4699      	mov	r9, r3
 80027a4:	4640      	mov	r0, r8
 80027a6:	4649      	mov	r1, r9
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	0a82      	lsrs	r2, r0, #10
 80027b2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80027b6:	0a8b      	lsrs	r3, r1, #10
 80027b8:	4613      	mov	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027c8:	4770      	bx	lr

080027ca <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ff93 	bl	80026fe <TIMER_IF_Convert_ms2Tick>
 80027d8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80027da:	f000 f8d5 	bl	8002988 <GetTimerTicks>
 80027de:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80027e0:	e000      	b.n	80027e4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80027e2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80027e4:	f000 f8d0 	bl	8002988 <GetTimerTicks>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f6      	bhi.n	80027e2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002806:	f021 ff4b 	bl	80246a0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800281a:	f000 f8a5 	bl	8002968 <TIMER_IF_BkUp_Read_MSBticks>
 800281e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3301      	adds	r3, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f000 f88f 	bl	8002948 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002832:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002836:	b08c      	sub	sp, #48	@ 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002840:	f000 f8a2 	bl	8002988 <GetTimerTicks>
 8002844:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002846:	f000 f88f 	bl	8002968 <TIMER_IF_BkUp_Read_MSBticks>
 800284a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	2200      	movs	r2, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	60fa      	str	r2, [r7, #12]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	000b      	movs	r3, r1
 8002860:	2200      	movs	r2, #0
 8002862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002864:	2000      	movs	r0, #0
 8002866:	460c      	mov	r4, r1
 8002868:	4605      	mov	r5, r0
 800286a:	eb12 0804 	adds.w	r8, r2, r4
 800286e:	eb43 0905 	adc.w	r9, r3, r5
 8002872:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002876:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	0a82      	lsrs	r2, r0, #10
 8002884:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002888:	0a8b      	lsrs	r3, r1, #10
 800288a:	4613      	mov	r3, r2
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2200      	movs	r2, #0
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800289c:	f04f 0b00 	mov.w	fp, #0
 80028a0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff46 	bl	8002738 <TIMER_IF_Convert_Tick2ms>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3730      	adds	r7, #48	@ 0x30
 80028ba:	46bd      	mov	sp, r7
 80028bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028c0 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4803      	ldr	r0, [pc, #12]	@ (80028dc <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80028ce:	f005 fceb 	bl	80082a8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000028c 	.word	0x2000028c

080028e0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	2101      	movs	r1, #1
 80028ec:	4803      	ldr	r0, [pc, #12]	@ (80028fc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80028ee:	f005 fcdb 	bl	80082a8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000028c 	.word	0x2000028c

08002900 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800290a:	2100      	movs	r1, #0
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800290e:	f005 fce3 	bl	80082d8 <HAL_RTCEx_BKUPRead>
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000028c 	.word	0x2000028c

08002924 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800292e:	2101      	movs	r1, #1
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002932:	f005 fcd1 	bl	80082d8 <HAL_RTCEx_BKUPRead>
 8002936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000028c 	.word	0x2000028c

08002948 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	2102      	movs	r1, #2
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002956:	f005 fca7 	bl	80082a8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000028c 	.word	0x2000028c

08002968 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800296e:	2102      	movs	r1, #2
 8002970:	4804      	ldr	r0, [pc, #16]	@ (8002984 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002972:	f005 fcb1 	bl	80082d8 <HAL_RTCEx_BKUPRead>
 8002976:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002978:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000028c 	.word	0x2000028c

08002988 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800298e:	480b      	ldr	r0, [pc, #44]	@ (80029bc <GetTimerTicks+0x34>)
 8002990:	f7ff fdd8 	bl	8002544 <LL_RTC_TIME_GetSubSecond>
 8002994:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002996:	e003      	b.n	80029a0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002998:	4808      	ldr	r0, [pc, #32]	@ (80029bc <GetTimerTicks+0x34>)
 800299a:	f7ff fdd3 	bl	8002544 <LL_RTC_TIME_GetSubSecond>
 800299e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80029a0:	4806      	ldr	r0, [pc, #24]	@ (80029bc <GetTimerTicks+0x34>)
 80029a2:	f7ff fdcf 	bl	8002544 <LL_RTC_TIME_GetSubSecond>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d1f4      	bne.n	8002998 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40002800 	.word	0x40002800

080029c0 <LL_AHB2_GRP1_EnableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_APB1_GRP2_EnableClock>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a14:	68fb      	ldr	r3, [r7, #12]
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <LL_APB1_GRP2_DisableClock>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a36:	4013      	ands	r3, r2
 8002a38:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a4a:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <MX_LPUART1_UART_Init+0x98>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a54:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a8c:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a8e:	4812      	ldr	r0, [pc, #72]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002a90:	f006 f9e7 	bl	8008e62 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002a9a:	f7ff f85b 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002aa2:	f008 fb0a 	bl	800b0ba <HAL_UARTEx_SetTxFifoThreshold>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002aac:	f7ff f852 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4809      	ldr	r0, [pc, #36]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002ab4:	f008 fb3f 	bl	800b136 <HAL_UARTEx_SetRxFifoThreshold>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002abe:	f7ff f849 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <MX_LPUART1_UART_Init+0x94>)
 8002ac4:	f008 fabe 	bl	800b044 <HAL_UARTEx_EnableFifoMode>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002ace:	f7ff f841 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000344 	.word	0x20000344
 8002adc:	40008000 	.word	0x40008000

08002ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b096      	sub	sp, #88	@ 0x58
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2238      	movs	r2, #56	@ 0x38
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f022 fbac 	bl	802525e <memset>
  if(uartHandle->Instance==LPUART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bc8 <HAL_UART_MspInit+0xe8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d156      	bne.n	8002bbe <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b10:	2320      	movs	r3, #32
 8002b12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002b14:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b18:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 ff4a 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b2a:	f7ff f813 	bl	8001b54 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f7ff ff5e 	bl	80029f0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff ff43 	bl	80029c0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b52:	4619      	mov	r1, r3
 8002b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b58:	f002 fa76 	bl	8005048 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_UART_MspInit+0xf0>)
 8002b60:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b64:	2216      	movs	r2, #22
 8002b66:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b74:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002b86:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002b92:	480e      	ldr	r0, [pc, #56]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002b94:	f001 fc54 	bl	8004440 <HAL_DMA_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002b9e:	f7fe ffd9 	bl	8001b54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002ba6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ba8:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <HAL_UART_MspInit+0xec>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	2026      	movs	r0, #38	@ 0x26
 8002bb4:	f001 fc0d 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002bb8:	2026      	movs	r0, #38	@ 0x26
 8002bba:	f001 fc24 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3758      	adds	r7, #88	@ 0x58
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40008000 	.word	0x40008000
 8002bcc:	200003d8 	.word	0x200003d8
 8002bd0:	40020058 	.word	0x40020058

08002bd4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <HAL_UART_MspDeInit+0x3c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10f      	bne.n	8002c06 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7ff ff1a 	bl	8002a20 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002bec:	210c      	movs	r1, #12
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf2:	f002 fb89 	bl	8005308 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fcc8 	bl	8004590 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8002c00:	2026      	movs	r0, #38	@ 0x26
 8002c02:	f001 fc0e 	bl	8004422 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40008000 	.word	0x40008000

08002c14 <LL_APB1_GRP2_ForceReset>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_APB1_GRP2_ReleaseReset>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c6a:	4905      	ldr	r1, [pc, #20]	@ (8002c80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	58000800 	.word	0x58000800

08002c84 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <vcom_Init+0x30>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002c92:	f7fe fb77 	bl	8001384 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002c96:	f7ff fed5 	bl	8002a44 <MX_LPUART1_UART_Init>
  MX_I2C3_Init();
 8002c9a:	f7fe fe57 	bl	800194c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002c9e:	f7ff f845 	bl	8001d2c <MX_SPI1_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
 8002ca2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002ca6:	f7ff ffd9 	bl	8002c5c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002caa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000043c 	.word	0x2000043c

08002cb8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7ff ffa9 	bl	8002c14 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_LPUART1_RELEASE_RESET();
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7ff ffb7 	bl	8002c36 <LL_APB1_GRP2_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8002cc8:	4804      	ldr	r0, [pc, #16]	@ (8002cdc <vcom_DeInit+0x24>)
 8002cca:	f7ff ff83 	bl	8002bd4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f001 fba7 	bl	8004422 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002cd4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000344 	.word	0x20000344

08002ce0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4804      	ldr	r0, [pc, #16]	@ (8002d04 <vcom_Trace_DMA+0x24>)
 8002cf4:	f006 f952 	bl	8008f9c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002cf8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000344 	.word	0x20000344

08002d08 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d10:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <vcom_ReceiveInit+0x70>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d1a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d24:	4815      	ldr	r0, [pc, #84]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d26:	f008 f900 	bl	800af2a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8002d2a:	bf00      	nop
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3a:	d0f7      	beq.n	8002d2c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8002d3c:	bf00      	nop
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4c:	d1f7      	bne.n	8002d3e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d5c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8002d5e:	4807      	ldr	r0, [pc, #28]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d60:	f008 f93e 	bl	800afe0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8002d64:	2201      	movs	r2, #1
 8002d66:	4906      	ldr	r1, [pc, #24]	@ (8002d80 <vcom_ReceiveInit+0x78>)
 8002d68:	4804      	ldr	r0, [pc, #16]	@ (8002d7c <vcom_ReceiveInit+0x74>)
 8002d6a:	f006 f8cb 	bl	8008f04 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002d6e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000440 	.word	0x20000440
 8002d7c:	20000344 	.word	0x20000344
 8002d80:	20000438 	.word	0x20000438

08002d84 <vcom_Resume>:

void vcom_Resume(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002d88:	4806      	ldr	r0, [pc, #24]	@ (8002da4 <vcom_Resume+0x20>)
 8002d8a:	f001 fb59 	bl	8004440 <HAL_DMA_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002d94:	f7fe fede 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */
  MX_I2C3_Init();
 8002d98:	f7fe fdd8 	bl	800194c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002d9c:	f7fe ffc6 	bl	8001d2c <MX_SPI1_Init>
  /* USER CODE END vcom_Resume_2 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200003d8 	.word	0x200003d8

08002da8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <HAL_UART_TxCpltCallback+0x24>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d103      	bne.n	8002dc2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_UART_TxCpltCallback+0x28>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40008000 	.word	0x40008000
 8002dd0:	2000043c 	.word	0x2000043c

08002dd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <HAL_UART_RxCpltCallback+0x44>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d113      	bne.n	8002e0e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_UART_RxCpltCallback+0x48>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_UART_RxCpltCallback+0x30>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_UART_RxCpltCallback+0x48>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4807      	ldr	r0, [pc, #28]	@ (8002e20 <HAL_UART_RxCpltCallback+0x4c>)
 8002e02:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e04:	2201      	movs	r2, #1
 8002e06:	4906      	ldr	r1, [pc, #24]	@ (8002e20 <HAL_UART_RxCpltCallback+0x4c>)
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f006 f87b 	bl	8008f04 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40008000 	.word	0x40008000
 8002e1c:	20000440 	.word	0x20000440
 8002e20:	20000438 	.word	0x20000438

08002e24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e24:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e28:	f7ff fb86 	bl	8002538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e2c:	480c      	ldr	r0, [pc, #48]	@ (8002e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e2e:	490d      	ldr	r1, [pc, #52]	@ (8002e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <LoopForever+0xe>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e44:	4c0a      	ldr	r4, [pc, #40]	@ (8002e70 <LoopForever+0x16>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e52:	f022 fad9 	bl	8025408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e56:	f7fe fe16 	bl	8001a86 <main>

08002e5a <LoopForever>:

LoopForever:
    b LoopForever
 8002e5a:	e7fe      	b.n	8002e5a <LoopForever>
  ldr   r0, =_estack
 8002e5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002e68:	08029c34 	.word	0x08029c34
  ldr r2, =_sbss
 8002e6c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002e70:	20002f60 	.word	0x20002f60

08002e74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC_IRQHandler>

08002e76 <LL_AHB2_GRP1_EnableClock>:
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7ff ffda 	bl	8002e76 <LL_AHB2_GRP1_EnableClock>
  RF_SW_CTRL2_GPIO_CLK_ENABLE();
 8002ec2:	2004      	movs	r0, #4
 8002ec4:	f7ff ffd7 	bl	8002e76 <LL_AHB2_GRP1_EnableClock>
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL2_PIN;
 8002ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ecc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	480f      	ldr	r0, [pc, #60]	@ (8002f1c <BSP_RADIO_Init+0x74>)
 8002ee0:	f002 f8b2 	bl	8005048 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002ee4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ee8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef2:	f002 f8a9 	bl	8005048 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002efc:	4807      	ldr	r0, [pc, #28]	@ (8002f1c <BSP_RADIO_Init+0x74>)
 8002efe:	f002 fad1 	bl	80054a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002f02:	2200      	movs	r2, #0
 8002f04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f0c:	f002 faca 	bl	80054a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	48000800 	.word	0x48000800

08002f20 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d843      	bhi.n	8002fb8 <BSP_RADIO_ConfigRFSwitch+0x98>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f9d 	.word	0x08002f9d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f52:	f002 faa7 	bl	80054a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f5c:	4819      	ldr	r0, [pc, #100]	@ (8002fc4 <BSP_RADIO_ConfigRFSwitch+0xa4>)
 8002f5e:	f002 faa1 	bl	80054a4 <HAL_GPIO_WritePin>
      break;      
 8002f62:	e02a      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x9a>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f64:	2201      	movs	r2, #1
 8002f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f6e:	f002 fa99 	bl	80054a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f72:	2200      	movs	r2, #0
 8002f74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f78:	4812      	ldr	r0, [pc, #72]	@ (8002fc4 <BSP_RADIO_ConfigRFSwitch+0xa4>)
 8002f7a:	f002 fa93 	bl	80054a4 <HAL_GPIO_WritePin>
      break;
 8002f7e:	e01c      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x9a>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f80:	2201      	movs	r2, #1
 8002f82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f8a:	f002 fa8b 	bl	80054a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f94:	480b      	ldr	r0, [pc, #44]	@ (8002fc4 <BSP_RADIO_ConfigRFSwitch+0xa4>)
 8002f96:	f002 fa85 	bl	80054a4 <HAL_GPIO_WritePin>
      break;
 8002f9a:	e00e      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x9a>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa6:	f002 fa7d 	bl	80054a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002faa:	2201      	movs	r2, #1
 8002fac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fb0:	4804      	ldr	r0, [pc, #16]	@ (8002fc4 <BSP_RADIO_ConfigRFSwitch+0xa4>)
 8002fb2:	f002 fa77 	bl	80054a4 <HAL_GPIO_WritePin>
      break;
 8002fb6:	e000      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x9a>
    }
    default:
      break;    
 8002fb8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	48000800 	.word	0x48000800

08002fc8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002fcc:	2302      	movs	r3, #2
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_NOT_SUPPORTED;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003002:	230f      	movs	r3, #15
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e001      	b.n	800300c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003008:	2316      	movs	r3, #22
 800300a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800300c:	68fb      	ldr	r3, [r7, #12]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800301c:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a03      	ldr	r2, [pc, #12]	@ (8003030 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6053      	str	r3, [r2, #4]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	e0042000 	.word	0xe0042000

08003034 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a03      	ldr	r2, [pc, #12]	@ (800304c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800303e:	f023 0302 	bic.w	r3, r3, #2
 8003042:	6053      	str	r3, [r2, #4]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	e0042000 	.word	0xe0042000

08003050 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a03      	ldr	r2, [pc, #12]	@ (8003068 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	6053      	str	r3, [r2, #4]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	e0042000 	.word	0xe0042000

0800306c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003076:	2003      	movs	r0, #3
 8003078:	f001 f9a0 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800307c:	f004 fabe 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8003080:	4603      	mov	r3, r0
 8003082:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <HAL_Init+0x3c>)
 8003084:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003086:	200f      	movs	r0, #15
 8003088:	f7ff f914 	bl	80022b4 <HAL_InitTick>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	e001      	b.n	800309c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003098:	f7fe feed 	bl	8001e76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800309c:	79fb      	ldrb	r3, [r7, #7]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <HAL_SuspendTick+0x18>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a03      	ldr	r2, [pc, #12]	@ (80030c4 <HAL_SuspendTick+0x18>)
 80030b6:	f023 0302 	bic.w	r3, r3, #2
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <HAL_ResumeTick+0x18>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a03      	ldr	r2, [pc, #12]	@ (80030e0 <HAL_ResumeTick+0x18>)
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80030e8:	4b02      	ldr	r3, [pc, #8]	@ (80030f4 <HAL_GetUIDw0+0x10>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	1fff7590 	.word	0x1fff7590

080030f8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80030fc:	4b02      	ldr	r3, [pc, #8]	@ (8003108 <HAL_GetUIDw1+0x10>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	1fff7594 	.word	0x1fff7594

0800310c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003110:	4b02      	ldr	r3, [pc, #8]	@ (800311c <HAL_GetUIDw2+0x10>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	1fff7598 	.word	0x1fff7598

08003120 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003124:	f7ff ff78 	bl	8003018 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003130:	f7ff ff80 	bl	8003034 <LL_DBGMCU_DisableDBGStopMode>
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 800313c:	f7ff ff88 	bl	8003050 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2107      	movs	r1, #7
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2107      	movs	r1, #7
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	210f      	movs	r1, #15
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	f003 010f 	and.w	r1, r3, #15
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	43db      	mvns	r3, r3
 80032b4:	401a      	ands	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0219      	lsls	r1, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	400b      	ands	r3, r1
 80032be:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80032c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032c6:	431a      	orrs	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032e6:	f023 0317 	bic.w	r3, r3, #23
 80032ea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800330c:	f023 0317 	bic.w	r3, r3, #23
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6093      	str	r3, [r2, #8]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003332:	d101      	bne.n	8003338 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003354:	f023 0317 	bic.w	r3, r3, #23
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800337a:	f023 0317 	bic.w	r3, r3, #23
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <LL_ADC_IsEnabled+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_ADC_IsEnabled+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d101      	bne.n	80033cc <LL_ADC_IsDisableOngoing+0x18>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <LL_ADC_IsDisableOngoing+0x1a>
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033e8:	f023 0317 	bic.w	r3, r3, #23
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800340e:	f023 0317 	bic.w	r3, r3, #23
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d101      	bne.n	800343c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_ADC_Init>:
 *         ADC and scope of regular group. For parameters details, see comments
 *         of structure "ADC_InitTypeDef".
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
	uint32_t tmpCFGR1 = 0UL;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
	uint32_t tmpCFGR2 = 0UL;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
	uint32_t tmp_adc_reg_is_conversion_on_going;
	__IO uint32_t wait_loop_index = 0UL;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]

	/* Check ADC handle */
	if (hadc == NULL) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_Init+0x22>
		return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e17e      	b.n	8003768 <HAL_ADC_Init+0x320>
		assert_param(
				IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
	}
	assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
	assert_param(
			!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

	/* Actions performed only if ADC is coming from state reset:                */
	/* - Initialization of ADC MSP                                              */
	if (hadc->State == HAL_ADC_STATE_RESET) {
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7fd fe79 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

		/* Set ADC error code to none */
		ADC_CLEAR_ERRORCODE(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	65da      	str	r2, [r3, #92]	@ 0x5c

		/* Initialize Lock */
		hadc->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	}

	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff44 	bl	800331e <LL_ADC_IsInternalRegulatorEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <HAL_ADC_Init+0x80>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(hadc->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff18 	bl	80032d6 <LL_ADC_EnableInternalRegulator>
		/* Wait loop initialization and execution */
		/* Note: Variable divided by 2 to compensate partially              */
		/*       CPU processing cycles, scaling in us split to not          */
		/*       exceed 32 bits register capacity and handle low frequency. */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
				* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003720 <HAL_ADC_Init+0x2d8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	4a9d      	ldr	r2, [pc, #628]	@ (8003724 <HAL_ADC_Init+0x2dc>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 80034b8:	60fb      	str	r3, [r7, #12]
		while (wait_loop_index != 0UL) {
 80034ba:	e002      	b.n	80034c2 <HAL_ADC_Init+0x7a>
			wait_loop_index--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
		while (wait_loop_index != 0UL) {
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <HAL_ADC_Init+0x74>
	}

	/* Verification that ADC voltage regulator is correctly enabled, whether    */
	/* or not ADC is coming from state reset (if any potential problem of       */
	/* clocking, voltage regulator would not be enabled).                       */
	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff26 	bl	800331e <LL_ADC_IsInternalRegulatorEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_ADC_Init+0xac>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	659a      	str	r2, [r3, #88]	@ 0x58

		/* Set ADC error code to ADC peripheral internal error */
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	@ 0x5c

		tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	77fb      	strb	r3, [r7, #31]

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed and if there is no conversion on going on regular    */
	/* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
	/* called to update a parameter on the fly).                                */
	tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff93 	bl	8003424 <LL_ADC_REG_IsConversionOngoing>
 80034fe:	6138      	str	r0, [r7, #16]
			hadc->Instance);

	if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8124 	bne.w	8003756 <HAL_ADC_Init+0x30e>
			&& (tmp_adc_reg_is_conversion_on_going == 0UL)) {
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 8120 	bne.w	8003756 <HAL_ADC_Init+0x30e>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	659a      	str	r2, [r3, #88]	@ 0x58
		/*  - DMA continuous request                                              */
		/*  - Trigger frequency mode                                              */
		/* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
		/*       and disable phases are performed automatically by hardware       */
		/*       (in this case, flag ADC_FLAG_RDY is not set).                    */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff30 	bl	8003390 <LL_ADC_IsEnabled>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80a7 	bne.w	8003686 <HAL_ADC_Init+0x23e>
			/* without needing to reconfigure all other ADC groups/channels         */
			/* parameters):                                                         */
			/*   - internal measurement paths (VrefInt, ...)                        */
			/*     (set into HAL_ADC_ConfigChannel() )                              */

			tmpCFGR1 |= (hadc->Init.Resolution
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
					| ADC_CFGR1_AUTOWAIT((uint32_t )hadc->Init.LowPowerAutoWait)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7e1b      	ldrb	r3, [r3, #24]
 8003540:	039b      	lsls	r3, r3, #14
 8003542:	431a      	orrs	r2, r3
					| ADC_CFGR1_AUTOOFF(
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7e5b      	ldrb	r3, [r3, #25]
 8003548:	03db      	lsls	r3, r3, #15
 800354a:	431a      	orrs	r2, r3
							(uint32_t )hadc->Init.LowPowerAutoPowerOff)
					| ADC_CFGR1_CONTINUOUS(
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7e9b      	ldrb	r3, [r3, #26]
 8003550:	035b      	lsls	r3, r3, #13
 8003552:	4313      	orrs	r3, r2
							(uint32_t )hadc->Init.ContinuousConvMode)
					| ADC_CFGR1_OVERRUN(hadc->Init.Overrun)
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003558:	2a00      	cmp	r2, #0
 800355a:	d002      	beq.n	8003562 <HAL_ADC_Init+0x11a>
 800355c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003560:	e000      	b.n	8003564 <HAL_ADC_Init+0x11c>
 8003562:	2200      	movs	r2, #0
 8003564:	431a      	orrs	r2, r3
					| hadc->Init.DataAlign
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	431a      	orrs	r2, r3
					| ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	da04      	bge.n	800357e <HAL_ADC_Init+0x136>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800357c:	e001      	b.n	8003582 <HAL_ADC_Init+0x13a>
 800357e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003582:	431a      	orrs	r2, r3
					| ADC_CFGR1_DMACONTREQ(
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4313      	orrs	r3, r2
			tmpCFGR1 |= (hadc->Init.Resolution
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
							(uint32_t )hadc->Init.DMAContinuousRequests));

			/* Update setting of discontinuous mode only if continuous mode is disabled */
			if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d114      	bne.n	80035c8 <HAL_ADC_Init+0x180>
				if (hadc->Init.ContinuousConvMode == DISABLE) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7e9b      	ldrb	r3, [r3, #26]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_ADC_Init+0x168>
					/* Enable the selected ADC group regular discontinuous mode */
					tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e00b      	b.n	80035c8 <HAL_ADC_Init+0x180>
					/* ADC regular group discontinuous was intended to be enabled,        */
					/* but ADC regular group modes continuous and sequencer discontinuous */
					/* cannot be enabled simultaneously.                                  */

					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c
			/* Enable external trigger if trigger selection is different of software  */
			/* start.                                                                 */
			/* Note: This configuration keeps the hardware feature of parameter       */
			/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
			/*       software start.                                                  */
			if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_ADC_Init+0x19c>
				tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
						| hadc->Init.ExternalTrigConvEdge);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	4313      	orrs	r3, r2
				tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
			}

			/* Update ADC configuration register with previous settings */
			MODIFY_REG(hadc->Instance->CFGR1,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80035ee:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	69b9      	ldr	r1, [r7, #24]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	60d3      	str	r3, [r2, #12]
					ADC_CFGR1_RES | ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTSEL | ADC_CFGR1_EXTEN | ADC_CFGR1_ALIGN | ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG,
					tmpCFGR1);

			tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
					| hadc->Init.TriggerFrequencyMode);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003608:	4313      	orrs	r3, r2
			tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

			if (hadc->Init.OversamplingMode == ENABLE) {
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d111      	bne.n	800363e <HAL_ADC_Init+0x1f6>
				tmpCFGR2 |= (ADC_CFGR2_OVSE
						| (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
						| hadc->Init.Oversampling.Ratio
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	431a      	orrs	r2, r3
						| hadc->Init.Oversampling.RightBitShift
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	431a      	orrs	r2, r3
						| hadc->Init.Oversampling.TriggeredMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	431a      	orrs	r2, r3
				tmpCFGR2 |= (ADC_CFGR2_OVSE
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	617b      	str	r3, [r7, #20]
			}

			MODIFY_REG(hadc->Instance->CFGR2,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b38      	ldr	r3, [pc, #224]	@ (8003728 <HAL_ADC_Init+0x2e0>)
 8003646:	4013      	ands	r3, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	430b      	orrs	r3, r1
 8003650:	6113      	str	r3, [r2, #16]
					ADC_CFGR2_CKMODE | ADC_CFGR2_LFTRIG | ADC_CFGR2_OVSE | ADC_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TOVS,
					tmpCFGR2);

			/* Configuration of ADC clock mode: asynchronous clock source           */
			/* with selectable prescaler.                                           */
			if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800365a:	d014      	beq.n	8003686 <HAL_ADC_Init+0x23e>
					&& ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003664:	d00f      	beq.n	8003686 <HAL_ADC_Init+0x23e>
					&& ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4)) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800366e:	d00a      	beq.n	8003686 <HAL_ADC_Init+0x23e>
				MODIFY_REG(ADC_COMMON->CCR, ADC_CCR_PRESC,
 8003670:	4b2e      	ldr	r3, [pc, #184]	@ (800372c <HAL_ADC_Init+0x2e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003680:	492a      	ldr	r1, [pc, #168]	@ (800372c <HAL_ADC_Init+0x2e4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
						hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
			}
		}

		/* Channel sampling time configuration */
		LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	461a      	mov	r2, r3
 8003690:	2100      	movs	r1, #0
 8003692:	f7ff fd76 	bl	8003182 <LL_ADC_SetSamplingTimeCommonChannels>
				LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
		LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	461a      	mov	r2, r3
 80036a0:	4923      	ldr	r1, [pc, #140]	@ (8003730 <HAL_ADC_Init+0x2e8>)
 80036a2:	f7ff fd6e 	bl	8003182 <LL_ADC_SetSamplingTimeCommonChannels>
		/*   emulated by software for alignment over all STM32 devices.           */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion".                                         */
		/*   Channels must be configured into each rank using function            */
		/*   "HAL_ADC_ConfigChannel()".                                           */
		if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_ADC_Init+0x278>
			/* Set sequencer scan length by clearing ranks above rank 1             */
			/* and do not modify rank 1 value.                                      */
			SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f062 020f 	orn	r2, r2, #15
 80036bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80036be:	e017      	b.n	80036f0 <HAL_ADC_Init+0x2a8>
		} else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036c8:	d112      	bne.n	80036f0 <HAL_ADC_Init+0x2a8>
			/*          therefore after the first call of "HAL_ADC_Init()",       */
			/*          each rank corresponding to parameter "NbrOfConversion"    */
			/*          must be set using "HAL_ADC_ConfigChannel()".              */
			/*  - Set sequencer scan length by clearing ranks above maximum rank  */
			/*    and do not modify other ranks value.                            */
			MODIFY_REG(hadc->Instance->CHSELR, ADC_CHSELR_SQ_ALL,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f003 031c 	and.w	r3, r3, #28
 80036dc:	f06f 020f 	mvn.w	r2, #15
 80036e0:	fa02 f103 	lsl.w	r1, r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	629a      	str	r2, [r3, #40]	@ 0x28
					(ADC_CHSELR_SQ2_TO_SQ8 << (((hadc->Init.NbrOfConversion - 1UL) * ADC_REGULAR_RANK_2) & 0x1FUL)) | (hadc->ADCGroupRegularSequencerRanks));
		}

		/* Check back that ADC registers have effectively been configured to      */
		/* ensure of no potential problem of ADC core peripheral clocking.        */
		if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fd61 	bl	80031be <LL_ADC_GetSamplingTimeCommonChannels>
 80036fc:	4602      	mov	r2, r0
				LL_ADC_SAMPLINGTIME_COMMON_1)
				== hadc->Init.SamplingTimeCommon1) {
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance,
 8003702:	429a      	cmp	r2, r3
 8003704:	d116      	bne.n	8003734 <HAL_ADC_Init+0x2ec>
			/* Set ADC error code to none */
			ADC_CLEAR_ERRORCODE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c

			/* Set the ADC state */
			ADC_STATE_CLR_SET(hadc->State,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	f023 0303 	bic.w	r3, r3, #3
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58
		if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance,
 800371c:	e023      	b.n	8003766 <HAL_ADC_Init+0x31e>
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	1ffffc02 	.word	0x1ffffc02
 800372c:	40012708 	.word	0x40012708
 8003730:	03ffff04 	.word	0x03ffff04
					HAL_ADC_STATE_BUSY_INTERNAL,
					HAL_ADC_STATE_READY);
		} else {
			/* Update ADC state machine to error */
			ADC_STATE_CLR_SET(hadc->State,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f023 0312 	bic.w	r3, r3, #18
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58
					HAL_ADC_STATE_BUSY_INTERNAL,
					HAL_ADC_STATE_ERROR_INTERNAL);

			/* Set ADC error code to ADC peripheral internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	@ 0x5c

			tmp_hal_status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
		if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance,
 8003754:	e007      	b.n	8003766 <HAL_ADC_Init+0x31e>
		}

	} else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	659a      	str	r2, [r3, #88]	@ 0x58

		tmp_hal_status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
	}

	return tmp_hal_status;
 8003766:	7ffb      	ldrb	r3, [r7, #31]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_ADC_DeInit>:
 *         case of reset of a single ADC while the other ADCs sharing the same
 *         common group is still running.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status;

	/* Check ADC handle */
	if (hadc == NULL) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_DeInit+0x12>
		return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e07a      	b.n	8003878 <HAL_ADC_DeInit+0x108>

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Set ADC state */
	SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	659a      	str	r2, [r3, #88]	@ 0x58

	/* Stop potential conversion on going, on regular group */
	tmp_hal_status = ADC_ConversionStop(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 face 	bl	8003d30 <ADC_ConversionStop>
 8003794:	4603      	mov	r3, r0
 8003796:	73fb      	strb	r3, [r7, #15]

	/* Disable ADC peripheral if conversions are effectively stopped */
	if (tmp_hal_status == HAL_OK) {
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_ADC_DeInit+0x4e>
		/* Disable the ADC peripheral */
		tmp_hal_status = ADC_Disable(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb92 	bl	8003ec8 <ADC_Disable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]

		/* Check if ADC is effectively disabled */
		if (tmp_hal_status == HAL_OK) {
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_ADC_DeInit+0x44>
			/* Change ADC state */
			hadc->State = HAL_ADC_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		/* Disable ADC internal voltage regulator */
		LL_ADC_DisableInternalRegulator(hadc->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fd9f 	bl	80032fc <LL_ADC_DisableInternalRegulator>
	/*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
	/*       system RCC hard reset.                                             */

	/* ========== Reset ADC registers ========== */
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(hadc,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	6053      	str	r3, [r2, #4]
			(ADC_IT_AWD3 | ADC_IT_AWD2 | ADC_IT_AWD1 | ADC_IT_OVR | ADC_IT_EOS | ADC_IT_EOC | ADC_IT_EOSMP | ADC_IT_RDY));

	/* Reset register ISR */
	__HAL_ADC_CLEAR_FLAG(hadc,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f240 329f 	movw	r2, #927	@ 0x39f
 80037da:	601a      	str	r2, [r3, #0]
	/* Reset register CR */
	/* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
	/* "read-set": no direct reset applicable.                                */

	/* Reset register CFGR1 */
	hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <HAL_ADC_DeInit+0x110>)
 80037e8:	400b      	ands	r3, r1
 80037ea:	60d3      	str	r3, [r2, #12]
			ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

	/* Reset register CFGR2 */
	/* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
	/*       already done above.                                              */
	hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80037fa:	611a      	str	r2, [r3, #16]

	/* Reset register SMPR */
	hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0207 	bic.w	r2, r2, #7
 800380a:	615a      	str	r2, [r3, #20]

	/* Reset registers AWDxTR */
	hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800381a:	621a      	str	r2, [r3, #32]
	hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Reset register CHSELR */
	hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset register DR */
	/* bits in access mode read only, no direct reset applicable */

	/* Reset register CCR */
	ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_ADC_DeInit+0x114>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <HAL_ADC_DeInit+0x114>)
 8003850:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003854:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
	/* DeInit the low level hardware */
	HAL_ADC_MspDeInit(hadc);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fc9e 	bl	8001198 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

	/* Reset HAL ADC handle variable */
	hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60

	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	65da      	str	r2, [r3, #92]	@ 0x5c

	/* Set ADC state */
	hadc->State = HAL_ADC_STATE_RESET;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	659a      	str	r2, [r3, #88]	@ 0x58

	__HAL_UNLOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	return tmp_hal_status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	833e0200 	.word	0x833e0200
 8003884:	40012708 	.word	0x40012708

08003888 <HAL_ADC_Start>:
 * @brief  Enable ADC, start conversion of regular group.
 * @note   Interruptions enabled in this function: None.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Perform ADC enable and conversion start if no conversion is on going */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fdc5 	bl	8003424 <LL_ADC_REG_IsConversionOngoing>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d132      	bne.n	8003906 <HAL_ADC_Start+0x7e>
		__HAL_LOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_Start+0x26>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e02e      	b.n	800390c <HAL_ADC_Start+0x84>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

		/* Enable the ADC peripheral */
		tmp_hal_status = ADC_Enable(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa80 	bl	8003dbc <ADC_Enable>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]

		/* Start conversion if ADC is effectively enabled */
		if (tmp_hal_status == HAL_OK) {
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11a      	bne.n	80038fc <HAL_ADC_Start+0x74>
			/* Set ADC state                                                        */
			/* - Clear state bitfield related to regular group conversion results   */
			/* - Set state bitfield related to regular operation                    */
			ADC_STATE_CLR_SET(hadc->State,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	659a      	str	r2, [r3, #88]	@ 0x58
					HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
					HAL_ADC_STATE_REG_BUSY);

			/* Set ADC error code */
			/* Reset all ADC error code fields */
			ADC_CLEAR_ERRORCODE(hadc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	65da      	str	r2, [r3, #92]	@ 0x5c

			/* Clear ADC group regular conversion flag and overrun flag               */
			/* (To ensure of no unknown state from potential previous ADC operations) */
			__HAL_ADC_CLEAR_FLAG(hadc,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	221c      	movs	r2, #28
 80038e6:	601a      	str	r2, [r3, #0]
					(ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));

			/* Process unlocked */
			/* Unlock before starting ADC conversions: in case of potential         */
			/* interruption, to let the process to ADC IRQ Handler.                 */
			__HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			/* Enable conversion of regular group.                                  */
			/* If software start has been selected, conversion starts immediately.  */
			/* If external trigger has been selected, conversion will start at next */
			/* trigger event.                                                       */
			/* Start ADC group regular conversion */
			LL_ADC_REG_StartConversion(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fd6f 	bl	80033d8 <LL_ADC_REG_StartConversion>
 80038fa:	e006      	b.n	800390a <HAL_ADC_Start+0x82>
		} else {
			__HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003904:	e001      	b.n	800390a <HAL_ADC_Start+0x82>
		}
	} else {
		tmp_hal_status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	73fb      	strb	r3, [r7, #15]
	}

	return tmp_hal_status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_ADC_Stop>:
 *         conversion on injected group. If injected group is under use, it
 *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status;

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	__HAL_LOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_ADC_Stop+0x16>
 8003926:	2302      	movs	r3, #2
 8003928:	e022      	b.n	8003970 <HAL_ADC_Stop+0x5c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	/* 1. Stop potential conversion on going, on ADC group regular */
	tmp_hal_status = ADC_ConversionStop(hadc);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9fc 	bl	8003d30 <ADC_ConversionStop>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]

	/* Disable ADC peripheral if conversions are effectively stopped */
	if (tmp_hal_status == HAL_OK) {
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d111      	bne.n	8003966 <HAL_ADC_Stop+0x52>
		/* 2. Disable the ADC peripheral */
		tmp_hal_status = ADC_Disable(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fac0 	bl	8003ec8 <ADC_Disable>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]

		/* Check if ADC is effectively disabled */
		if (tmp_hal_status == HAL_OK) {
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_ADC_Stop+0x52>
			/* Set ADC state */
			ADC_STATE_CLR_SET(hadc->State,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58
					HAL_ADC_STATE_REG_BUSY,
					HAL_ADC_STATE_READY);
		}
	}

	__HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	return tmp_hal_status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_ADC_PollForConversion>:
 * @param hadc ADC handle
 * @param Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc,
		uint32_t Timeout) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* If end of conversion selected to end of sequence conversions */
	if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d102      	bne.n	8003990 <HAL_ADC_PollForConversion+0x18>
		tmp_flag_end = ADC_FLAG_EOS;
 800398a:	2308      	movs	r3, #8
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e010      	b.n	80039b2 <HAL_ADC_PollForConversion+0x3a>
		/* each conversion:                                                       */
		/* Particular case is ADC configured in DMA mode and ADC sequencer with   */
		/* several ranks and polling for end of each conversion.                  */
		/* For code simplicity sake, this particular case is generalized to       */
		/* ADC configured in DMA mode and and polling for end of each conversion. */
		if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_ADC_PollForConversion+0x36>
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	@ 0x58

			return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e077      	b.n	8003a9e <HAL_ADC_PollForConversion+0x126>
		} else {
			tmp_flag_end = (ADC_FLAG_EOC);
 80039ae:	2304      	movs	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
		}
	}

	/* Get tick count */
	tickstart = HAL_GetTick();
 80039b2:	f7fe fc89 	bl	80022c8 <HAL_GetTick>
 80039b6:	60b8      	str	r0, [r7, #8]

	/* Wait until End of unitary conversion or sequence conversions flag is raised */
	while ((hadc->Instance->ISR & tmp_flag_end) == 0UL) {
 80039b8:	e021      	b.n	80039fe <HAL_ADC_PollForConversion+0x86>
		/* Check if timeout is disabled (set to infinite wait) */
		if (Timeout != HAL_MAX_DELAY) {
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c0:	d01d      	beq.n	80039fe <HAL_ADC_PollForConversion+0x86>
			if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL)) {
 80039c2:	f7fe fc81 	bl	80022c8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <HAL_ADC_PollForConversion+0x60>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d112      	bne.n	80039fe <HAL_ADC_PollForConversion+0x86>
				/* New check to avoid false timeout detection in case of preemption */
				if ((hadc->Instance->ISR & tmp_flag_end) == 0UL) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_ADC_PollForConversion+0x86>
					/* Update ADC state machine to timeout */
					SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	@ 0x58

					__HAL_UNLOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

					return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_ADC_PollForConversion+0x126>
	while ((hadc->Instance->ISR & tmp_flag_end) == 0UL) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0d6      	beq.n	80039ba <HAL_ADC_PollForConversion+0x42>
			}
		}
	}

	/* Update ADC state machine */
	SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	@ 0x58

	/* Determine whether any further conversion upcoming on group regular       */
	/* by external trigger, continuous mode or scan sequence on going.          */
	if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fbe6 	bl	80031ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d031      	beq.n	8003a8c <HAL_ADC_PollForConversion+0x114>
			&& (hadc->Init.ContinuousConvMode == DISABLE)) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e9b      	ldrb	r3, [r3, #26]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d12d      	bne.n	8003a8c <HAL_ADC_PollForConversion+0x114>
		/* Check whether end of sequence is reached */
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d126      	bne.n	8003a8c <HAL_ADC_PollForConversion+0x114>
			/* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
			/* ADSTART==0 (no conversion on going)                                  */
			if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fcee 	bl	8003424 <LL_ADC_REG_IsConversionOngoing>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d112      	bne.n	8003a74 <HAL_ADC_PollForConversion+0xfc>
				/* Disable ADC end of single conversion interrupt on group regular */
				/* Note: Overrun interrupt was enabled with EOC interrupt in          */
				/* HAL_Start_IT(), but is not disabled here because can be used       */
				/* by overrun IRQ process below.                                      */
				__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 020c 	bic.w	r2, r2, #12
 8003a5c:	605a      	str	r2, [r3, #4]

				/* Set ADC state */
				ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a72:	e00b      	b.n	8003a8c <HAL_ADC_PollForConversion+0x114>
						HAL_ADC_STATE_REG_BUSY,
						HAL_ADC_STATE_READY);
			} else {
				/* Change ADC state to error state */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	659a      	str	r2, [r3, #88]	@ 0x58

				/* Set ADC error code to ADC peripheral internal error */
				SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
	}

	/* Clear end of conversion flag of regular group if low power feature       */
	/* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
	/* until data register is read using function HAL_ADC_GetValue().           */
	if (hadc->Init.LowPowerAutoWait == DISABLE) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7e1b      	ldrb	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_ADC_PollForConversion+0x124>
		/* Clear regular group conversion flag */
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_ADC_GetValue>:
 *         model polling: @ref HAL_ADC_PollForConversion()
 *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
 * @param hadc ADC handle
 * @retval ADC group regular conversion data
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc) {
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]

	/* Note: EOC flag is not cleared here by software because automatically     */
	/*       cleared by hardware when reading register DR.                      */

	/* Return ADC converted value */
	return hadc->Instance->DR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param pConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_ChannelConfTypeDef *pConfig) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	77fb      	strb	r3, [r7, #31]
	uint32_t tmp_config_internal_channel;
	__IO uint32_t wait_loop_index = 0UL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
	assert_param(IS_ADC_CHANNEL(pConfig->Channel));
	assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

	if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
		assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

		assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
	}

	__HAL_LOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x28>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e110      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x24a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Channel number                                                        */
	/*  - Channel sampling time                                                 */
	/*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fc95 	bl	8003424 <LL_ADC_REG_IsConversionOngoing>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 80f7 	bne.w	8003cf0 <HAL_ADC_ConfigChannel+0x230>
		/* If sequencer set to not fully configurable with channel rank set to    */
		/* none, remove the channel from the sequencer.                           */
		/* Otherwise (sequencer set to fully configurable or to to not fully      */
		/* configurable with channel rank to be set), configure the selected      */
		/* channel.                                                               */
		if (pConfig->Rank != ADC_RANK_NONE) {
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	f000 80b1 	beq.w	8003c6e <HAL_ADC_ConfigChannel+0x1ae>
			/* Note: ADC channel configuration requires few ADC clock cycles        */
			/*       to be ready. Processing of ADC settings in this function       */
			/*       induce that a specific wait time is not necessary.             */
			/*       For more details on ADC channel configuration ready,           */
			/*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
			if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b14:	d004      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x60>
					|| (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d14 <HAL_ADC_ConfigChannel+0x254>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x72>
				/* Sequencer set to not fully configurable:                           */
				/* Set the channel by enabling the corresponding bitfield.            */
				LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7ff fb92 	bl	8003254 <LL_ADC_REG_SetSequencerChAdd>
 8003b30:	e041      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xf6>
			} else {
				/* Sequencer set to fully configurable:                               */
				/* Set the channel by entering it into the selected rank.             */

				/* Memorize the channel set into variable in HAL ADC handle */
				MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	210f      	movs	r1, #15
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0xa0>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	e011      	b.n	8003b84 <HAL_ADC_ConfigChannel+0xc4>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	6849      	ldr	r1, [r1, #4]
 8003b88:	f001 011f 	and.w	r1, r1, #31
 8003b8c:	408b      	lsls	r3, r1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60

				/* If the selected rank is below ADC group regular sequencer length,  */
				/* apply the configuration in ADC register.                           */
				/* Note: Otherwise, configuration is not applied.                     */
				/*       To apply it, parameter'NbrOfConversion' must be increased.   */
				if (((pConfig->Rank >> 2UL) + 1UL)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	1c5a      	adds	r2, r3, #1
						<= hadc->Init.NbrOfConversion) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
				if (((pConfig->Rank >> 2UL) + 1UL)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d808      	bhi.n	8003bb6 <HAL_ADC_ConfigChannel+0xf6>
					LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f7ff fb2e 	bl	8003212 <LL_ADC_REG_SetSequencerRanks>
							pConfig->Channel);
				}
			}

			/* Set sampling time of the selected ADC channel */
			LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7ff fb6b 	bl	800329e <LL_ADC_SetChannelSamplingTime>
			/* internal measurement paths enable: If internal channel selected,     */
			/* enable dedicated internal buffers and path.                          */
			/* Note: these internal measurement paths can be disabled using         */
			/*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
			/*       channel configuration parameter "Rank".                        */
			if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f280 8097 	bge.w	8003d00 <HAL_ADC_ConfigChannel+0x240>
				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8003bd2:	4851      	ldr	r0, [pc, #324]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003bd4:	f7ff fac8 	bl	8003168 <LL_ADC_GetCommonPathInternalCh>
 8003bd8:	61b8      	str	r0, [r7, #24]
						__LL_ADC_COMMON_INSTANCE(hadc->Instance));

				/* If the requested internal measurement path has already been enabled,   */
				/* bypass the configuration processing.                                   */
				if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a4f      	ldr	r2, [pc, #316]	@ (8003d1c <HAL_ADC_ConfigChannel+0x25c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d120      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x166>
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL)) {
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
						&& ((tmp_config_internal_channel
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11b      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x166>
					LL_ADC_SetCommonPathInternalCh(
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4848      	ldr	r0, [pc, #288]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003bf8:	f7ff faa4 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
					/* Wait loop initialization and execution */
					/* Note: Variable divided by 2 to compensate partially              */
					/*       CPU processing cycles, scaling in us split to not          */
					/*       exceed 32 bits register capacity and handle low frequency. */
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
							* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bfc:	4b48      	ldr	r3, [pc, #288]	@ (8003d20 <HAL_ADC_ConfigChannel+0x260>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	4a48      	ldr	r2, [pc, #288]	@ (8003d24 <HAL_ADC_ConfigChannel+0x264>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003c14:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 8003c16:	e002      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x15e>
						wait_loop_index--;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x158>
				if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c24:	e06c      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
					}
				} else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d28 <HAL_ADC_ConfigChannel+0x268>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x18a>
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_VBAT) == 0UL)) {
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
						&& ((tmp_config_internal_channel
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x18a>
					LL_ADC_SetCommonPathInternalCh(
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c40:	4619      	mov	r1, r3
 8003c42:	4835      	ldr	r0, [pc, #212]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003c44:	f7ff fa7e 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
 8003c48:	e05a      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
							__LL_ADC_COMMON_INSTANCE(hadc->Instance),
							LL_ADC_PATH_INTERNAL_VBAT
									| tmp_config_internal_channel);
				} else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a37      	ldr	r2, [pc, #220]	@ (8003d2c <HAL_ADC_ConfigChannel+0x26c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d155      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
						&& ((tmp_config_internal_channel
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d150      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
					LL_ADC_SetCommonPathInternalCh(
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c64:	4619      	mov	r1, r3
 8003c66:	482c      	ldr	r0, [pc, #176]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003c68:	f7ff fa6c 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
 8003c6c:	e048      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
			/* Regular sequencer configuration */
			/* Note: Case of sequencer set to fully configurable:                   */
			/*       Sequencer rank cannot be disabled, only affected to            */
			/*       another channel.                                               */
			/*       To remove a rank, use parameter 'NbrOfConversion".             */
			if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c76:	d004      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x1c2>
					|| (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	@ (8003d14 <HAL_ADC_ConfigChannel+0x254>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d107      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x1d2>
				/* Sequencer set to not fully configurable:                           */
				/* Reset the channel by disabling the corresponding bitfield.         */
				LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7ff faf3 	bl	8003278 <LL_ADC_REG_SetSequencerChRem>
			}

			/* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
			/* If internal channel selected, enable dedicated internal buffers and    */
			/* paths.                                                                 */
			if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da32      	bge.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8003c9a:	481f      	ldr	r0, [pc, #124]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003c9c:	f7ff fa64 	bl	8003168 <LL_ADC_GetCommonPathInternalCh>
 8003ca0:	61b8      	str	r0, [r7, #24]
						__LL_ADC_COMMON_INSTANCE(hadc->Instance));

				if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_ADC_ConfigChannel+0x25c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d107      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x1fc>
					LL_ADC_SetCommonPathInternalCh(
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4818      	ldr	r0, [pc, #96]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003cb6:	f7ff fa45 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
 8003cba:	e021      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
							__LL_ADC_COMMON_INSTANCE(hadc->Instance),
							~LL_ADC_PATH_INTERNAL_TEMPSENSOR
									& tmp_config_internal_channel);
				} else if (pConfig->Channel == ADC_CHANNEL_VBAT) {
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <HAL_ADC_ConfigChannel+0x268>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x216>
					LL_ADC_SetCommonPathInternalCh(
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4812      	ldr	r0, [pc, #72]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003cd0:	f7ff fa38 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
 8003cd4:	e014      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
							__LL_ADC_COMMON_INSTANCE(hadc->Instance),
							~LL_ADC_PATH_INTERNAL_VBAT
									& tmp_config_internal_channel);
				} else if (pConfig->Channel == ADC_CHANNEL_VREFINT) {
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <HAL_ADC_ConfigChannel+0x26c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10f      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
					LL_ADC_SetCommonPathInternalCh(
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480b      	ldr	r0, [pc, #44]	@ (8003d18 <HAL_ADC_ConfigChannel+0x258>)
 8003cea:	f7ff fa2b 	bl	8003144 <LL_ADC_SetCommonPathInternalCh>
 8003cee:	e007      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x240>
	/* If a conversion is on going on regular group, no update on regular       */
	/* channel could be done on neither of the channel configuration structure  */
	/* parameters.                                                              */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	659a      	str	r2, [r3, #88]	@ 0x58

		tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
	}

	__HAL_UNLOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	return tmp_hal_status;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	80000004 	.word	0x80000004
 8003d18:	40012708 	.word	0x40012708
 8003d1c:	b0001000 	.word	0xb0001000
 8003d20:	20000000 	.word	0x20000000
 8003d24:	053e2d63 	.word	0x053e2d63
 8003d28:	b8004000 	.word	0xb8004000
 8003d2c:	b4002000 	.word	0xb4002000

08003d30 <ADC_ConversionStop>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped to disable the ADC.
 * @param  hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Verification if ADC is not already stopped on regular group to bypass    */
	/* this function if not needed.                                             */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fb71 	bl	8003424 <LL_ADC_REG_IsConversionOngoing>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d033      	beq.n	8003db0 <ADC_ConversionStop+0x80>
		/* Stop potential conversion on going on regular group */
		/* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
		if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fb31 	bl	80033b4 <LL_ADC_IsDisableOngoing>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <ADC_ConversionStop+0x32>
			/* Stop ADC group regular conversion */
			LL_ADC_REG_StopConversion(hadc->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fb4e 	bl	80033fe <LL_ADC_REG_StopConversion>
		}

		/* Wait for conversion effectively stopped */
		/* Get tick count */
		tickstart = HAL_GetTick();
 8003d62:	f7fe fab1 	bl	80022c8 <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

		while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL) {
 8003d68:	e01b      	b.n	8003da2 <ADC_ConversionStop+0x72>
			if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT) {
 8003d6a:	f7fe faad 	bl	80022c8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d914      	bls.n	8003da2 <ADC_ConversionStop+0x72>
				/* New check to avoid false timeout detection in case of preemption */
				if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <ADC_ConversionStop+0x72>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f043 0210 	orr.w	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	659a      	str	r2, [r3, #88]	@ 0x58

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

					return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e007      	b.n	8003db2 <ADC_ConversionStop+0x82>
		while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1dc      	bne.n	8003d6a <ADC_ConversionStop+0x3a>
		}

	}

	/* Return HAL status */
	return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <ADC_Enable>:
 * @note   Prerequisite condition to use this function: ADC must be disabled
 *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	__IO uint32_t wait_loop_index = 0UL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]

	/* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
	/* enabling phase not yet completed: flag ADC ready not yet set).           */
	/* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
	/* causes: ADC clock not running, ...).                                     */
	if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fadf 	bl	8003390 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d169      	bne.n	8003eac <ADC_Enable+0xf0>
		/* Check if conditions to enable the ADC are fulfilled */
		if ((hadc->Instance->CR
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
				& (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS
 8003dde:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <ADC_Enable+0xfc>)
 8003de0:	4013      	ands	r3, r2
		if ((hadc->Instance->CR
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <ADC_Enable+0x46>
						| ADC_CR_ADEN)) != 0UL) {
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Set ADC error code to ADC peripheral internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	65da      	str	r2, [r3, #92]	@ 0x5c

			return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e055      	b.n	8003eae <ADC_Enable+0xf2>
		}

		/* Enable the ADC peripheral */
		LL_ADC_Enable(hadc->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fa9c 	bl	8003344 <LL_ADC_Enable>

		if ((LL_ADC_GetCommonPathInternalCh(
 8003e0c:	482b      	ldr	r0, [pc, #172]	@ (8003ebc <ADC_Enable+0x100>)
 8003e0e:	f7ff f9ab 	bl	8003168 <LL_ADC_GetCommonPathInternalCh>
 8003e12:	4603      	mov	r3, r0
				__LL_ADC_COMMON_INSTANCE(hadc->Instance))
				& LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL) {
 8003e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
		if ((LL_ADC_GetCommonPathInternalCh(
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00f      	beq.n	8003e3c <ADC_Enable+0x80>
			/*       exceed 32 bits register capacity and handle low frequency. */

			//**** INSERING A BREAKPOINT HERE OR MODIFYING THE COUNTER
			//**** TO CAUSE A DELAY OF A FEW SECONDS GIVES BETTER RESULTS
			wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
					* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e1c:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <ADC_Enable+0x104>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	4a28      	ldr	r2, [pc, #160]	@ (8003ec4 <ADC_Enable+0x108>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	3301      	adds	r3, #1
			wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003e2c:	60bb      	str	r3, [r7, #8]
			while (wait_loop_index != 0UL) {
 8003e2e:	e002      	b.n	8003e36 <ADC_Enable+0x7a>
				wait_loop_index--;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
			while (wait_loop_index != 0UL) {
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <ADC_Enable+0x74>
			}
		}

		/* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
		/* performed automatically by hardware and flag ADC ready is not set.     */
		if (hadc->Init.LowPowerAutoPowerOff != ENABLE) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7e5b      	ldrb	r3, [r3, #25]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d033      	beq.n	8003eac <ADC_Enable+0xf0>
			/* Wait for ADC effectively enabled */
			tickstart = HAL_GetTick();
 8003e44:	f7fe fa40 	bl	80022c8 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

			while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8003e4a:	e028      	b.n	8003e9e <ADC_Enable+0xe2>
				 The workaround is to continue setting ADEN until ADRDY is becomes 1.
				 Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
				 4 ADC clock cycle duration */
				/* Note: Test of ADC enabled required due to hardware constraint to     */
				/*       not enable ADC if already enabled.                             */
				if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fa9d 	bl	8003390 <LL_ADC_IsEnabled>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <ADC_Enable+0xaa>
					LL_ADC_Enable(hadc->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fa6f 	bl	8003344 <LL_ADC_Enable>
				}

				if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT) {
 8003e66:	f7fe fa2f 	bl	80022c8 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d914      	bls.n	8003e9e <ADC_Enable+0xe2>
					/* New check to avoid false timeout detection in case of preemption */
					if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d00d      	beq.n	8003e9e <ADC_Enable+0xe2>
						/* Update ADC state machine to error */
						SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	f043 0210 	orr.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	659a      	str	r2, [r3, #88]	@ 0x58

						/* Set ADC error code to ADC peripheral internal error */
						SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	65da      	str	r2, [r3, #92]	@ 0x5c

						return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <ADC_Enable+0xf2>
			while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d1cf      	bne.n	8003e4c <ADC_Enable+0x90>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	80000017 	.word	0x80000017
 8003ebc:	40012708 	.word	0x40012708
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	053e2d63 	.word	0x053e2d63

08003ec8 <ADC_Disable>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped.
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fa6d 	bl	80033b4 <LL_ADC_IsDisableOngoing>
 8003eda:	60f8      	str	r0, [r7, #12]
			hadc->Instance);

	/* Verification if ADC is not already disabled:                             */
	/* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
	/*       disabled.                                                          */
	if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fa55 	bl	8003390 <LL_ADC_IsEnabled>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d047      	beq.n	8003f7c <ADC_Disable+0xb4>
			&& (tmp_adc_is_disable_on_going == 0UL)) {
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d144      	bne.n	8003f7c <ADC_Disable+0xb4>
		/* Check if conditions to disable the ADC are fulfilled */
		if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0305 	and.w	r3, r3, #5
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10c      	bne.n	8003f1a <ADC_Disable+0x52>
			/* Disable the ADC peripheral */
			LL_ADC_Disable(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fa30 	bl	800336a <LL_ADC_Disable>
			__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	601a      	str	r2, [r3, #0]
			return HAL_ERROR;
		}

		/* Wait for ADC effectively disabled */
		/* Get tick count */
		tickstart = HAL_GetTick();
 8003f12:	f7fe f9d9 	bl	80022c8 <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]

		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8003f18:	e029      	b.n	8003f6e <ADC_Disable+0xa6>
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65da      	str	r2, [r3, #92]	@ 0x5c
			return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e023      	b.n	8003f7e <ADC_Disable+0xb6>
			if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT) {
 8003f36:	f7fe f9c7 	bl	80022c8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d914      	bls.n	8003f6e <ADC_Disable+0xa6>
				/* New check to avoid false timeout detection in case of preemption */
				if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <ADC_Disable+0xa6>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f043 0210 	orr.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	659a      	str	r2, [r3, #88]	@ 0x58

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	65da      	str	r2, [r3, #92]	@ 0x5c

					return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e007      	b.n	8003f7e <ADC_Disable+0xb6>
		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1dc      	bne.n	8003f36 <ADC_Disable+0x6e>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <LL_ADC_SetCalibrationFactor>:
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f96:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_GetCalibrationFactor>:
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_Enable>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fda:	f023 0317 	bic.w	r3, r3, #23
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_Disable>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004000:	f023 0317 	bic.w	r3, r3, #23
 8004004:	f043 0202 	orr.w	r2, r3, #2
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_ADC_IsEnabled>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <LL_ADC_IsEnabled+0x18>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_ADC_IsEnabled+0x1a>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <LL_ADC_StartCalibration>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800404a:	f023 0317 	bic.w	r3, r3, #23
 800404e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <LL_ADC_IsCalibrationOnGoing>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004074:	d101      	bne.n	800407a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_ADCEx_Calibration_Start+0x1e>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b9      	b.n	8004218 <HAL_ADCEx_Calibration_Start+0x192>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff0b 	bl	8003ec8 <ADC_Disable>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ffab 	bl	8004016 <LL_ADC_IsEnabled>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 809d 	bne.w	8004202 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040d0:	f043 0202 	orr.w	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	f248 0303 	movw	r3, #32771	@ 0x8003
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	e02e      	b.n	800415e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff98 	bl	800403a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800410a:	e014      	b.n	8004136 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004118:	d30d      	bcc.n	8004136 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	f023 0312 	bic.w	r3, r3, #18
 8004122:	f043 0210 	orr.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e070      	b.n	8004218 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff90 	bl	8004060 <LL_ADC_IsCalibrationOnGoing>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e2      	bne.n	800410c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff2f 	bl	8003fae <LL_ADC_GetCalibrationFactor>
 8004150:	4602      	mov	r2, r0
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b07      	cmp	r3, #7
 8004162:	d9cd      	bls.n	8004100 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff29 	bl	8003fca <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff01 	bl	8003f86 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff31 	bl	8003ff0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800418e:	f7fe f89b 	bl	80022c8 <HAL_GetTick>
 8004192:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004194:	e01c      	b.n	80041d0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004196:	f7fe f897 	bl	80022c8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d915      	bls.n	80041d0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff34 	bl	8004016 <LL_ADC_IsEnabled>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e023      	b.n	8004218 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff1e 	bl	8004016 <LL_ADC_IsEnabled>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1da      	bne.n	8004196 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68d9      	ldr	r1, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	f023 0303 	bic.w	r3, r3, #3
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8004200:	e005      	b.n	800420e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800424c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4906      	ldr	r1, [pc, #24]	@ (80042b8 <__NVIC_EnableIRQ+0x34>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	e000e100 	.word	0xe000e100

080042bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db12      	blt.n	80042f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	490a      	ldr	r1, [pc, #40]	@ (8004300 <__NVIC_DisableIRQ+0x44>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	3320      	adds	r3, #32
 80042e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042e8:	f3bf 8f4f 	dsb	sy
}
 80042ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042ee:	f3bf 8f6f 	isb	sy
}
 80042f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	@ (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	@ (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
         );
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff2b 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff42 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ffb4 	bl	8004358 <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff83 	bl	8004304 <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff35 	bl	8004284 <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff43 	bl	80042bc <__NVIC_DisableIRQ>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e08e      	b.n	8004570 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_DMA_Init+0x138>)
 800445a:	429a      	cmp	r2, r3
 800445c:	d80f      	bhi.n	800447e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4b45      	ldr	r3, [pc, #276]	@ (800457c <HAL_DMA_Init+0x13c>)
 8004466:	4413      	add	r3, r2
 8004468:	4a45      	ldr	r2, [pc, #276]	@ (8004580 <HAL_DMA_Init+0x140>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	009a      	lsls	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a42      	ldr	r2, [pc, #264]	@ (8004584 <HAL_DMA_Init+0x144>)
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
 800447c:	e00e      	b.n	800449c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b40      	ldr	r3, [pc, #256]	@ (8004588 <HAL_DMA_Init+0x148>)
 8004486:	4413      	add	r3, r2
 8004488:	4a3d      	ldr	r2, [pc, #244]	@ (8004580 <HAL_DMA_Init+0x140>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a3c      	ldr	r2, [pc, #240]	@ (800458c <HAL_DMA_Init+0x14c>)
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb24 	bl	8004b3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fc:	d102      	bne.n	8004504 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004510:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800451a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_DMA_Init+0x106>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d80c      	bhi.n	8004546 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb4d 	bl	8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e008      	b.n	8004558 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40020407 	.word	0x40020407
 800457c:	bffdfff8 	.word	0xbffdfff8
 8004580:	cccccccd 	.word	0xcccccccd
 8004584:	40020000 	.word	0x40020000
 8004588:	bffdfbf8 	.word	0xbffdfbf8
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07b      	b.n	800469a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	4b3a      	ldr	r3, [pc, #232]	@ (80046a4 <HAL_DMA_DeInit+0x114>)
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d80f      	bhi.n	80045de <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b38      	ldr	r3, [pc, #224]	@ (80046a8 <HAL_DMA_DeInit+0x118>)
 80045c6:	4413      	add	r3, r2
 80045c8:	4a38      	ldr	r2, [pc, #224]	@ (80046ac <HAL_DMA_DeInit+0x11c>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	009a      	lsls	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a35      	ldr	r2, [pc, #212]	@ (80046b0 <HAL_DMA_DeInit+0x120>)
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40
 80045dc:	e00e      	b.n	80045fc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b33      	ldr	r3, [pc, #204]	@ (80046b4 <HAL_DMA_DeInit+0x124>)
 80045e6:	4413      	add	r3, r2
 80045e8:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <HAL_DMA_DeInit+0x11c>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	009a      	lsls	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <HAL_DMA_DeInit+0x128>)
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	f003 021c 	and.w	r2, r3, #28
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f202 	lsl.w	r2, r1, r2
 8004616:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa8f 	bl	8004b3c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800462e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00f      	beq.n	8004658 <HAL_DMA_DeInit+0xc8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b04      	cmp	r3, #4
 800463e:	d80b      	bhi.n	8004658 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fac3 	bl	8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004656:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40020407 	.word	0x40020407
 80046a8:	bffdfff8 	.word	0xbffdfff8
 80046ac:	cccccccd 	.word	0xcccccccd
 80046b0:	40020000 	.word	0x40020000
 80046b4:	bffdfbf8 	.word	0xbffdfbf8
 80046b8:	40020400 	.word	0x40020400

080046bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Start_IT+0x20>
 80046d8:	2302      	movs	r3, #2
 80046da:	e069      	b.n	80047b0 <HAL_DMA_Start_IT+0xf4>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d155      	bne.n	800479c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f9d3 	bl	8004ac0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 020e 	orr.w	r2, r2, #14
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e00f      	b.n	8004754 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 020a 	orr.w	r2, r2, #10
 8004752:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004770:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004788:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e008      	b.n	80047ae <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e04f      	b.n	800486a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d008      	beq.n	80047e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2204      	movs	r2, #4
 80047da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e040      	b.n	800486a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 020e 	bic.w	r2, r2, #14
 80047f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	f003 021c 	and.w	r2, r3, #28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004834:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800484c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004856:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d005      	beq.n	8004898 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2204      	movs	r2, #4
 8004890:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
 8004896:	e047      	b.n	8004928 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 020e 	bic.w	r2, r2, #14
 80048a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	f003 021c 	and.w	r2, r3, #28
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f202 	lsl.w	r2, r1, r2
 80048da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00c      	beq.n	8004908 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004906:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
    }
  }
  return status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004950:	f003 031c 	and.w	r3, r3, #28
 8004954:	2204      	movs	r2, #4
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d027      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x7c>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d022      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d107      	bne.n	8004988 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0204 	bic.w	r2, r2, #4
 8004986:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	f003 021c 	and.w	r2, r3, #28
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2104      	movs	r1, #4
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8081 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80049ae:	e07b      	b.n	8004aa8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	f003 031c 	and.w	r3, r3, #28
 80049b8:	2202      	movs	r2, #2
 80049ba:	409a      	lsls	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x10c>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d038      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 020a 	bic.w	r2, r2, #10
 80049ea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab4 <HAL_DMA_IRQHandler+0x180>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d909      	bls.n	8004a14 <HAL_DMA_IRQHandler+0xe0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a04:	f003 031c 	and.w	r3, r3, #28
 8004a08:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <HAL_DMA_IRQHandler+0x184>)
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	6053      	str	r3, [r2, #4]
 8004a12:	e008      	b.n	8004a26 <HAL_DMA_IRQHandler+0xf2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a18:	f003 031c 	and.w	r3, r3, #28
 8004a1c:	4a27      	ldr	r2, [pc, #156]	@ (8004abc <HAL_DMA_IRQHandler+0x188>)
 8004a1e:	2102      	movs	r1, #2
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d038      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a3e:	e033      	b.n	8004aa8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f003 031c 	and.w	r3, r3, #28
 8004a48:	2208      	movs	r2, #8
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02a      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x176>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d025      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 020e 	bic.w	r2, r2, #14
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 021c 	and.w	r2, r3, #28
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
}
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40020080 	.word	0x40020080
 8004ab8:	40020400 	.word	0x40020400
 8004abc:	40020000 	.word	0x40020000

08004ac0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ad6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f003 021c 	and.w	r2, r3, #28
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f202 	lsl.w	r2, r1, r2
 8004afc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d108      	bne.n	8004b20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b1e:	e007      	b.n	8004b30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
	...

08004b3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d813      	bhi.n	8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b5c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3b08      	subs	r3, #8
 8004b6c:	4a14      	ldr	r2, [pc, #80]	@ (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e011      	b.n	8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	009a      	lsls	r2, r3, #2
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004b82:	4413      	add	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3b08      	subs	r3, #8
 8004b90:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	3307      	adds	r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004ba0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40020407 	.word	0x40020407
 8004bc0:	cccccccd 	.word	0xcccccccd
 8004bc4:	4002081c 	.word	0x4002081c
 8004bc8:	40020880 	.word	0x40020880

08004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a08      	ldr	r2, [pc, #32]	@ (8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	1000823f 	.word	0x1000823f
 8004c10:	40020940 	.word	0x40020940

08004c14 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c22:	4b1c      	ldr	r3, [pc, #112]	@ (8004c94 <HAL_FLASH_Program+0x80>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_FLASH_Program+0x1a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e02d      	b.n	8004c8a <HAL_FLASH_Program+0x76>
 8004c2e:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_FLASH_Program+0x80>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c34:	4b17      	ldr	r3, [pc, #92]	@ (8004c94 <HAL_FLASH_Program+0x80>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c3e:	f000 f869 	bl	8004d14 <FLASH_WaitForLastOperation>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11a      	bne.n	8004c82 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d105      	bne.n	8004c5e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f000 f8be 	bl	8004dd8 <FLASH_Program_DoubleWord>
 8004c5c:	e004      	b.n	8004c68 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	f000 f8de 	bl	8004e24 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c6c:	f000 f852 	bl	8004d14 <FLASH_WaitForLastOperation>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004c74:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <HAL_FLASH_Program+0x84>)
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	4906      	ldr	r1, [pc, #24]	@ (8004c98 <HAL_FLASH_Program+0x84>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c82:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <HAL_FLASH_Program+0x80>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000444 	.word	0x20000444
 8004c98:	58004000 	.word	0x58004000

08004c9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_FLASH_Unlock+0x38>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da0b      	bge.n	8004cc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004cae:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_FLASH_Unlock+0x38>)
 8004cb0:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <HAL_FLASH_Unlock+0x3c>)
 8004cb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_FLASH_Unlock+0x38>)
 8004cb6:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_FLASH_Unlock+0x40>)
 8004cb8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_FLASH_Unlock+0x38>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da01      	bge.n	8004cc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	58004000 	.word	0x58004000
 8004cd8:	45670123 	.word	0x45670123
 8004cdc:	cdef89ab 	.word	0xcdef89ab

08004ce0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004cea:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_FLASH_Lock+0x30>)
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4a08      	ldr	r2, [pc, #32]	@ (8004d10 <HAL_FLASH_Lock+0x30>)
 8004cf0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cf4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_FLASH_Lock+0x30>)
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db01      	blt.n	8004d02 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004d02:	79fb      	ldrb	r3, [r7, #7]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	58004000 	.word	0x58004000

08004d14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004d1c:	f7fd fad4 	bl	80022c8 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d22:	e009      	b.n	8004d38 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d24:	f7fd fad0 	bl	80022c8 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d801      	bhi.n	8004d38 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e046      	b.n	8004dc6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d38:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d0ee      	beq.n	8004d24 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004d62:	4013      	ands	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d307      	bcc.n	8004d7e <FLASH_WaitForLastOperation+0x6a>
 8004d6e:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d78:	4915      	ldr	r1, [pc, #84]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	618b      	str	r3, [r1, #24]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <FLASH_WaitForLastOperation+0x7e>
 8004d88:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d90:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004d98:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <FLASH_WaitForLastOperation+0xc0>)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e011      	b.n	8004dc6 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004da2:	f7fd fa91 	bl	80022c8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d801      	bhi.n	8004db6 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e007      	b.n	8004dc6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <FLASH_WaitForLastOperation+0xbc>)
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dc2:	d0ee      	beq.n	8004da2 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58004000 	.word	0x58004000
 8004dd4:	20000444 	.word	0x20000444

08004dd8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <FLASH_Program_DoubleWord+0x48>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <FLASH_Program_DoubleWord+0x48>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004df6:	f3bf 8f6f 	isb	sy
}
 8004dfa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	000a      	movs	r2, r1
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	3104      	adds	r1, #4
 8004e10:	4613      	mov	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	58004000 	.word	0x58004000

08004e24 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e2e:	2340      	movs	r3, #64	@ 0x40
 8004e30:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e3a:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <FLASH_Program_Fast+0x78>)
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <FLASH_Program_Fast+0x78>)
 8004e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e46:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e50:	b672      	cpsid	i
}
 8004e52:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3304      	adds	r3, #4
 8004e66:	617b      	str	r3, [r7, #20]
    row_index--;
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ef      	bne.n	8004e54 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004e74:	bf00      	nop
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <FLASH_Program_Fast+0x78>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e82:	d0f8      	beq.n	8004e76 <FLASH_Program_Fast+0x52>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004e90:	bf00      	nop
 8004e92:	3724      	adds	r7, #36	@ 0x24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	58004000 	.word	0x58004000

08004ea0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004eaa:	4b28      	ldr	r3, [pc, #160]	@ (8004f4c <HAL_FLASHEx_Erase+0xac>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_FLASHEx_Erase+0x16>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e046      	b.n	8004f44 <HAL_FLASHEx_Erase+0xa4>
 8004eb6:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <HAL_FLASHEx_Erase+0xac>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ebc:	4b23      	ldr	r3, [pc, #140]	@ (8004f4c <HAL_FLASHEx_Erase+0xac>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ec2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ec6:	f7ff ff25 	bl	8004d14 <FLASH_WaitForLastOperation>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d133      	bne.n	8004f3c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d108      	bne.n	8004eee <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004edc:	f000 f838 	bl	8004f50 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ee4:	f7ff ff16 	bl	8004d14 <FLASH_WaitForLastOperation>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e024      	b.n	8004f38 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ef4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	e012      	b.n	8004f24 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004efe:	68b8      	ldr	r0, [r7, #8]
 8004f00:	f000 f836 	bl	8004f70 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f08:	f7ff ff04 	bl	8004d14 <FLASH_WaitForLastOperation>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	601a      	str	r2, [r3, #0]
          break;
 8004f1c:	e00a      	b.n	8004f34 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3e4      	bcc.n	8004efe <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f34:	f000 f878 	bl	8005028 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f38:	f000 f832 	bl	8004fa0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f3c:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <HAL_FLASHEx_Erase+0xac>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]

  return status;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000444 	.word	0x20000444

08004f50 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <FLASH_MassErase+0x1c>)
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	4a04      	ldr	r2, [pc, #16]	@ (8004f6c <FLASH_MassErase+0x1c>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	6153      	str	r3, [r2, #20]
#endif
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	58004000 	.word	0x58004000

08004f70 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004f78:	4b08      	ldr	r3, [pc, #32]	@ (8004f9c <FLASH_PageErase+0x2c>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <FLASH_PageErase+0x2c>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	6153      	str	r3, [r2, #20]
#endif
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	58004000 	.word	0x58004000

08004fa0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d117      	bne.n	8004fe0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fb6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fc2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fd2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fd4:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a12      	ldr	r2, [pc, #72]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fde:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004fe0:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d117      	bne.n	800501c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fec:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8004ffe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b07      	ldr	r3, [pc, #28]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a06      	ldr	r2, [pc, #24]	@ (8005024 <FLASH_FlushCaches+0x84>)
 800500a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800500e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005010:	4b04      	ldr	r3, [pc, #16]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a03      	ldr	r2, [pc, #12]	@ (8005024 <FLASH_FlushCaches+0x84>)
 8005016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800501a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	58004000 	.word	0x58004000

08005028 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <FLASH_AcknowledgePageErase+0x1c>)
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <FLASH_AcknowledgePageErase+0x1c>)
 8005032:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005036:	f023 0302 	bic.w	r3, r3, #2
 800503a:	6153      	str	r3, [r2, #20]
#endif
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	58004000 	.word	0x58004000

08005048 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005056:	e140      	b.n	80052da <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8132 	beq.w	80052d4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d005      	beq.n	8005088 <HAL_GPIO_Init+0x40>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d130      	bne.n	80050ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	2203      	movs	r2, #3
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050be:	2201      	movs	r2, #1
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 0201 	and.w	r2, r3, #1
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d017      	beq.n	8005126 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	2203      	movs	r2, #3
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d123      	bne.n	800517a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	08da      	lsrs	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3208      	adds	r2, #8
 800513a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0203 	and.w	r2, r3, #3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 808c 	beq.w	80052d4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80051bc:	4a4e      	ldr	r2, [pc, #312]	@ (80052f8 <HAL_GPIO_Init+0x2b0>)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	089b      	lsrs	r3, r3, #2
 80051c2:	3302      	adds	r3, #2
 80051c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	2207      	movs	r2, #7
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4013      	ands	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051e6:	d00d      	beq.n	8005204 <HAL_GPIO_Init+0x1bc>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a44      	ldr	r2, [pc, #272]	@ (80052fc <HAL_GPIO_Init+0x2b4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <HAL_GPIO_Init+0x1b8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a43      	ldr	r2, [pc, #268]	@ (8005300 <HAL_GPIO_Init+0x2b8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <HAL_GPIO_Init+0x1b4>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e004      	b.n	8005206 <HAL_GPIO_Init+0x1be>
 80051fc:	2307      	movs	r3, #7
 80051fe:	e002      	b.n	8005206 <HAL_GPIO_Init+0x1be>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <HAL_GPIO_Init+0x1be>
 8005204:	2300      	movs	r3, #0
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	f002 0203 	and.w	r2, r2, #3
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	4093      	lsls	r3, r2
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005216:	4938      	ldr	r1, [pc, #224]	@ (80052f8 <HAL_GPIO_Init+0x2b0>)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	3302      	adds	r3, #2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005224:	4b37      	ldr	r3, [pc, #220]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	43db      	mvns	r3, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4013      	ands	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005248:	4a2e      	ldr	r2, [pc, #184]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800524e:	4b2d      	ldr	r3, [pc, #180]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43db      	mvns	r3, r3
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005272:	4a24      	ldr	r2, [pc, #144]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005278:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	43db      	mvns	r3, r3
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800529e:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80052cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005304 <HAL_GPIO_Init+0x2bc>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	3301      	adds	r3, #1
 80052d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f47f aeb7 	bne.w	8005058 <HAL_GPIO_Init+0x10>
  }
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	48000400 	.word	0x48000400
 8005300:	48000800 	.word	0x48000800
 8005304:	58000800 	.word	0x58000800

08005308 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005316:	e0af      	b.n	8005478 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005318:	2201      	movs	r2, #1
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80a2 	beq.w	8005472 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800532e:	4a59      	ldr	r2, [pc, #356]	@ (8005494 <HAL_GPIO_DeInit+0x18c>)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	2207      	movs	r2, #7
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005356:	d00d      	beq.n	8005374 <HAL_GPIO_DeInit+0x6c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a4f      	ldr	r2, [pc, #316]	@ (8005498 <HAL_GPIO_DeInit+0x190>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <HAL_GPIO_DeInit+0x68>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a4e      	ldr	r2, [pc, #312]	@ (800549c <HAL_GPIO_DeInit+0x194>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <HAL_GPIO_DeInit+0x64>
 8005368:	2302      	movs	r3, #2
 800536a:	e004      	b.n	8005376 <HAL_GPIO_DeInit+0x6e>
 800536c:	2307      	movs	r3, #7
 800536e:	e002      	b.n	8005376 <HAL_GPIO_DeInit+0x6e>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_GPIO_DeInit+0x6e>
 8005374:	2300      	movs	r3, #0
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	f002 0203 	and.w	r2, r2, #3
 800537c:	0092      	lsls	r2, r2, #2
 800537e:	4093      	lsls	r3, r2
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	429a      	cmp	r2, r3
 8005384:	d136      	bne.n	80053f4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005386:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 8005388:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	43db      	mvns	r3, r3
 8005390:	4943      	ldr	r1, [pc, #268]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 8005392:	4013      	ands	r3, r2
 8005394:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005398:	4b41      	ldr	r3, [pc, #260]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 800539a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	493f      	ldr	r1, [pc, #252]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80053aa:	4b3d      	ldr	r3, [pc, #244]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	493b      	ldr	r1, [pc, #236]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80053b8:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	43db      	mvns	r3, r3
 80053c0:	4937      	ldr	r1, [pc, #220]	@ (80054a0 <HAL_GPIO_DeInit+0x198>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	2207      	movs	r2, #7
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80053d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <HAL_GPIO_DeInit+0x18c>)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	3302      	adds	r3, #2
 80053de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	43da      	mvns	r2, r3
 80053e6:	482b      	ldr	r0, [pc, #172]	@ (8005494 <HAL_GPIO_DeInit+0x18c>)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	400a      	ands	r2, r1
 80053ee:	3302      	adds	r3, #2
 80053f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2103      	movs	r1, #3
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	08da      	lsrs	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3208      	adds	r2, #8
 8005410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	220f      	movs	r2, #15
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	08d2      	lsrs	r2, r2, #3
 8005428:	4019      	ands	r1, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3208      	adds	r2, #8
 800542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2103      	movs	r1, #3
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	2101      	movs	r1, #1
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	2103      	movs	r1, #3
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	401a      	ands	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f af49 	bne.w	8005318 <HAL_GPIO_DeInit+0x10>
  }
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	48000400 	.word	0x48000400
 800549c:	48000800 	.word	0x48000800
 80054a0:	58000800 	.word	0x58000800

080054a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
 80054b0:	4613      	mov	r3, r2
 80054b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054b4:	787b      	ldrb	r3, [r7, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054c0:	e002      	b.n	80054c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054c2:	887a      	ldrh	r2, [r7, #2]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054e4:	887a      	ldrh	r2, [r7, #2]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4013      	ands	r3, r2
 80054ea:	041a      	lsls	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	43d9      	mvns	r1, r3
 80054f0:	887b      	ldrh	r3, [r7, #2]
 80054f2:	400b      	ands	r3, r1
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e081      	b.n	800561a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fa4e 	bl	80019cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	@ 0x24
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005554:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005564:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	e006      	b.n	800558c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800558a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d104      	bne.n	800559e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800559c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	460b      	mov	r3, r1
 8005632:	817b      	strh	r3, [r7, #10]
 8005634:	4613      	mov	r3, r2
 8005636:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b20      	cmp	r3, #32
 8005642:	f040 80da 	bne.w	80057fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_I2C_Master_Transmit+0x30>
 8005650:	2302      	movs	r3, #2
 8005652:	e0d3      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800565c:	f7fc fe34 	bl	80022c8 <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2319      	movs	r3, #25
 8005668:	2201      	movs	r2, #1
 800566a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fc55 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e0be      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2210      	movs	r2, #16
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	893a      	ldrh	r2, [r7, #8]
 800569e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2bff      	cmp	r3, #255	@ 0xff
 80056ae:	d90e      	bls.n	80056ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	22ff      	movs	r2, #255	@ 0xff
 80056b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	8979      	ldrh	r1, [r7, #10]
 80056be:	4b51      	ldr	r3, [pc, #324]	@ (8005804 <HAL_I2C_Master_Transmit+0x1e0>)
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fe40 	bl	800634c <I2C_TransferConfig>
 80056cc:	e06c      	b.n	80057a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	8979      	ldrh	r1, [r7, #10]
 80056e0:	4b48      	ldr	r3, [pc, #288]	@ (8005804 <HAL_I2C_Master_Transmit+0x1e0>)
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fe2f 	bl	800634c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80056ee:	e05b      	b.n	80057a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	6a39      	ldr	r1, [r7, #32]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fc52 	bl	8005f9e <I2C_WaitOnTXISFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e07b      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d034      	beq.n	80057a8 <HAL_I2C_Master_Transmit+0x184>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d130      	bne.n	80057a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	@ 0x80
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fbe4 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e04d      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2bff      	cmp	r3, #255	@ 0xff
 8005768:	d90e      	bls.n	8005788 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22ff      	movs	r2, #255	@ 0xff
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005774:	b2da      	uxtb	r2, r3
 8005776:	8979      	ldrh	r1, [r7, #10]
 8005778:	2300      	movs	r3, #0
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fde3 	bl	800634c <I2C_TransferConfig>
 8005786:	e00f      	b.n	80057a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	b2da      	uxtb	r2, r3
 8005798:	8979      	ldrh	r1, [r7, #10]
 800579a:	2300      	movs	r3, #0
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fdd2 	bl	800634c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d19e      	bne.n	80056f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fc31 	bl	800601e <I2C_WaitOnSTOPFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01a      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2220      	movs	r2, #32
 80057cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <HAL_I2C_Master_Transmit+0x1e4>)
 80057da:	400b      	ands	r3, r1
 80057dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	80002000 	.word	0x80002000
 8005808:	fe00e800 	.word	0xfe00e800

0800580c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	461a      	mov	r2, r3
 8005818:	460b      	mov	r3, r1
 800581a:	817b      	strh	r3, [r7, #10]
 800581c:	4613      	mov	r3, r2
 800581e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b20      	cmp	r3, #32
 800582a:	f040 80db 	bne.w	80059e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_I2C_Master_Receive+0x30>
 8005838:	2302      	movs	r3, #2
 800583a:	e0d4      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005844:	f7fc fd40 	bl	80022c8 <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2319      	movs	r3, #25
 8005850:	2201      	movs	r2, #1
 8005852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb61 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0bf      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2222      	movs	r2, #34	@ 0x22
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2210      	movs	r2, #16
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	893a      	ldrh	r2, [r7, #8]
 8005886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2bff      	cmp	r3, #255	@ 0xff
 8005896:	d90e      	bls.n	80058b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	22ff      	movs	r2, #255	@ 0xff
 800589c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	8979      	ldrh	r1, [r7, #10]
 80058a6:	4b52      	ldr	r3, [pc, #328]	@ (80059f0 <HAL_I2C_Master_Receive+0x1e4>)
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fd4c 	bl	800634c <I2C_TransferConfig>
 80058b4:	e06d      	b.n	8005992 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	8979      	ldrh	r1, [r7, #10]
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <HAL_I2C_Master_Receive+0x1e4>)
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fd3b 	bl	800634c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80058d6:	e05c      	b.n	8005992 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	6a39      	ldr	r1, [r7, #32]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fbdb 	bl	8006098 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e07c      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d034      	beq.n	8005992 <HAL_I2C_Master_Receive+0x186>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d130      	bne.n	8005992 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2200      	movs	r2, #0
 8005938:	2180      	movs	r1, #128	@ 0x80
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 faef 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e04d      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2bff      	cmp	r3, #255	@ 0xff
 8005952:	d90e      	bls.n	8005972 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	22ff      	movs	r2, #255	@ 0xff
 8005958:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595e:	b2da      	uxtb	r2, r3
 8005960:	8979      	ldrh	r1, [r7, #10]
 8005962:	2300      	movs	r3, #0
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fcee 	bl	800634c <I2C_TransferConfig>
 8005970:	e00f      	b.n	8005992 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	b2da      	uxtb	r2, r3
 8005982:	8979      	ldrh	r1, [r7, #10]
 8005984:	2300      	movs	r3, #0
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fcdd 	bl	800634c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d19d      	bne.n	80058d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	6a39      	ldr	r1, [r7, #32]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fb3c 	bl	800601e <I2C_WaitOnSTOPFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e01a      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2220      	movs	r2, #32
 80059b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6859      	ldr	r1, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <HAL_I2C_Master_Receive+0x1e8>)
 80059c4:	400b      	ands	r3, r1
 80059c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	80002400 	.word	0x80002400
 80059f4:	fe00e800 	.word	0xfe00e800

080059f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	461a      	mov	r2, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	817b      	strh	r3, [r7, #10]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	813b      	strh	r3, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	f040 80f9 	bne.w	8005c12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_I2C_Mem_Write+0x34>
 8005a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0ed      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_I2C_Mem_Write+0x4e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0e6      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a4e:	f7fc fc3b 	bl	80022c8 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2319      	movs	r3, #25
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa5c 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0d1      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2221      	movs	r2, #33	@ 0x21
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2240      	movs	r2, #64	@ 0x40
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a98:	88f8      	ldrh	r0, [r7, #6]
 8005a9a:	893a      	ldrh	r2, [r7, #8]
 8005a9c:	8979      	ldrh	r1, [r7, #10]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f9c1 	bl	8005e30 <I2C_RequestMemoryWrite>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0a9      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2bff      	cmp	r3, #255	@ 0xff
 8005ac8:	d90e      	bls.n	8005ae8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	22ff      	movs	r2, #255	@ 0xff
 8005ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	8979      	ldrh	r1, [r7, #10]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fc33 	bl	800634c <I2C_TransferConfig>
 8005ae6:	e00f      	b.n	8005b08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	8979      	ldrh	r1, [r7, #10]
 8005afa:	2300      	movs	r3, #0
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fc22 	bl	800634c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fa46 	bl	8005f9e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e07b      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d034      	beq.n	8005bc0 <HAL_I2C_Mem_Write+0x1c8>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d130      	bne.n	8005bc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	2200      	movs	r2, #0
 8005b66:	2180      	movs	r1, #128	@ 0x80
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f9d8 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e04d      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2bff      	cmp	r3, #255	@ 0xff
 8005b80:	d90e      	bls.n	8005ba0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	22ff      	movs	r2, #255	@ 0xff
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	8979      	ldrh	r1, [r7, #10]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fbd7 	bl	800634c <I2C_TransferConfig>
 8005b9e:	e00f      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	8979      	ldrh	r1, [r7, #10]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fbc6 	bl	800634c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d19e      	bne.n	8005b08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fa25 	bl	800601e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e01a      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2220      	movs	r2, #32
 8005be4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <HAL_I2C_Mem_Write+0x224>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  }
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	fe00e800 	.word	0xfe00e800

08005c20 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	f040 80f1 	bne.w	8005e24 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c50:	d101      	bne.n	8005c56 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
 8005c54:	e0e7      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_I2C_IsDeviceReady+0x44>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0e0      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_I2C_IsDeviceReady+0x72>
 8005c82:	897b      	ldrh	r3, [r7, #10]
 8005c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c90:	e004      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x7c>
 8005c92:	897b      	ldrh	r3, [r7, #10]
 8005c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c98:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fc fb11 	bl	80022c8 <HAL_GetTick>
 8005ca6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b10      	cmp	r3, #16
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005cd4:	e034      	b.n	8005d40 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cdc:	d01a      	beq.n	8005d14 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fc faf3 	bl	80022c8 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <HAL_I2C_IsDeviceReady+0xd4>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10f      	bne.n	8005d14 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e088      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_I2C_IsDeviceReady+0x12c>
 8005d46:	7fbb      	ldrb	r3, [r7, #30]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0c4      	beq.n	8005cd6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d01a      	beq.n	8005d90 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	2120      	movs	r1, #32
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f8da 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e058      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e04a      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2120      	movs	r1, #32
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f8bf 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e03d      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2210      	movs	r2, #16
 8005db0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2220      	movs	r2, #32
 8005db8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d118      	bne.n	8005df4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2120      	movs	r1, #32
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f89e 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e01c      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2220      	movs	r2, #32
 8005df2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3301      	adds	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	f63f af3b 	bhi.w	8005c7a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	817b      	strh	r3, [r7, #10]
 8005e42:	460b      	mov	r3, r1
 8005e44:	813b      	strh	r3, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	8979      	ldrh	r1, [r7, #10]
 8005e50:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <I2C_RequestMemoryWrite+0xa4>)
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fa77 	bl	800634c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f89b 	bl	8005f9e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e02c      	b.n	8005ecc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d105      	bne.n	8005e84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e78:	893b      	ldrh	r3, [r7, #8]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e82:	e015      	b.n	8005eb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e84:	893b      	ldrh	r3, [r7, #8]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	69b9      	ldr	r1, [r7, #24]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f881 	bl	8005f9e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e012      	b.n	8005ecc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ea6:	893b      	ldrh	r3, [r7, #8]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2180      	movs	r1, #128	@ 0x80
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f82f 	bl	8005f1e <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	80002000 	.word	0x80002000

08005ed8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d103      	bne.n	8005ef6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d007      	beq.n	8005f14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	619a      	str	r2, [r3, #24]
  }
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f2e:	e022      	b.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f36:	d01e      	beq.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f38:	f7fc f9c6 	bl	80022c8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d113      	bne.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e00f      	b.n	8005f96 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d0cd      	beq.n	8005f30 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005faa:	e02c      	b.n	8006006 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8eb 	bl	800618c <I2C_IsErrorOccurred>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e02a      	b.n	8006016 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fc6:	d01e      	beq.n	8006006 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc8:	f7fc f97e 	bl	80022c8 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d113      	bne.n	8006006 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e007      	b.n	8006016 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d1cb      	bne.n	8005fac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800602a:	e028      	b.n	800607e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f8ab 	bl	800618c <I2C_IsErrorOccurred>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e026      	b.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fc f942 	bl	80022c8 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e007      	b.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b20      	cmp	r3, #32
 800608a:	d1cf      	bne.n	800602c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a4:	e064      	b.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f86e 	bl	800618c <I2C_IsErrorOccurred>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e062      	b.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d138      	bne.n	800613a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d105      	bne.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e04e      	b.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d107      	bne.n	8006100 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2210      	movs	r2, #16
 80060f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2204      	movs	r2, #4
 80060fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80060fe:	e002      	b.n	8006106 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2220      	movs	r2, #32
 800610c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6859      	ldr	r1, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800611a:	400b      	ands	r3, r1
 800611c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e022      	b.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fc f8c5 	bl	80022c8 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e007      	b.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d193      	bne.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	fe00e800 	.word	0xfe00e800

0800618c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	@ 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d068      	beq.n	800628a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2210      	movs	r2, #16
 80061be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061c0:	e049      	b.n	8006256 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c8:	d045      	beq.n	8006256 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061ca:	f7fc f87d 	bl	80022c8 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d302      	bcc.n	80061e0 <I2C_IsErrorOccurred+0x54>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d13a      	bne.n	8006256 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006202:	d121      	bne.n	8006248 <I2C_IsErrorOccurred+0xbc>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800620a:	d01d      	beq.n	8006248 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	2b20      	cmp	r3, #32
 8006210:	d01a      	beq.n	8006248 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006220:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006222:	f7fc f851 	bl	80022c8 <HAL_GetTick>
 8006226:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006228:	e00e      	b.n	8006248 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800622a:	f7fc f84d 	bl	80022c8 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b19      	cmp	r3, #25
 8006236:	d907      	bls.n	8006248 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f043 0320 	orr.w	r3, r3, #32
 800623e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006246:	e006      	b.n	8006256 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d1e9      	bne.n	800622a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d003      	beq.n	800626c <I2C_IsErrorOccurred+0xe0>
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0aa      	beq.n	80061c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2220      	movs	r2, #32
 800627a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	f043 0304 	orr.w	r3, r3, #4
 8006282:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f043 0308 	orr.w	r3, r3, #8
 80062c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01c      	beq.n	800633a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff fde9 	bl	8005ed8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <I2C_IsErrorOccurred+0x1bc>)
 8006312:	400b      	ands	r3, r1
 8006314:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800633a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800633e:	4618      	mov	r0, r3
 8006340:	3728      	adds	r7, #40	@ 0x28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	fe00e800 	.word	0xfe00e800

0800634c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	4613      	mov	r3, r2
 800635c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800635e:	897b      	ldrh	r3, [r7, #10]
 8006360:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006364:	7a7b      	ldrb	r3, [r7, #9]
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800636c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	4313      	orrs	r3, r2
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800637a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	0d5b      	lsrs	r3, r3, #21
 8006386:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800638a:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <I2C_TransferConfig+0x5c>)
 800638c:	430b      	orrs	r3, r1
 800638e:	43db      	mvns	r3, r3
 8006390:	ea02 0103 	and.w	r1, r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	03ff63ff 	.word	0x03ff63ff

080063ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d138      	bne.n	8006434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e032      	b.n	8006436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	@ 0x24
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b20      	cmp	r3, #32
 8006454:	d139      	bne.n	80064ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006460:	2302      	movs	r3, #2
 8006462:	e033      	b.n	80064cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	@ 0x24
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006492:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064dc:	4b04      	ldr	r3, [pc, #16]	@ (80064f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a03      	ldr	r2, [pc, #12]	@ (80064f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80064e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	58000400 	.word	0x58000400

080064f4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10c      	bne.n	8006520 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800650e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006512:	d10d      	bne.n	8006530 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006514:	f000 f83c 	bl	8006590 <HAL_PWREx_DisableLowPowerRunMode>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800651e:	e015      	b.n	800654c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006520:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800652c:	f000 f822 	bl	8006574 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	4a08      	ldr	r2, [pc, #32]	@ (8006558 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006536:	f023 0304 	bic.w	r3, r3, #4
 800653a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006542:	bf30      	wfi
 8006544:	e002      	b.n	800654c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006546:	bf40      	sev
    __WFE();
 8006548:	bf20      	wfe
    __WFE();
 800654a:	bf20      	wfe
  }
}
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	58000400 	.word	0x58000400
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006560:	4b03      	ldr	r3, [pc, #12]	@ (8006570 <HAL_PWREx_GetVoltageRange+0x14>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	58000400 	.word	0x58000400

08006574 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006578:	4b04      	ldr	r3, [pc, #16]	@ (800658c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a03      	ldr	r2, [pc, #12]	@ (800658c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800657e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006582:	6013      	str	r3, [r2, #0]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	58000400 	.word	0x58000400

08006590 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006596:	4b16      	ldr	r3, [pc, #88]	@ (80065f0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a15      	ldr	r2, [pc, #84]	@ (80065f0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800659c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065a0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80065a2:	4b14      	ldr	r3, [pc, #80]	@ (80065f4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2232      	movs	r2, #50	@ 0x32
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	4a12      	ldr	r2, [pc, #72]	@ (80065f8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	0c9b      	lsrs	r3, r3, #18
 80065b4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80065b6:	e002      	b.n	80065be <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80065be:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ca:	d102      	bne.n	80065d2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f2      	bne.n	80065b8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80065d2:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065de:	d101      	bne.n	80065e4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e000      	b.n	80065e6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	58000400 	.word	0x58000400
 80065f4:	20000000 	.word	0x20000000
 80065f8:	431bde83 	.word	0x431bde83

080065fc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	4a0e      	ldr	r2, [pc, #56]	@ (8006648 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800661c:	f043 0304 	orr.w	r3, r3, #4
 8006620:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006628:	bf30      	wfi
 800662a:	e002      	b.n	8006632 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800662c:	bf40      	sev
    __WFE();
 800662e:	bf20      	wfe
    __WFE();
 8006630:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006632:	4b06      	ldr	r3, [pc, #24]	@ (800664c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	4a05      	ldr	r2, [pc, #20]	@ (800664c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	6113      	str	r3, [r2, #16]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	58000400 	.word	0x58000400
 800664c:	e000ed00 	.word	0xe000ed00

08006650 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006654:	4b06      	ldr	r3, [pc, #24]	@ (8006670 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006660:	d101      	bne.n	8006666 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr
 8006670:	58000400 	.word	0x58000400

08006674 <LL_RCC_HSE_EnableTcxo>:
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006686:	6013      	str	r3, [r2, #0]
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <LL_RCC_HSE_DisableTcxo>:
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800669e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066be:	d101      	bne.n	80066c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <LL_RCC_HSE_Enable>:
{
 80066ce:	b480      	push	{r7}
 80066d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80066d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e0:	6013      	str	r3, [r2, #0]
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <LL_RCC_HSE_Disable>:
{
 80066ea:	b480      	push	{r7}
 80066ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <LL_RCC_HSE_IsReady>:
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006718:	d101      	bne.n	800671e <LL_RCC_HSE_IsReady+0x18>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <LL_RCC_HSE_IsReady+0x1a>
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <LL_RCC_HSI_Enable>:
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <LL_RCC_HSI_Disable>:
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006752:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006756:	6013      	str	r3, [r2, #0]
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <LL_RCC_HSI_IsReady>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006772:	d101      	bne.n	8006778 <LL_RCC_HSI_IsReady+0x18>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <LL_RCC_HSI_IsReady+0x1a>
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <LL_RCC_LSE_IsReady>:
{
 80067aa:	b480      	push	{r7}
 80067ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d101      	bne.n	80067c2 <LL_RCC_LSE_IsReady+0x18>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <LL_RCC_LSE_IsReady+0x1a>
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <LL_RCC_LSI_Enable>:
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80067d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <LL_RCC_LSI_Disable>:
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80067f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <LL_RCC_LSI_IsReady>:
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	d101      	bne.n	8006824 <LL_RCC_LSI_IsReady+0x18>
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <LL_RCC_LSI_IsReady+0x1a>
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <LL_RCC_MSI_Enable>:
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6013      	str	r3, [r2, #0]
}
 8006842:	bf00      	nop
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <LL_RCC_MSI_Disable>:
{
 800684a:	b480      	push	{r7}
 800684c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	6013      	str	r3, [r2, #0]
}
 800685e:	bf00      	nop
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <LL_RCC_MSI_IsReady>:
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b02      	cmp	r3, #2
 8006876:	d101      	bne.n	800687c <LL_RCC_MSI_IsReady+0x16>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <LL_RCC_MSI_IsReady+0x18>
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b08      	cmp	r3, #8
 8006896:	d101      	bne.n	800689c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <LL_RCC_MSI_GetRange>:
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80068aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80068c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80068dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068ee:	4313      	orrs	r3, r2
 80068f0:	604b      	str	r3, [r1, #4]
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <LL_RCC_SetSysClkSource>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 0203 	bic.w	r2, r3, #3
 800690e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4313      	orrs	r3, r2
 8006916:	608b      	str	r3, [r1, #8]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <LL_RCC_GetSysClkSource>:
{
 8006922:	b480      	push	{r7}
 8006924:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 030c 	and.w	r3, r3, #12
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <LL_RCC_SetAHBPrescaler>:
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800694a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4313      	orrs	r3, r2
 8006952:	608b      	str	r3, [r1, #8]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr

0800695e <LL_RCC_SetAHB3Prescaler>:
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800696a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800696e:	f023 020f 	bic.w	r2, r3, #15
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <LL_RCC_SetAPB1Prescaler>:
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800699c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	608b      	str	r3, [r1, #8]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <LL_RCC_SetAPB2Prescaler>:
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80069b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	608b      	str	r3, [r1, #8]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <LL_RCC_GetAHBPrescaler>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <LL_RCC_GetAHB3Prescaler>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <LL_RCC_GetAPB1Prescaler>:
{
 8006a06:	b480      	push	{r7}
 8006a08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <LL_RCC_GetAPB2Prescaler>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a60:	6013      	str	r3, [r2, #0]
}
 8006a62:	bf00      	nop
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a7c:	d101      	bne.n	8006a82 <LL_RCC_PLL_IsReady+0x18>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <LL_RCC_PLL_IsReady+0x1a>
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0303 	and.w	r3, r3, #3
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af8:	d101      	bne.n	8006afe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b10:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1c:	d101      	bne.n	8006b22 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3e:	d101      	bne.n	8006b44 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b60:	d101      	bne.n	8006b66 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e36f      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b82:	f7ff fece 	bl	8006922 <LL_RCC_GetSysClkSource>
 8006b86:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b88:	f7ff ffa2 	bl	8006ad0 <LL_RCC_PLL_GetMainSource>
 8006b8c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80c4 	beq.w	8006d24 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_RCC_OscConfig+0x3e>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d176      	bne.n	8006c96 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d173      	bne.n	8006c96 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e353      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x68>
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bd6:	e006      	b.n	8006be6 <HAL_RCC_OscConfig+0x76>
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d222      	bcs.n	8006c30 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fd3c 	bl	800766c <RCC_SetFlashLatencyFromMSIRange>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e331      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c08:	f043 0308 	orr.w	r3, r3, #8
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fe53 	bl	80068d4 <LL_RCC_MSI_SetCalibTrimming>
 8006c2e:	e021      	b.n	8006c74 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c3a:	f043 0308 	orr.w	r3, r3, #8
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fe3a 	bl	80068d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fd01 	bl	800766c <RCC_SetFlashLatencyFromMSIRange>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e2f6      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c74:	f000 fcc2 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006f18 <HAL_RCC_OscConfig+0x3a8>)
 8006c7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006c7e:	4ba7      	ldr	r3, [pc, #668]	@ (8006f1c <HAL_RCC_OscConfig+0x3ac>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fb fb16 	bl	80022b4 <HAL_InitTick>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006c8c:	7cfb      	ldrb	r3, [r7, #19]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d047      	beq.n	8006d22 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	e2e5      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d02c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c9e:	f7ff fdc6 	bl	800682e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ca2:	f7fb fb11 	bl	80022c8 <HAL_GetTick>
 8006ca6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006caa:	f7fb fb0d 	bl	80022c8 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e2d2      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006cbc:	f7ff fdd3 	bl	8006866 <LL_RCC_MSI_IsReady>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f1      	beq.n	8006caa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cd0:	f043 0308 	orr.w	r3, r3, #8
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fdef 	bl	80068d4 <LL_RCC_MSI_SetCalibTrimming>
 8006cf6:	e015      	b.n	8006d24 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cf8:	f7ff fda7 	bl	800684a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cfc:	f7fb fae4 	bl	80022c8 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d04:	f7fb fae0 	bl	80022c8 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e2a5      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d16:	f7ff fda6 	bl	8006866 <LL_RCC_MSI_IsReady>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f1      	bne.n	8006d04 <HAL_RCC_OscConfig+0x194>
 8006d20:	e000      	b.n	8006d24 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006d22:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d058      	beq.n	8006de2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d005      	beq.n	8006d42 <HAL_RCC_OscConfig+0x1d2>
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d108      	bne.n	8006d4e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d105      	bne.n	8006d4e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d14b      	bne.n	8006de2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e289      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d60:	4313      	orrs	r3, r2
 8006d62:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCC_OscConfig+0x204>
 8006d6e:	f7ff fcae 	bl	80066ce <LL_RCC_HSE_Enable>
 8006d72:	e00d      	b.n	8006d90 <HAL_RCC_OscConfig+0x220>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006d7c:	d104      	bne.n	8006d88 <HAL_RCC_OscConfig+0x218>
 8006d7e:	f7ff fc79 	bl	8006674 <LL_RCC_HSE_EnableTcxo>
 8006d82:	f7ff fca4 	bl	80066ce <LL_RCC_HSE_Enable>
 8006d86:	e003      	b.n	8006d90 <HAL_RCC_OscConfig+0x220>
 8006d88:	f7ff fcaf 	bl	80066ea <LL_RCC_HSE_Disable>
 8006d8c:	f7ff fc80 	bl	8006690 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fb fa96 	bl	80022c8 <HAL_GetTick>
 8006d9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da0:	f7fb fa92 	bl	80022c8 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	@ 0x64
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e257      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006db2:	f7ff fca8 	bl	8006706 <LL_RCC_HSE_IsReady>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f1      	beq.n	8006da0 <HAL_RCC_OscConfig+0x230>
 8006dbc:	e011      	b.n	8006de2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbe:	f7fb fa83 	bl	80022c8 <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc6:	f7fb fa7f 	bl	80022c8 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b64      	cmp	r3, #100	@ 0x64
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e244      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006dd8:	f7ff fc95 	bl	8006706 <LL_RCC_HSE_IsReady>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f1      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d046      	beq.n	8006e7c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d005      	beq.n	8006e00 <HAL_RCC_OscConfig+0x290>
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b0c      	cmp	r3, #12
 8006df8:	d10e      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d10b      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e22a      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fcb6 	bl	8006782 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e16:	e031      	b.n	8006e7c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d019      	beq.n	8006e54 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e20:	f7ff fc82 	bl	8006728 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fb fa50 	bl	80022c8 <HAL_GetTick>
 8006e28:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e2c:	f7fb fa4c 	bl	80022c8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e211      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e3e:	f7ff fc8f 	bl	8006760 <LL_RCC_HSI_IsReady>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f1      	beq.n	8006e2c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fc98 	bl	8006782 <LL_RCC_HSI_SetCalibTrimming>
 8006e52:	e013      	b.n	8006e7c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e54:	f7ff fc76 	bl	8006744 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fb fa36 	bl	80022c8 <HAL_GetTick>
 8006e5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e60:	f7fb fa32 	bl	80022c8 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e1f7      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e72:	f7ff fc75 	bl	8006760 <LL_RCC_HSI_IsReady>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f1      	bne.n	8006e60 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d06e      	beq.n	8006f66 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d056      	beq.n	8006f3e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8006e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e98:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69da      	ldr	r2, [r3, #28]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d031      	beq.n	8006f0c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d006      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e1d0      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d013      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006eca:	f7ff fc8f 	bl	80067ec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ece:	f7fb f9fb 	bl	80022c8 <HAL_GetTick>
 8006ed2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed6:	f7fb f9f7 	bl	80022c8 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b11      	cmp	r3, #17
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e1bc      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006ee8:	f7ff fc90 	bl	800680c <LL_RCC_LSI_IsReady>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f1      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006efa:	f023 0210 	bic.w	r2, r3, #16
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f0c:	f7ff fc5e 	bl	80067cc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f10:	f7fb f9da 	bl	80022c8 <HAL_GetTick>
 8006f14:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006f16:	e00c      	b.n	8006f32 <HAL_RCC_OscConfig+0x3c2>
 8006f18:	20000000 	.word	0x20000000
 8006f1c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f20:	f7fb f9d2 	bl	80022c8 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b11      	cmp	r3, #17
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e197      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006f32:	f7ff fc6b 	bl	800680c <LL_RCC_LSI_IsReady>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f1      	beq.n	8006f20 <HAL_RCC_OscConfig+0x3b0>
 8006f3c:	e013      	b.n	8006f66 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f3e:	f7ff fc55 	bl	80067ec <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f42:	f7fb f9c1 	bl	80022c8 <HAL_GetTick>
 8006f46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fb f9bd 	bl	80022c8 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b11      	cmp	r3, #17
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e182      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006f5c:	f7ff fc56 	bl	800680c <LL_RCC_LSI_IsReady>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f1      	bne.n	8006f4a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80d8 	beq.w	8007124 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006f74:	f7ff fb6c 	bl	8006650 <LL_PWR_IsEnabledBkUpAccess>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d113      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f7e:	f7ff faab 	bl	80064d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f82:	f7fb f9a1 	bl	80022c8 <HAL_GetTick>
 8006f86:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8a:	f7fb f99d 	bl	80022c8 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e162      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006f9c:	f7ff fb58 	bl	8006650 <LL_PWR_IsEnabledBkUpAccess>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f1      	beq.n	8006f8a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d07b      	beq.n	80070a6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b85      	cmp	r3, #133	@ 0x85
 8006fb4:	d003      	beq.n	8006fbe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d109      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fca:	f043 0304 	orr.w	r3, r3, #4
 8006fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd2:	f7fb f979 	bl	80022c8 <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006fec:	e00a      	b.n	8007004 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7fb f96b 	bl	80022c8 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e12e      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007004:	f7ff fbd1 	bl	80067aa <LL_RCC_LSE_IsReady>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0ef      	beq.n	8006fee <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b81      	cmp	r3, #129	@ 0x81
 8007014:	d003      	beq.n	800701e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2b85      	cmp	r3, #133	@ 0x85
 800701c:	d121      	bne.n	8007062 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701e:	f7fb f953 	bl	80022c8 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007038:	e00a      	b.n	8007050 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703a:	f7fb f945 	bl	80022c8 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e108      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0ec      	beq.n	800703a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007060:	e060      	b.n	8007124 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007062:	f7fb f931 	bl	80022c8 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fb f923 	bl	80022c8 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e0e6      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ec      	bne.n	800707e <HAL_RCC_OscConfig+0x50e>
 80070a4:	e03e      	b.n	8007124 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a6:	f7fb f90f 	bl	80022c8 <HAL_GetTick>
 80070aa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fb f901 	bl	80022c8 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0c4      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ec      	bne.n	80070c2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e8:	f7fb f8ee 	bl	80022c8 <HAL_GetTick>
 80070ec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070fa:	f023 0301 	bic.w	r3, r3, #1
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007102:	e00a      	b.n	800711a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fb f8e0 	bl	80022c8 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e0a3      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800711a:	f7ff fb46 	bl	80067aa <LL_RCC_LSE_IsReady>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ef      	bne.n	8007104 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8099 	beq.w	8007260 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d06c      	beq.n	800720e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007138:	2b02      	cmp	r3, #2
 800713a:	d14b      	bne.n	80071d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713c:	f7ff fc87 	bl	8006a4e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007140:	f7fb f8c2 	bl	80022c8 <HAL_GetTick>
 8007144:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fb f8be 	bl	80022c8 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b0a      	cmp	r3, #10
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e083      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800715a:	f7ff fc86 	bl	8006a6a <LL_RCC_PLL_IsReady>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f1      	bne.n	8007148 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	4b40      	ldr	r3, [pc, #256]	@ (800726c <HAL_RCC_OscConfig+0x6fc>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007176:	4311      	orrs	r1, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800717c:	0212      	lsls	r2, r2, #8
 800717e:	4311      	orrs	r1, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007184:	4311      	orrs	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800718a:	4311      	orrs	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007190:	430a      	orrs	r2, r1
 8007192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007196:	4313      	orrs	r3, r2
 8007198:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800719a:	f7ff fc4a 	bl	8006a32 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800719e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ae:	f7fb f88b 	bl	80022c8 <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b6:	f7fb f887 	bl	80022c8 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b0a      	cmp	r3, #10
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e04c      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80071c8:	f7ff fc4f 	bl	8006a6a <LL_RCC_PLL_IsReady>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f1      	beq.n	80071b6 <HAL_RCC_OscConfig+0x646>
 80071d2:	e045      	b.n	8007260 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071d4:	f7ff fc3b 	bl	8006a4e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d8:	f7fb f876 	bl	80022c8 <HAL_GetTick>
 80071dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fb f872 	bl	80022c8 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e037      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80071f2:	f7ff fc3a 	bl	8006a6a <LL_RCC_PLL_IsReady>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f1      	bne.n	80071e0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007206:	4b1a      	ldr	r3, [pc, #104]	@ (8007270 <HAL_RCC_OscConfig+0x700>)
 8007208:	4013      	ands	r3, r2
 800720a:	60cb      	str	r3, [r1, #12]
 800720c:	e028      	b.n	8007260 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e023      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800721a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f003 0203 	and.w	r2, r3, #3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	429a      	cmp	r2, r3
 800722e:	d115      	bne.n	800725c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723a:	429a      	cmp	r2, r3
 800723c:	d10e      	bne.n	800725c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	429a      	cmp	r2, r3
 800724c:	d106      	bne.n	800725c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	11c1808c 	.word	0x11c1808c
 8007270:	eefefffc 	.word	0xeefefffc

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e10f      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007288:	4b89      	ldr	r3, [pc, #548]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d91b      	bls.n	80072ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007296:	4b86      	ldr	r3, [pc, #536]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f023 0207 	bic.w	r2, r3, #7
 800729e:	4984      	ldr	r1, [pc, #528]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072a6:	f7fb f80f 	bl	80022c8 <HAL_GetTick>
 80072aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072ae:	f7fb f80b 	bl	80022c8 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e0f3      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c0:	4b7b      	ldr	r3, [pc, #492]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d1ef      	bne.n	80072ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff fb2a 	bl	8006938 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072e4:	f7fa fff0 	bl	80022c8 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072ec:	f7fa ffec 	bl	80022c8 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e0d4      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80072fe:	f7ff fbf2 	bl	8006ae6 <LL_RCC_IsActiveFlag_HPRE>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f1      	beq.n	80072ec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fb20 	bl	800695e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800731e:	f7fa ffd3 	bl	80022c8 <HAL_GetTick>
 8007322:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007326:	f7fa ffcf 	bl	80022c8 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e0b7      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007338:	f7ff fbe6 	bl	8006b08 <LL_RCC_IsActiveFlag_SHDHPRE>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f1      	beq.n	8007326 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fb19 	bl	800698a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007358:	f7fa ffb6 	bl	80022c8 <HAL_GetTick>
 800735c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007360:	f7fa ffb2 	bl	80022c8 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e09a      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007372:	f7ff fbdb 	bl	8006b2c <LL_RCC_IsActiveFlag_PPRE1>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f1      	beq.n	8007360 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d017      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fb0e 	bl	80069b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007394:	f7fa ff98 	bl	80022c8 <HAL_GetTick>
 8007398:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800739a:	e008      	b.n	80073ae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800739c:	f7fa ff94 	bl	80022c8 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e07c      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073ae:	f7ff fbce 	bl	8006b4e <LL_RCC_IsActiveFlag_PPRE2>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f1      	beq.n	800739c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d043      	beq.n	800744c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d106      	bne.n	80073da <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80073cc:	f7ff f99b 	bl	8006706 <LL_RCC_HSE_IsReady>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11e      	bne.n	8007414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e066      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d106      	bne.n	80073f0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80073e2:	f7ff fb42 	bl	8006a6a <LL_RCC_PLL_IsReady>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d113      	bne.n	8007414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e05b      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80073f8:	f7ff fa35 	bl	8006866 <LL_RCC_MSI_IsReady>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d108      	bne.n	8007414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e050      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007406:	f7ff f9ab 	bl	8006760 <LL_RCC_HSI_IsReady>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e049      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fa6f 	bl	80068fc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800741e:	f7fa ff53 	bl	80022c8 <HAL_GetTick>
 8007422:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007424:	e00a      	b.n	800743c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007426:	f7fa ff4f 	bl	80022c8 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e035      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743c:	f7ff fa71 	bl	8006922 <LL_RCC_GetSysClkSource>
 8007440:	4602      	mov	r2, r0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	429a      	cmp	r2, r3
 800744a:	d1ec      	bne.n	8007426 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800744c:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d21b      	bcs.n	8007492 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f023 0207 	bic.w	r2, r3, #7
 8007462:	4913      	ldr	r1, [pc, #76]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	4313      	orrs	r3, r2
 8007468:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800746a:	f7fa ff2d 	bl	80022c8 <HAL_GetTick>
 800746e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007470:	e008      	b.n	8007484 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007472:	f7fa ff29 	bl	80022c8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e011      	b.n	80074a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007484:	4b0a      	ldr	r3, [pc, #40]	@ (80074b0 <HAL_RCC_ClockConfig+0x23c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d1ef      	bne.n	8007472 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007492:	f000 f8b3 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007496:	4603      	mov	r3, r0
 8007498:	4a06      	ldr	r2, [pc, #24]	@ (80074b4 <HAL_RCC_ClockConfig+0x240>)
 800749a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <HAL_RCC_ClockConfig+0x244>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fa ff07 	bl	80022b4 <HAL_InitTick>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	58004000 	.word	0x58004000
 80074b4:	20000000 	.word	0x20000000
 80074b8:	20000004 	.word	0x20000004

080074bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ca:	f7ff fa2a 	bl	8006922 <LL_RCC_GetSysClkSource>
 80074ce:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d0:	f7ff fafe 	bl	8006ad0 <LL_RCC_PLL_GetMainSource>
 80074d4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0x2c>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b0c      	cmp	r3, #12
 80074e0:	d139      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d136      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80074e8:	f7ff f9cd 	bl	8006886 <LL_RCC_MSI_IsEnabledRangeSelect>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d115      	bne.n	800751e <HAL_RCC_GetSysClockFreq+0x62>
 80074f2:	f7ff f9c8 	bl	8006886 <LL_RCC_MSI_IsEnabledRangeSelect>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d106      	bne.n	800750a <HAL_RCC_GetSysClockFreq+0x4e>
 80074fc:	f7ff f9d3 	bl	80068a6 <LL_RCC_MSI_GetRange>
 8007500:	4603      	mov	r3, r0
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	e005      	b.n	8007516 <HAL_RCC_GetSysClockFreq+0x5a>
 800750a:	f7ff f9d7 	bl	80068bc <LL_RCC_MSI_GetRangeAfterStandby>
 800750e:	4603      	mov	r3, r0
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	4a36      	ldr	r2, [pc, #216]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8007518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751c:	e014      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x8c>
 800751e:	f7ff f9b2 	bl	8006886 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007522:	4603      	mov	r3, r0
 8007524:	2b01      	cmp	r3, #1
 8007526:	d106      	bne.n	8007536 <HAL_RCC_GetSysClockFreq+0x7a>
 8007528:	f7ff f9bd 	bl	80068a6 <LL_RCC_MSI_GetRange>
 800752c:	4603      	mov	r3, r0
 800752e:	091b      	lsrs	r3, r3, #4
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	e005      	b.n	8007542 <HAL_RCC_GetSysClockFreq+0x86>
 8007536:	f7ff f9c1 	bl	80068bc <LL_RCC_MSI_GetRangeAfterStandby>
 800753a:	4603      	mov	r3, r0
 800753c:	091b      	lsrs	r3, r3, #4
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	4a2b      	ldr	r2, [pc, #172]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8007544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007548:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d115      	bne.n	800757c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007554:	e012      	b.n	800757c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d102      	bne.n	8007562 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800755c:	4b25      	ldr	r3, [pc, #148]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e00c      	b.n	800757c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d109      	bne.n	800757c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007568:	f7ff f8a0 	bl	80066ac <LL_RCC_HSE_IsEnabledDiv2>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d102      	bne.n	8007578 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007572:	4b20      	ldr	r3, [pc, #128]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	e001      	b.n	800757c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007578:	4b1f      	ldr	r3, [pc, #124]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800757a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800757c:	f7ff f9d1 	bl	8006922 <LL_RCC_GetSysClkSource>
 8007580:	4603      	mov	r3, r0
 8007582:	2b0c      	cmp	r3, #12
 8007584:	d12f      	bne.n	80075e6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007586:	f7ff faa3 	bl	8006ad0 <LL_RCC_PLL_GetMainSource>
 800758a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d003      	beq.n	800759a <HAL_RCC_GetSysClockFreq+0xde>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d003      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007598:	e00d      	b.n	80075b6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800759a:	4b16      	ldr	r3, [pc, #88]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800759c:	60fb      	str	r3, [r7, #12]
        break;
 800759e:	e00d      	b.n	80075bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80075a0:	f7ff f884 	bl	80066ac <LL_RCC_HSE_IsEnabledDiv2>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d102      	bne.n	80075b0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80075aa:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80075ac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80075ae:	e005      	b.n	80075bc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80075b0:	4b11      	ldr	r3, [pc, #68]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80075b2:	60fb      	str	r3, [r7, #12]
        break;
 80075b4:	e002      	b.n	80075bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	60fb      	str	r3, [r7, #12]
        break;
 80075ba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80075bc:	f7ff fa66 	bl	8006a8c <LL_RCC_PLL_GetN>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	fb03 f402 	mul.w	r4, r3, r2
 80075c8:	f7ff fa77 	bl	8006aba <LL_RCC_PLL_GetDivider>
 80075cc:	4603      	mov	r3, r0
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	3301      	adds	r3, #1
 80075d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80075d6:	f7ff fa65 	bl	8006aa4 <LL_RCC_PLL_GetR>
 80075da:	4603      	mov	r3, r0
 80075dc:	0f5b      	lsrs	r3, r3, #29
 80075de:	3301      	adds	r3, #1
 80075e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80075e4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80075e6:	697b      	ldr	r3, [r7, #20]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd90      	pop	{r4, r7, pc}
 80075f0:	08028e00 	.word	0x08028e00
 80075f4:	00f42400 	.word	0x00f42400
 80075f8:	01e84800 	.word	0x01e84800

080075fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075fc:	b598      	push	{r3, r4, r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007600:	f7ff ff5c 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8007604:	4604      	mov	r4, r0
 8007606:	f7ff f9e6 	bl	80069d6 <LL_RCC_GetAHBPrescaler>
 800760a:	4603      	mov	r3, r0
 800760c:	091b      	lsrs	r3, r3, #4
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	4a03      	ldr	r2, [pc, #12]	@ (8007620 <HAL_RCC_GetHCLKFreq+0x24>)
 8007614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007618:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd98      	pop	{r3, r4, r7, pc}
 8007620:	08028da0 	.word	0x08028da0

08007624 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007624:	b598      	push	{r3, r4, r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007628:	f7ff ffe8 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 800762c:	4604      	mov	r4, r0
 800762e:	f7ff f9ea 	bl	8006a06 <LL_RCC_GetAPB1Prescaler>
 8007632:	4603      	mov	r3, r0
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	4a03      	ldr	r2, [pc, #12]	@ (8007644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800763c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	bd98      	pop	{r3, r4, r7, pc}
 8007644:	08028de0 	.word	0x08028de0

08007648 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007648:	b598      	push	{r3, r4, r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800764c:	f7ff ffd6 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007650:	4604      	mov	r4, r0
 8007652:	f7ff f9e3 	bl	8006a1c <LL_RCC_GetAPB2Prescaler>
 8007656:	4603      	mov	r3, r0
 8007658:	0adb      	lsrs	r3, r3, #11
 800765a:	4a03      	ldr	r2, [pc, #12]	@ (8007668 <HAL_RCC_GetPCLK2Freq+0x20>)
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd98      	pop	{r3, r4, r7, pc}
 8007668:	08028de0 	.word	0x08028de0

0800766c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	091b      	lsrs	r3, r3, #4
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	4a10      	ldr	r2, [pc, #64]	@ (80076c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007682:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007684:	f7ff f9b2 	bl	80069ec <LL_RCC_GetAHB3Prescaler>
 8007688:	4603      	mov	r3, r0
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	4a0c      	ldr	r2, [pc, #48]	@ (80076c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4a09      	ldr	r2, [pc, #36]	@ (80076c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	0c9c      	lsrs	r4, r3, #18
 80076a8:	f7fe ff58 	bl	800655c <HAL_PWREx_GetVoltageRange>
 80076ac:	4603      	mov	r3, r0
 80076ae:	4619      	mov	r1, r3
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 f80b 	bl	80076cc <RCC_SetFlashLatency>
 80076b6:	4603      	mov	r3, r0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd90      	pop	{r4, r7, pc}
 80076c0:	08028e00 	.word	0x08028e00
 80076c4:	08028da0 	.word	0x08028da0
 80076c8:	431bde83 	.word	0x431bde83

080076cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	@ 0x38
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80076d6:	4a3a      	ldr	r2, [pc, #232]	@ (80077c0 <RCC_SetFlashLatency+0xf4>)
 80076d8:	f107 0320 	add.w	r3, r7, #32
 80076dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076e0:	6018      	str	r0, [r3, #0]
 80076e2:	3304      	adds	r3, #4
 80076e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80076e6:	4a37      	ldr	r2, [pc, #220]	@ (80077c4 <RCC_SetFlashLatency+0xf8>)
 80076e8:	f107 0318 	add.w	r3, r7, #24
 80076ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076f0:	6018      	str	r0, [r3, #0]
 80076f2:	3304      	adds	r3, #4
 80076f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80076f6:	4a34      	ldr	r2, [pc, #208]	@ (80077c8 <RCC_SetFlashLatency+0xfc>)
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80076fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770c:	d11b      	bne.n	8007746 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800770e:	2300      	movs	r3, #0
 8007710:	633b      	str	r3, [r7, #48]	@ 0x30
 8007712:	e014      	b.n	800773e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	3338      	adds	r3, #56	@ 0x38
 800771a:	443b      	add	r3, r7
 800771c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4293      	cmp	r3, r2
 8007726:	d807      	bhi.n	8007738 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	3338      	adds	r3, #56	@ 0x38
 800772e:	443b      	add	r3, r7
 8007730:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007736:	e021      	b.n	800777c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	3301      	adds	r3, #1
 800773c:	633b      	str	r3, [r7, #48]	@ 0x30
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	2b02      	cmp	r3, #2
 8007742:	d9e7      	bls.n	8007714 <RCC_SetFlashLatency+0x48>
 8007744:	e01a      	b.n	800777c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007746:	2300      	movs	r3, #0
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800774a:	e014      	b.n	8007776 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	3338      	adds	r3, #56	@ 0x38
 8007752:	443b      	add	r3, r7
 8007754:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4293      	cmp	r3, r2
 800775e:	d807      	bhi.n	8007770 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3338      	adds	r3, #56	@ 0x38
 8007766:	443b      	add	r3, r7
 8007768:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800776e:	e005      	b.n	800777c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	3301      	adds	r3, #1
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	2b02      	cmp	r3, #2
 800777a:	d9e7      	bls.n	800774c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800777c:	4b13      	ldr	r3, [pc, #76]	@ (80077cc <RCC_SetFlashLatency+0x100>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f023 0207 	bic.w	r2, r3, #7
 8007784:	4911      	ldr	r1, [pc, #68]	@ (80077cc <RCC_SetFlashLatency+0x100>)
 8007786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007788:	4313      	orrs	r3, r2
 800778a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800778c:	f7fa fd9c 	bl	80022c8 <HAL_GetTick>
 8007790:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007792:	e008      	b.n	80077a6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007794:	f7fa fd98 	bl	80022c8 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e007      	b.n	80077b6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077a6:	4b09      	ldr	r3, [pc, #36]	@ (80077cc <RCC_SetFlashLatency+0x100>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d1ef      	bne.n	8007794 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3738      	adds	r7, #56	@ 0x38
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	0802651c 	.word	0x0802651c
 80077c4:	08026524 	.word	0x08026524
 80077c8:	0802652c 	.word	0x0802652c
 80077cc:	58004000 	.word	0x58004000

080077d0 <LL_RCC_LSE_IsReady>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80077d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d101      	bne.n	80077e8 <LL_RCC_LSE_IsReady+0x18>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <LL_RCC_LSE_IsReady+0x1a>
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <LL_RCC_SetUSARTClockSource>:
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80077fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	43db      	mvns	r3, r3
 8007808:	401a      	ands	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <LL_RCC_SetI2SClockSource>:
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800782a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007832:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <LL_RCC_SetLPUARTClockSource>:
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007860:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <LL_RCC_SetI2CClockSource>:
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800787e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007882:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	091b      	lsrs	r3, r3, #4
 800788a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800788e:	43db      	mvns	r3, r3
 8007890:	401a      	ands	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800789a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <LL_RCC_SetLPTIMClockSource>:
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80078b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	43db      	mvns	r3, r3
 80078c6:	401a      	ands	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <LL_RCC_SetRNGClockSource>:
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80078f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <LL_RCC_SetADCClockSource>:
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800791e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4313      	orrs	r3, r2
 8007926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <LL_RCC_SetRTCClockSource>:
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800793c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <LL_RCC_GetRTCClockSource>:
{
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800796e:	4618      	mov	r0, r3
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr

08007976 <LL_RCC_ForceBackupDomainReset>:
{
 8007976:	b480      	push	{r7}
 8007978:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800798e:	bf00      	nop
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bc80      	pop	{r7}
 80079b4:	4770      	bx	lr
	...

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80079c4:	2300      	movs	r3, #0
 80079c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80079c8:	2300      	movs	r3, #0
 80079ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d058      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80079d8:	f7fe fd7e 	bl	80064d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079dc:	f7fa fc74 	bl	80022c8 <HAL_GetTick>
 80079e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80079e2:	e009      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e4:	f7fa fc70 	bl	80022c8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d902      	bls.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	74fb      	strb	r3, [r7, #19]
        break;
 80079f6:	e006      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80079f8:	4b7b      	ldr	r3, [pc, #492]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a04:	d1ee      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007a06:	7cfb      	ldrb	r3, [r7, #19]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d13c      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007a0c:	f7ff ffa7 	bl	800795e <LL_RCC_GetRTCClockSource>
 8007a10:	4602      	mov	r2, r0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d00f      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a26:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a28:	f7ff ffa5 	bl	8007976 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a2c:	f7ff ffb3 	bl	8007996 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d014      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fa fc40 	bl	80022c8 <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007a4a:	e00b      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a4c:	f7fa fc3c 	bl	80022c8 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d902      	bls.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	74fb      	strb	r3, [r7, #19]
            break;
 8007a62:	e004      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007a64:	f7ff feb4 	bl	80077d0 <LL_RCC_LSE_IsReady>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d1ee      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007a6e:	7cfb      	ldrb	r3, [r7, #19]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff ff5b 	bl	8007934 <LL_RCC_SetRTCClockSource>
 8007a7e:	e004      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a80:	7cfb      	ldrb	r3, [r7, #19]
 8007a82:	74bb      	strb	r3, [r7, #18]
 8007a84:	e001      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a86:	7cfb      	ldrb	r3, [r7, #19]
 8007a88:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff fea9 	bl	80077f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fe9e 	bl	80077f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff fec0 	bl	800784c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fee6 	bl	80078ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fedb 	bl	80078ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fed0 	bl	80078ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fea9 	bl	8007876 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fe9e 	bl	8007876 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fe93 	bl	8007876 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d011      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff fe5e 	bl	8007822 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d010      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fea5 	bl	80078e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d107      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fea3 	bl	800790a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bdc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007bde:	7cbb      	ldrb	r3, [r7, #18]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	58000400 	.word	0x58000400

08007bec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d071      	beq.n	8007ce2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa f81e 	bl	8001c54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c20:	4b32      	ldr	r3, [pc, #200]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d051      	beq.n	8007cd0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c2e:	22ca      	movs	r2, #202	@ 0xca
 8007c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c32:	4b2e      	ldr	r3, [pc, #184]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c34:	2253      	movs	r2, #83	@ 0x53
 8007c36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa11 	bl	8008060 <RTC_EnterInitMode>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d13f      	bne.n	8007cc8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007c48:	4b28      	ldr	r3, [pc, #160]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	4a27      	ldr	r2, [pc, #156]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c4e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c56:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007c58:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4319      	orrs	r1, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	491f      	ldr	r1, [pc, #124]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	491b      	ldr	r1, [pc, #108]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007c82:	4b1a      	ldr	r3, [pc, #104]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	430b      	orrs	r3, r1
 8007c94:	4915      	ldr	r1, [pc, #84]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa14 	bl	80080c8 <RTC_ExitInitMode>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a19      	ldr	r1, [r3, #32]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4319      	orrs	r1, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	490a      	ldr	r1, [pc, #40]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cc8:	4b08      	ldr	r3, [pc, #32]	@ (8007cec <HAL_RTC_Init+0x100>)
 8007cca:	22ff      	movs	r2, #255	@ 0xff
 8007ccc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cce:	e001      	b.n	8007cd4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40002800 	.word	0x40002800

08007cf0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_RTC_SetAlarm_IT+0x1e>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e0f3      	b.n	8007ef6 <HAL_RTC_SetAlarm_IT+0x206>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007d1e:	4b78      	ldr	r3, [pc, #480]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d26:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d2e:	d06a      	beq.n	8007e06 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d13a      	bne.n	8007dac <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007d36:	4b72      	ldr	r3, [pc, #456]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2200      	movs	r2, #0
 8007d46:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 f9f5 	bl	8008144 <RTC_ByteToBcd2>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f9ee 	bl	8008144 <RTC_ByteToBcd2>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d6c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	789b      	ldrb	r3, [r3, #2]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f9e6 	bl	8008144 <RTC_ByteToBcd2>
 8007d78:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d7a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	78db      	ldrb	r3, [r3, #3]
 8007d82:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007d84:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f9d8 	bl	8008144 <RTC_ByteToBcd2>
 8007d94:	4603      	mov	r3, r0
 8007d96:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007d98:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007da0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	e02c      	b.n	8007e06 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007db4:	d00d      	beq.n	8007dd2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007dbe:	d008      	beq.n	8007dd2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dde:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007de4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	78db      	ldrb	r3, [r3, #3]
 8007dea:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007dec:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007df4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007df6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dfc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e06:	4b3e      	ldr	r3, [pc, #248]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e08:	22ca      	movs	r2, #202	@ 0xca
 8007e0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e0e:	2253      	movs	r2, #83	@ 0x53
 8007e10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e1a:	d12c      	bne.n	8007e76 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007e1c:	4b38      	ldr	r3, [pc, #224]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4a37      	ldr	r2, [pc, #220]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e26:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007e28:	4b35      	ldr	r3, [pc, #212]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e34:	d107      	bne.n	8007e46 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	4930      	ldr	r1, [pc, #192]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	644b      	str	r3, [r1, #68]	@ 0x44
 8007e44:	e006      	b.n	8007e54 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007e46:	4a2e      	ldr	r2, [pc, #184]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007e54:	4a2a      	ldr	r2, [pc, #168]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e60:	f043 0201 	orr.w	r2, r3, #1
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007e68:	4b25      	ldr	r3, [pc, #148]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	4a24      	ldr	r2, [pc, #144]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e6e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007e72:	6193      	str	r3, [r2, #24]
 8007e74:	e02b      	b.n	8007ece <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007e76:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e7c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007e80:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007e82:	4b1f      	ldr	r3, [pc, #124]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e84:	2202      	movs	r2, #2
 8007e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	4919      	ldr	r1, [pc, #100]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007e9e:	e006      	b.n	8007eae <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007ea0:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007ea6:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007eae:	4a14      	ldr	r2, [pc, #80]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eba:	f043 0202 	orr.w	r2, r3, #2
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ec8:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007ecc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007ece:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <HAL_RTC_SetAlarm_IT+0x214>)
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8007f04 <HAL_RTC_SetAlarm_IT+0x214>)
 8007ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ede:	4b08      	ldr	r3, [pc, #32]	@ (8007f00 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ee0:	22ff      	movs	r2, #255	@ 0xff
 8007ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd90      	pop	{r4, r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40002800 	.word	0x40002800
 8007f04:	58000800 	.word	0x58000800

08007f08 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_RTC_DeactivateAlarm+0x18>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e048      	b.n	8007fb2 <HAL_RTC_DeactivateAlarm+0xaa>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f30:	4b22      	ldr	r3, [pc, #136]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f32:	22ca      	movs	r2, #202	@ 0xca
 8007f34:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f36:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f38:	2253      	movs	r2, #83	@ 0x53
 8007f3a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f42:	d115      	bne.n	8007f70 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007f44:	4b1d      	ldr	r3, [pc, #116]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	4a1c      	ldr	r2, [pc, #112]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007f4e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007f50:	4b1a      	ldr	r3, [pc, #104]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f54:	4a19      	ldr	r2, [pc, #100]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f5a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	f023 0201 	bic.w	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007f68:	4b14      	ldr	r3, [pc, #80]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f6e:	e014      	b.n	8007f9a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007f70:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	4a11      	ldr	r2, [pc, #68]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f76:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007f7a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f80:	4a0e      	ldr	r2, [pc, #56]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f86:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	f023 0202 	bic.w	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007f94:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f96:	2202      	movs	r2, #2
 8007f98:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f9a:	4b08      	ldr	r3, [pc, #32]	@ (8007fbc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f9c:	22ff      	movs	r2, #255	@ 0xff
 8007f9e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr
 8007fbc:	40002800 	.word	0x40002800

08007fc0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007fca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007fde:	4b0c      	ldr	r3, [pc, #48]	@ (8008010 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fa fc0a 	bl	80027fe <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f94a 	bl	8008294 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40002800 	.word	0x40002800

08008014 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800801c:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <HAL_RTC_WaitForSynchro+0x48>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4a0e      	ldr	r2, [pc, #56]	@ (800805c <HAL_RTC_WaitForSynchro+0x48>)
 8008022:	f023 0320 	bic.w	r3, r3, #32
 8008026:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008028:	f7fa f94e 	bl	80022c8 <HAL_GetTick>
 800802c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800802e:	e009      	b.n	8008044 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008030:	f7fa f94a 	bl	80022c8 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800803e:	d901      	bls.n	8008044 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e006      	b.n	8008052 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <HAL_RTC_WaitForSynchro+0x48>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0ef      	beq.n	8008030 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40002800 	.word	0x40002800

08008060 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800806c:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <RTC_EnterInitMode+0x64>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d120      	bne.n	80080ba <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008078:	4b12      	ldr	r3, [pc, #72]	@ (80080c4 <RTC_EnterInitMode+0x64>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	4a11      	ldr	r2, [pc, #68]	@ (80080c4 <RTC_EnterInitMode+0x64>)
 800807e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008082:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008084:	f7fa f920 	bl	80022c8 <HAL_GetTick>
 8008088:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800808a:	e00d      	b.n	80080a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800808c:	f7fa f91c 	bl	80022c8 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800809a:	d905      	bls.n	80080a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <RTC_EnterInitMode+0x64>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <RTC_EnterInitMode+0x5a>
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d1e8      	bne.n	800808c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40002800 	.word	0x40002800

080080c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80080d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <RTC_ExitInitMode+0x78>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a19      	ldr	r2, [pc, #100]	@ (8008140 <RTC_ExitInitMode+0x78>)
 80080da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80080e0:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <RTC_ExitInitMode+0x78>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10c      	bne.n	8008106 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ff91 	bl	8008014 <HAL_RTC_WaitForSynchro>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01e      	beq.n	8008136 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2203      	movs	r2, #3
 80080fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	73fb      	strb	r3, [r7, #15]
 8008104:	e017      	b.n	8008136 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008106:	4b0e      	ldr	r3, [pc, #56]	@ (8008140 <RTC_ExitInitMode+0x78>)
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	4a0d      	ldr	r2, [pc, #52]	@ (8008140 <RTC_ExitInitMode+0x78>)
 800810c:	f023 0320 	bic.w	r3, r3, #32
 8008110:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff7e 	bl	8008014 <HAL_RTC_WaitForSynchro>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2203      	movs	r2, #3
 8008122:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800812a:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <RTC_ExitInitMode+0x78>)
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	4a04      	ldr	r2, [pc, #16]	@ (8008140 <RTC_ExitInitMode+0x78>)
 8008130:	f043 0320 	orr.w	r3, r3, #32
 8008134:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40002800 	.word	0x40002800

08008144 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008156:	e005      	b.n	8008164 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	3b0a      	subs	r3, #10
 8008162:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	2b09      	cmp	r3, #9
 8008168:	d8f6      	bhi.n	8008158 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	b2da      	uxtb	r2, r3
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	4313      	orrs	r3, r2
 8008176:	b2db      	uxtb	r3, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr
	...

08008184 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_RTCEx_EnableBypassShadow+0x16>
 8008196:	2302      	movs	r3, #2
 8008198:	e01f      	b.n	80081da <HAL_RTCEx_EnableBypassShadow+0x56>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081aa:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081ac:	22ca      	movs	r2, #202	@ 0xca
 80081ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081b2:	2253      	movs	r2, #83	@ 0x53
 80081b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	4a0a      	ldr	r2, [pc, #40]	@ (80081e4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081bc:	f043 0320 	orr.w	r3, r3, #32
 80081c0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c2:	4b08      	ldr	r3, [pc, #32]	@ (80081e4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081c4:	22ff      	movs	r2, #255	@ 0xff
 80081c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	40002800 	.word	0x40002800

080081e8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_RTCEx_SetSSRU_IT+0x16>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e027      	b.n	800824e <HAL_RTCEx_SetSSRU_IT+0x66>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800820e:	4b12      	ldr	r3, [pc, #72]	@ (8008258 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008210:	22ca      	movs	r2, #202	@ 0xca
 8008212:	625a      	str	r2, [r3, #36]	@ 0x24
 8008214:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008216:	2253      	movs	r2, #83	@ 0x53
 8008218:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800821a:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	4a0e      	ldr	r2, [pc, #56]	@ (8008258 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008224:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800822c:	4a0b      	ldr	r2, [pc, #44]	@ (800825c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800822e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008232:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008236:	4b08      	ldr	r3, [pc, #32]	@ (8008258 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008238:	22ff      	movs	r2, #255	@ 0xff
 800823a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr
 8008258:	40002800 	.word	0x40002800
 800825c:	58000800 	.word	0x58000800

08008260 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008268:	4b09      	ldr	r3, [pc, #36]	@ (8008290 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008274:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008276:	2240      	movs	r2, #64	@ 0x40
 8008278:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fa fac9 	bl	8002812 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40002800 	.word	0x40002800

08008294 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80082b4:	4b07      	ldr	r3, [pc, #28]	@ (80082d4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80082b6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4413      	add	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	601a      	str	r2, [r3, #0]
}
 80082c8:	bf00      	nop
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	4000b100 	.word	0x4000b100

080082d8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80082e2:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <HAL_RTCEx_BKUPRead+0x28>)
 80082e4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	4000b100 	.word	0x4000b100

08008304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e0c6      	b.n	80084a4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d108      	bne.n	8008330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008326:	d009      	beq.n	800833c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	61da      	str	r2, [r3, #28]
 800832e:	e005      	b.n	800833c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f9 fd25 	bl	8001da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800836c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008376:	d902      	bls.n	800837e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e002      	b.n	8008384 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800837e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008382:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800838c:	d007      	beq.n	800839e <HAL_SPI_Init+0x9a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008396:	d002      	beq.n	800839e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e0:	ea42 0103 	orr.w	r1, r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083fc:	d11b      	bne.n	8008436 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800840e:	d903      	bls.n	8008418 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
 8008416:	e002      	b.n	800841e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008422:	2b02      	cmp	r3, #2
 8008424:	d107      	bne.n	8008436 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008434:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	0c1b      	lsrs	r3, r3, #16
 800843c:	f003 0204 	and.w	r2, r3, #4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800845c:	ea42 0103 	orr.w	r1, r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008476:	d105      	bne.n	8008484 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	b292      	uxth	r2, r2
 8008482:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69da      	ldr	r2, [r3, #28]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <LL_PWR_SetRadioBusyTrigger>:
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80084b4:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80084bc:	4904      	ldr	r1, [pc, #16]	@ (80084d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	608b      	str	r3, [r1, #8]
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	58000400 	.word	0x58000400

080084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	4a04      	ldr	r2, [pc, #16]	@ (80084f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80084e8:	bf00      	nop
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr
 80084f0:	58000400 	.word	0x58000400

080084f4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80084f8:	4b05      	ldr	r3, [pc, #20]	@ (8008510 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084fe:	4a04      	ldr	r2, [pc, #16]	@ (8008510 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008500:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008508:	bf00      	nop
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	58000400 	.word	0x58000400

08008514 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008518:	4b03      	ldr	r3, [pc, #12]	@ (8008528 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800851a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800851e:	619a      	str	r2, [r3, #24]
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr
 8008528:	58000400 	.word	0x58000400

0800852c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008530:	4b06      	ldr	r3, [pc, #24]	@ (800854c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b02      	cmp	r3, #2
 800853a:	d101      	bne.n	8008540 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	58000400 	.word	0x58000400

08008550 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008554:	4b06      	ldr	r3, [pc, #24]	@ (8008570 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b04      	cmp	r3, #4
 800855e:	d101      	bne.n	8008564 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	58000400 	.word	0x58000400

08008574 <LL_RCC_RF_DisableReset>:
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800857c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008584:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008588:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <LL_RCC_IsRFUnderReset>:
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800859c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a8:	d101      	bne.n	80085ae <LL_RCC_IsRFUnderReset+0x1a>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <LL_RCC_IsRFUnderReset+0x1c>
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80085c0:	4b06      	ldr	r3, [pc, #24]	@ (80085dc <LL_EXTI_EnableIT_32_63+0x24>)
 80085c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80085c6:	4905      	ldr	r1, [pc, #20]	@ (80085dc <LL_EXTI_EnableIT_32_63+0x24>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	58000800 	.word	0x58000800

080085e0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
    return status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	e052      	b.n	800869c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	799b      	ldrb	r3, [r3, #6]
 80085fe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_SUBGHZ_Init+0x2c>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b03      	cmp	r3, #3
 800860a:	d109      	bne.n	8008620 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f9 fcbe 	bl	8001f94 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008618:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800861c:	f7ff ffcc 	bl	80085b8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d126      	bne.n	8008674 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800862c:	f7ff ffa2 	bl	8008574 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008630:	4b1c      	ldr	r3, [pc, #112]	@ (80086a4 <HAL_SUBGHZ_Init+0xc4>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	0cdb      	lsrs	r3, r3, #19
 800863e:	2264      	movs	r2, #100	@ 0x64
 8008640:	fb02 f303 	mul.w	r3, r2, r3
 8008644:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	609a      	str	r2, [r3, #8]
        break;
 8008656:	e007      	b.n	8008668 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	3b01      	subs	r3, #1
 800865c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800865e:	f7ff ff99 	bl	8008594 <LL_RCC_IsRFUnderReset>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1ee      	bne.n	8008646 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008668:	f7ff ff34 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800866c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008670:	f7ff ff1c 	bl	80084ac <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008674:	f7ff ff4e 	bl	8008514 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 faac 	bl	8008be0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	719a      	strb	r2, [r3, #6]

  return status;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000000 	.word	0x20000000

080086a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	817b      	strh	r3, [r7, #10]
 80086b8:	4613      	mov	r3, r2
 80086ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	799b      	ldrb	r3, [r3, #6]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d14a      	bne.n	800875c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	795b      	ldrb	r3, [r3, #5]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e045      	b.n	800875e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2202      	movs	r2, #2
 80086dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fb4c 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80086e4:	f7ff ff06 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80086e8:	210d      	movs	r1, #13
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 fa98 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80086f0:	897b      	ldrh	r3, [r7, #10]
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fa90 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008700:	897b      	ldrh	r3, [r7, #10]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fa8a 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	82bb      	strh	r3, [r7, #20]
 8008710:	e00a      	b.n	8008728 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008712:	8abb      	ldrh	r3, [r7, #20]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	4619      	mov	r1, r3
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fa7f 	bl	8008c20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008722:	8abb      	ldrh	r3, [r7, #20]
 8008724:	3301      	adds	r3, #1
 8008726:	82bb      	strh	r3, [r7, #20]
 8008728:	8aba      	ldrh	r2, [r7, #20]
 800872a:	893b      	ldrh	r3, [r7, #8]
 800872c:	429a      	cmp	r2, r3
 800872e:	d3f0      	bcc.n	8008712 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008730:	f7ff fed0 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 fb45 	bl	8008dc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	75fb      	strb	r3, [r7, #23]
 8008746:	e001      	b.n	800874c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	715a      	strb	r2, [r3, #5]

    return status;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	e000      	b.n	800875e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800875c:	2302      	movs	r3, #2
  }
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b088      	sub	sp, #32
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	461a      	mov	r2, r3
 8008772:	460b      	mov	r3, r1
 8008774:	817b      	strh	r3, [r7, #10]
 8008776:	4613      	mov	r3, r2
 8008778:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	799b      	ldrb	r3, [r3, #6]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d14a      	bne.n	800881e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	795b      	ldrb	r3, [r3, #5]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008790:	2302      	movs	r3, #2
 8008792:	e045      	b.n	8008820 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 faee 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80087a0:	f7ff fea8 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80087a4:	211d      	movs	r1, #29
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fa3a 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80087ac:	897b      	ldrh	r3, [r7, #10]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fa32 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80087bc:	897b      	ldrh	r3, [r7, #10]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	4619      	mov	r1, r3
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fa2c 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fa28 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	82fb      	strh	r3, [r7, #22]
 80087d4:	e009      	b.n	80087ea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80087d6:	69b9      	ldr	r1, [r7, #24]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fa77 	bl	8008ccc <SUBGHZSPI_Receive>
      pData++;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	3301      	adds	r3, #1
 80087e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80087e4:	8afb      	ldrh	r3, [r7, #22]
 80087e6:	3301      	adds	r3, #1
 80087e8:	82fb      	strh	r3, [r7, #22]
 80087ea:	8afa      	ldrh	r2, [r7, #22]
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d3f1      	bcc.n	80087d6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087f2:	f7ff fe6f 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fae4 	bl	8008dc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	77fb      	strb	r3, [r7, #31]
 8008808:	e001      	b.n	800880e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	715a      	strb	r2, [r3, #5]

    return status;
 800881a:	7ffb      	ldrb	r3, [r7, #31]
 800881c:	e000      	b.n	8008820 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800881e:	2302      	movs	r3, #2
  }
}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	461a      	mov	r2, r3
 8008834:	460b      	mov	r3, r1
 8008836:	72fb      	strb	r3, [r7, #11]
 8008838:	4613      	mov	r3, r2
 800883a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	799b      	ldrb	r3, [r3, #6]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	d14a      	bne.n	80088dc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800884e:	2302      	movs	r3, #2
 8008850:	e045      	b.n	80088de <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fa8f 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	2b84      	cmp	r3, #132	@ 0x84
 8008862:	d002      	beq.n	800886a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	2b94      	cmp	r3, #148	@ 0x94
 8008868:	d103      	bne.n	8008872 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	711a      	strb	r2, [r3, #4]
 8008870:	e002      	b.n	8008878 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008878:	f7ff fe3c 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	4619      	mov	r1, r3
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f9cd 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008886:	2300      	movs	r3, #0
 8008888:	82bb      	strh	r3, [r7, #20]
 800888a:	e00a      	b.n	80088a2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800888c:	8abb      	ldrh	r3, [r7, #20]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f9c2 	bl	8008c20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800889c:	8abb      	ldrh	r3, [r7, #20]
 800889e:	3301      	adds	r3, #1
 80088a0:	82bb      	strh	r3, [r7, #20]
 80088a2:	8aba      	ldrh	r2, [r7, #20]
 80088a4:	893b      	ldrh	r3, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d3f0      	bcc.n	800888c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80088aa:	f7ff fe13 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80088ae:	7afb      	ldrb	r3, [r7, #11]
 80088b0:	2b84      	cmp	r3, #132	@ 0x84
 80088b2:	d002      	beq.n	80088ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fa85 	bl	8008dc4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	e001      	b.n	80088cc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	715a      	strb	r2, [r3, #5]

    return status;
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	e000      	b.n	80088de <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80088dc:	2302      	movs	r3, #2
  }
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b088      	sub	sp, #32
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	461a      	mov	r2, r3
 80088f2:	460b      	mov	r3, r1
 80088f4:	72fb      	strb	r3, [r7, #11]
 80088f6:	4613      	mov	r3, r2
 80088f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	799b      	ldrb	r3, [r3, #6]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	d13d      	bne.n	8008984 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	795b      	ldrb	r3, [r3, #5]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008910:	2302      	movs	r3, #2
 8008912:	e038      	b.n	8008986 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fa2e 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008920:	f7ff fde8 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f979 	bl	8008c20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800892e:	2100      	movs	r1, #0
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 f975 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008936:	2300      	movs	r3, #0
 8008938:	82fb      	strh	r3, [r7, #22]
 800893a:	e009      	b.n	8008950 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800893c:	69b9      	ldr	r1, [r7, #24]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f9c4 	bl	8008ccc <SUBGHZSPI_Receive>
      pData++;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	3301      	adds	r3, #1
 8008948:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800894a:	8afb      	ldrh	r3, [r7, #22]
 800894c:	3301      	adds	r3, #1
 800894e:	82fb      	strh	r3, [r7, #22]
 8008950:	8afa      	ldrh	r2, [r7, #22]
 8008952:	893b      	ldrh	r3, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d3f1      	bcc.n	800893c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008958:	f7ff fdbc 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fa31 	bl	8008dc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e001      	b.n	8008974 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	715a      	strb	r2, [r3, #5]

    return status;
 8008980:	7ffb      	ldrb	r3, [r7, #31]
 8008982:	e000      	b.n	8008986 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	461a      	mov	r2, r3
 800899a:	460b      	mov	r3, r1
 800899c:	72fb      	strb	r3, [r7, #11]
 800899e:	4613      	mov	r3, r2
 80089a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	799b      	ldrb	r3, [r3, #6]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d13e      	bne.n	8008a2a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	795b      	ldrb	r3, [r3, #5]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e039      	b.n	8008a2c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f9dc 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089c4:	f7ff fd96 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80089c8:	210e      	movs	r1, #14
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f928 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	4619      	mov	r1, r3
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f923 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089da:	2300      	movs	r3, #0
 80089dc:	82bb      	strh	r3, [r7, #20]
 80089de:	e00a      	b.n	80089f6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089e0:	8abb      	ldrh	r3, [r7, #20]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	4619      	mov	r1, r3
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f918 	bl	8008c20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80089f0:	8abb      	ldrh	r3, [r7, #20]
 80089f2:	3301      	adds	r3, #1
 80089f4:	82bb      	strh	r3, [r7, #20]
 80089f6:	8aba      	ldrh	r2, [r7, #20]
 80089f8:	893b      	ldrh	r3, [r7, #8]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d3f0      	bcc.n	80089e0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089fe:	f7ff fd69 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f9de 	bl	8008dc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
 8008a14:	e001      	b.n	8008a1a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	715a      	strb	r2, [r3, #5]

    return status;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	e000      	b.n	8008a2c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008a2a:	2302      	movs	r3, #2
  }
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	460b      	mov	r3, r1
 8008a42:	72fb      	strb	r3, [r7, #11]
 8008a44:	4613      	mov	r3, r2
 8008a46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	799b      	ldrb	r3, [r3, #6]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d141      	bne.n	8008ada <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	795b      	ldrb	r3, [r3, #5]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e03c      	b.n	8008adc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f987 	bl	8008d7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a6e:	f7ff fd41 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008a72:	211e      	movs	r1, #30
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f8d3 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f8ce 	bl	8008c20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008a84:	2100      	movs	r1, #0
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f8ca 	bl	8008c20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	82fb      	strh	r3, [r7, #22]
 8008a90:	e009      	b.n	8008aa6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008a92:	69b9      	ldr	r1, [r7, #24]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f919 	bl	8008ccc <SUBGHZSPI_Receive>
      pData++;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008aa0:	8afb      	ldrh	r3, [r7, #22]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	82fb      	strh	r3, [r7, #22]
 8008aa6:	8afa      	ldrh	r2, [r7, #22]
 8008aa8:	893b      	ldrh	r3, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d3f1      	bcc.n	8008a92 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008aae:	f7ff fd11 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f986 	bl	8008dc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	e001      	b.n	8008aca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	715a      	strb	r2, [r3, #5]

    return status;
 8008ad6:	7ffb      	ldrb	r3, [r7, #31]
 8008ad8:	e000      	b.n	8008adc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
  }
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3720      	adds	r7, #32
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008aec:	2300      	movs	r3, #0
 8008aee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008af0:	f107 020c 	add.w	r2, r7, #12
 8008af4:	2302      	movs	r3, #2
 8008af6:	2112      	movs	r1, #18
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff fef4 	bl	80088e6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008afe:	7b3b      	ldrb	r3, [r7, #12]
 8008b00:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008b02:	89fb      	ldrh	r3, [r7, #14]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	b21a      	sxth	r2, r3
 8008b08:	7b7b      	ldrb	r3, [r7, #13]
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008b12:	f107 020c 	add.w	r2, r7, #12
 8008b16:	2302      	movs	r3, #2
 8008b18:	2102      	movs	r1, #2
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fe84 	bl	8008828 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008b20:	89fb      	ldrh	r3, [r7, #14]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f019 fe48 	bl	80227c0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f019 fe4e 	bl	80227dc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f019 fe9e 	bl	802288c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008b50:	89fb      	ldrh	r3, [r7, #14]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f019 fea4 	bl	80228a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	f003 0310 	and.w	r3, r3, #16
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f019 feaa 	bl	80228c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008b70:	89fb      	ldrh	r3, [r7, #14]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f019 fe78 	bl	8022870 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008b80:	89fb      	ldrh	r3, [r7, #14]
 8008b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f019 fe34 	bl	80227f8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008b90:	89fb      	ldrh	r3, [r7, #14]
 8008b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00d      	beq.n	8008bb6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008b9a:	89fb      	ldrh	r3, [r7, #14]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f019 fe34 	bl	8022814 <HAL_SUBGHZ_CADStatusCallback>
 8008bac:	e003      	b.n	8008bb6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f019 fe2f 	bl	8022814 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008bb6:	89fb      	ldrh	r3, [r7, #14]
 8008bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f019 fe45 	bl	8022850 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008bc6:	89fb      	ldrh	r3, [r7, #14]
 8008bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f019 fe85 	bl	80228e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008be8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a0b      	ldr	r2, [pc, #44]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008bf4:	4a09      	ldr	r2, [pc, #36]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008bfc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008bfe:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008c00:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008c04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008c06:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a04      	ldr	r2, [pc, #16]	@ (8008c1c <SUBGHZSPI_Init+0x3c>)
 8008c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c10:	6013      	str	r3, [r2, #0]
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr
 8008c1c:	58010000 	.word	0x58010000

08008c20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008c30:	4b23      	ldr	r3, [pc, #140]	@ (8008cc0 <SUBGHZSPI_Transmit+0xa0>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	4613      	mov	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	0cdb      	lsrs	r3, r3, #19
 8008c3e:	2264      	movs	r2, #100	@ 0x64
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	609a      	str	r2, [r3, #8]
      break;
 8008c56:	e008      	b.n	8008c6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008c5e:	4b19      	ldr	r3, [pc, #100]	@ (8008cc4 <SUBGHZSPI_Transmit+0xa4>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d1ed      	bne.n	8008c46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008c6a:	4b17      	ldr	r3, [pc, #92]	@ (8008cc8 <SUBGHZSPI_Transmit+0xa8>)
 8008c6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008c74:	4b12      	ldr	r3, [pc, #72]	@ (8008cc0 <SUBGHZSPI_Transmit+0xa0>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	0cdb      	lsrs	r3, r3, #19
 8008c82:	2264      	movs	r2, #100	@ 0x64
 8008c84:	fb02 f303 	mul.w	r3, r2, r3
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	609a      	str	r2, [r3, #8]
      break;
 8008c9a:	e008      	b.n	8008cae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008ca2:	4b08      	ldr	r3, [pc, #32]	@ (8008cc4 <SUBGHZSPI_Transmit+0xa4>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d1ed      	bne.n	8008c8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008cae:	4b05      	ldr	r3, [pc, #20]	@ (8008cc4 <SUBGHZSPI_Transmit+0xa4>)
 8008cb0:	68db      	ldr	r3, [r3, #12]

  return status;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	20000000 	.word	0x20000000
 8008cc4:	58010000 	.word	0x58010000
 8008cc8:	5801000c 	.word	0x5801000c

08008ccc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008cda:	4b25      	ldr	r3, [pc, #148]	@ (8008d70 <SUBGHZSPI_Receive+0xa4>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	0cdb      	lsrs	r3, r3, #19
 8008ce8:	2264      	movs	r2, #100	@ 0x64
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d105      	bne.n	8008d02 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	609a      	str	r2, [r3, #8]
      break;
 8008d00:	e008      	b.n	8008d14 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008d08:	4b1a      	ldr	r3, [pc, #104]	@ (8008d74 <SUBGHZSPI_Receive+0xa8>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d1ed      	bne.n	8008cf0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008d14:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <SUBGHZSPI_Receive+0xac>)
 8008d16:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	22ff      	movs	r2, #255	@ 0xff
 8008d1c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d1e:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <SUBGHZSPI_Receive+0xa4>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4613      	mov	r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	0cdb      	lsrs	r3, r3, #19
 8008d2c:	2264      	movs	r2, #100	@ 0x64
 8008d2e:	fb02 f303 	mul.w	r3, r2, r3
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	609a      	str	r2, [r3, #8]
      break;
 8008d44:	e008      	b.n	8008d58 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008d4c:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <SUBGHZSPI_Receive+0xa8>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d1ed      	bne.n	8008d34 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <SUBGHZSPI_Receive+0xa8>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	701a      	strb	r2, [r3, #0]

  return status;
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000000 	.word	0x20000000
 8008d74:	58010000 	.word	0x58010000
 8008d78:	5801000c 	.word	0x5801000c

08008d7c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	791b      	ldrb	r3, [r3, #4]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d111      	bne.n	8008db0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc0 <SUBGHZ_CheckDeviceReady+0x44>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	4613      	mov	r3, r2
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	4413      	add	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	0c1b      	lsrs	r3, r3, #16
 8008d9a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008d9c:	f7ff fbaa 	bl	80084f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f9      	bne.n	8008da0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008dac:	f7ff fb92 	bl	80084d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f807 	bl	8008dc4 <SUBGHZ_WaitOnBusy>
 8008db6:	4603      	mov	r3, r0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000000 	.word	0x20000000

08008dc4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008dd0:	4b12      	ldr	r3, [pc, #72]	@ (8008e1c <SUBGHZ_WaitOnBusy+0x58>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	4413      	add	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	0d1b      	lsrs	r3, r3, #20
 8008dde:	2264      	movs	r2, #100	@ 0x64
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008de6:	f7ff fbb3 	bl	8008550 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008dea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	609a      	str	r2, [r3, #8]
      break;
 8008dfc:	e009      	b.n	8008e12 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008e04:	f7ff fb92 	bl	800852c <LL_PWR_IsActiveFlag_RFBUSYS>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d0e9      	beq.n	8008de6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000000 	.word	0x20000000

08008e20 <LL_RCC_GetUSARTClockSource>:
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	401a      	ands	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	041b      	lsls	r3, r3, #16
 8008e38:	4313      	orrs	r3, r2
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <LL_RCC_GetLPUARTClockSource>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4013      	ands	r3, r2
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e042      	b.n	8008efa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f9 fe2a 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2224      	movs	r2, #36	@ 0x24
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0201 	bic.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc3b 	bl	8009720 <UART_SetConfig>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e022      	b.n	8008efa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fea3 	bl	8009c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0201 	orr.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 ff29 	bl	8009d4a <UART_CheckIdleState>
 8008ef8:	4603      	mov	r3, r0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	@ 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d137      	bne.n	8008f8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <HAL_UART_Receive_IT+0x24>
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e030      	b.n	8008f8e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	@ (8008f98 <HAL_UART_Receive_IT+0x94>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d01f      	beq.n	8008f7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d018      	beq.n	8008f7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	613b      	str	r3, [r7, #16]
   return(result);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	69f9      	ldr	r1, [r7, #28]
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f7c:	88fb      	ldrh	r3, [r7, #6]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fff8 	bl	8009f78 <UART_Start_Receive_IT>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	e000      	b.n	8008f8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f8c:	2302      	movs	r3, #2
  }
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3728      	adds	r7, #40	@ 0x28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	40008000 	.word	0x40008000

08008f9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	@ 0x28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d167      	bne.n	8009084 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <HAL_UART_Transmit_DMA+0x24>
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e060      	b.n	8009086 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	88fa      	ldrh	r2, [r7, #6]
 8008fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2221      	movs	r2, #33	@ 0x21
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d028      	beq.n	8009044 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ff6:	4a26      	ldr	r2, [pc, #152]	@ (8009090 <HAL_UART_Transmit_DMA+0xf4>)
 8008ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ffe:	4a25      	ldr	r2, [pc, #148]	@ (8009094 <HAL_UART_Transmit_DMA+0xf8>)
 8009000:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009006:	4a24      	ldr	r2, [pc, #144]	@ (8009098 <HAL_UART_Transmit_DMA+0xfc>)
 8009008:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800900e:	2200      	movs	r2, #0
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901a:	4619      	mov	r1, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3328      	adds	r3, #40	@ 0x28
 8009022:	461a      	mov	r2, r3
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	f7fb fb49 	bl	80046bc <HAL_DMA_Start_IT>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2210      	movs	r2, #16
 8009034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2220      	movs	r2, #32
 800903c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e020      	b.n	8009086 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2240      	movs	r2, #64	@ 0x40
 800904a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	613b      	str	r3, [r7, #16]
   return(result);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009062:	627b      	str	r3, [r7, #36]	@ 0x24
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906c:	623a      	str	r2, [r7, #32]
 800906e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	69f9      	ldr	r1, [r7, #28]
 8009072:	6a3a      	ldr	r2, [r7, #32]
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	61bb      	str	r3, [r7, #24]
   return(result);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	3728      	adds	r7, #40	@ 0x28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	0800a303 	.word	0x0800a303
 8009094:	0800a39d 	.word	0x0800a39d
 8009098:	0800a3b9 	.word	0x0800a3b9

0800909c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b0ba      	sub	sp, #232	@ 0xe8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090ca:	4013      	ands	r3, r2
 80090cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11b      	bne.n	8009110 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d015      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 82e3 	beq.w	80096cc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
      }
      return;
 800910e:	e2dd      	b.n	80096cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8123 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800911a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800911e:	4b8d      	ldr	r3, [pc, #564]	@ (8009354 <HAL_UART_IRQHandler+0x2b8>)
 8009120:	4013      	ands	r3, r2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800912a:	4b8b      	ldr	r3, [pc, #556]	@ (8009358 <HAL_UART_IRQHandler+0x2bc>)
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8116 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d011      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
 8009170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2202      	movs	r2, #2
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800918a:	f043 0204 	orr.w	r2, r3, #4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2204      	movs	r2, #4
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ba:	f043 0202 	orr.w	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d017      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80091e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009354 <HAL_UART_IRQHandler+0x2b8>)
 80091e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2208      	movs	r2, #8
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f6:	f043 0208 	orr.w	r2, r3, #8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009208:	2b00      	cmp	r3, #0
 800920a:	d012      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
 800920c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00c      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009228:	f043 0220 	orr.w	r2, r3, #32
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8249 	beq.w	80096d0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800923e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800924a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800925a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d007      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009278:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d005      	beq.n	8009296 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800928a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800928e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009292:	2b00      	cmp	r3, #0
 8009294:	d054      	beq.n	8009340 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 ffce 	bl	800a238 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a6:	2b40      	cmp	r3, #64	@ 0x40
 80092a8:	d146      	bne.n	8009338 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d9      	bne.n	80092aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009306:	4a15      	ldr	r2, [pc, #84]	@ (800935c <HAL_UART_IRQHandler+0x2c0>)
 8009308:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009310:	4618      	mov	r0, r3
 8009312:	f7fb faaf 	bl	8004874 <HAL_DMA_Abort_IT>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800932a:	4610      	mov	r0, r2
 800932c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932e:	e00f      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f9e0 	bl	80096f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009336:	e00b      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f9dc 	bl	80096f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933e:	e007      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9d8 	bl	80096f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800934e:	e1bf      	b.n	80096d0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	bf00      	nop
    return;
 8009352:	e1bd      	b.n	80096d0 <HAL_UART_IRQHandler+0x634>
 8009354:	10000001 	.word	0x10000001
 8009358:	04000120 	.word	0x04000120
 800935c:	0800a439 	.word	0x0800a439

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	f040 8153 	bne.w	8009610 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 814c 	beq.w	8009610 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8145 	beq.w	8009610 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2210      	movs	r2, #16
 800938c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009398:	2b40      	cmp	r3, #64	@ 0x40
 800939a:	f040 80bb 	bne.w	8009514 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 818f 	beq.w	80096d4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093c0:	429a      	cmp	r2, r3
 80093c2:	f080 8187 	bcs.w	80096d4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f040 8087 	bne.w	80094f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800940e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009412:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800941a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1da      	bne.n	80093e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800943e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800945a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e1      	bne.n	800942e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800947a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800947c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800948e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800949c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e3      	bne.n	800946a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e4      	bne.n	80094b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fb f963 	bl	80047b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2202      	movs	r2, #2
 80094f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009504:	b29b      	uxth	r3, r3
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b29b      	uxth	r3, r3
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8fb 	bl	8009708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009512:	e0df      	b.n	80096d4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009520:	b29b      	uxth	r3, r3
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800952e:	b29b      	uxth	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80d1 	beq.w	80096d8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80cc 	beq.w	80096d8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800954e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009562:	647b      	str	r3, [r7, #68]	@ 0x44
 8009564:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e4      	bne.n	8009540 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	623b      	str	r3, [r7, #32]
   return(result);
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800958c:	f023 0301 	bic.w	r3, r3, #1
 8009590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3308      	adds	r3, #8
 800959a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800959e:	633a      	str	r2, [r7, #48]	@ 0x30
 80095a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e1      	bne.n	8009576 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	69b9      	ldr	r1, [r7, #24]
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	617b      	str	r3, [r7, #20]
   return(result);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f87d 	bl	8009708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800960e:	e063      	b.n	80096d8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00e      	beq.n	800963a <HAL_UART_IRQHandler+0x59e>
 800961c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fc5e 	bl	800aef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009638:	e051      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800963a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d014      	beq.n	8009670 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800964a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d008      	beq.n	8009670 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009662:	2b00      	cmp	r3, #0
 8009664:	d03a      	beq.n	80096dc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
    }
    return;
 800966e:	e035      	b.n	80096dc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <HAL_UART_IRQHandler+0x5f4>
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 feeb 	bl	800a464 <UART_EndTransmit_IT>
    return;
 800968e:	e026      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <HAL_UART_IRQHandler+0x614>
 800969c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fc35 	bl	800af18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ae:	e016      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d010      	beq.n	80096de <HAL_UART_IRQHandler+0x642>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da0c      	bge.n	80096de <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fc1e 	bl	800af06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ca:	e008      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096cc:	bf00      	nop
 80096ce:	e006      	b.n	80096de <HAL_UART_IRQHandler+0x642>
    return;
 80096d0:	bf00      	nop
 80096d2:	e004      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096d4:	bf00      	nop
 80096d6:	e002      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096d8:	bf00      	nop
 80096da:	e000      	b.n	80096de <HAL_UART_IRQHandler+0x642>
    return;
 80096dc:	bf00      	nop
  }
}
 80096de:	37e8      	adds	r7, #232	@ 0xe8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bc80      	pop	{r7}
 80096f4:	4770      	bx	lr

080096f6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr

08009708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr
	...

08009720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009724:	b08c      	sub	sp, #48	@ 0x30
 8009726:	af00      	add	r7, sp, #0
 8009728:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	431a      	orrs	r2, r3
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	431a      	orrs	r2, r3
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	4313      	orrs	r3, r2
 8009746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b94      	ldr	r3, [pc, #592]	@ (80099a0 <UART_SetConfig+0x280>)
 8009750:	4013      	ands	r3, r2
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	6812      	ldr	r2, [r2, #0]
 8009756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009758:	430b      	orrs	r3, r1
 800975a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a89      	ldr	r2, [pc, #548]	@ (80099a4 <UART_SetConfig+0x284>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d004      	beq.n	800978c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009788:	4313      	orrs	r3, r2
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009796:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097aa:	f023 010f 	bic.w	r1, r3, #15
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a7a      	ldr	r2, [pc, #488]	@ (80099a8 <UART_SetConfig+0x288>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d127      	bne.n	8009814 <UART_SetConfig+0xf4>
 80097c4:	2003      	movs	r0, #3
 80097c6:	f7ff fb2b 	bl	8008e20 <LL_RCC_GetUSARTClockSource>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d81b      	bhi.n	800980c <UART_SetConfig+0xec>
 80097d4:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <UART_SetConfig+0xbc>)
 80097d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097da:	bf00      	nop
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	08009805 	.word	0x08009805
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f2:	e080      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fa:	e07c      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009802:	e078      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980a:	e074      	b.n	80098f6 <UART_SetConfig+0x1d6>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009812:	e070      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a64      	ldr	r2, [pc, #400]	@ (80099ac <UART_SetConfig+0x28c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d138      	bne.n	8009890 <UART_SetConfig+0x170>
 800981e:	200c      	movs	r0, #12
 8009820:	f7ff fafe 	bl	8008e20 <LL_RCC_GetUSARTClockSource>
 8009824:	4603      	mov	r3, r0
 8009826:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800982a:	2b0c      	cmp	r3, #12
 800982c:	d82c      	bhi.n	8009888 <UART_SetConfig+0x168>
 800982e:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <UART_SetConfig+0x114>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009869 	.word	0x08009869
 8009838:	08009889 	.word	0x08009889
 800983c:	08009889 	.word	0x08009889
 8009840:	08009889 	.word	0x08009889
 8009844:	08009879 	.word	0x08009879
 8009848:	08009889 	.word	0x08009889
 800984c:	08009889 	.word	0x08009889
 8009850:	08009889 	.word	0x08009889
 8009854:	08009871 	.word	0x08009871
 8009858:	08009889 	.word	0x08009889
 800985c:	08009889 	.word	0x08009889
 8009860:	08009889 	.word	0x08009889
 8009864:	08009881 	.word	0x08009881
 8009868:	2300      	movs	r3, #0
 800986a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986e:	e042      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009870:	2302      	movs	r3, #2
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009876:	e03e      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987e:	e03a      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009886:	e036      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988e:	e032      	b.n	80098f6 <UART_SetConfig+0x1d6>
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a43      	ldr	r2, [pc, #268]	@ (80099a4 <UART_SetConfig+0x284>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d12a      	bne.n	80098f0 <UART_SetConfig+0x1d0>
 800989a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800989e:	f7ff fad1 	bl	8008e44 <LL_RCC_GetLPUARTClockSource>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098a8:	d01a      	beq.n	80098e0 <UART_SetConfig+0x1c0>
 80098aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098ae:	d81b      	bhi.n	80098e8 <UART_SetConfig+0x1c8>
 80098b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098b4:	d00c      	beq.n	80098d0 <UART_SetConfig+0x1b0>
 80098b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ba:	d815      	bhi.n	80098e8 <UART_SetConfig+0x1c8>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <UART_SetConfig+0x1a8>
 80098c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098c4:	d008      	beq.n	80098d8 <UART_SetConfig+0x1b8>
 80098c6:	e00f      	b.n	80098e8 <UART_SetConfig+0x1c8>
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ce:	e012      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80098d0:	2302      	movs	r3, #2
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d6:	e00e      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098de:	e00a      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e6:	e006      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e002      	b.n	80098f6 <UART_SetConfig+0x1d6>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a2a      	ldr	r2, [pc, #168]	@ (80099a4 <UART_SetConfig+0x284>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f040 80a4 	bne.w	8009a4a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009906:	2b08      	cmp	r3, #8
 8009908:	d823      	bhi.n	8009952 <UART_SetConfig+0x232>
 800990a:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <UART_SetConfig+0x1f0>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009935 	.word	0x08009935
 8009914:	08009953 	.word	0x08009953
 8009918:	0800993d 	.word	0x0800993d
 800991c:	08009953 	.word	0x08009953
 8009920:	08009943 	.word	0x08009943
 8009924:	08009953 	.word	0x08009953
 8009928:	08009953 	.word	0x08009953
 800992c:	08009953 	.word	0x08009953
 8009930:	0800994b 	.word	0x0800994b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009934:	f7fd fe76 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 8009938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800993a:	e010      	b.n	800995e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800993c:	4b1c      	ldr	r3, [pc, #112]	@ (80099b0 <UART_SetConfig+0x290>)
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009940:	e00d      	b.n	800995e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009942:	f7fd fdbb 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8009946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009948:	e009      	b.n	800995e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800994a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009950:	e005      	b.n	800995e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800995c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8137 	beq.w	8009bd4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996a:	4a12      	ldr	r2, [pc, #72]	@ (80099b4 <UART_SetConfig+0x294>)
 800996c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009970:	461a      	mov	r2, r3
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	fbb3 f3f2 	udiv	r3, r3, r2
 8009978:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	4413      	add	r3, r2
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	429a      	cmp	r2, r3
 8009988:	d305      	bcc.n	8009996 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	429a      	cmp	r2, r3
 8009994:	d910      	bls.n	80099b8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800999c:	e11a      	b.n	8009bd4 <UART_SetConfig+0x4b4>
 800999e:	bf00      	nop
 80099a0:	cfff69f3 	.word	0xcfff69f3
 80099a4:	40008000 	.word	0x40008000
 80099a8:	40013800 	.word	0x40013800
 80099ac:	40004400 	.word	0x40004400
 80099b0:	00f42400 	.word	0x00f42400
 80099b4:	08028e90 	.word	0x08028e90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	2200      	movs	r2, #0
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	60fa      	str	r2, [r7, #12]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009c00 <UART_SetConfig+0x4e0>)
 80099c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2200      	movs	r2, #0
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099da:	f7f7 f9d9 	bl	8000d90 <__aeabi_uldivmod>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4610      	mov	r0, r2
 80099e4:	4619      	mov	r1, r3
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	020b      	lsls	r3, r1, #8
 80099f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099f4:	0202      	lsls	r2, r0, #8
 80099f6:	6979      	ldr	r1, [r7, #20]
 80099f8:	6849      	ldr	r1, [r1, #4]
 80099fa:	0849      	lsrs	r1, r1, #1
 80099fc:	2000      	movs	r0, #0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4605      	mov	r5, r0
 8009a02:	eb12 0804 	adds.w	r8, r2, r4
 8009a06:	eb43 0905 	adc.w	r9, r3, r5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	469a      	mov	sl, r3
 8009a12:	4693      	mov	fp, r2
 8009a14:	4652      	mov	r2, sl
 8009a16:	465b      	mov	r3, fp
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f9b8 	bl	8000d90 <__aeabi_uldivmod>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4613      	mov	r3, r2
 8009a26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a2e:	d308      	bcc.n	8009a42 <UART_SetConfig+0x322>
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a36:	d204      	bcs.n	8009a42 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6a3a      	ldr	r2, [r7, #32]
 8009a3e:	60da      	str	r2, [r3, #12]
 8009a40:	e0c8      	b.n	8009bd4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a48:	e0c4      	b.n	8009bd4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a52:	d167      	bne.n	8009b24 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009a54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d828      	bhi.n	8009aae <UART_SetConfig+0x38e>
 8009a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <UART_SetConfig+0x344>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	08009aaf 	.word	0x08009aaf
 8009a74:	08009a9f 	.word	0x08009a9f
 8009a78:	08009aaf 	.word	0x08009aaf
 8009a7c:	08009aaf 	.word	0x08009aaf
 8009a80:	08009aaf 	.word	0x08009aaf
 8009a84:	08009aa7 	.word	0x08009aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a88:	f7fd fdcc 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 8009a8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a8e:	e014      	b.n	8009aba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a90:	f7fd fdda 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 8009a94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a96:	e010      	b.n	8009aba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a98:	4b5a      	ldr	r3, [pc, #360]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a9c:	e00d      	b.n	8009aba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a9e:	f7fd fd0d 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8009aa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aa4:	e009      	b.n	8009aba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aac:	e005      	b.n	8009aba <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8089 	beq.w	8009bd4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c00 <UART_SetConfig+0x4e0>)
 8009ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad4:	005a      	lsls	r2, r3, #1
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	441a      	add	r2, r3
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	2b0f      	cmp	r3, #15
 8009aec:	d916      	bls.n	8009b1c <UART_SetConfig+0x3fc>
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009af4:	d212      	bcs.n	8009b1c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f023 030f 	bic.w	r3, r3, #15
 8009afe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	8bfb      	ldrh	r3, [r7, #30]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	8bfa      	ldrh	r2, [r7, #30]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	e05b      	b.n	8009bd4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b22:	e057      	b.n	8009bd4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d828      	bhi.n	8009b7e <UART_SetConfig+0x45e>
 8009b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b34 <UART_SetConfig+0x414>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	08009b7f 	.word	0x08009b7f
 8009b44:	08009b6f 	.word	0x08009b6f
 8009b48:	08009b7f 	.word	0x08009b7f
 8009b4c:	08009b7f 	.word	0x08009b7f
 8009b50:	08009b7f 	.word	0x08009b7f
 8009b54:	08009b77 	.word	0x08009b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b58:	f7fd fd64 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 8009b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b5e:	e014      	b.n	8009b8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b60:	f7fd fd72 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 8009b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b66:	e010      	b.n	8009b8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b68:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b6c:	e00d      	b.n	8009b8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6e:	f7fd fca5 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8009b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b74:	e009      	b.n	8009b8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b7c:	e005      	b.n	8009b8a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b88:	bf00      	nop
    }

    if (pclk != 0U)
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d021      	beq.n	8009bd4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b94:	4a1a      	ldr	r2, [pc, #104]	@ (8009c00 <UART_SetConfig+0x4e0>)
 8009b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	441a      	add	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d909      	bls.n	8009bce <UART_SetConfig+0x4ae>
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bc0:	d205      	bcs.n	8009bce <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60da      	str	r2, [r3, #12]
 8009bcc:	e002      	b.n	8009bd4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2200      	movs	r2, #0
 8009be8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009bf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3730      	adds	r7, #48	@ 0x30
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bfe:	bf00      	nop
 8009c00:	08028e90 	.word	0x08028e90
 8009c04:	00f42400 	.word	0x00f42400

08009c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00a      	beq.n	8009c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7a:	f003 0308 	and.w	r3, r3, #8
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00a      	beq.n	8009c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00a      	beq.n	8009cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01a      	beq.n	8009d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d06:	d10a      	bne.n	8009d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr

08009d4a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af02      	add	r7, sp, #8
 8009d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d5a:	f7f8 fab5 	bl	80022c8 <HAL_GetTick>
 8009d5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d10e      	bne.n	8009d8c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f832 	bl	8009de6 <UART_WaitOnFlagUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e028      	b.n	8009dde <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d10e      	bne.n	8009db8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f81c 	bl	8009de6 <UART_WaitOnFlagUntilTimeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e012      	b.n	8009dde <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b09c      	sub	sp, #112	@ 0x70
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	4613      	mov	r3, r2
 8009df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009df6:	e0a9      	b.n	8009f4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009df8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dfe:	f000 80a5 	beq.w	8009f4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e02:	f7f8 fa61 	bl	80022c8 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d302      	bcc.n	8009e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d140      	bne.n	8009e9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e28:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e38:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009e3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e6a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009e6c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e5      	bne.n	8009e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e069      	b.n	8009f6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d051      	beq.n	8009f4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eb6:	d149      	bne.n	8009f4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ec0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	461a      	mov	r2, r3
 8009ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e6      	bne.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	e853 3f00 	ldrex	r3, [r3]
 8009f02:	613b      	str	r3, [r7, #16]
   return(result);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f023 0301 	bic.w	r3, r3, #1
 8009f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3308      	adds	r3, #8
 8009f12:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f14:	623a      	str	r2, [r7, #32]
 8009f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f18:	69f9      	ldr	r1, [r7, #28]
 8009f1a:	6a3a      	ldr	r2, [r7, #32]
 8009f1c:	e841 2300 	strex	r3, r2, [r1]
 8009f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e5      	bne.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e010      	b.n	8009f6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	69da      	ldr	r2, [r3, #28]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	4013      	ands	r3, r2
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	bf0c      	ite	eq
 8009f5c:	2301      	moveq	r3, #1
 8009f5e:	2300      	movne	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	f43f af46 	beq.w	8009df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3770      	adds	r7, #112	@ 0x70
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b0a3      	sub	sp, #140	@ 0x8c
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	88fa      	ldrh	r2, [r7, #6]
 8009f90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009faa:	d10e      	bne.n	8009fca <UART_Start_Receive_IT+0x52>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d105      	bne.n	8009fc0 <UART_Start_Receive_IT+0x48>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009fba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fbe:	e02d      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	22ff      	movs	r2, #255	@ 0xff
 8009fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fc8:	e028      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10d      	bne.n	8009fee <UART_Start_Receive_IT+0x76>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d104      	bne.n	8009fe4 <UART_Start_Receive_IT+0x6c>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	22ff      	movs	r2, #255	@ 0xff
 8009fde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fe2:	e01b      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	227f      	movs	r2, #127	@ 0x7f
 8009fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fec:	e016      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ff6:	d10d      	bne.n	800a014 <UART_Start_Receive_IT+0x9c>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d104      	bne.n	800a00a <UART_Start_Receive_IT+0x92>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	227f      	movs	r2, #127	@ 0x7f
 800a004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a008:	e008      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	223f      	movs	r2, #63	@ 0x3f
 800a00e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a012:	e003      	b.n	800a01c <UART_Start_Receive_IT+0xa4>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2222      	movs	r2, #34	@ 0x22
 800a028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3308      	adds	r3, #8
 800a032:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a03c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a050:	673a      	str	r2, [r7, #112]	@ 0x70
 800a052:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a056:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a05e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e3      	bne.n	800a02c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a06c:	d14f      	bne.n	800a10e <UART_Start_Receive_IT+0x196>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	429a      	cmp	r2, r3
 800a078:	d349      	bcc.n	800a10e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a082:	d107      	bne.n	800a094 <UART_Start_Receive_IT+0x11c>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4a46      	ldr	r2, [pc, #280]	@ (800a1a8 <UART_Start_Receive_IT+0x230>)
 800a090:	675a      	str	r2, [r3, #116]	@ 0x74
 800a092:	e002      	b.n	800a09a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4a45      	ldr	r2, [pc, #276]	@ (800a1ac <UART_Start_Receive_IT+0x234>)
 800a098:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01a      	beq.n	800a0d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e4      	bne.n	800a0a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a0f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a0fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e5      	bne.n	800a0d8 <UART_Start_Receive_IT+0x160>
 800a10c:	e046      	b.n	800a19c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a116:	d107      	bne.n	800a128 <UART_Start_Receive_IT+0x1b0>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a23      	ldr	r2, [pc, #140]	@ (800a1b0 <UART_Start_Receive_IT+0x238>)
 800a124:	675a      	str	r2, [r3, #116]	@ 0x74
 800a126:	e002      	b.n	800a12e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4a22      	ldr	r2, [pc, #136]	@ (800a1b4 <UART_Start_Receive_IT+0x23c>)
 800a12c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d019      	beq.n	800a16a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a14a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
 800a156:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a15a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e6      	bne.n	800a136 <UART_Start_Receive_IT+0x1be>
 800a168:	e018      	b.n	800a19c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	613b      	str	r3, [r7, #16]
   return(result);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f043 0320 	orr.w	r3, r3, #32
 800a17e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a188:	623b      	str	r3, [r7, #32]
 800a18a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	69f9      	ldr	r1, [r7, #28]
 800a18e:	6a3a      	ldr	r2, [r7, #32]
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	61bb      	str	r3, [r7, #24]
   return(result);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	378c      	adds	r7, #140	@ 0x8c
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bc80      	pop	{r7}
 800a1a6:	4770      	bx	lr
 800a1a8:	0800ab8d 	.word	0x0800ab8d
 800a1ac:	0800a82d 	.word	0x0800a82d
 800a1b0:	0800a675 	.word	0x0800a675
 800a1b4:	0800a4bd 	.word	0x0800a4bd

0800a1b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b08f      	sub	sp, #60	@ 0x3c
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	60bb      	str	r3, [r7, #8]
   return(result);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a208:	633b      	str	r3, [r7, #48]	@ 0x30
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a212:	61ba      	str	r2, [r7, #24]
 800a214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	6979      	ldr	r1, [r7, #20]
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	613b      	str	r3, [r7, #16]
   return(result);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a22e:	bf00      	nop
 800a230:	373c      	adds	r7, #60	@ 0x3c
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr

0800a238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a238:	b480      	push	{r7}
 800a23a:	b095      	sub	sp, #84	@ 0x54
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a260:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e6      	bne.n	800a240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	61fb      	str	r3, [r7, #28]
   return(result);
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a29c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e3      	bne.n	800a272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d118      	bne.n	800a2e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f023 0310 	bic.w	r3, r3, #16
 800a2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6979      	ldr	r1, [r7, #20]
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2f8:	bf00      	nop
 800a2fa:	3754      	adds	r7, #84	@ 0x54
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bc80      	pop	{r7}
 800a300:	4770      	bx	lr

0800a302 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b090      	sub	sp, #64	@ 0x40
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d137      	bne.n	800a38e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a320:	2200      	movs	r2, #0
 800a322:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	623b      	str	r3, [r7, #32]
   return(result);
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a33c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a346:	633a      	str	r2, [r7, #48]	@ 0x30
 800a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a34c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e5      	bne.n	800a326 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	60fb      	str	r3, [r7, #12]
   return(result);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	617b      	str	r3, [r7, #20]
   return(result);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a38c:	e002      	b.n	800a394 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a38e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a390:	f7f8 fd0a 	bl	8002da8 <HAL_UART_TxCpltCallback>
}
 800a394:	bf00      	nop
 800a396:	3740      	adds	r7, #64	@ 0x40
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff f99a 	bl	80096e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e0:	2b80      	cmp	r3, #128	@ 0x80
 800a3e2:	d109      	bne.n	800a3f8 <UART_DMAError+0x40>
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	2b21      	cmp	r3, #33	@ 0x21
 800a3e8:	d106      	bne.n	800a3f8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a3f2:	6978      	ldr	r0, [r7, #20]
 800a3f4:	f7ff fee0 	bl	800a1b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a402:	2b40      	cmp	r3, #64	@ 0x40
 800a404:	d109      	bne.n	800a41a <UART_DMAError+0x62>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b22      	cmp	r3, #34	@ 0x22
 800a40a:	d106      	bne.n	800a41a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a414:	6978      	ldr	r0, [r7, #20]
 800a416:	f7ff ff0f 	bl	800a238 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a420:	f043 0210 	orr.w	r2, r3, #16
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a42a:	6978      	ldr	r0, [r7, #20]
 800a42c:	f7ff f963 	bl	80096f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff f94d 	bl	80096f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	60bb      	str	r3, [r7, #8]
   return(result);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	61bb      	str	r3, [r7, #24]
 800a48c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48e:	6979      	ldr	r1, [r7, #20]
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	e841 2300 	strex	r3, r2, [r1]
 800a496:	613b      	str	r3, [r7, #16]
   return(result);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1e6      	bne.n	800a46c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7f8 fc7b 	bl	8002da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4b2:	bf00      	nop
 800a4b4:	3720      	adds	r7, #32
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
	...

0800a4bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b09c      	sub	sp, #112	@ 0x70
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a4ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4d4:	2b22      	cmp	r3, #34	@ 0x22
 800a4d6:	f040 80be 	bne.w	800a656 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a4e8:	b2d9      	uxtb	r1, r3
 800a4ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4f4:	400a      	ands	r2, r1
 800a4f6:	b2d2      	uxtb	r2, r2
 800a4f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f040 80a1 	bne.w	800a666 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a538:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a542:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a544:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a548:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e6      	bne.n	800a524 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3308      	adds	r3, #8
 800a55c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a568:	f023 0301 	bic.w	r3, r3, #1
 800a56c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a576:	647a      	str	r2, [r7, #68]	@ 0x44
 800a578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a57c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e5      	bne.n	800a556 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a33      	ldr	r2, [pc, #204]	@ (800a670 <UART_RxISR_8BIT+0x1b4>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d01f      	beq.n	800a5e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d018      	beq.n	800a5e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e6      	bne.n	800a5b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d12e      	bne.n	800a64e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	e853 3f00 	ldrex	r3, [r3]
 800a602:	60fb      	str	r3, [r7, #12]
   return(result);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0310 	bic.w	r3, r3, #16
 800a60a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a614:	61fb      	str	r3, [r7, #28]
 800a616:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	69b9      	ldr	r1, [r7, #24]
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	617b      	str	r3, [r7, #20]
   return(result);
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e6      	bne.n	800a5f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	2b10      	cmp	r3, #16
 800a634:	d103      	bne.n	800a63e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2210      	movs	r2, #16
 800a63c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff f85e 	bl	8009708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a64c:	e00b      	b.n	800a666 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7f8 fbc0 	bl	8002dd4 <HAL_UART_RxCpltCallback>
}
 800a654:	e007      	b.n	800a666 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0208 	orr.w	r2, r2, #8
 800a664:	619a      	str	r2, [r3, #24]
}
 800a666:	bf00      	nop
 800a668:	3770      	adds	r7, #112	@ 0x70
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	40008000 	.word	0x40008000

0800a674 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b09c      	sub	sp, #112	@ 0x70
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a682:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a68c:	2b22      	cmp	r3, #34	@ 0x22
 800a68e:	f040 80be 	bne.w	800a80e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a6a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a6a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b6:	1c9a      	adds	r2, r3, #2
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 80a1 	bne.w	800a81e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e6      	bne.n	800a6dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3308      	adds	r3, #8
 800a714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	f023 0301 	bic.w	r3, r3, #1
 800a724:	663b      	str	r3, [r7, #96]	@ 0x60
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a72e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e5      	bne.n	800a70e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a33      	ldr	r2, [pc, #204]	@ (800a828 <UART_RxISR_16BIT+0x1b4>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d01f      	beq.n	800a7a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d018      	beq.n	800a7a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	e853 3f00 	ldrex	r3, [r3]
 800a77a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a78e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a794:	e841 2300 	strex	r3, r2, [r1]
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e6      	bne.n	800a76e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d12e      	bne.n	800a806 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f023 0310 	bic.w	r3, r3, #16
 800a7c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	6979      	ldr	r1, [r7, #20]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e6      	bne.n	800a7ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	f003 0310 	and.w	r3, r3, #16
 800a7ea:	2b10      	cmp	r3, #16
 800a7ec:	d103      	bne.n	800a7f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2210      	movs	r2, #16
 800a7f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7fe ff82 	bl	8009708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a804:	e00b      	b.n	800a81e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7f8 fae4 	bl	8002dd4 <HAL_UART_RxCpltCallback>
}
 800a80c:	e007      	b.n	800a81e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f042 0208 	orr.w	r2, r2, #8
 800a81c:	619a      	str	r2, [r3, #24]
}
 800a81e:	bf00      	nop
 800a820:	3770      	adds	r7, #112	@ 0x70
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40008000 	.word	0x40008000

0800a82c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b0ac      	sub	sp, #176	@ 0xb0
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a83a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a862:	2b22      	cmp	r3, #34	@ 0x22
 800a864:	f040 8182 	bne.w	800ab6c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a86e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a872:	e125      	b.n	800aac0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a87e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a882:	b2d9      	uxtb	r1, r3
 800a884:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a88e:	400a      	ands	r2, r1
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a8ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d053      	beq.n	800a96e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d011      	beq.n	800a8f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a8d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a8d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00b      	beq.n	800a8f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ec:	f043 0201 	orr.w	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d011      	beq.n	800a926 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2202      	movs	r2, #2
 800a914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a91c:	f043 0204 	orr.w	r2, r3, #4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a92a:	f003 0304 	and.w	r3, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d011      	beq.n	800a956 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2204      	movs	r2, #4
 800a944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a94c:	f043 0202 	orr.w	r2, r3, #2
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7fe fec8 	bl	80096f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a974:	b29b      	uxth	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 80a2 	bne.w	800aac0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a984:	e853 3f00 	ldrex	r3, [r3]
 800a988:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a98a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a98c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a99e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9a0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a9a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a9ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e4      	bne.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9bc:	e853 3f00 	ldrex	r3, [r3]
 800a9c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a9c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a9c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a9da:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a9dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a9e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a9e2:	e841 2300 	strex	r3, r2, [r1]
 800a9e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a9e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1e1      	bne.n	800a9b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a5f      	ldr	r2, [pc, #380]	@ (800ab84 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d021      	beq.n	800aa50 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d01a      	beq.n	800aa50 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa3c:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa3e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa44:	e841 2300 	strex	r3, r2, [r1]
 800aa48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e4      	bne.n	800aa1a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d130      	bne.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	f023 0310 	bic.w	r3, r3, #16
 800aa72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa80:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e4      	bne.n	800aa5e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f003 0310 	and.w	r3, r3, #16
 800aa9e:	2b10      	cmp	r3, #16
 800aaa0:	d103      	bne.n	800aaaa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fe fe28 	bl	8009708 <HAL_UARTEx_RxEventCallback>
 800aab8:	e002      	b.n	800aac0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f8 f98a 	bl	8002dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aac0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800aac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f47f aecf 	bne.w	800a874 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aadc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aae0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d049      	beq.n	800ab7c <UART_RxISR_8BIT_FIFOEN+0x350>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aaee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d242      	bcs.n	800ab7c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3308      	adds	r3, #8
 800ab16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e3      	bne.n	800aaf6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a15      	ldr	r2, [pc, #84]	@ (800ab88 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ab32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	e853 3f00 	ldrex	r3, [r3]
 800ab40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f043 0320 	orr.w	r3, r3, #32
 800ab48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab56:	61bb      	str	r3, [r7, #24]
 800ab58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	6979      	ldr	r1, [r7, #20]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	613b      	str	r3, [r7, #16]
   return(result);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e4      	bne.n	800ab34 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab6a:	e007      	b.n	800ab7c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0208 	orr.w	r2, r2, #8
 800ab7a:	619a      	str	r2, [r3, #24]
}
 800ab7c:	bf00      	nop
 800ab7e:	37b0      	adds	r7, #176	@ 0xb0
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	40008000 	.word	0x40008000
 800ab88:	0800a4bd 	.word	0x0800a4bd

0800ab8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b0ae      	sub	sp, #184	@ 0xb8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abc2:	2b22      	cmp	r3, #34	@ 0x22
 800abc4:	f040 8186 	bne.w	800aed4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abd2:	e129      	b.n	800ae28 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800abe6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800abea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800abee:	4013      	ands	r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abfc:	1c9a      	adds	r2, r3, #2
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ac1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d053      	beq.n	800acd2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d011      	beq.n	800ac5a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ac36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac50:	f043 0201 	orr.w	r2, r3, #1
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d011      	beq.n	800ac8a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ac66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00b      	beq.n	800ac8a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2202      	movs	r2, #2
 800ac78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac80:	f043 0204 	orr.w	r2, r3, #4
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d011      	beq.n	800acba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ac96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00b      	beq.n	800acba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2204      	movs	r2, #4
 800aca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb0:	f043 0202 	orr.w	r2, r3, #2
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7fe fd16 	bl	80096f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acd8:	b29b      	uxth	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f040 80a4 	bne.w	800ae28 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800acee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad06:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e2      	bne.n	800ace0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ad42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e1      	bne.n	800ad1a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a5f      	ldr	r2, [pc, #380]	@ (800aeec <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d021      	beq.n	800adb8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01a      	beq.n	800adb8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad8a:	e853 3f00 	ldrex	r3, [r3]
 800ad8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ada4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ada6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800adb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e4      	bne.n	800ad82 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d130      	bne.n	800ae22 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	e853 3f00 	ldrex	r3, [r3]
 800add2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add6:	f023 0310 	bic.w	r3, r3, #16
 800adda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ade8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adf0:	e841 2300 	strex	r3, r2, [r1]
 800adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1e4      	bne.n	800adc6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	f003 0310 	and.w	r3, r3, #16
 800ae06:	2b10      	cmp	r3, #16
 800ae08:	d103      	bne.n	800ae12 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2210      	movs	r2, #16
 800ae10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7fe fc74 	bl	8009708 <HAL_UARTEx_RxEventCallback>
 800ae20:	e002      	b.n	800ae28 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7f7 ffd6 	bl	8002dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae28:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ae30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f47f aecb 	bne.w	800abd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae44:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae48:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d049      	beq.n	800aee4 <UART_RxISR_16BIT_FIFOEN+0x358>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae56:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d242      	bcs.n	800aee4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	e853 3f00 	ldrex	r3, [r3]
 800ae6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ae82:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e3      	bne.n	800ae5e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a15      	ldr	r2, [pc, #84]	@ (800aef0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ae9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f043 0320 	orr.w	r3, r3, #32
 800aeb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	69b9      	ldr	r1, [r7, #24]
 800aec4:	69fa      	ldr	r2, [r7, #28]
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	617b      	str	r3, [r7, #20]
   return(result);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e4      	bne.n	800ae9c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aed2:	e007      	b.n	800aee4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0208 	orr.w	r2, r2, #8
 800aee2:	619a      	str	r2, [r3, #24]
}
 800aee4:	bf00      	nop
 800aee6:	37b8      	adds	r7, #184	@ 0xb8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	40008000 	.word	0x40008000
 800aef0:	0800a675 	.word	0x0800a675

0800aef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr

0800af06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af0e:	bf00      	nop
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr

0800af18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr

0800af2a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b088      	sub	sp, #32
 800af2e:	af02      	add	r7, sp, #8
 800af30:	60f8      	str	r0, [r7, #12]
 800af32:	1d3b      	adds	r3, r7, #4
 800af34:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800af46:	2302      	movs	r3, #2
 800af48:	e046      	b.n	800afd8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2224      	movs	r2, #36	@ 0x24
 800af56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0201 	bic.w	r2, r2, #1
 800af68:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d105      	bne.n	800af90 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800af84:	1d3b      	adds	r3, r7, #4
 800af86:	e893 0006 	ldmia.w	r3, {r1, r2}
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 f911 	bl	800b1b2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0201 	orr.w	r2, r2, #1
 800af9e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afa0:	f7f7 f992 	bl	80022c8 <HAL_GetTick>
 800afa4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2200      	movs	r2, #0
 800afb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7fe ff16 	bl	8009de6 <UART_WaitOnFlagUntilTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	75fb      	strb	r3, [r7, #23]
 800afc4:	e003      	b.n	800afce <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	@ 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d101      	bne.n	800aff6 <HAL_UARTEx_EnableStopMode+0x16>
 800aff2:	2302      	movs	r3, #2
 800aff4:	e021      	b.n	800b03a <HAL_UARTEx_EnableStopMode+0x5a>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f043 0302 	orr.w	r3, r3, #2
 800b012:	61fb      	str	r3, [r7, #28]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	61bb      	str	r3, [r7, #24]
 800b01e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6979      	ldr	r1, [r7, #20]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	613b      	str	r3, [r7, #16]
   return(result);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e6      	bne.n	800affe <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3724      	adds	r7, #36	@ 0x24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bc80      	pop	{r7}
 800b042:	4770      	bx	lr

0800b044 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b052:	2b01      	cmp	r3, #1
 800b054:	d101      	bne.n	800b05a <HAL_UARTEx_EnableFifoMode+0x16>
 800b056:	2302      	movs	r3, #2
 800b058:	e02b      	b.n	800b0b2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2224      	movs	r2, #36	@ 0x24
 800b066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0201 	bic.w	r2, r2, #1
 800b080:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b088:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800b090:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f8ac 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e02d      	b.n	800b12e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2224      	movs	r2, #36	@ 0x24
 800b0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f022 0201 	bic.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f872 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2220      	movs	r2, #32
 800b120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e02d      	b.n	800b1aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2224      	movs	r2, #36	@ 0x24
 800b15a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f834 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	1d3b      	adds	r3, r7, #4
 800b1bc:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f023 0210 	bic.w	r2, r3, #16
 800b1ca:	893b      	ldrh	r3, [r7, #8]
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b1e0:	7abb      	ldrb	r3, [r7, #10]
 800b1e2:	061a      	lsls	r2, r3, #24
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
}
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bc80      	pop	{r7}
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b218:	e031      	b.n	800b27e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b21a:	2308      	movs	r3, #8
 800b21c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b21e:	2308      	movs	r3, #8
 800b220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	0e5b      	lsrs	r3, r3, #25
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	0f5b      	lsrs	r3, r3, #29
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	7b3a      	ldrb	r2, [r7, #12]
 800b246:	4910      	ldr	r1, [pc, #64]	@ (800b288 <UARTEx_SetNbDataToProcess+0x90>)
 800b248:	5c8a      	ldrb	r2, [r1, r2]
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b24e:	7b3a      	ldrb	r2, [r7, #12]
 800b250:	490e      	ldr	r1, [pc, #56]	@ (800b28c <UARTEx_SetNbDataToProcess+0x94>)
 800b252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b254:	fb93 f3f2 	sdiv	r3, r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	7b7a      	ldrb	r2, [r7, #13]
 800b264:	4908      	ldr	r1, [pc, #32]	@ (800b288 <UARTEx_SetNbDataToProcess+0x90>)
 800b266:	5c8a      	ldrb	r2, [r1, r2]
 800b268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b26c:	7b7a      	ldrb	r2, [r7, #13]
 800b26e:	4907      	ldr	r1, [pc, #28]	@ (800b28c <UARTEx_SetNbDataToProcess+0x94>)
 800b270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b272:	fb93 f3f2 	sdiv	r3, r3, r2
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b27e:	bf00      	nop
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	bc80      	pop	{r7}
 800b286:	4770      	bx	lr
 800b288:	08028ea8 	.word	0x08028ea8
 800b28c:	08028eb0 	.word	0x08028eb0

0800b290 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b294:	f7f6 fec2 	bl	800201c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b298:	f000 f80a 	bl	800b2b0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b29c:	bf00      	nop
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2a8:	f018 fea8 	bl	8023ffc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b2ac:	bf00      	nop
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <LoRaWAN_Init>:
/* Exported functions ---------------------------------------------------------*/
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LoRaWAN_Init_LV */

	/* USER CODE END LoRaWAN_Init_LV */

	CMD_Init(CmdProcessNotify);
 800b2b4:	4811      	ldr	r0, [pc, #68]	@ (800b2fc <LoRaWAN_Init+0x4c>)
 800b2b6:	f002 fda1 	bl	800ddfc <CMD_Init>

	/* USER CODE BEGIN LoRaWAN_Init_1 */

	/* USER CODE END LoRaWAN_Init_1 */

	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU,
 800b2ba:	4a11      	ldr	r2, [pc, #68]	@ (800b300 <LoRaWAN_Init+0x50>)
 800b2bc:	2100      	movs	r1, #0
 800b2be:	2002      	movs	r0, #2
 800b2c0:	f018 ff98 	bl	80241f4 <UTIL_SEQ_RegTask>
			LmHandlerProcess);

	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 800b2c4:	4a0f      	ldr	r2, [pc, #60]	@ (800b304 <LoRaWAN_Init+0x54>)
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f018 ff93 	bl	80241f4 <UTIL_SEQ_RegTask>

	/* Init Info table used by LmHandler*/
	LoraInfo_Init();
 800b2ce:	f003 f83b 	bl	800e348 <LoraInfo_Init>

	/* Init the Lora Stack*/
	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b2d2:	490d      	ldr	r1, [pc, #52]	@ (800b308 <LoRaWAN_Init+0x58>)
 800b2d4:	480d      	ldr	r0, [pc, #52]	@ (800b30c <LoRaWAN_Init+0x5c>)
 800b2d6:	f005 f9f9 	bl	80106cc <LmHandlerInit>

	LmHandlerConfigure(&LmHandlerParams);
 800b2da:	480d      	ldr	r0, [pc, #52]	@ (800b310 <LoRaWAN_Init+0x60>)
 800b2dc:	f005 fa64 	bl	80107a8 <LmHandlerConfigure>

	/* USER CODE BEGIN LoRaWAN_Init_Last */
	AT_PRINTF("\r\n.....EMPA-Quectel KG200Z Workshop.....\r\n");
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b314 <LoRaWAN_Init+0x64>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	f019 fb5a 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	AT_PRINTF("Write AT? for listing the AT Functions\r\n");
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b318 <LoRaWAN_Init+0x68>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f019 fb54 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	/* USER CODE END LoRaWAN_Init_Last */
}
 800b2f8:	bf00      	nop
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	0800b617 	.word	0x0800b617
 800b300:	080109f9 	.word	0x080109f9
 800b304:	0800de59 	.word	0x0800de59
 800b308:	01030000 	.word	0x01030000
 800b30c:	20000008 	.word	0x20000008
 800b310:	20000054 	.word	0x20000054
 800b314:	08026538 	.word	0x08026538
 800b318:	08026564 	.word	0x08026564

0800b31c <OnRxData>:
/* USER CODE BEGIN PrFD */
#define LORAWAN_APP_DATA_BUFFER_MAX_SIZE            242
uint32_t Desk_id = 0x00;
/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params) {
 800b31c:	b5b0      	push	{r4, r5, r7, lr}
 800b31e:	b090      	sub	sp, #64	@ 0x40
 800b320:	af06      	add	r7, sp, #24
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN OnRxData_1 */
	const char *slotStrings[] = { "1", "2", "C", "C_MC", "P", "P_MC" };
 800b326:	4b8c      	ldr	r3, [pc, #560]	@ (800b558 <OnRxData+0x23c>)
 800b328:	f107 040c 	add.w	r4, r7, #12
 800b32c:	461d      	mov	r5, r3
 800b32e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b332:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b336:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t ReceivedDataSize = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t RxPort = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if (appData != NULL) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 80c3 	beq.w	800b4d4 <OnRxData+0x1b8>
		RxPort = appData->Port;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((appData->Buffer != NULL) && (appData->BufferSize > 0)) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 80ba 	beq.w	800b4d4 <OnRxData+0x1b8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	785b      	ldrb	r3, [r3, #1]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b5 	beq.w	800b4d4 <OnRxData+0x1b8>
			/* Received data to be copied*/
			if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize) {
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	785b      	ldrb	r3, [r3, #1]
 800b36e:	2bf1      	cmp	r3, #241	@ 0xf1
 800b370:	d903      	bls.n	800b37a <OnRxData+0x5e>
				ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 800b372:	23f2      	movs	r3, #242	@ 0xf2
 800b374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b378:	e003      	b.n	800b382 <OnRxData+0x66>
			} else {
				ReceivedDataSize = appData->BufferSize;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	785b      	ldrb	r3, [r3, #1]
 800b37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}

			/*asynchronous notification to the host*/
			AT_PRINTF("Received Data:%d:%02X:", appData->Port,
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	9200      	str	r2, [sp, #0]
 800b390:	4b72      	ldr	r3, [pc, #456]	@ (800b55c <OnRxData+0x240>)
 800b392:	2200      	movs	r2, #0
 800b394:	2100      	movs	r1, #0
 800b396:	2000      	movs	r0, #0
 800b398:	f019 fb02 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
					ReceivedDataSize);

			if (ReceivedDataSize == 2) {
 800b39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d175      	bne.n	800b490 <OnRxData+0x174>
				if (appData->Buffer[0] == Desk_id) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4b6c      	ldr	r3, [pc, #432]	@ (800b560 <OnRxData+0x244>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d12e      	bne.n	800b412 <OnRxData+0xf6>
					if (appData->Buffer[1] == 0x01) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d10d      	bne.n	800b3dc <OnRxData+0xc0>
						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); /* LED_RED */
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b3c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b3ca:	f7fa f86b 	bl	80054a4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1); /* LED_RED */
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3d4:	4863      	ldr	r0, [pc, #396]	@ (800b564 <OnRxData+0x248>)
 800b3d6:	f7fa f865 	bl	80054a4 <HAL_GPIO_WritePin>
 800b3da:	e059      	b.n	800b490 <OnRxData+0x174>
					} else if (appData->Buffer[1] == 0x00) {
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10d      	bne.n	800b404 <OnRxData+0xe8>
						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0); /* LED_RED */
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b3ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b3f2:	f7fa f857 	bl	80054a4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0); /* LED_RED */
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3fc:	4859      	ldr	r0, [pc, #356]	@ (800b564 <OnRxData+0x248>)
 800b3fe:	f7fa f851 	bl	80054a4 <HAL_GPIO_WritePin>
 800b402:	e045      	b.n	800b490 <OnRxData+0x174>
					} else {
						AT_PRINTF("Wrong Command received\r\n");
 800b404:	4b58      	ldr	r3, [pc, #352]	@ (800b568 <OnRxData+0x24c>)
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	2000      	movs	r0, #0
 800b40c:	f019 fac8 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800b410:	e03e      	b.n	800b490 <OnRxData+0x174>
					}

				} else if (appData->Buffer[0] == 0x00) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11a      	bne.n	800b452 <OnRxData+0x136>
					if (appData->Buffer[1] == 0x00) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	3301      	adds	r3, #1
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10d      	bne.n	800b444 <OnRxData+0x128>
						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0); /* LED_RED */
 800b428:	2200      	movs	r2, #0
 800b42a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b42e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b432:	f7fa f837 	bl	80054a4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0); /* LED_RED */
 800b436:	2200      	movs	r2, #0
 800b438:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b43c:	4849      	ldr	r0, [pc, #292]	@ (800b564 <OnRxData+0x248>)
 800b43e:	f7fa f831 	bl	80054a4 <HAL_GPIO_WritePin>
 800b442:	e025      	b.n	800b490 <OnRxData+0x174>
					}else{
						AT_PRINTF("Wrong Command received\r\n");
 800b444:	4b48      	ldr	r3, [pc, #288]	@ (800b568 <OnRxData+0x24c>)
 800b446:	2200      	movs	r2, #0
 800b448:	2100      	movs	r1, #0
 800b44a:	2000      	movs	r0, #0
 800b44c:	f019 faa8 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800b450:	e01e      	b.n	800b490 <OnRxData+0x174>
					}
				} else if (appData->Buffer[0] == 0x01) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d119      	bne.n	800b490 <OnRxData+0x174>
					if (appData->Buffer[1] == 0x01) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	3301      	adds	r3, #1
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d10d      	bne.n	800b484 <OnRxData+0x168>
						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); /* LED_RED */
 800b468:	2201      	movs	r2, #1
 800b46a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b46e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b472:	f7fa f817 	bl	80054a4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1); /* LED_RED */
 800b476:	2201      	movs	r2, #1
 800b478:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b47c:	4839      	ldr	r0, [pc, #228]	@ (800b564 <OnRxData+0x248>)
 800b47e:	f7fa f811 	bl	80054a4 <HAL_GPIO_WritePin>
 800b482:	e005      	b.n	800b490 <OnRxData+0x174>
					}else{
						AT_PRINTF("Wrong Command received\r\n");
 800b484:	4b38      	ldr	r3, [pc, #224]	@ (800b568 <OnRxData+0x24c>)
 800b486:	2200      	movs	r2, #0
 800b488:	2100      	movs	r1, #0
 800b48a:	2000      	movs	r0, #0
 800b48c:	f019 fa88 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
					}
				}
			}
			for (uint8_t i = 0; i < ReceivedDataSize; i++) {
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b496:	e011      	b.n	800b4bc <OnRxData+0x1a0>
				AT_PRINTF("%02X", appData->Buffer[i]);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b4a0:	4413      	add	r3, r2
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <OnRxData+0x250>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	f019 fa77 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			for (uint8_t i = 0; i < ReceivedDataSize; i++) {
 800b4b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b4bc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d3e7      	bcc.n	800b498 <OnRxData+0x17c>
			}
			AT_PRINTF("\r\n");
 800b4c8:	4b29      	ldr	r3, [pc, #164]	@ (800b570 <OnRxData+0x254>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f019 fa66 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		}
	}

	if ((params != NULL) && (params->RxSlot < RX_SLOT_NONE)) {
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d039      	beq.n	800b54e <OnRxData+0x232>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	7c1b      	ldrb	r3, [r3, #16]
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d835      	bhi.n	800b54e <OnRxData+0x232>
		AT_PRINTF("+QEVT:RX_%s, PORT %d, DR %d, RSSI %d, SNR %d",
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	7c1b      	ldrb	r3, [r3, #16]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	3328      	adds	r3, #40	@ 0x28
 800b4ea:	443b      	add	r3, r7
 800b4ec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800b4f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b4fa:	4608      	mov	r0, r1
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	f991 1009 	ldrsb.w	r1, [r1, #9]
 800b502:	460c      	mov	r4, r1
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	f991 100a 	ldrsb.w	r1, [r1, #10]
 800b50a:	9104      	str	r1, [sp, #16]
 800b50c:	9403      	str	r4, [sp, #12]
 800b50e:	9002      	str	r0, [sp, #8]
 800b510:	9201      	str	r2, [sp, #4]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	4b17      	ldr	r3, [pc, #92]	@ (800b574 <OnRxData+0x258>)
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	2000      	movs	r0, #0
 800b51c:	f019 fa40 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
				slotStrings[params->RxSlot], RxPort, params->Datarate,
				params->Rssi, params->Snr);
		if (params->LinkCheck == true) {
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	7c5b      	ldrb	r3, [r3, #17]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00c      	beq.n	800b542 <OnRxData+0x226>
			AT_PRINTF(", DMODM %d, GWN %d", params->DemodMargin,
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	7c9b      	ldrb	r3, [r3, #18]
 800b52c:	461a      	mov	r2, r3
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	7cdb      	ldrb	r3, [r3, #19]
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	9200      	str	r2, [sp, #0]
 800b536:	4b10      	ldr	r3, [pc, #64]	@ (800b578 <OnRxData+0x25c>)
 800b538:	2200      	movs	r2, #0
 800b53a:	2100      	movs	r1, #0
 800b53c:	2000      	movs	r0, #0
 800b53e:	f019 fa2f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
					params->NbGateways);
		}
		AT_PRINTF("\r\n");
 800b542:	4b0b      	ldr	r3, [pc, #44]	@ (800b570 <OnRxData+0x254>)
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	2000      	movs	r0, #0
 800b54a:	f019 fa29 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	}
	/* USER CODE END OnRxData_1 */
}
 800b54e:	bf00      	nop
 800b550:	3728      	adds	r7, #40	@ 0x28
 800b552:	46bd      	mov	sp, r7
 800b554:	bdb0      	pop	{r4, r5, r7, pc}
 800b556:	bf00      	nop
 800b558:	08026634 	.word	0x08026634
 800b55c:	08026590 	.word	0x08026590
 800b560:	2000045c 	.word	0x2000045c
 800b564:	48000400 	.word	0x48000400
 800b568:	080265a8 	.word	0x080265a8
 800b56c:	080265c4 	.word	0x080265c4
 800b570:	080265cc 	.word	0x080265cc
 800b574:	080265d0 	.word	0x080265d0
 800b578:	08026600 	.word	0x08026600

0800b57c <OnTxData>:

/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params) {
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */
	/* USER CODE END OnTxData_1 */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc80      	pop	{r7}
 800b58c:	4770      	bx	lr
	...

0800b590 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnJoinRequest_1 */
	if ((joinParams != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d010      	beq.n	800b5c0 <OnJoinRequest+0x30>
			&& (joinParams->Status == LORAMAC_HANDLER_SUCCESS)) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10b      	bne.n	800b5c0 <OnJoinRequest+0x30>
		AT_PRINTF("DEVICE JOINED\r\n");
 800b5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d8 <OnJoinRequest+0x48>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f019 f9f6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	2110      	movs	r1, #16
 800b5b8:	4808      	ldr	r0, [pc, #32]	@ (800b5dc <OnJoinRequest+0x4c>)
 800b5ba:	f7f9 ff73 	bl	80054a4 <HAL_GPIO_WritePin>
 800b5be:	e006      	b.n	800b5ce <OnJoinRequest+0x3e>

	} else {
		AT_PRINTF("DEVICE JOIN FAILED\r\n");
 800b5c0:	4b07      	ldr	r3, [pc, #28]	@ (800b5e0 <OnJoinRequest+0x50>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	f019 f9ea 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	}
	/* USER CODE END OnJoinRequest_1 */
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	0802664c 	.word	0x0802664c
 800b5dc:	48000400 	.word	0x48000400
 800b5e0:	0802665c 	.word	0x0802665c

0800b5e4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params) {
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnBeaconStatusChange_1 */
	/* USER CODE END OnBeaconStatusChange_1 */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr

0800b5f6 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void) {
 800b5f6:	b480      	push	{r7}
 800b5f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnSysTimeUpdate_1 */

	/* USER CODE END OnSysTimeUpdate_1 */
}
 800b5fa:	bf00      	nop
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bc80      	pop	{r7}
 800b600:	4770      	bx	lr

0800b602 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass) {
 800b602:	b480      	push	{r7}
 800b604:	b083      	sub	sp, #12
 800b606:	af00      	add	r7, sp, #0
 800b608:	4603      	mov	r3, r0
 800b60a:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnClassChange_1 */
	/* USER CODE END OnClassChange_1 */
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	bc80      	pop	{r7}
 800b614:	4770      	bx	lr

0800b616 <CmdProcessNotify>:

static void CmdProcessNotify(void) {
 800b616:	b580      	push	{r7, lr}
 800b618:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CmdProcessNotify_1 */

	/* USER CODE END CmdProcessNotify_1 */
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 800b61a:	2100      	movs	r1, #0
 800b61c:	2001      	movs	r0, #1
 800b61e:	f018 fe0b 	bl	8024238 <UTIL_SEQ_SetTask>
	/* USER CODE BEGIN CmdProcessNotify_2 */

	/* USER CODE END CmdProcessNotify_2 */
}
 800b622:	bf00      	nop
 800b624:	bd80      	pop	{r7, pc}

0800b626 <OnMacProcessNotify>:

static void OnMacProcessNotify(void) {
 800b626:	b580      	push	{r7, lr}
 800b628:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnMacProcessNotify_1 */

	/* USER CODE END OnMacProcessNotify_1 */
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b62a:	2100      	movs	r1, #0
 800b62c:	2002      	movs	r0, #2
 800b62e:	f018 fe03 	bl	8024238 <UTIL_SEQ_SetTask>

	/* USER CODE BEGIN OnMacProcessNotify_2 */

	/* USER CODE END OnMacProcessNotify_2 */
}
 800b632:	bf00      	nop
 800b634:	bd80      	pop	{r7, pc}

0800b636 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity) {
 800b636:	b480      	push	{r7}
 800b638:	b083      	sub	sp, #12
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxPeriodicityChanged_1 */

	/* USER CODE END OnTxPeriodicityChanged_1 */
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr

0800b648 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed) {
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

	/* USER CODE END OnTxFrameCtrlChanged_1 */
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	bc80      	pop	{r7}
 800b65a:	4770      	bx	lr

0800b65c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity) {
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

	/* USER CODE END OnPingSlotPeriodicityChanged_1 */
	LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b666:	4a04      	ldr	r2, [pc, #16]	@ (800b678 <OnPingSlotPeriodicityChanged+0x1c>)
 800b668:	79fb      	ldrb	r3, [r7, #7]
 800b66a:	7413      	strb	r3, [r2, #16]
	/* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

	/* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000054 	.word	0x20000054

0800b67c <OnSystemReset>:

static void OnSystemReset(void) {
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnSystemReset_1 */

	/* USER CODE END OnSystemReset_1 */
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr

0800b688 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state) {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnNvmDataChange_1 */

	/* USER CODE END OnNvmDataChange_1 */
	AT_event_OnNvmDataChange(state);
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 f83f 	bl	800b718 <AT_event_OnNvmDataChange>
	/* USER CODE BEGIN OnNvmDataChange_Last */

	/* USER CODE END OnNvmDataChange_Last */
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size) {
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN OnStoreContextRequest_1 */

	/* USER CODE END OnStoreContextRequest_1 */
	AT_event_OnStoreContextRequest(nvm, nvm_size);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f850 	bl	800b754 <AT_event_OnStoreContextRequest>
	/* USER CODE BEGIN OnStoreContextRequest_Last */

	/* USER CODE END OnStoreContextRequest_Last */
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size) {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN OnRestoreContextRequest_1 */

	/* USER CODE END OnRestoreContextRequest_1 */
	AT_event_OnRestoreContextRequest(nvm, nvm_size);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f85b 	bl	800b784 <AT_event_OnRestoreContextRequest>
	/* USER CODE BEGIN OnRestoreContextRequest_Last */

	/* USER CODE END OnRestoreContextRequest_Last */
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b6dc:	f3bf 8f4f 	dsb	sy
}
 800b6e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b6e2:	4b06      	ldr	r3, [pc, #24]	@ (800b6fc <__NVIC_SystemReset+0x24>)
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b6ea:	4904      	ldr	r1, [pc, #16]	@ (800b6fc <__NVIC_SystemReset+0x24>)
 800b6ec:	4b04      	ldr	r3, [pc, #16]	@ (800b700 <__NVIC_SystemReset+0x28>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b6f2:	f3bf 8f4f 	dsb	sy
}
 800b6f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b6f8:	bf00      	nop
 800b6fa:	e7fd      	b.n	800b6f8 <__NVIC_SystemReset+0x20>
 800b6fc:	e000ed00 	.word	0xe000ed00
 800b700:	05fa0004 	.word	0x05fa0004

0800b704 <AT_return_error>:
/* Exported functions --------------------------------------------------------*/
ATEerror_t AT_return_ok(const char *param) {
	return AT_OK;
}

ATEerror_t AT_return_error(const char *param) {
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	return AT_ERROR;
 800b70c:	2301      	movs	r3, #1
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	bc80      	pop	{r7}
 800b716:	4770      	bx	lr

0800b718 <AT_event_OnNvmDataChange>:
	/* USER CODE BEGIN AT_event_Beacon_2 */

	/* USER CODE END AT_event_Beacon_2 */
}

void AT_event_OnNvmDataChange(LmHandlerNvmContextStates_t state) {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
	if (state == LORAMAC_HANDLER_NVM_STORE) {
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d106      	bne.n	800b736 <AT_event_OnNvmDataChange+0x1e>
		AT_PRINTF("NVM DATA STORED\r\n");
 800b728:	4b08      	ldr	r3, [pc, #32]	@ (800b74c <AT_event_OnNvmDataChange+0x34>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	2100      	movs	r1, #0
 800b72e:	2000      	movs	r0, #0
 800b730:	f019 f936 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		AT_PRINTF("NVM DATA RESTORED\r\n");
	}
}
 800b734:	e005      	b.n	800b742 <AT_event_OnNvmDataChange+0x2a>
		AT_PRINTF("NVM DATA RESTORED\r\n");
 800b736:	4b06      	ldr	r3, [pc, #24]	@ (800b750 <AT_event_OnNvmDataChange+0x38>)
 800b738:	2200      	movs	r2, #0
 800b73a:	2100      	movs	r1, #0
 800b73c:	2000      	movs	r0, #0
 800b73e:	f019 f92f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	080267f4 	.word	0x080267f4
 800b750:	08026808 	.word	0x08026808

0800b754 <AT_event_OnStoreContextRequest>:

void AT_event_OnStoreContextRequest(void *nvm, uint32_t nvm_size) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
	/* store nvm in flash */
	if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE)
 800b75e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b762:	4807      	ldr	r0, [pc, #28]	@ (800b780 <AT_event_OnStoreContextRequest+0x2c>)
 800b764:	f7f5 fe70 	bl	8001448 <FLASH_IF_Erase>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d104      	bne.n	800b778 <AT_event_OnStoreContextRequest+0x24>
			== FLASH_IF_OK) {
		FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void*) nvm, nvm_size);
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	4803      	ldr	r0, [pc, #12]	@ (800b780 <AT_event_OnStoreContextRequest+0x2c>)
 800b774:	f7f5 fe18 	bl	80013a8 <FLASH_IF_Write>
	}
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	0803f000 	.word	0x0803f000

0800b784 <AT_event_OnRestoreContextRequest>:

void AT_event_OnRestoreContextRequest(void *nvm, uint32_t nvm_size) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4903      	ldr	r1, [pc, #12]	@ (800b7a0 <AT_event_OnRestoreContextRequest+0x1c>)
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7f5 fe30 	bl	80013f8 <FLASH_IF_Read>
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	0803f000 	.word	0x0803f000

0800b7a4 <AT_version_get>:

/* --------------- General commands --------------- */
ATEerror_t AT_version_get(const char *param) {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b088      	sub	sp, #32
 800b7a8:	af04      	add	r7, sp, #16
 800b7aa:	6078      	str	r0, [r7, #4]

	/* USER CODE END AT_version_get_1 */
	uint32_t feature_version;

	/* Get LoRa APP version*/
	AT_PRINTF("APPLICATION_VERSION: V%X.%X.%X\r\n", (uint8_t)(APP_VERSION_MAIN),
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9302      	str	r3, [sp, #8]
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	4b2c      	ldr	r3, [pc, #176]	@ (800b86c <AT_version_get+0xc8>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f019 f8ee 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(uint8_t)(APP_VERSION_SUB1), (uint8_t)(APP_VERSION_SUB2));

	/* Get MW LoraWAN info */
	AT_PRINTF("MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9302      	str	r3, [sp, #8]
 800b7c8:	2305      	movs	r3, #5
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	4b27      	ldr	r3, [pc, #156]	@ (800b870 <AT_version_get+0xcc>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f019 f8e2 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(uint8_t)(LORAWAN_VERSION_MAIN), (uint8_t)(LORAWAN_VERSION_SUB1),
			(uint8_t)(LORAWAN_VERSION_SUB2));

	/* Get MW SubGhz_Phy info */
	AT_PRINTF("MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	4b22      	ldr	r3, [pc, #136]	@ (800b874 <AT_version_get+0xd0>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f019 f8d6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
			(uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
			(uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

	/* Get LoraWAN Link Layer info */
	LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f006 f80a 	bl	8011814 <LmHandlerGetVersion>
	AT_PRINTF("L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	0e1b      	lsrs	r3, r3, #24
 800b804:	b2db      	uxtb	r3, r3
 800b806:	461a      	mov	r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	4619      	mov	r1, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	b2db      	uxtb	r3, r3
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	9101      	str	r1, [sp, #4]
 800b81a:	9200      	str	r2, [sp, #0]
 800b81c:	4b16      	ldr	r3, [pc, #88]	@ (800b878 <AT_version_get+0xd4>)
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	2000      	movs	r0, #0
 800b824:	f019 f8bc 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(uint8_t )(feature_version >> 24),
			(uint8_t )(feature_version >> 16),
			(uint8_t )(feature_version >> 8));

	/* Get LoraWAN Regional Parameters info */
	LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b828:	f107 030c 	add.w	r3, r7, #12
 800b82c:	4619      	mov	r1, r3
 800b82e:	2001      	movs	r0, #1
 800b830:	f005 fff0 	bl	8011814 <LmHandlerGetVersion>
	AT_PRINTF("RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	0e1b      	lsrs	r3, r3, #24
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	b2db      	uxtb	r3, r3
 800b842:	4619      	mov	r1, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	b2c0      	uxtb	r0, r0
 800b84e:	9003      	str	r0, [sp, #12]
 800b850:	9302      	str	r3, [sp, #8]
 800b852:	9101      	str	r1, [sp, #4]
 800b854:	9200      	str	r2, [sp, #0]
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <AT_version_get+0xd8>)
 800b858:	2200      	movs	r2, #0
 800b85a:	2100      	movs	r1, #0
 800b85c:	2000      	movs	r0, #0
 800b85e:	f019 f89f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(uint8_t )(feature_version >> 24),
			(uint8_t )(feature_version >> 16), (uint8_t )(feature_version >> 8),
			(uint8_t )(feature_version));

	return AT_OK;
 800b862:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_version_get_2 */

	/* USER CODE END AT_version_get_2 */
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	0802681c 	.word	0x0802681c
 800b870:	08026840 	.word	0x08026840
 800b874:	08026864 	.word	0x08026864
 800b878:	08026888 	.word	0x08026888
 800b87c:	080268ac 	.word	0x080268ac

0800b880 <AT_verbose_get>:

ATEerror_t AT_verbose_get(const char *param) {
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_verbose_get_1 */

	/* USER CODE END AT_verbose_get_1 */
	print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 800b888:	f019 f928 	bl	8024adc <UTIL_ADV_TRACE_GetVerboseLevel>
 800b88c:	4603      	mov	r3, r0
 800b88e:	4618      	mov	r0, r3
 800b890:	f002 fa76 	bl	800dd80 <print_u>
	return AT_OK;
 800b894:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_verbose_get_2 */

	/* USER CODE END AT_verbose_get_2 */
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <AT_verbose_set>:

ATEerror_t AT_verbose_set(const char *param) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_verbose_set_1 */

	/* USER CODE END AT_verbose_set_1 */
	const char *buf = param;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]
	int32_t lvl_nb;

	/* read and set the verbose level */
	if (1 != tiny_sscanf(buf, "%u", &lvl_nb)) {
 800b8ac:	f107 0308 	add.w	r3, r7, #8
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4913      	ldr	r1, [pc, #76]	@ (800b900 <AT_verbose_set+0x60>)
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f018 f925 	bl	8023b04 <tiny_sscanf>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d007      	beq.n	800b8d0 <AT_verbose_set+0x30>
		AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 800b8c0:	4b10      	ldr	r3, [pc, #64]	@ (800b904 <AT_verbose_set+0x64>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f019 f86a 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e013      	b.n	800b8f8 <AT_verbose_set+0x58>
	}
	if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF)) {
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	dc02      	bgt.n	800b8dc <AT_verbose_set+0x3c>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	da07      	bge.n	800b8ec <AT_verbose_set+0x4c>
		AT_PRINTF(
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b908 <AT_verbose_set+0x68>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f019 f85c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
				"AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
		return AT_PARAM_ERROR;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	e005      	b.n	800b8f8 <AT_verbose_set+0x58>
	}

	UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f019 f8e3 	bl	8024abc <UTIL_ADV_TRACE_SetVerboseLevel>

	return AT_OK;
 800b8f6:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_verbose_set_2 */

	/* USER CODE END AT_verbose_set_2 */
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	080268d0 	.word	0x080268d0
 800b904:	080268d4 	.word	0x080268d4
 800b908:	080268fc 	.word	0x080268fc

0800b90c <AT_LocalTime_get>:

ATEerror_t AT_LocalTime_get(const char *param) {
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b094      	sub	sp, #80	@ 0x50
 800b910:	af06      	add	r7, sp, #24
 800b912:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_LocalTime_get_1 */

	/* USER CODE END AT_LocalTime_get_1 */
	struct tm localtime;
	SysTime_t UnixEpoch = SysTimeGet();
 800b914:	f107 030c 	add.w	r3, r7, #12
 800b918:	4618      	mov	r0, r3
 800b91a:	f017 faad 	bl	8022e78 <SysTimeGet>
	UnixEpoch.Seconds -= 18; /*removing leap seconds*/
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3b12      	subs	r3, #18
 800b922:	60fb      	str	r3, [r7, #12]

	UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b92a:	60fb      	str	r3, [r7, #12]

	SysTimeLocalTime(UnixEpoch.Seconds, &localtime);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f107 0214 	add.w	r2, r7, #20
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f017 fb5d 	bl	8022ff4 <SysTimeLocalTime>

	AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n", localtime.tm_hour,
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	6a38      	ldr	r0, [r7, #32]
 800b942:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800b944:	3401      	adds	r4, #1
 800b946:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 800b948:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800b94c:	9505      	str	r5, [sp, #20]
 800b94e:	9404      	str	r4, [sp, #16]
 800b950:	9003      	str	r0, [sp, #12]
 800b952:	9102      	str	r1, [sp, #8]
 800b954:	9201      	str	r2, [sp, #4]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	4b05      	ldr	r3, [pc, #20]	@ (800b970 <AT_LocalTime_get+0x64>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	2000      	movs	r0, #0
 800b960:	f019 f81e 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			localtime.tm_min, localtime.tm_sec, localtime.tm_mday,
			localtime.tm_mon + 1, localtime.tm_year + 1900);

	return AT_OK;
 800b964:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_LocalTime_get_2 */

	/* USER CODE END AT_LocalTime_get_2 */
}
 800b966:	4618      	mov	r0, r3
 800b968:	3738      	adds	r7, #56	@ 0x38
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bdb0      	pop	{r4, r5, r7, pc}
 800b96e:	bf00      	nop
 800b970:	08026940 	.word	0x08026940

0800b974 <AT_reset>:

ATEerror_t AT_reset(const char *param) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_reset_1 */

	/* USER CODE END AT_reset_1 */
	NVIC_SystemReset();
 800b97c:	f7ff feac 	bl	800b6d8 <__NVIC_SystemReset>

0800b980 <AT_restore_factory_settings>:

	/* USER CODE END AT_reset_2 */
}

/* ---------------  Context Store commands --------------------------- */
ATEerror_t AT_restore_factory_settings(const char *param) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_restore_factory_settings_1 */

	/* USER CODE END AT_restore_factory_settings_1 */
	/* store nvm in flash */
	if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE)
 800b988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b98c:	4806      	ldr	r0, [pc, #24]	@ (800b9a8 <AT_restore_factory_settings+0x28>)
 800b98e:	f7f5 fd5b 	bl	8001448 <FLASH_IF_Erase>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <AT_restore_factory_settings+0x1c>
			== FLASH_IF_OK) {
		/* System Reboot*/
		NVIC_SystemReset();
 800b998:	f7ff fe9e 	bl	800b6d8 <__NVIC_SystemReset>
	}

	return AT_OK;
 800b99c:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_restore_factory_settings_2 */

	/* USER CODE END AT_restore_factory_settings_2 */
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0803f000 	.word	0x0803f000

0800b9ac <AT_store_context>:

ATEerror_t AT_store_context(const char *param) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_store_context_1 */

	/* USER CODE END AT_store_context_1 */
	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b9b4:	23ff      	movs	r3, #255	@ 0xff
 800b9b6:	73fb      	strb	r3, [r7, #15]

	status = LmHandlerNvmDataStore();
 800b9b8:	f006 fb1e 	bl	8011ff8 <LmHandlerNvmDataStore>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]

	if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE) {
 800b9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c4:	f113 0f08 	cmn.w	r3, #8
 800b9c8:	d106      	bne.n	800b9d8 <AT_store_context+0x2c>
		AT_PRINTF("NVM DATA UP TO DATE\r\n");
 800b9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b9fc <AT_store_context+0x50>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f018 ffe5 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800b9d6:	e00c      	b.n	800b9f2 <AT_store_context+0x46>
	} else if (status == LORAMAC_HANDLER_ERROR) {
 800b9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9e0:	d107      	bne.n	800b9f2 <AT_store_context+0x46>
		AT_PRINTF("NVM DATA STORE FAILED\r\n");
 800b9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ba00 <AT_store_context+0x54>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	f018 ffd9 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <AT_store_context+0x48>
	}
	return AT_OK;
 800b9f2:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_store_context_2 */

	/* USER CODE END AT_store_context_2 */
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	0802696c 	.word	0x0802696c
 800ba00:	08026984 	.word	0x08026984

0800ba04 <AT_JoinEUI_get>:

/* --------------- Keys, IDs and EUIs management commands --------------- */
ATEerror_t AT_JoinEUI_get(const char *param) {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinEUI_get_1 */

	/* USER CODE END AT_JoinEUI_get_1 */
	uint8_t appEUI[8];
	if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS) {
 800ba0c:	f107 0308 	add.w	r3, r7, #8
 800ba10:	4618      	mov	r0, r3
 800ba12:	f005 ff91 	bl	8011938 <LmHandlerGetAppEUI>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <AT_JoinEUI_get+0x1c>
		return AT_PARAM_ERROR;
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e005      	b.n	800ba2c <AT_JoinEUI_get+0x28>
	}

	print_8_02x(appEUI);
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	4618      	mov	r0, r3
 800ba26:	f002 f961 	bl	800dcec <print_8_02x>
	return AT_OK;
 800ba2a:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinEUI_get_2 */

	/* USER CODE END AT_JoinEUI_get_2 */
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <AT_JoinEUI_set>:

ATEerror_t AT_JoinEUI_set(const char *param) {
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08a      	sub	sp, #40	@ 0x28
 800ba38:	af06      	add	r7, sp, #24
 800ba3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinEUI_set_1 */

	/* USER CODE END AT_JoinEUI_set_1 */
	uint8_t JoinEui[8];
	if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	1c59      	adds	r1, r3, #1
 800ba42:	f107 0208 	add.w	r2, r7, #8
 800ba46:	f107 0308 	add.w	r3, r7, #8
 800ba4a:	3307      	adds	r3, #7
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	f107 0308 	add.w	r3, r7, #8
 800ba52:	3306      	adds	r3, #6
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f107 0308 	add.w	r3, r7, #8
 800ba5a:	3305      	adds	r3, #5
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	3304      	adds	r3, #4
 800ba64:	9302      	str	r3, [sp, #8]
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	3303      	adds	r3, #3
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	f107 0308 	add.w	r3, r7, #8
 800ba72:	3302      	adds	r3, #2
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	460b      	mov	r3, r1
 800ba78:	490b      	ldr	r1, [pc, #44]	@ (800baa8 <AT_JoinEUI_set+0x74>)
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f018 f842 	bl	8023b04 <tiny_sscanf>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	d001      	beq.n	800ba8a <AT_JoinEUI_set+0x56>
			&JoinEui[0], &JoinEui[1], &JoinEui[2], &JoinEui[3], &JoinEui[4],
			&JoinEui[5], &JoinEui[6], &JoinEui[7]) != 8) {
		return AT_PARAM_ERROR;
 800ba86:	2302      	movs	r3, #2
 800ba88:	e00a      	b.n	800baa0 <AT_JoinEUI_set+0x6c>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui)) {
 800ba8a:	f107 0308 	add.w	r3, r7, #8
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f005 ff70 	bl	8011974 <LmHandlerSetAppEUI>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <AT_JoinEUI_set+0x6a>
		return AT_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <AT_JoinEUI_set+0x6c>
	}

	return AT_OK;
 800ba9e:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinEUI_set_2 */

	/* USER CODE END AT_JoinEUI_set_2 */
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	0802699c 	.word	0x0802699c

0800baac <AT_NwkKey_get>:

ATEerror_t AT_NwkKey_get(const char *param) {
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NwkKey_get_1 */

	/* USER CODE END AT_NwkKey_get_1 */
	uint8_t nwkKey[16];
	if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(NWK_KEY, nwkKey)) {
 800bab4:	f107 0308 	add.w	r3, r7, #8
 800bab8:	4619      	mov	r1, r3
 800baba:	2001      	movs	r0, #1
 800babc:	f006 fa45 	bl	8011f4a <LmHandlerGetKey>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <AT_NwkKey_get+0x1e>
		return AT_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e005      	b.n	800bad6 <AT_NwkKey_get+0x2a>
	}
	print_16_02x(nwkKey);
 800baca:	f107 0308 	add.w	r3, r7, #8
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 f8a4 	bl	800dc1c <print_16_02x>

	return AT_OK;
 800bad4:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NwkKey_get_2 */

	/* USER CODE END AT_NwkKey_get_2 */
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <AT_NwkKey_set>:

ATEerror_t AT_NwkKey_set(const char *param) {
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NwkKey_set_1 */

	/* USER CODE END AT_NwkKey_set_1 */
	uint8_t nwkKey[16];
	if (sscanf_16_hhx(param, nwkKey) != 16) {
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f002 f81b 	bl	800db28 <sscanf_16_hhx>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b10      	cmp	r3, #16
 800baf6:	d001      	beq.n	800bafc <AT_NwkKey_set+0x1e>
		return AT_PARAM_ERROR;
 800baf8:	2302      	movs	r3, #2
 800bafa:	e00b      	b.n	800bb14 <AT_NwkKey_set+0x36>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(NWK_KEY, nwkKey)) {
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	4619      	mov	r1, r3
 800bb02:	2001      	movs	r0, #1
 800bb04:	f006 fa46 	bl	8011f94 <LmHandlerSetKey>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <AT_NwkKey_set+0x34>
		return AT_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <AT_NwkKey_set+0x36>
	}

	return AT_OK;
 800bb12:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NwkKey_set_2 */

	/* USER CODE END AT_NwkKey_set_2 */
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <AT_AppKey_get>:

ATEerror_t AT_AppKey_get(const char *param) {
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_AppKey_get_1 */

	/* USER CODE END AT_AppKey_get_1 */
	uint8_t appKey[16];
	if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(APP_KEY, appKey)) {
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	4619      	mov	r1, r3
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	f006 fa0d 	bl	8011f4a <LmHandlerGetKey>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <AT_AppKey_get+0x1e>
		return AT_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e005      	b.n	800bb46 <AT_AppKey_get+0x2a>
	}
	print_16_02x(appKey);
 800bb3a:	f107 0308 	add.w	r3, r7, #8
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f002 f86c 	bl	800dc1c <print_16_02x>

	return AT_OK;
 800bb44:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_AppKey_get_2 */

	/* USER CODE END AT_AppKey_get_2 */
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <AT_AppKey_set>:

ATEerror_t AT_AppKey_set(const char *param) {
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b086      	sub	sp, #24
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_AppKey_set_1 */

	/* USER CODE END AT_AppKey_set_1 */
	uint8_t appKey[16];
	if (sscanf_16_hhx(param, appKey) != 16) {
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 ffe3 	bl	800db28 <sscanf_16_hhx>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b10      	cmp	r3, #16
 800bb66:	d001      	beq.n	800bb6c <AT_AppKey_set+0x1e>
		return AT_PARAM_ERROR;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e00b      	b.n	800bb84 <AT_AppKey_set+0x36>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(APP_KEY, appKey)) {
 800bb6c:	f107 0308 	add.w	r3, r7, #8
 800bb70:	4619      	mov	r1, r3
 800bb72:	2000      	movs	r0, #0
 800bb74:	f006 fa0e 	bl	8011f94 <LmHandlerSetKey>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <AT_AppKey_set+0x34>
		return AT_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <AT_AppKey_set+0x36>
	}

	return AT_OK;
 800bb82:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_AppKey_set_2 */

	/* USER CODE END AT_AppKey_set_2 */
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <AT_NwkSKey_get>:

ATEerror_t AT_NwkSKey_get(const char *param) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NwkSKey_get_1 */

	/* USER CODE END AT_NwkSKey_get_1 */
	uint8_t nwkSKey[16];
	if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(NWK_S_KEY, nwkSKey)) {
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	4619      	mov	r1, r3
 800bb9a:	2008      	movs	r0, #8
 800bb9c:	f006 f9d5 	bl	8011f4a <LmHandlerGetKey>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <AT_NwkSKey_get+0x1e>
		return AT_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e005      	b.n	800bbb6 <AT_NwkSKey_get+0x2a>
	}
	print_16_02x(nwkSKey);
 800bbaa:	f107 0308 	add.w	r3, r7, #8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f002 f834 	bl	800dc1c <print_16_02x>

	return AT_OK;
 800bbb4:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NwkSKey_get_2 */

	/* USER CODE END AT_NwkSKey_get_2 */
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <AT_NwkSKey_set>:

ATEerror_t AT_NwkSKey_set(const char *param) {
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NwkSKey_set_1 */

	/* USER CODE END AT_NwkSKey_set_1 */
	uint8_t nwkSKey[16];
	if (sscanf_16_hhx(param, nwkSKey) != 16) {
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 ffab 	bl	800db28 <sscanf_16_hhx>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b10      	cmp	r3, #16
 800bbd6:	d001      	beq.n	800bbdc <AT_NwkSKey_set+0x1e>
		return AT_PARAM_ERROR;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e00b      	b.n	800bbf4 <AT_NwkSKey_set+0x36>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(NWK_S_KEY, nwkSKey)) {
 800bbdc:	f107 0308 	add.w	r3, r7, #8
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	2008      	movs	r0, #8
 800bbe4:	f006 f9d6 	bl	8011f94 <LmHandlerSetKey>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <AT_NwkSKey_set+0x34>
		return AT_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <AT_NwkSKey_set+0x36>
	}

	return AT_OK;
 800bbf2:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NwkSKey_set_2 */

	/* USER CODE END AT_NwkSKey_set_2 */
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <AT_AppSKey_get>:

ATEerror_t AT_AppSKey_get(const char *param) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_AppSKey_get_1 */

	/* USER CODE END AT_AppSKey_get_1 */
	uint8_t appSKey[16];
	if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(APP_S_KEY, appSKey)) {
 800bc04:	f107 0308 	add.w	r3, r7, #8
 800bc08:	4619      	mov	r1, r3
 800bc0a:	2009      	movs	r0, #9
 800bc0c:	f006 f99d 	bl	8011f4a <LmHandlerGetKey>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <AT_AppSKey_get+0x1e>
		return AT_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e005      	b.n	800bc26 <AT_AppSKey_get+0x2a>
	}
	print_16_02x(appSKey);
 800bc1a:	f107 0308 	add.w	r3, r7, #8
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 fffc 	bl	800dc1c <print_16_02x>

	return AT_OK;
 800bc24:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_AppSKey_get_2 */

	/* USER CODE END AT_AppSKey_get_2 */
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <AT_AppSKey_set>:

ATEerror_t AT_AppSKey_set(const char *param) {
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b086      	sub	sp, #24
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_AppSKey_set_1 */

	/* USER CODE END AT_AppSKey_set_1 */
	uint8_t appSKey[16];
	if (sscanf_16_hhx(param, appSKey) != 16) {
 800bc36:	f107 0308 	add.w	r3, r7, #8
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 ff73 	bl	800db28 <sscanf_16_hhx>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b10      	cmp	r3, #16
 800bc46:	d001      	beq.n	800bc4c <AT_AppSKey_set+0x1e>
		return AT_PARAM_ERROR;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e00b      	b.n	800bc64 <AT_AppSKey_set+0x36>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(APP_S_KEY, appSKey)) {
 800bc4c:	f107 0308 	add.w	r3, r7, #8
 800bc50:	4619      	mov	r1, r3
 800bc52:	2009      	movs	r0, #9
 800bc54:	f006 f99e 	bl	8011f94 <LmHandlerSetKey>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <AT_AppSKey_set+0x34>
		return AT_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <AT_AppSKey_set+0x36>
	}

	return AT_OK;
 800bc62:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_AppSKey_set_2 */

	/* USER CODE END AT_AppSKey_set_2 */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <AT_DevAddr_get>:

ATEerror_t AT_DevAddr_get(const char *param) {
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DevAddr_get_1 */

	/* USER CODE END AT_DevAddr_get_1 */
	uint32_t devAddr;
	if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS) {
 800bc74:	f107 030c 	add.w	r3, r7, #12
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f005 feda 	bl	8011a32 <LmHandlerGetDevAddr>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <AT_DevAddr_get+0x1c>
		return AT_PARAM_ERROR;
 800bc84:	2302      	movs	r3, #2
 800bc86:	e004      	b.n	800bc92 <AT_DevAddr_get+0x26>
	}

	print_uint32_as_02x(devAddr);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 ffa4 	bl	800dbd8 <print_uint32_as_02x>
	return AT_OK;
 800bc90:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DevAddr_get_2 */

	/* USER CODE END AT_DevAddr_get_2 */
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <AT_DevAddr_set>:

ATEerror_t AT_DevAddr_set(const char *param) {
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DevAddr_set_1 */

	/* USER CODE END AT_DevAddr_set_1 */
	uint32_t devAddr;
	if (sscanf_uint32_as_hhx(param, &devAddr) != 4) {
 800bca2:	f107 030c 	add.w	r3, r7, #12
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 ff21 	bl	800daf0 <sscanf_uint32_as_hhx>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b04      	cmp	r3, #4
 800bcb2:	d001      	beq.n	800bcb8 <AT_DevAddr_set+0x1e>
		return AT_PARAM_ERROR;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	e009      	b.n	800bccc <AT_DevAddr_set+0x32>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr)) {
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f005 fed8 	bl	8011a70 <LmHandlerSetDevAddr>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <AT_DevAddr_set+0x30>
		return AT_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <AT_DevAddr_set+0x32>
	}

	return AT_OK;
 800bcca:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DevAddr_set_2 */

	/* USER CODE END AT_DevAddr_set_2 */
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <AT_DevEUI_get>:

ATEerror_t AT_DevEUI_get(const char *param) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DevEUI_get_1 */

	/* USER CODE END AT_DevEUI_get_1 */
	uint8_t devEUI[8];
	if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS) {
 800bcdc:	f107 0308 	add.w	r3, r7, #8
 800bce0:	4618      	mov	r0, r3
 800bce2:	f005 fdeb 	bl	80118bc <LmHandlerGetDevEUI>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <AT_DevEUI_get+0x1c>
		return AT_PARAM_ERROR;
 800bcec:	2302      	movs	r3, #2
 800bcee:	e005      	b.n	800bcfc <AT_DevEUI_get+0x28>
	}

	print_8_02x(devEUI);
 800bcf0:	f107 0308 	add.w	r3, r7, #8
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 fff9 	bl	800dcec <print_8_02x>
	return AT_OK;
 800bcfa:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DevEUI_get_2 */

	/* USER CODE END AT_DevEUI_get_2 */
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <AT_DevEUI_set>:

ATEerror_t AT_DevEUI_set(const char *param) {
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	@ 0x28
 800bd08:	af06      	add	r7, sp, #24
 800bd0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DevEUI_set_1 */

	/* USER CODE END AT_DevEUI_set_1 */
	uint8_t devEui[8];
	if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800bd0c:	f107 0308 	add.w	r3, r7, #8
 800bd10:	1c59      	adds	r1, r3, #1
 800bd12:	f107 0208 	add.w	r2, r7, #8
 800bd16:	f107 0308 	add.w	r3, r7, #8
 800bd1a:	3307      	adds	r3, #7
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	3306      	adds	r3, #6
 800bd24:	9304      	str	r3, [sp, #16]
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	3305      	adds	r3, #5
 800bd2c:	9303      	str	r3, [sp, #12]
 800bd2e:	f107 0308 	add.w	r3, r7, #8
 800bd32:	3304      	adds	r3, #4
 800bd34:	9302      	str	r3, [sp, #8]
 800bd36:	f107 0308 	add.w	r3, r7, #8
 800bd3a:	3303      	adds	r3, #3
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	3302      	adds	r3, #2
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	460b      	mov	r3, r1
 800bd48:	490b      	ldr	r1, [pc, #44]	@ (800bd78 <AT_DevEUI_set+0x74>)
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f017 feda 	bl	8023b04 <tiny_sscanf>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b08      	cmp	r3, #8
 800bd54:	d001      	beq.n	800bd5a <AT_DevEUI_set+0x56>
			&devEui[0], &devEui[1], &devEui[2], &devEui[3], &devEui[4],
			&devEui[5], &devEui[6], &devEui[7]) != 8) {
		return AT_PARAM_ERROR;
 800bd56:	2302      	movs	r3, #2
 800bd58:	e00a      	b.n	800bd70 <AT_DevEUI_set+0x6c>
	}

	if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui)) {
 800bd5a:	f107 0308 	add.w	r3, r7, #8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f005 fdca 	bl	80118f8 <LmHandlerSetDevEUI>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <AT_DevEUI_set+0x6a>
		return AT_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <AT_DevEUI_set+0x6c>
	}

	return AT_OK;
 800bd6e:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DevEUI_set_2 */

	/* USER CODE END AT_DevEUI_set_2 */
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	0802699c 	.word	0x0802699c

0800bd7c <AT_NetworkID_get>:

ATEerror_t AT_NetworkID_get(const char *param) {
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NetworkID_get_1 */

	/* USER CODE END AT_NetworkID_get_1 */
	uint32_t networkId;
	if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS) {
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f005 fe13 	bl	80119b4 <LmHandlerGetNetworkID>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <AT_NetworkID_get+0x1c>
		return AT_PARAM_ERROR;
 800bd94:	2302      	movs	r3, #2
 800bd96:	e004      	b.n	800bda2 <AT_NetworkID_get+0x26>
	}

	print_d(networkId);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 ffde 	bl	800dd5c <print_d>
	return AT_OK;
 800bda0:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NetworkID_get_2 */

	/* USER CODE END AT_NetworkID_get_2 */
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <AT_NetworkID_set>:

ATEerror_t AT_NetworkID_set(const char *param) {
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_NetworkID_set_1 */

	/* USER CODE END AT_NetworkID_set_1 */
	uint32_t networkId;
	if (tiny_sscanf(param, "%u", &networkId) != 1) {
 800bdb4:	f107 030c 	add.w	r3, r7, #12
 800bdb8:	461a      	mov	r2, r3
 800bdba:	490b      	ldr	r1, [pc, #44]	@ (800bde8 <AT_NetworkID_set+0x3c>)
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f017 fea1 	bl	8023b04 <tiny_sscanf>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d001      	beq.n	800bdcc <AT_NetworkID_set+0x20>
		return AT_PARAM_ERROR;
 800bdc8:	2302      	movs	r3, #2
 800bdca:	e009      	b.n	800bde0 <AT_NetworkID_set+0x34>
	}

	if (networkId > 127) {
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdd0:	d901      	bls.n	800bdd6 <AT_NetworkID_set+0x2a>
		return AT_PARAM_ERROR;
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	e004      	b.n	800bde0 <AT_NetworkID_set+0x34>
	}

	LmHandlerSetNetworkID(networkId);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f005 fe0a 	bl	80119f2 <LmHandlerSetNetworkID>
	return AT_OK;
 800bdde:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_NetworkID_set_2 */

	/* USER CODE END AT_NetworkID_set_2 */
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	080268d0 	.word	0x080268d0

0800bdec <AT_Join>:

/* --------------- LoRaWAN join and send data commands --------------- */
ATEerror_t AT_Join(const char *param) {
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Join_1 */

	/* USER CODE END AT_Join_1 */
	switch (param[0]) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2b30      	cmp	r3, #48	@ 0x30
 800bdfa:	d002      	beq.n	800be02 <AT_Join+0x16>
 800bdfc:	2b31      	cmp	r3, #49	@ 0x31
 800bdfe:	d005      	beq.n	800be0c <AT_Join+0x20>
 800be00:	e009      	b.n	800be16 <AT_Join+0x2a>
	case '0':
		LmHandlerJoin(ACTIVATION_TYPE_ABP, true);
 800be02:	2101      	movs	r1, #1
 800be04:	2001      	movs	r0, #1
 800be06:	f004 fe2d 	bl	8010a64 <LmHandlerJoin>
		break;
 800be0a:	e006      	b.n	800be1a <AT_Join+0x2e>
	case '1':
		LmHandlerJoin(ACTIVATION_TYPE_OTAA, true);
 800be0c:	2101      	movs	r1, #1
 800be0e:	2002      	movs	r0, #2
 800be10:	f004 fe28 	bl	8010a64 <LmHandlerJoin>
		break;
 800be14:	e001      	b.n	800be1a <AT_Join+0x2e>
	default:
		return AT_PARAM_ERROR;
 800be16:	2302      	movs	r3, #2
 800be18:	e000      	b.n	800be1c <AT_Join+0x30>
	}

	return AT_OK;
 800be1a:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Join_2 */

	/* USER CODE END AT_Join_2 */
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <AT_Link_Check>:

ATEerror_t AT_Link_Check(const char *param) {
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Link_Check_1 */

	/* USER CODE END AT_Link_Check_1 */
	if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS) {
 800be2c:	f005 fd30 	bl	8011890 <LmHandlerLinkCheckReq>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <AT_Link_Check+0x16>
		return AT_PARAM_ERROR;
 800be36:	2302      	movs	r3, #2
 800be38:	e000      	b.n	800be3c <AT_Link_Check+0x18>
	}

	return AT_OK;
 800be3a:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Link_Check_2 */

	/* USER CODE END AT_Link_Check_2 */
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <AT_Send>:

ATEerror_t AT_Send(const char *param) {
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Send_1 */

	/* USER CODE END AT_Send_1 */
	const char *buf = param;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	61fb      	str	r3, [r7, #28]
	uint16_t bufSize = strlen(param);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7f4 f995 	bl	8000180 <strlen>
 800be56:	4603      	mov	r3, r0
 800be58:	837b      	strh	r3, [r7, #26]
	uint32_t appPort;
	LmHandlerMsgTypes_t isTxConfirmed;
	unsigned size = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]
	char hex[3] = { 0, 0, 0 };
 800be5e:	4a75      	ldr	r2, [pc, #468]	@ (800c034 <AT_Send+0x1f0>)
 800be60:	f107 0308 	add.w	r3, r7, #8
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	4611      	mov	r1, r2
 800be68:	8019      	strh	r1, [r3, #0]
 800be6a:	3302      	adds	r3, #2
 800be6c:	0c12      	lsrs	r2, r2, #16
 800be6e:	701a      	strb	r2, [r3, #0]
	LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800be70:	23ff      	movs	r3, #255	@ 0xff
 800be72:	74bb      	strb	r3, [r7, #18]
	ATEerror_t status = AT_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	74fb      	strb	r3, [r7, #19]

	/* read and set the application port */
	if (1 != tiny_sscanf(buf, "%u:", &appPort)) {
 800be78:	f107 030c 	add.w	r3, r7, #12
 800be7c:	461a      	mov	r2, r3
 800be7e:	496e      	ldr	r1, [pc, #440]	@ (800c038 <AT_Send+0x1f4>)
 800be80:	69f8      	ldr	r0, [r7, #28]
 800be82:	f017 fe3f 	bl	8023b04 <tiny_sscanf>
 800be86:	4603      	mov	r3, r0
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d00d      	beq.n	800bea8 <AT_Send+0x64>
		AT_PRINTF("AT+SEND without the application port\r\n");
 800be8c:	4b6b      	ldr	r3, [pc, #428]	@ (800c03c <AT_Send+0x1f8>)
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	2000      	movs	r0, #0
 800be94:	f018 fd84 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800be98:	2302      	movs	r3, #2
 800be9a:	e0c7      	b.n	800c02c <AT_Send+0x1e8>
	}

	/* skip the application port */
	while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1) {
		buf++;
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	3301      	adds	r3, #1
 800bea0:	61fb      	str	r3, [r7, #28]
		bufSize--;
 800bea2:	8b7b      	ldrh	r3, [r7, #26]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	837b      	strh	r3, [r7, #26]
	while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1) {
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b2f      	cmp	r3, #47	@ 0x2f
 800beae:	d906      	bls.n	800bebe <AT_Send+0x7a>
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b39      	cmp	r3, #57	@ 0x39
 800beb6:	d802      	bhi.n	800bebe <AT_Send+0x7a>
 800beb8:	8b7b      	ldrh	r3, [r7, #26]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d8ee      	bhi.n	800be9c <AT_Send+0x58>
	};

	if ((bufSize == 0) || (':' != buf[0])) {
 800bebe:	8b7b      	ldrh	r3, [r7, #26]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <AT_Send+0x88>
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b3a      	cmp	r3, #58	@ 0x3a
 800beca:	d007      	beq.n	800bedc <AT_Send+0x98>
		AT_PRINTF("AT+SEND missing : character after app port\r\n");
 800becc:	4b5c      	ldr	r3, [pc, #368]	@ (800c040 <AT_Send+0x1fc>)
 800bece:	2200      	movs	r2, #0
 800bed0:	2100      	movs	r1, #0
 800bed2:	2000      	movs	r0, #0
 800bed4:	f018 fd64 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800bed8:	2302      	movs	r3, #2
 800beda:	e0a7      	b.n	800c02c <AT_Send+0x1e8>
	} else {
		/* skip the char ':' */
		buf++;
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	3301      	adds	r3, #1
 800bee0:	61fb      	str	r3, [r7, #28]
		bufSize--;
 800bee2:	8b7b      	ldrh	r3, [r7, #26]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	837b      	strh	r3, [r7, #26]
	}

	switch (buf[0]) {
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b30      	cmp	r3, #48	@ 0x30
 800beee:	d002      	beq.n	800bef6 <AT_Send+0xb2>
 800bef0:	2b31      	cmp	r3, #49	@ 0x31
 800bef2:	d003      	beq.n	800befc <AT_Send+0xb8>
 800bef4:	e005      	b.n	800bf02 <AT_Send+0xbe>
	case '0':
		isTxConfirmed = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800bef6:	2300      	movs	r3, #0
 800bef8:	767b      	strb	r3, [r7, #25]
		break;
 800befa:	e00a      	b.n	800bf12 <AT_Send+0xce>
	case '1':
		isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 800befc:	2301      	movs	r3, #1
 800befe:	767b      	strb	r3, [r7, #25]
		break;
 800bf00:	e007      	b.n	800bf12 <AT_Send+0xce>
	default:
		AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 800bf02:	4b50      	ldr	r3, [pc, #320]	@ (800c044 <AT_Send+0x200>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	2100      	movs	r1, #0
 800bf08:	2000      	movs	r0, #0
 800bf0a:	f018 fd49 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e08c      	b.n	800c02c <AT_Send+0x1e8>
	}

	if (bufSize > 0) {
 800bf12:	8b7b      	ldrh	r3, [r7, #26]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d005      	beq.n	800bf24 <AT_Send+0xe0>
		/* skip the acknowledge flag */
		buf++;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	61fb      	str	r3, [r7, #28]
		bufSize--;
 800bf1e:	8b7b      	ldrh	r3, [r7, #26]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	837b      	strh	r3, [r7, #26]
	}

	if ((bufSize == 0) || (':' != buf[0])) {
 800bf24:	8b7b      	ldrh	r3, [r7, #26]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <AT_Send+0xee>
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf30:	d007      	beq.n	800bf42 <AT_Send+0xfe>
		AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 800bf32:	4b45      	ldr	r3, [pc, #276]	@ (800c048 <AT_Send+0x204>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	2000      	movs	r0, #0
 800bf3a:	f018 fd31 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800bf3e:	2302      	movs	r3, #2
 800bf40:	e074      	b.n	800c02c <AT_Send+0x1e8>
	} else {
		/* skip the char ':' */
		buf++;
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	3301      	adds	r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
		bufSize--;
 800bf48:	8b7b      	ldrh	r3, [r7, #26]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	837b      	strh	r3, [r7, #26]
	}

	while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1)) {
 800bf4e:	e021      	b.n	800bf94 <AT_Send+0x150>
		hex[0] = buf[size * 2];
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	69fa      	ldr	r2, [r7, #28]
 800bf56:	4413      	add	r3, r2
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	723b      	strb	r3, [r7, #8]
		hex[1] = buf[size * 2 + 1];
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	3301      	adds	r3, #1
 800bf62:	69fa      	ldr	r2, [r7, #28]
 800bf64:	4413      	add	r3, r2
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	727b      	strb	r3, [r7, #9]
		if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1) {
 800bf6a:	4b38      	ldr	r3, [pc, #224]	@ (800c04c <AT_Send+0x208>)
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	441a      	add	r2, r3
 800bf72:	f107 0308 	add.w	r3, r7, #8
 800bf76:	4936      	ldr	r1, [pc, #216]	@ (800c050 <AT_Send+0x20c>)
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f017 fdc3 	bl	8023b04 <tiny_sscanf>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d001      	beq.n	800bf88 <AT_Send+0x144>
			return AT_PARAM_ERROR;
 800bf84:	2302      	movs	r3, #2
 800bf86:	e051      	b.n	800c02c <AT_Send+0x1e8>
		}
		size++;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	617b      	str	r3, [r7, #20]
		bufSize -= 2;
 800bf8e:	8b7b      	ldrh	r3, [r7, #26]
 800bf90:	3b02      	subs	r3, #2
 800bf92:	837b      	strh	r3, [r7, #26]
	while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1)) {
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2bf1      	cmp	r3, #241	@ 0xf1
 800bf98:	d802      	bhi.n	800bfa0 <AT_Send+0x15c>
 800bf9a:	8b7b      	ldrh	r3, [r7, #26]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d8d7      	bhi.n	800bf50 <AT_Send+0x10c>
	}
	if (bufSize != 0) {
 800bfa0:	8b7b      	ldrh	r3, [r7, #26]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <AT_Send+0x166>
		return AT_PARAM_ERROR;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	e040      	b.n	800c02c <AT_Send+0x1e8>
	}

	AppData.BufferSize = size;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	4b27      	ldr	r3, [pc, #156]	@ (800c04c <AT_Send+0x208>)
 800bfb0:	705a      	strb	r2, [r3, #1]
	AppData.Port = appPort;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	4b25      	ldr	r3, [pc, #148]	@ (800c04c <AT_Send+0x208>)
 800bfb8:	701a      	strb	r2, [r3, #0]

	lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, false);
 800bfba:	7e7b      	ldrb	r3, [r7, #25]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4822      	ldr	r0, [pc, #136]	@ (800c04c <AT_Send+0x208>)
 800bfc2:	f004 fe0d 	bl	8010be0 <LmHandlerSend>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	74bb      	strb	r3, [r7, #18]

	switch (lmhStatus) {
 800bfca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800bfce:	3306      	adds	r3, #6
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	d827      	bhi.n	800c024 <AT_Send+0x1e0>
 800bfd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <AT_Send+0x198>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800c019 	.word	0x0800c019
 800bfe0:	0800c01f 	.word	0x0800c01f
 800bfe4:	0800bfff 	.word	0x0800bfff
 800bfe8:	0800c013 	.word	0x0800c013
 800bfec:	0800bfff 	.word	0x0800bfff
 800bff0:	0800c025 	.word	0x0800c025
 800bff4:	0800bff9 	.word	0x0800bff9
	case LORAMAC_HANDLER_SUCCESS:
		status = AT_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	74fb      	strb	r3, [r7, #19]
		break;
 800bffc:	e015      	b.n	800c02a <AT_Send+0x1e6>
	case LORAMAC_HANDLER_BUSY_ERROR:
	case LORAMAC_HANDLER_COMPLIANCE_RUNNING:
		status =
				(LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ?
 800bffe:	f004 fdd3 	bl	8010ba8 <LmHandlerJoinStatus>
 800c002:	4603      	mov	r3, r0
						AT_NO_NET_JOINED : AT_BUSY_ERROR;
 800c004:	2b01      	cmp	r3, #1
 800c006:	d001      	beq.n	800c00c <AT_Send+0x1c8>
 800c008:	2305      	movs	r3, #5
 800c00a:	e000      	b.n	800c00e <AT_Send+0x1ca>
 800c00c:	2303      	movs	r3, #3
		status =
 800c00e:	74fb      	strb	r3, [r7, #19]
		break;
 800c010:	e00b      	b.n	800c02a <AT_Send+0x1e6>
	case LORAMAC_HANDLER_NO_NETWORK_JOINED:
		status = AT_NO_NET_JOINED;
 800c012:	2305      	movs	r3, #5
 800c014:	74fb      	strb	r3, [r7, #19]
		break;
 800c016:	e008      	b.n	800c02a <AT_Send+0x1e6>
	case LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED:
		status = AT_DUTYCYCLE_RESTRICTED;
 800c018:	2308      	movs	r3, #8
 800c01a:	74fb      	strb	r3, [r7, #19]
		break;
 800c01c:	e005      	b.n	800c02a <AT_Send+0x1e6>
	case LORAMAC_HANDLER_CRYPTO_ERROR:
		status = AT_CRYPTO_ERROR;
 800c01e:	2309      	movs	r3, #9
 800c020:	74fb      	strb	r3, [r7, #19]
		break;
 800c022:	e002      	b.n	800c02a <AT_Send+0x1e6>
	case LORAMAC_HANDLER_ERROR:
	default:
		status = AT_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	74fb      	strb	r3, [r7, #19]
		break;
 800c028:	bf00      	nop
	}

	return status;
 800c02a:	7cfb      	ldrb	r3, [r7, #19]
	/* USER CODE BEGIN AT_Send_2 */

	/* USER CODE END AT_Send_2 */
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	08026a80 	.word	0x08026a80
 800c038:	080269c4 	.word	0x080269c4
 800c03c:	080269c8 	.word	0x080269c8
 800c040:	080269f0 	.word	0x080269f0
 800c044:	08026a20 	.word	0x08026a20
 800c048:	08026a48 	.word	0x08026a48
 800c04c:	2000006c 	.word	0x2000006c
 800c050:	08026a78 	.word	0x08026a78

0800c054 <AT_ADR_get>:

/* --------------- LoRaWAN network management commands --------------- */
ATEerror_t AT_ADR_get(const char *param) {
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_ADR_get_1 */

	/* USER CODE END AT_ADR_get_1 */
	bool adrEnable;
	if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS) {
 800c05c:	f107 030f 	add.w	r3, r7, #15
 800c060:	4618      	mov	r0, r3
 800c062:	f005 fd3f 	bl	8011ae4 <LmHandlerGetAdrEnable>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <AT_ADR_get+0x1c>
		return AT_PARAM_ERROR;
 800c06c:	2302      	movs	r3, #2
 800c06e:	e004      	b.n	800c07a <AT_ADR_get+0x26>
	}

	print_d(adrEnable);
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	4618      	mov	r0, r3
 800c074:	f001 fe72 	bl	800dd5c <print_d>
	return AT_OK;
 800c078:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_ADR_get_2 */

	/* USER CODE END AT_ADR_get_2 */
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <AT_ADR_set>:

ATEerror_t AT_ADR_set(const char *param) {
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_ADR_set_1 */

	/* USER CODE END AT_ADR_set_1 */
	switch (param[0]) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	3b30      	subs	r3, #48	@ 0x30
 800c090:	2b01      	cmp	r3, #1
 800c092:	d80d      	bhi.n	800c0b0 <AT_ADR_set+0x2e>
	case '0':
	case '1':
		LmHandlerSetAdrEnable(param[0] - '0');
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	3b30      	subs	r3, #48	@ 0x30
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	bf14      	ite	ne
 800c09e:	2301      	movne	r3, #1
 800c0a0:	2300      	moveq	r3, #0
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f005 fd33 	bl	8011b10 <LmHandlerSetAdrEnable>
		break;
 800c0aa:	bf00      	nop
	default:
		return AT_PARAM_ERROR;
	}

	return AT_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e000      	b.n	800c0b2 <AT_ADR_set+0x30>
		return AT_PARAM_ERROR;
 800c0b0:	2302      	movs	r3, #2
	/* USER CODE BEGIN AT_ADR_set_2 */

	/* USER CODE END AT_ADR_set_2 */
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <AT_DataRate_get>:

ATEerror_t AT_DataRate_get(const char *param) {
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DataRate_get_1 */

	/* USER CODE END AT_DataRate_get_1 */
	int8_t txDatarate;
	if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS) {
 800c0c2:	f107 030f 	add.w	r3, r7, #15
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f004 ff88 	bl	8010fdc <LmHandlerGetTxDatarate>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <AT_DataRate_get+0x1c>
		return AT_PARAM_ERROR;
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e005      	b.n	800c0e2 <AT_DataRate_get+0x28>
	}

	print_d(txDatarate);
 800c0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 fe3e 	bl	800dd5c <print_d>
	return AT_OK;
 800c0e0:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DataRate_get_2 */

	/* USER CODE END AT_DataRate_get_2 */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <AT_DataRate_set>:

ATEerror_t AT_DataRate_set(const char *param) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DataRate_set_1 */

	/* USER CODE END AT_DataRate_set_1 */
	int8_t datarate;

	if (tiny_sscanf(param, "%hhu", &datarate) != 1) {
 800c0f4:	f107 030f 	add.w	r3, r7, #15
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4911      	ldr	r1, [pc, #68]	@ (800c140 <AT_DataRate_set+0x54>)
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f017 fd01 	bl	8023b04 <tiny_sscanf>
 800c102:	4603      	mov	r3, r0
 800c104:	2b01      	cmp	r3, #1
 800c106:	d001      	beq.n	800c10c <AT_DataRate_set+0x20>
		return AT_PARAM_ERROR;
 800c108:	2302      	movs	r3, #2
 800c10a:	e014      	b.n	800c136 <AT_DataRate_set+0x4a>
	}
	if ((datarate < 0) || (datarate > 15)) {
 800c10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	db03      	blt.n	800c11c <AT_DataRate_set+0x30>
 800c114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c118:	2b0f      	cmp	r3, #15
 800c11a:	dd01      	ble.n	800c120 <AT_DataRate_set+0x34>
		return AT_PARAM_ERROR;
 800c11c:	2302      	movs	r3, #2
 800c11e:	e00a      	b.n	800c136 <AT_DataRate_set+0x4a>
	}

	if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS) {
 800c120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c124:	4618      	mov	r0, r3
 800c126:	f005 fd11 	bl	8011b4c <LmHandlerSetTxDatarate>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d001      	beq.n	800c134 <AT_DataRate_set+0x48>
		return AT_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e000      	b.n	800c136 <AT_DataRate_set+0x4a>
	}

	return AT_OK;
 800c134:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DataRate_set_2 */

	/* USER CODE END AT_DataRate_set_2 */
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08026a84 	.word	0x08026a84

0800c144 <AT_Region_get>:

ATEerror_t AT_Region_get(const char *param) {
 800c144:	b5b0      	push	{r4, r5, r7, lr}
 800c146:	b090      	sub	sp, #64	@ 0x40
 800c148:	af02      	add	r7, sp, #8
 800c14a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Region_get_1 */

	/* USER CODE END AT_Region_get_1 */
	const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433",
 800c14c:	4b17      	ldr	r3, [pc, #92]	@ (800c1ac <AT_Region_get+0x68>)
 800c14e:	f107 0410 	add.w	r4, r7, #16
 800c152:	461d      	mov	r5, r3
 800c154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c15c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c160:	e884 0003 	stmia.w	r4, {r0, r1}
			"EU868", "KR920", "IN865", "US915", "RU864" };
	LoRaMacRegion_t region;
	if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS) {
 800c164:	f107 030f 	add.w	r3, r7, #15
 800c168:	4618      	mov	r0, r3
 800c16a:	f004 ff5f 	bl	801102c <LmHandlerGetActiveRegion>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <AT_Region_get+0x34>
		return AT_PARAM_ERROR;
 800c174:	2302      	movs	r3, #2
 800c176:	e015      	b.n	800c1a4 <AT_Region_get+0x60>
	}

	if (region > LORAMAC_REGION_RU864) {
 800c178:	7bfb      	ldrb	r3, [r7, #15]
 800c17a:	2b09      	cmp	r3, #9
 800c17c:	d901      	bls.n	800c182 <AT_Region_get+0x3e>
		return AT_PARAM_ERROR;
 800c17e:	2302      	movs	r3, #2
 800c180:	e010      	b.n	800c1a4 <AT_Region_get+0x60>
	}

	AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	461a      	mov	r2, r3
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	3338      	adds	r3, #56	@ 0x38
 800c18c:	443b      	add	r3, r7
 800c18e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	9200      	str	r2, [sp, #0]
 800c196:	4b06      	ldr	r3, [pc, #24]	@ (800c1b0 <AT_Region_get+0x6c>)
 800c198:	2200      	movs	r2, #0
 800c19a:	2100      	movs	r1, #0
 800c19c:	2000      	movs	r0, #0
 800c19e:	f018 fbff 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	return AT_OK;
 800c1a2:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Region_get_2 */

	/* USER CODE END AT_Region_get_2 */
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3738      	adds	r7, #56	@ 0x38
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ac:	08026ae4 	.word	0x08026ae4
 800c1b0:	08026a8c 	.word	0x08026a8c

0800c1b4 <AT_Region_set>:

ATEerror_t AT_Region_set(const char *param) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Region_set_1 */

	/* USER CODE END AT_Region_set_1 */
	LoRaMacRegion_t region;
	if (tiny_sscanf(param, "%hhu", &region) != 1) {
 800c1bc:	f107 030f 	add.w	r3, r7, #15
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	490e      	ldr	r1, [pc, #56]	@ (800c1fc <AT_Region_set+0x48>)
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f017 fc9d 	bl	8023b04 <tiny_sscanf>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d001      	beq.n	800c1d4 <AT_Region_set+0x20>
		return AT_PARAM_ERROR;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e00e      	b.n	800c1f2 <AT_Region_set+0x3e>
	}
	if (region > LORAMAC_REGION_RU864) {
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2b09      	cmp	r3, #9
 800c1d8:	d901      	bls.n	800c1de <AT_Region_set+0x2a>
		return AT_PARAM_ERROR;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e009      	b.n	800c1f2 <AT_Region_set+0x3e>
	}

	if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS) {
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f005 fc65 	bl	8011ab0 <LmHandlerSetActiveRegion>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <AT_Region_set+0x3c>
		return AT_PARAM_ERROR;
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e000      	b.n	800c1f2 <AT_Region_set+0x3e>
	}

	return AT_OK;
 800c1f0:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Region_set_2 */

	/* USER CODE END AT_Region_set_2 */
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	08026a84 	.word	0x08026a84

0800c200 <AT_DeviceClass_get>:

ATEerror_t AT_DeviceClass_get(const char *param) {
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af02      	add	r7, sp, #8
 800c206:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DeviceClass_get_1 */

	/* USER CODE END AT_DeviceClass_get_1 */
	DeviceClass_t currentClass;
	LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800c208:	f002 f8da 	bl	800e3c0 <LoraInfo_GetPtr>
 800c20c:	60f8      	str	r0, [r7, #12]
	if (loraInfo == NULL) {
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <AT_DeviceClass_get+0x18>
		return AT_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e053      	b.n	800c2c0 <AT_DeviceClass_get+0xc0>
	}

	if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS) {
 800c218:	f107 030b 	add.w	r3, r7, #11
 800c21c:	4618      	mov	r0, r3
 800c21e:	f004 febd 	bl	8010f9c <LmHandlerGetCurrentClass>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <AT_DeviceClass_get+0x2c>
		return AT_PARAM_ERROR;
 800c228:	2302      	movs	r3, #2
 800c22a:	e049      	b.n	800c2c0 <AT_DeviceClass_get+0xc0>
	}

	if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d13b      	bne.n	800c2ac <AT_DeviceClass_get+0xac>
 800c234:	4b24      	ldr	r3, [pc, #144]	@ (800c2c8 <AT_DeviceClass_get+0xc8>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d037      	beq.n	800c2ac <AT_DeviceClass_get+0xac>
			&& (currentClass == CLASS_A)) {
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d134      	bne.n	800c2ac <AT_DeviceClass_get+0xac>
		BeaconState_t beaconState;

		if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS) {
 800c242:	f107 030a 	add.w	r3, r7, #10
 800c246:	4618      	mov	r0, r3
 800c248:	f005 fe60 	bl	8011f0c <LmHandlerGetBeaconState>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <AT_DeviceClass_get+0x56>
			return AT_PARAM_ERROR;
 800c252:	2302      	movs	r3, #2
 800c254:	e034      	b.n	800c2c0 <AT_DeviceClass_get+0xc0>
		}

		if ((beaconState == BEACON_STATE_ACQUISITION)
 800c256:	7abb      	ldrb	r3, [r7, #10]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d005      	beq.n	800c268 <AT_DeviceClass_get+0x68>
				|| (beaconState == BEACON_STATE_ACQUISITION_BY_TIME)
 800c25c:	7abb      	ldrb	r3, [r7, #10]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d002      	beq.n	800c268 <AT_DeviceClass_get+0x68>
				|| (beaconState == BEACON_STATE_REACQUISITION)) /*Beacon_Searching on Class B request*/
 800c262:	7abb      	ldrb	r3, [r7, #10]
 800c264:	2b04      	cmp	r3, #4
 800c266:	d106      	bne.n	800c276 <AT_DeviceClass_get+0x76>
				{
			AT_PRINTF("B,S0\r\n");
 800c268:	4b18      	ldr	r3, [pc, #96]	@ (800c2cc <AT_DeviceClass_get+0xcc>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	2100      	movs	r1, #0
 800c26e:	2000      	movs	r0, #0
 800c270:	f018 fb96 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c274:	e019      	b.n	800c2aa <AT_DeviceClass_get+0xaa>
		} else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800c276:	7abb      	ldrb	r3, [r7, #10]
 800c278:	2b05      	cmp	r3, #5
 800c27a:	d008      	beq.n	800c28e <AT_DeviceClass_get+0x8e>
		(beaconState == BEACON_STATE_IDLE)
 800c27c:	7abb      	ldrb	r3, [r7, #10]
		} else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800c27e:	2b07      	cmp	r3, #7
 800c280:	d005      	beq.n	800c28e <AT_DeviceClass_get+0x8e>
				|| (beaconState == BEACON_STATE_GUARD)
 800c282:	7abb      	ldrb	r3, [r7, #10]
 800c284:	2b08      	cmp	r3, #8
 800c286:	d002      	beq.n	800c28e <AT_DeviceClass_get+0x8e>
				|| (beaconState == BEACON_STATE_RX)) {
 800c288:	7abb      	ldrb	r3, [r7, #10]
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	d106      	bne.n	800c29c <AT_DeviceClass_get+0x9c>
			AT_PRINTF("B,S1\r\n");
 800c28e:	4b10      	ldr	r3, [pc, #64]	@ (800c2d0 <AT_DeviceClass_get+0xd0>)
 800c290:	2200      	movs	r2, #0
 800c292:	2100      	movs	r1, #0
 800c294:	2000      	movs	r0, #0
 800c296:	f018 fb83 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c29a:	e006      	b.n	800c2aa <AT_DeviceClass_get+0xaa>
		} else {
			AT_PRINTF("B,S2\r\n");
 800c29c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d4 <AT_DeviceClass_get+0xd4>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	f018 fb7c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			&& (currentClass == CLASS_A)) {
 800c2a8:	e009      	b.n	800c2be <AT_DeviceClass_get+0xbe>
 800c2aa:	e008      	b.n	800c2be <AT_DeviceClass_get+0xbe>
		}
	} else /* we are now either in Class B enable or Class C enable*/
	{
		AT_PRINTF("%c\r\n", 'A' + currentClass);
 800c2ac:	7afb      	ldrb	r3, [r7, #11]
 800c2ae:	3341      	adds	r3, #65	@ 0x41
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4b09      	ldr	r3, [pc, #36]	@ (800c2d8 <AT_DeviceClass_get+0xd8>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	f018 fb71 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	}

	return AT_OK;
 800c2be:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DeviceClass_get_2 */

	/* USER CODE END AT_DeviceClass_get_2 */
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20000460 	.word	0x20000460
 800c2cc:	08026b0c 	.word	0x08026b0c
 800c2d0:	08026b14 	.word	0x08026b14
 800c2d4:	08026b1c 	.word	0x08026b1c
 800c2d8:	08026b24 	.word	0x08026b24

0800c2dc <AT_DeviceClass_set>:

ATEerror_t AT_DeviceClass_set(const char *param) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DeviceClass_set_1 */

	/* USER CODE END AT_DeviceClass_set_1 */
	LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
	LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800c2e8:	f002 f86a 	bl	800e3c0 <LoraInfo_GetPtr>
 800c2ec:	60b8      	str	r0, [r7, #8]
	if (loraInfo == NULL) {
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <AT_DeviceClass_set+0x1c>
		return AT_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e03c      	b.n	800c372 <AT_DeviceClass_set+0x96>
	}

	switch (param[0]) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b43      	cmp	r3, #67	@ 0x43
 800c2fe:	d022      	beq.n	800c346 <AT_DeviceClass_set+0x6a>
 800c300:	2b43      	cmp	r3, #67	@ 0x43
 800c302:	dc26      	bgt.n	800c352 <AT_DeviceClass_set+0x76>
 800c304:	2b41      	cmp	r3, #65	@ 0x41
 800c306:	d002      	beq.n	800c30e <AT_DeviceClass_set+0x32>
 800c308:	2b42      	cmp	r3, #66	@ 0x42
 800c30a:	d00d      	beq.n	800c328 <AT_DeviceClass_set+0x4c>
 800c30c:	e021      	b.n	800c352 <AT_DeviceClass_set+0x76>
	case 'A':
		if (loraInfo->ClassB == 1) {
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d102      	bne.n	800c31c <AT_DeviceClass_set+0x40>
			ClassBEnableRequest = false;
 800c316:	4b19      	ldr	r3, [pc, #100]	@ (800c37c <AT_DeviceClass_set+0xa0>)
 800c318:	2200      	movs	r2, #0
 800c31a:	701a      	strb	r2, [r3, #0]
		}
		errorStatus = LmHandlerRequestClass(CLASS_A);
 800c31c:	2000      	movs	r0, #0
 800c31e:	f004 fda5 	bl	8010e6c <LmHandlerRequestClass>
 800c322:	4603      	mov	r3, r0
 800c324:	73fb      	strb	r3, [r7, #15]
		break;
 800c326:	e016      	b.n	800c356 <AT_DeviceClass_set+0x7a>
	case 'B':
		if (loraInfo->ClassB == 1) {
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d108      	bne.n	800c342 <AT_DeviceClass_set+0x66>
			ClassBEnableRequest = true;
 800c330:	4b12      	ldr	r3, [pc, #72]	@ (800c37c <AT_DeviceClass_set+0xa0>)
 800c332:	2201      	movs	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
			errorStatus = LmHandlerRequestClass(CLASS_B); /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 800c336:	2001      	movs	r0, #1
 800c338:	f004 fd98 	bl	8010e6c <LmHandlerRequestClass>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]
		} else {
			return AT_NO_CLASS_B_ENABLE;
		}
		break;
 800c340:	e009      	b.n	800c356 <AT_DeviceClass_set+0x7a>
			return AT_NO_CLASS_B_ENABLE;
 800c342:	2307      	movs	r3, #7
 800c344:	e015      	b.n	800c372 <AT_DeviceClass_set+0x96>
	case 'C':
		errorStatus = LmHandlerRequestClass(CLASS_C);
 800c346:	2002      	movs	r0, #2
 800c348:	f004 fd90 	bl	8010e6c <LmHandlerRequestClass>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]
		break;
 800c350:	e001      	b.n	800c356 <AT_DeviceClass_set+0x7a>
	default:
		return AT_PARAM_ERROR;
 800c352:	2302      	movs	r3, #2
 800c354:	e00d      	b.n	800c372 <AT_DeviceClass_set+0x96>
	}

	if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED) {
 800c356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c35a:	f113 0f03 	cmn.w	r3, #3
 800c35e:	d101      	bne.n	800c364 <AT_DeviceClass_set+0x88>
		return AT_NO_NET_JOINED;
 800c360:	2305      	movs	r3, #5
 800c362:	e006      	b.n	800c372 <AT_DeviceClass_set+0x96>
	} else if (errorStatus != LORAMAC_HANDLER_SUCCESS) {
 800c364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <AT_DeviceClass_set+0x94>
		return AT_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <AT_DeviceClass_set+0x96>
	}

	return AT_OK;
 800c370:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DeviceClass_set_2 */

	/* USER CODE END AT_DeviceClass_set_2 */
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000460 	.word	0x20000460

0800c380 <AT_DutyCycle_get>:

ATEerror_t AT_DutyCycle_get(const char *param) {
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DutyCycle_get_1 */

	/* USER CODE END AT_DutyCycle_get_1 */
	bool dutyCycleEnable;
	if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable)
 800c388:	f107 030f 	add.w	r3, r7, #15
 800c38c:	4618      	mov	r0, r3
 800c38e:	f005 fc03 	bl	8011b98 <LmHandlerGetDutyCycleEnable>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <AT_DutyCycle_get+0x1c>
			!= LORAMAC_HANDLER_SUCCESS) {
		return AT_PARAM_ERROR;
 800c398:	2302      	movs	r3, #2
 800c39a:	e004      	b.n	800c3a6 <AT_DutyCycle_get+0x26>
	}

	print_d(dutyCycleEnable);
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 fcdc 	bl	800dd5c <print_d>
	return AT_OK;
 800c3a4:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_DutyCycle_get_2 */

	/* USER CODE END AT_DutyCycle_get_2 */
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <AT_DutyCycle_set>:

ATEerror_t AT_DutyCycle_set(const char *param) {
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_DutyCycle_set_1 */

	/* USER CODE END AT_DutyCycle_set_1 */
	switch (param[0]) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	3b30      	subs	r3, #48	@ 0x30
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d80d      	bhi.n	800c3dc <AT_DutyCycle_set+0x2e>
	case '0':
	case '1':
		LmHandlerSetDutyCycleEnable(param[0] - '0');
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	3b30      	subs	r3, #48	@ 0x30
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bf14      	ite	ne
 800c3ca:	2301      	movne	r3, #1
 800c3cc:	2300      	moveq	r3, #0
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f005 fbf7 	bl	8011bc4 <LmHandlerSetDutyCycleEnable>
		break;
 800c3d6:	bf00      	nop
	default:
		return AT_PARAM_ERROR;
	}

	return AT_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e000      	b.n	800c3de <AT_DutyCycle_set+0x30>
		return AT_PARAM_ERROR;
 800c3dc:	2302      	movs	r3, #2
	/* USER CODE BEGIN AT_DutyCycle_set_2 */

	/* USER CODE END AT_DutyCycle_set_2 */
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <AT_JoinAcceptDelay1_get>:

ATEerror_t AT_JoinAcceptDelay1_get(const char *param) {
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinAcceptDelay1_get_1 */

	/* USER CODE END AT_JoinAcceptDelay1_get_1 */
	uint32_t rxDelay;
	if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c3ee:	f107 030c 	add.w	r3, r7, #12
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f005 fc82 	bl	8011cfc <LmHandlerGetJoinRx1Delay>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <AT_JoinAcceptDelay1_get+0x1c>
		return AT_PARAM_ERROR;
 800c3fe:	2302      	movs	r3, #2
 800c400:	e004      	b.n	800c40c <AT_JoinAcceptDelay1_get+0x26>
	}

	print_u(rxDelay);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4618      	mov	r0, r3
 800c406:	f001 fcbb 	bl	800dd80 <print_u>
	return AT_OK;
 800c40a:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinAcceptDelay1_get_2 */

	/* USER CODE END AT_JoinAcceptDelay1_get_2 */
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <AT_JoinAcceptDelay1_set>:

ATEerror_t AT_JoinAcceptDelay1_set(const char *param) {
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinAcceptDelay1_set_1 */

	/* USER CODE END AT_JoinAcceptDelay1_set_1 */
	uint32_t rxDelay;
	if (tiny_sscanf(param, "%lu", &rxDelay) != 1) {
 800c41c:	f107 030c 	add.w	r3, r7, #12
 800c420:	461a      	mov	r2, r3
 800c422:	490b      	ldr	r1, [pc, #44]	@ (800c450 <AT_JoinAcceptDelay1_set+0x3c>)
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f017 fb6d 	bl	8023b04 <tiny_sscanf>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d001      	beq.n	800c434 <AT_JoinAcceptDelay1_set+0x20>
		return AT_PARAM_ERROR;
 800c430:	2302      	movs	r3, #2
 800c432:	e009      	b.n	800c448 <AT_JoinAcceptDelay1_set+0x34>
	} else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4618      	mov	r0, r3
 800c438:	f005 fd08 	bl	8011e4c <LmHandlerSetJoinRx1Delay>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <AT_JoinAcceptDelay1_set+0x32>
		return AT_PARAM_ERROR;
 800c442:	2302      	movs	r3, #2
 800c444:	e000      	b.n	800c448 <AT_JoinAcceptDelay1_set+0x34>
	}

	return AT_OK;
 800c446:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinAcceptDelay1_set_2 */

	/* USER CODE END AT_JoinAcceptDelay1_set_2 */
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	08026b2c 	.word	0x08026b2c

0800c454 <AT_JoinAcceptDelay2_get>:

ATEerror_t AT_JoinAcceptDelay2_get(const char *param) {
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinAcceptDelay2_get_1 */

	/* USER CODE END AT_JoinAcceptDelay2_get_1 */
	uint32_t rxDelay;
	if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c45c:	f107 030c 	add.w	r3, r7, #12
 800c460:	4618      	mov	r0, r3
 800c462:	f005 fc6a 	bl	8011d3a <LmHandlerGetJoinRx2Delay>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <AT_JoinAcceptDelay2_get+0x1c>
		return AT_PARAM_ERROR;
 800c46c:	2302      	movs	r3, #2
 800c46e:	e004      	b.n	800c47a <AT_JoinAcceptDelay2_get+0x26>
	}

	print_u(rxDelay);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4618      	mov	r0, r3
 800c474:	f001 fc84 	bl	800dd80 <print_u>
	return AT_OK;
 800c478:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinAcceptDelay2_get_2 */

	/* USER CODE END AT_JoinAcceptDelay2_get_2 */
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <AT_JoinAcceptDelay2_set>:

ATEerror_t AT_JoinAcceptDelay2_set(const char *param) {
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_JoinAcceptDelay2_set_1 */

	/* USER CODE END AT_JoinAcceptDelay2_set_1 */
	uint32_t rxDelay;
	if (tiny_sscanf(param, "%lu", &rxDelay) != 1) {
 800c48c:	f107 030c 	add.w	r3, r7, #12
 800c490:	461a      	mov	r2, r3
 800c492:	490b      	ldr	r1, [pc, #44]	@ (800c4c0 <AT_JoinAcceptDelay2_set+0x3c>)
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f017 fb35 	bl	8023b04 <tiny_sscanf>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d001      	beq.n	800c4a4 <AT_JoinAcceptDelay2_set+0x20>
		return AT_PARAM_ERROR;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e009      	b.n	800c4b8 <AT_JoinAcceptDelay2_set+0x34>
	} else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f005 fce8 	bl	8011e7c <LmHandlerSetJoinRx2Delay>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <AT_JoinAcceptDelay2_set+0x32>
		return AT_PARAM_ERROR;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e000      	b.n	800c4b8 <AT_JoinAcceptDelay2_set+0x34>
	}

	return AT_OK;
 800c4b6:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_JoinAcceptDelay2_set_2 */

	/* USER CODE END AT_JoinAcceptDelay2_set_2 */
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	08026b2c 	.word	0x08026b2c

0800c4c4 <AT_Rx1Delay_get>:

ATEerror_t AT_Rx1Delay_get(const char *param) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx1Delay_get_1 */

	/* USER CODE END AT_Rx1Delay_get_1 */
	uint32_t rxDelay;
	if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c4cc:	f107 030c 	add.w	r3, r7, #12
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f005 fbd5 	bl	8011c80 <LmHandlerGetRx1Delay>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <AT_Rx1Delay_get+0x1c>
		return AT_PARAM_ERROR;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	e004      	b.n	800c4ea <AT_Rx1Delay_get+0x26>
	}

	print_u(rxDelay);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f001 fc4c 	bl	800dd80 <print_u>
	return AT_OK;
 800c4e8:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx1Delay_get_2 */

	/* USER CODE END AT_Rx1Delay_get_2 */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <AT_Rx1Delay_set>:

ATEerror_t AT_Rx1Delay_set(const char *param) {
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx1Delay_set_1 */

	/* USER CODE END AT_Rx1Delay_set_1 */
	uint32_t rxDelay;
	if (tiny_sscanf(param, "%lu", &rxDelay) != 1) {
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	461a      	mov	r2, r3
 800c502:	490b      	ldr	r1, [pc, #44]	@ (800c530 <AT_Rx1Delay_set+0x3c>)
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f017 fafd 	bl	8023b04 <tiny_sscanf>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d001      	beq.n	800c514 <AT_Rx1Delay_set+0x20>
		return AT_PARAM_ERROR;
 800c510:	2302      	movs	r3, #2
 800c512:	e009      	b.n	800c528 <AT_Rx1Delay_set+0x34>
	} else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4618      	mov	r0, r3
 800c518:	f005 fc68 	bl	8011dec <LmHandlerSetRx1Delay>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <AT_Rx1Delay_set+0x32>
		return AT_PARAM_ERROR;
 800c522:	2302      	movs	r3, #2
 800c524:	e000      	b.n	800c528 <AT_Rx1Delay_set+0x34>
	}

	return AT_OK;
 800c526:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx1Delay_set_2 */

	/* USER CODE END AT_Rx1Delay_set_2 */
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	08026b2c 	.word	0x08026b2c

0800c534 <AT_Rx2Delay_get>:

ATEerror_t AT_Rx2Delay_get(const char *param) {
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx2Delay_get_1 */

	/* USER CODE END AT_Rx2Delay_get_1 */
	uint32_t rxDelay;
	if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c53c:	f107 030c 	add.w	r3, r7, #12
 800c540:	4618      	mov	r0, r3
 800c542:	f005 fbbc 	bl	8011cbe <LmHandlerGetRx2Delay>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <AT_Rx2Delay_get+0x1c>
		return AT_PARAM_ERROR;
 800c54c:	2302      	movs	r3, #2
 800c54e:	e004      	b.n	800c55a <AT_Rx2Delay_get+0x26>
	}

	print_u(rxDelay);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4618      	mov	r0, r3
 800c554:	f001 fc14 	bl	800dd80 <print_u>
	return AT_OK;
 800c558:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2Delay_get_2 */

	/* USER CODE END AT_Rx2Delay_get_2 */
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <AT_Rx2Delay_set>:

ATEerror_t AT_Rx2Delay_set(const char *param) {
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx2Delay_set_1 */

	/* USER CODE END AT_Rx2Delay_set_1 */
	uint32_t rxDelay;
	if (tiny_sscanf(param, "%lu", &rxDelay) != 1) {
 800c56c:	f107 030c 	add.w	r3, r7, #12
 800c570:	461a      	mov	r2, r3
 800c572:	490b      	ldr	r1, [pc, #44]	@ (800c5a0 <AT_Rx2Delay_set+0x3c>)
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f017 fac5 	bl	8023b04 <tiny_sscanf>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d001      	beq.n	800c584 <AT_Rx2Delay_set+0x20>
		return AT_PARAM_ERROR;
 800c580:	2302      	movs	r3, #2
 800c582:	e009      	b.n	800c598 <AT_Rx2Delay_set+0x34>
	} else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS) {
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4618      	mov	r0, r3
 800c588:	f005 fc48 	bl	8011e1c <LmHandlerSetRx2Delay>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <AT_Rx2Delay_set+0x32>
		return AT_PARAM_ERROR;
 800c592:	2302      	movs	r3, #2
 800c594:	e000      	b.n	800c598 <AT_Rx2Delay_set+0x34>
	}

	return AT_OK;
 800c596:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2Delay_set_2 */

	/* USER CODE END AT_Rx2Delay_set_2 */
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	08026b2c 	.word	0x08026b2c

0800c5a4 <AT_Rx2DataRate_get>:

ATEerror_t AT_Rx2DataRate_get(const char *param) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx2DataRate_get_1 */

	/* USER CODE END AT_Rx2DataRate_get_1 */
	RxChannelParams_t rx2Params;
	LmHandlerGetRX2Params(&rx2Params);
 800c5ac:	f107 0308 	add.w	r3, r7, #8
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f005 fb1b 	bl	8011bec <LmHandlerGetRX2Params>
	print_d(rx2Params.Datarate);
 800c5b6:	7b3b      	ldrb	r3, [r7, #12]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 fbcf 	bl	800dd5c <print_d>
	return AT_OK;
 800c5be:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2DataRate_get_2 */

	/* USER CODE END AT_Rx2DataRate_get_2 */
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <AT_Rx2DataRate_set>:

ATEerror_t AT_Rx2DataRate_set(const char *param) {
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

	/* USER CODE END AT_Rx2DataRate_set_1 */
	RxChannelParams_t rx2Params;

	/* Get the current configuration of RX2 */
	LmHandlerGetRX2Params(&rx2Params);
 800c5d0:	f107 0308 	add.w	r3, r7, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f005 fb09 	bl	8011bec <LmHandlerGetRX2Params>

	/* Update the Datarate with scanf */
	if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1) {
 800c5da:	f107 0308 	add.w	r3, r7, #8
 800c5de:	3304      	adds	r3, #4
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	490e      	ldr	r1, [pc, #56]	@ (800c61c <AT_Rx2DataRate_set+0x54>)
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f017 fa8d 	bl	8023b04 <tiny_sscanf>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d001      	beq.n	800c5f4 <AT_Rx2DataRate_set+0x2c>
		return AT_PARAM_ERROR;
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e00f      	b.n	800c614 <AT_Rx2DataRate_set+0x4c>
	} else if (rx2Params.Datarate > 15) {
 800c5f4:	7b3b      	ldrb	r3, [r7, #12]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d901      	bls.n	800c5fe <AT_Rx2DataRate_set+0x36>
		return AT_PARAM_ERROR;
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	e00a      	b.n	800c614 <AT_Rx2DataRate_set+0x4c>
	} else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS) {
 800c5fe:	f107 0308 	add.w	r3, r7, #8
 800c602:	4618      	mov	r0, r3
 800c604:	f005 fbd6 	bl	8011db4 <LmHandlerSetRX2Params>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <AT_Rx2DataRate_set+0x4a>
		return AT_PARAM_ERROR;
 800c60e:	2302      	movs	r3, #2
 800c610:	e000      	b.n	800c614 <AT_Rx2DataRate_set+0x4c>
	}

	return AT_OK;
 800c612:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2DataRate_set_2 */

	/* USER CODE END AT_Rx2DataRate_set_2 */
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	08026a84 	.word	0x08026a84

0800c620 <AT_Rx2Frequency_get>:

ATEerror_t AT_Rx2Frequency_get(const char *param) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Rx2Frequency_get_1 */

	/* USER CODE END AT_Rx2Frequency_get_1 */
	RxChannelParams_t rx2Params;
	LmHandlerGetRX2Params(&rx2Params);
 800c628:	f107 0308 	add.w	r3, r7, #8
 800c62c:	4618      	mov	r0, r3
 800c62e:	f005 fadd 	bl	8011bec <LmHandlerGetRX2Params>
	print_d(rx2Params.Frequency);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	4618      	mov	r0, r3
 800c636:	f001 fb91 	bl	800dd5c <print_d>
	return AT_OK;
 800c63a:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2Frequency_get_2 */

	/* USER CODE END AT_Rx2Frequency_get_2 */
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <AT_Rx2Frequency_set>:

ATEerror_t AT_Rx2Frequency_set(const char *param) {
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]

	/* USER CODE END AT_Rx2Frequency_set_1 */
	RxChannelParams_t rx2Params;

	/* Get the current configuration of RX2 */
	LmHandlerGetRX2Params(&rx2Params);
 800c64c:	f107 0308 	add.w	r3, r7, #8
 800c650:	4618      	mov	r0, r3
 800c652:	f005 facb 	bl	8011bec <LmHandlerGetRX2Params>

	/* Update the frequency with scanf */
	if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1) {
 800c656:	f107 0308 	add.w	r3, r7, #8
 800c65a:	461a      	mov	r2, r3
 800c65c:	490b      	ldr	r1, [pc, #44]	@ (800c68c <AT_Rx2Frequency_set+0x48>)
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f017 fa50 	bl	8023b04 <tiny_sscanf>
 800c664:	4603      	mov	r3, r0
 800c666:	2b01      	cmp	r3, #1
 800c668:	d001      	beq.n	800c66e <AT_Rx2Frequency_set+0x2a>
		return AT_PARAM_ERROR;
 800c66a:	2302      	movs	r3, #2
 800c66c:	e00a      	b.n	800c684 <AT_Rx2Frequency_set+0x40>
	} else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS) {
 800c66e:	f107 0308 	add.w	r3, r7, #8
 800c672:	4618      	mov	r0, r3
 800c674:	f005 fb9e 	bl	8011db4 <LmHandlerSetRX2Params>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <AT_Rx2Frequency_set+0x3e>
		return AT_PARAM_ERROR;
 800c67e:	2302      	movs	r3, #2
 800c680:	e000      	b.n	800c684 <AT_Rx2Frequency_set+0x40>
	}

	return AT_OK;
 800c682:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_Rx2Frequency_set_2 */

	/* USER CODE END AT_Rx2Frequency_set_2 */
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	08026b2c 	.word	0x08026b2c

0800c690 <AT_TransmitPower_get>:

ATEerror_t AT_TransmitPower_get(const char *param) {
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_TransmitPower_get_1 */

	/* USER CODE END AT_TransmitPower_get_1 */
	int8_t txPower;
	if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS) {
 800c698:	f107 030f 	add.w	r3, r7, #15
 800c69c:	4618      	mov	r0, r3
 800c69e:	f005 fac7 	bl	8011c30 <LmHandlerGetTxPower>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <AT_TransmitPower_get+0x1c>
		return AT_PARAM_ERROR;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	e005      	b.n	800c6b8 <AT_TransmitPower_get+0x28>
	}

	print_d(txPower);
 800c6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 fb53 	bl	800dd5c <print_d>
	return AT_OK;
 800c6b6:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_TransmitPower_get_2 */

	/* USER CODE END AT_TransmitPower_get_2 */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <AT_TransmitPower_set>:

ATEerror_t AT_TransmitPower_set(const char *param) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_TransmitPower_set_1 */

	/* USER CODE END AT_TransmitPower_set_1 */
	int8_t txPower;
	if (tiny_sscanf(param, "%hhu", &txPower) != 1) {
 800c6c8:	f107 030f 	add.w	r3, r7, #15
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	490c      	ldr	r1, [pc, #48]	@ (800c700 <AT_TransmitPower_set+0x40>)
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f017 fa17 	bl	8023b04 <tiny_sscanf>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d001      	beq.n	800c6e0 <AT_TransmitPower_set+0x20>
		return AT_PARAM_ERROR;
 800c6dc:	2302      	movs	r3, #2
 800c6de:	e00a      	b.n	800c6f6 <AT_TransmitPower_set+0x36>
	}

	if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS) {
 800c6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f005 fb47 	bl	8011d78 <LmHandlerSetTxPower>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <AT_TransmitPower_set+0x34>
		return AT_PARAM_ERROR;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e000      	b.n	800c6f6 <AT_TransmitPower_set+0x36>
	}

	return AT_OK;
 800c6f4:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_TransmitPower_set_2 */

	/* USER CODE END AT_TransmitPower_set_2 */
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08026a84 	.word	0x08026a84

0800c704 <AT_PingSlot_get>:

ATEerror_t AT_PingSlot_get(const char *param) {
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_PingSlot_get_1 */

	/* USER CODE END AT_PingSlot_get_1 */
	uint8_t periodicity;

	if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS) {
 800c70c:	f107 030f 	add.w	r3, r7, #15
 800c710:	4618      	mov	r0, r3
 800c712:	f005 fbcb 	bl	8011eac <LmHandlerGetPingPeriodicity>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <AT_PingSlot_get+0x1c>
		return AT_PARAM_ERROR;
 800c71c:	2302      	movs	r3, #2
 800c71e:	e004      	b.n	800c72a <AT_PingSlot_get+0x26>
	}

	print_d(periodicity);
 800c720:	7bfb      	ldrb	r3, [r7, #15]
 800c722:	4618      	mov	r0, r3
 800c724:	f001 fb1a 	bl	800dd5c <print_d>
	return AT_OK;
 800c728:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_PingSlot_get_2 */

	/* USER CODE END AT_PingSlot_get_2 */
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <AT_PingSlot_set>:

ATEerror_t AT_PingSlot_set(const char *param) {
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_PingSlot_set_1 */

	/* USER CODE END AT_PingSlot_set_1 */
	uint8_t periodicity;

	if (tiny_sscanf(param, "%hhu", &periodicity) != 1) {
 800c73c:	f107 030f 	add.w	r3, r7, #15
 800c740:	461a      	mov	r2, r3
 800c742:	490e      	ldr	r1, [pc, #56]	@ (800c77c <AT_PingSlot_set+0x48>)
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f017 f9dd 	bl	8023b04 <tiny_sscanf>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d001      	beq.n	800c754 <AT_PingSlot_set+0x20>
		return AT_PARAM_ERROR;
 800c750:	2302      	movs	r3, #2
 800c752:	e00e      	b.n	800c772 <AT_PingSlot_set+0x3e>
	} else if (periodicity > 7) {
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	2b07      	cmp	r3, #7
 800c758:	d901      	bls.n	800c75e <AT_PingSlot_set+0x2a>
		return AT_PARAM_ERROR;
 800c75a:	2302      	movs	r3, #2
 800c75c:	e009      	b.n	800c772 <AT_PingSlot_set+0x3e>
	} else if (LmHandlerSetPingPeriodicity(periodicity)
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	4618      	mov	r0, r3
 800c762:	f005 fbb9 	bl	8011ed8 <LmHandlerSetPingPeriodicity>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <AT_PingSlot_set+0x3c>
			!= LORAMAC_HANDLER_SUCCESS) {
		return AT_PARAM_ERROR;
 800c76c:	2302      	movs	r3, #2
 800c76e:	e000      	b.n	800c772 <AT_PingSlot_set+0x3e>
	}

	return AT_OK;
 800c770:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_PingSlot_set_2 */

	/* USER CODE END AT_PingSlot_set_2 */
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08026a84 	.word	0x08026a84

0800c780 <AT_test_txTone>:

/* --------------- Radio tests commands --------------- */
ATEerror_t AT_test_txTone(const char *param) {
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_txTone_1 */

	/* USER CODE END AT_test_txTone_1 */
	if (0U == TST_TxTone()) {
 800c788:	f001 fe24 	bl	800e3d4 <TST_TxTone>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <AT_test_txTone+0x16>
		return AT_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	e000      	b.n	800c798 <AT_test_txTone+0x18>
	} else {
		return AT_BUSY_ERROR;
 800c796:	2303      	movs	r3, #3
	}
	/* USER CODE BEGIN AT_test_txTone_2 */

	/* USER CODE END AT_test_txTone_2 */
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <AT_test_rxRssi>:

ATEerror_t AT_test_rxRssi(const char *param) {
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_rxRssi_1 */

	/* USER CODE END AT_test_rxRssi_1 */
	if (0U == TST_RxRssi()) {
 800c7a8:	f001 fe42 	bl	800e430 <TST_RxRssi>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <AT_test_rxRssi+0x16>
		return AT_OK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e000      	b.n	800c7b8 <AT_test_rxRssi+0x18>
	} else {
		return AT_BUSY_ERROR;
 800c7b6:	2303      	movs	r3, #3
	}
	/* USER CODE BEGIN AT_test_rxRssi_2 */

	/* USER CODE END AT_test_rxRssi_2 */
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <AT_test_get_config>:

ATEerror_t AT_test_get_config(const char *param) {
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b098      	sub	sp, #96	@ 0x60
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_get_config_1 */

	/* USER CODE END AT_test_get_config_1 */
	testParameter_t testParam;
	uint32_t loraBW[7] = { 7812, 15625, 31250, 62500, 125000, 250000, 500000 };
 800c7c8:	4b74      	ldr	r3, [pc, #464]	@ (800c99c <AT_test_get_config+0x1dc>)
 800c7ca:	f107 040c 	add.w	r4, r7, #12
 800c7ce:	461d      	mov	r5, r3
 800c7d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c7d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	TST_get_config(&testParam);
 800c7dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 fed1 	bl	800e588 <TST_get_config>

	AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 800c7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	4b6d      	ldr	r3, [pc, #436]	@ (800c9a0 <AT_test_get_config+0x1e0>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	f018 f8d5 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	4b6a      	ldr	r3, [pc, #424]	@ (800c9a4 <AT_test_get_config+0x1e4>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2100      	movs	r1, #0
 800c800:	2000      	movs	r0, #0
 800c802:	f018 f8cd 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

	if ((testParam.modulation == TEST_FSK)
 800c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <AT_test_get_config+0x52>
			|| (testParam.modulation == TEST_MSK)) {
 800c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d15e      	bne.n	800c8d0 <AT_test_get_config+0x110>
		/*fsk*/
		AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 800c812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4b64      	ldr	r3, [pc, #400]	@ (800c9a8 <AT_test_get_config+0x1e8>)
 800c818:	2200      	movs	r2, #0
 800c81a:	2100      	movs	r1, #0
 800c81c:	2000      	movs	r0, #0
 800c81e:	f018 f8bf 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800c822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	4b61      	ldr	r3, [pc, #388]	@ (800c9ac <AT_test_get_config+0x1ec>)
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	2000      	movs	r0, #0
 800c82e:	f018 f8b7 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("5: Coding Rate not applicable\r\n");
 800c832:	4b5f      	ldr	r3, [pc, #380]	@ (800c9b0 <AT_test_get_config+0x1f0>)
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	2000      	movs	r0, #0
 800c83a:	f018 f8b1 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800c83e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	4b5c      	ldr	r3, [pc, #368]	@ (800c9b4 <AT_test_get_config+0x1f4>)
 800c844:	2200      	movs	r2, #0
 800c846:	2100      	movs	r1, #0
 800c848:	2000      	movs	r0, #0
 800c84a:	f018 f8a9 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800c84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	4b59      	ldr	r3, [pc, #356]	@ (800c9b8 <AT_test_get_config+0x1f8>)
 800c854:	2200      	movs	r2, #0
 800c856:	2100      	movs	r1, #0
 800c858:	2000      	movs	r0, #0
 800c85a:	f018 f8a1 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		if (testParam.modulation == TEST_FSK) {
 800c85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c860:	2b00      	cmp	r3, #0
 800c862:	d106      	bne.n	800c872 <AT_test_get_config+0xb2>
			AT_PRINTF("8: modulation FSK\r\n");
 800c864:	4b55      	ldr	r3, [pc, #340]	@ (800c9bc <AT_test_get_config+0x1fc>)
 800c866:	2200      	movs	r2, #0
 800c868:	2100      	movs	r1, #0
 800c86a:	2000      	movs	r0, #0
 800c86c:	f018 f898 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c870:	e005      	b.n	800c87e <AT_test_get_config+0xbe>
		} else {
			AT_PRINTF("8: modulation MSK\r\n");
 800c872:	4b53      	ldr	r3, [pc, #332]	@ (800c9c0 <AT_test_get_config+0x200>)
 800c874:	2200      	movs	r2, #0
 800c876:	2100      	movs	r1, #0
 800c878:	2000      	movs	r0, #0
 800c87a:	f018 f891 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		}
		AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800c87e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	4b50      	ldr	r3, [pc, #320]	@ (800c9c4 <AT_test_get_config+0x204>)
 800c884:	2200      	movs	r2, #0
 800c886:	2100      	movs	r1, #0
 800c888:	2000      	movs	r0, #0
 800c88a:	f018 f889 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		if (testParam.modulation == TEST_FSK) {
 800c88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c890:	2b00      	cmp	r3, #0
 800c892:	d108      	bne.n	800c8a6 <AT_test_get_config+0xe6>
			AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 800c894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	4b4b      	ldr	r3, [pc, #300]	@ (800c9c8 <AT_test_get_config+0x208>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	2100      	movs	r1, #0
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f018 f87e 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c8a4:	e005      	b.n	800c8b2 <AT_test_get_config+0xf2>
		} else {
			AT_PRINTF("10: FSK deviation forced to FSK datarate/4\r\n");
 800c8a6:	4b49      	ldr	r3, [pc, #292]	@ (800c9cc <AT_test_get_config+0x20c>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f018 f877 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		}
		AT_PRINTF("11: LowDRopt not applicable\r\n");
 800c8b2:	4b47      	ldr	r3, [pc, #284]	@ (800c9d0 <AT_test_get_config+0x210>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f018 f871 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 800c8be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	4b44      	ldr	r3, [pc, #272]	@ (800c9d4 <AT_test_get_config+0x214>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f018 f869 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c8ce:	e05f      	b.n	800c990 <AT_test_get_config+0x1d0>
	} else if (testParam.modulation == TEST_LORA) {
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d154      	bne.n	800c980 <AT_test_get_config+0x1c0>
		/*Lora*/
		AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth,
 800c8d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	3358      	adds	r3, #88	@ 0x58
 800c8de:	443b      	add	r3, r7
 800c8e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	9200      	str	r2, [sp, #0]
 800c8e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c9d8 <AT_test_get_config+0x218>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f018 f856 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
				loraBW[testParam.bandwidth]);
		AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	4b38      	ldr	r3, [pc, #224]	@ (800c9dc <AT_test_get_config+0x21c>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	2000      	movs	r0, #0
 800c900:	f018 f84e 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate,
 800c904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c908:	3204      	adds	r2, #4
 800c90a:	9201      	str	r2, [sp, #4]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4b34      	ldr	r3, [pc, #208]	@ (800c9e0 <AT_test_get_config+0x220>)
 800c910:	2200      	movs	r2, #0
 800c912:	2100      	movs	r1, #0
 800c914:	2000      	movs	r0, #0
 800c916:	f018 f843 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
				testParam.codingRate + 4);
		AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800c91a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	4b25      	ldr	r3, [pc, #148]	@ (800c9b4 <AT_test_get_config+0x1f4>)
 800c920:	2200      	movs	r2, #0
 800c922:	2100      	movs	r1, #0
 800c924:	2000      	movs	r0, #0
 800c926:	f018 f83b 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800c92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	4b22      	ldr	r3, [pc, #136]	@ (800c9b8 <AT_test_get_config+0x1f8>)
 800c930:	2200      	movs	r2, #0
 800c932:	2100      	movs	r1, #0
 800c934:	2000      	movs	r0, #0
 800c936:	f018 f833 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("8: modulation LORA\r\n");
 800c93a:	4b2a      	ldr	r3, [pc, #168]	@ (800c9e4 <AT_test_get_config+0x224>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	2100      	movs	r1, #0
 800c940:	2000      	movs	r0, #0
 800c942:	f018 f82d 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800c946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4b1e      	ldr	r3, [pc, #120]	@ (800c9c4 <AT_test_get_config+0x204>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	2100      	movs	r1, #0
 800c950:	2000      	movs	r0, #0
 800c952:	f018 f825 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("10: Frequency deviation not applicable\r\n");
 800c956:	4b24      	ldr	r3, [pc, #144]	@ (800c9e8 <AT_test_get_config+0x228>)
 800c958:	2200      	movs	r2, #0
 800c95a:	2100      	movs	r1, #0
 800c95c:	2000      	movs	r0, #0
 800c95e:	f018 f81f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 800c962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	4b21      	ldr	r3, [pc, #132]	@ (800c9ec <AT_test_get_config+0x22c>)
 800c968:	2200      	movs	r2, #0
 800c96a:	2100      	movs	r1, #0
 800c96c:	2000      	movs	r0, #0
 800c96e:	f018 f817 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		AT_PRINTF("12 BT product not applicable\r\n");
 800c972:	4b1f      	ldr	r3, [pc, #124]	@ (800c9f0 <AT_test_get_config+0x230>)
 800c974:	2200      	movs	r2, #0
 800c976:	2100      	movs	r1, #0
 800c978:	2000      	movs	r0, #0
 800c97a:	f018 f811 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800c97e:	e007      	b.n	800c990 <AT_test_get_config+0x1d0>
	} else {
		AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f4 <AT_test_get_config+0x234>)
 800c986:	2200      	movs	r2, #0
 800c988:	2100      	movs	r1, #0
 800c98a:	2000      	movs	r0, #0
 800c98c:	f018 f808 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	}
	return AT_OK;
 800c990:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_test_get_config_2 */

	/* USER CODE END AT_test_get_config_2 */
}
 800c992:	4618      	mov	r0, r3
 800c994:	3758      	adds	r7, #88	@ 0x58
 800c996:	46bd      	mov	sp, r7
 800c998:	bdb0      	pop	{r4, r5, r7, pc}
 800c99a:	bf00      	nop
 800c99c:	08026d94 	.word	0x08026d94
 800c9a0:	08026b30 	.word	0x08026b30
 800c9a4:	08026b44 	.word	0x08026b44
 800c9a8:	08026b58 	.word	0x08026b58
 800c9ac:	08026b70 	.word	0x08026b70
 800c9b0:	08026b8c 	.word	0x08026b8c
 800c9b4:	08026bac 	.word	0x08026bac
 800c9b8:	08026bc4 	.word	0x08026bc4
 800c9bc:	08026be0 	.word	0x08026be0
 800c9c0:	08026bf4 	.word	0x08026bf4
 800c9c4:	08026c08 	.word	0x08026c08
 800c9c8:	08026c24 	.word	0x08026c24
 800c9cc:	08026c40 	.word	0x08026c40
 800c9d0:	08026c70 	.word	0x08026c70
 800c9d4:	08026c90 	.word	0x08026c90
 800c9d8:	08026cb4 	.word	0x08026cb4
 800c9dc:	08026cd0 	.word	0x08026cd0
 800c9e0:	08026ce0 	.word	0x08026ce0
 800c9e4:	08026cf8 	.word	0x08026cf8
 800c9e8:	08026d10 	.word	0x08026d10
 800c9ec:	08026d3c 	.word	0x08026d3c
 800c9f0:	08026d58 	.word	0x08026d58
 800c9f4:	08026d78 	.word	0x08026d78

0800c9f8 <AT_test_set_config>:

ATEerror_t AT_test_set_config(const char *param) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b0a8      	sub	sp, #160	@ 0xa0
 800c9fc:	af0c      	add	r7, sp, #48	@ 0x30
 800c9fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_set_config_1 */

	/* USER CODE END AT_test_set_config_1 */
	testParameter_t testParam = { 0 };
 800ca00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ca04:	2230      	movs	r2, #48	@ 0x30
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f018 fc28 	bl	802525e <memset>
	uint32_t lowDrOpt;
	uint32_t BTproduct;
	uint32_t crNum;

	if (13
			== tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 800ca0e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ca12:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800ca16:	f107 0310 	add.w	r3, r7, #16
 800ca1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca1c:	f107 0314 	add.w	r3, r7, #20
 800ca20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	9308      	str	r3, [sp, #32]
 800ca28:	f107 031c 	add.w	r3, r7, #28
 800ca2c:	9307      	str	r3, [sp, #28]
 800ca2e:	f107 0320 	add.w	r3, r7, #32
 800ca32:	9306      	str	r3, [sp, #24]
 800ca34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ca3e:	9304      	str	r3, [sp, #16]
 800ca40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca44:	9303      	str	r3, [sp, #12]
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	9302      	str	r3, [sp, #8]
 800ca4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4987      	ldr	r1, [pc, #540]	@ (800cc78 <AT_test_set_config+0x280>)
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f017 f851 	bl	8023b04 <tiny_sscanf>
 800ca62:	4603      	mov	r3, r0
	if (13
 800ca64:	2b0d      	cmp	r3, #13
 800ca66:	d001      	beq.n	800ca6c <AT_test_set_config+0x74>
					&freq, &power, &bandwidth, &loraSf_datarate, &crNum,
					&codingRate, &lna, &paBoost, &modulation, &payloadLen,
					&fskDeviation, &lowDrOpt, &BTproduct)) {
		/*extend to new format for extended*/
	} else {
		return AT_PARAM_ERROR;
 800ca68:	2302      	movs	r3, #2
 800ca6a:	e115      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}
	/*get current config*/
	TST_get_config(&testParam);
 800ca6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ca70:	4618      	mov	r0, r3
 800ca72:	f001 fd89 	bl	800e588 <TST_get_config>

	/* 8: modulation check and set */
	/* first check because required for others */
	if (modulation == TEST_FSK) {
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <AT_test_set_config+0x8a>
		testParam.modulation = TEST_FSK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca80:	e013      	b.n	800caaa <AT_test_set_config+0xb2>
	} else if (modulation == TEST_LORA) {
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d102      	bne.n	800ca8e <AT_test_set_config+0x96>
		testParam.modulation = TEST_LORA;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca8c:	e00d      	b.n	800caaa <AT_test_set_config+0xb2>
	} else if (modulation == TEST_BPSK) {
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d102      	bne.n	800ca9a <AT_test_set_config+0xa2>
		testParam.modulation = TEST_BPSK;
 800ca94:	2302      	movs	r3, #2
 800ca96:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca98:	e007      	b.n	800caaa <AT_test_set_config+0xb2>
	} else if (modulation == TEST_MSK) {
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d102      	bne.n	800caa6 <AT_test_set_config+0xae>
		testParam.modulation = TEST_MSK;
 800caa0:	2303      	movs	r3, #3
 800caa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800caa4:	e001      	b.n	800caaa <AT_test_set_config+0xb2>
	} else {
		return AT_PARAM_ERROR;
 800caa6:	2302      	movs	r3, #2
 800caa8:	e0f6      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 1: frequency check and set */
	if (freq < 1000) {
 800caaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cab0:	d205      	bcs.n	800cabe <AT_test_set_config+0xc6>
		/*given in MHz*/
		testParam.freq = freq * 1000000;
 800cab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab4:	4a71      	ldr	r2, [pc, #452]	@ (800cc7c <AT_test_set_config+0x284>)
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	647b      	str	r3, [r7, #68]	@ 0x44
 800cabc:	e001      	b.n	800cac2 <AT_test_set_config+0xca>
	} else {
		testParam.freq = freq;
 800cabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac0:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	/* 2: power check and set */
	if ((power >= -9) && (power <= 22)) {
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	f113 0f09 	cmn.w	r3, #9
 800cac8:	db08      	blt.n	800cadc <AT_test_set_config+0xe4>
 800caca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cacc:	2b16      	cmp	r3, #22
 800cace:	dc05      	bgt.n	800cadc <AT_test_set_config+0xe4>
		testParam.power = power;
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	64bb      	str	r3, [r7, #72]	@ 0x48
	} else {
		return AT_PARAM_ERROR;
	}

	/* 3: bandwidth check and set */
	if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800)
 800cad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <AT_test_set_config+0xe8>
 800cada:	e00c      	b.n	800caf6 <AT_test_set_config+0xfe>
		return AT_PARAM_ERROR;
 800cadc:	2302      	movs	r3, #2
 800cade:	e0db      	b.n	800cc98 <AT_test_set_config+0x2a0>
	if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800)
 800cae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae2:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 800cae6:	d306      	bcc.n	800caf6 <AT_test_set_config+0xfe>
			&& (bandwidth <= 467000)) {
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caea:	4a65      	ldr	r2, [pc, #404]	@ (800cc80 <AT_test_set_config+0x288>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d802      	bhi.n	800caf6 <AT_test_set_config+0xfe>
		testParam.bandwidth = bandwidth;
 800caf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caf4:	e01b      	b.n	800cb2e <AT_test_set_config+0x136>
	} else if ((testParam.modulation == TEST_MSK) && (bandwidth >= 4800)
 800caf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caf8:	2b03      	cmp	r3, #3
 800cafa:	d10a      	bne.n	800cb12 <AT_test_set_config+0x11a>
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 800cb02:	d306      	bcc.n	800cb12 <AT_test_set_config+0x11a>
			&& (bandwidth <= 467000)) {
 800cb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb06:	4a5e      	ldr	r2, [pc, #376]	@ (800cc80 <AT_test_set_config+0x288>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d802      	bhi.n	800cb12 <AT_test_set_config+0x11a>
		testParam.bandwidth = bandwidth;
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb10:	e00d      	b.n	800cb2e <AT_test_set_config+0x136>
	} else if ((testParam.modulation == TEST_LORA)
 800cb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d105      	bne.n	800cb24 <AT_test_set_config+0x12c>
			&& (bandwidth <= BW_500kHz)) {
 800cb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb1a:	2b06      	cmp	r3, #6
 800cb1c:	d802      	bhi.n	800cb24 <AT_test_set_config+0x12c>
		testParam.bandwidth = bandwidth;
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb22:	e004      	b.n	800cb2e <AT_test_set_config+0x136>
	} else if (testParam.modulation == TEST_BPSK) {
 800cb24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d001      	beq.n	800cb2e <AT_test_set_config+0x136>
		/* Not used */
	} else {
		return AT_PARAM_ERROR;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	e0b4      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 4: datarate/spreading factor check and set */
	if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600)
 800cb2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10a      	bne.n	800cb4a <AT_test_set_config+0x152>
 800cb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb36:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800cb3a:	d306      	bcc.n	800cb4a <AT_test_set_config+0x152>
			&& (loraSf_datarate <= 300000)) {
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3e:	4a51      	ldr	r2, [pc, #324]	@ (800cc84 <AT_test_set_config+0x28c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d802      	bhi.n	800cb4a <AT_test_set_config+0x152>
		testParam.loraSf_datarate = loraSf_datarate;
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb48:	e024      	b.n	800cb94 <AT_test_set_config+0x19c>
	} else if ((testParam.modulation == TEST_MSK) && (loraSf_datarate >= 100)
 800cb4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d109      	bne.n	800cb64 <AT_test_set_config+0x16c>
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	2b63      	cmp	r3, #99	@ 0x63
 800cb54:	d906      	bls.n	800cb64 <AT_test_set_config+0x16c>
			&& (loraSf_datarate <= 300000)) {
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	4a4a      	ldr	r2, [pc, #296]	@ (800cc84 <AT_test_set_config+0x28c>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d802      	bhi.n	800cb64 <AT_test_set_config+0x16c>
		testParam.loraSf_datarate = loraSf_datarate;
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb60:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb62:	e017      	b.n	800cb94 <AT_test_set_config+0x19c>
	} else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5)
 800cb64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d108      	bne.n	800cb7c <AT_test_set_config+0x184>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	2b04      	cmp	r3, #4
 800cb6e:	d905      	bls.n	800cb7c <AT_test_set_config+0x184>
			&& (loraSf_datarate <= 12)) {
 800cb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb72:	2b0c      	cmp	r3, #12
 800cb74:	d802      	bhi.n	800cb7c <AT_test_set_config+0x184>
		testParam.loraSf_datarate = loraSf_datarate;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb78:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb7a:	e00b      	b.n	800cb94 <AT_test_set_config+0x19c>
	} else if ((testParam.modulation == TEST_BPSK)
 800cb7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d106      	bne.n	800cb90 <AT_test_set_config+0x198>
			&& (loraSf_datarate <= 1000)) {
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb88:	d802      	bhi.n	800cb90 <AT_test_set_config+0x198>
		testParam.loraSf_datarate = loraSf_datarate;
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb8e:	e001      	b.n	800cb94 <AT_test_set_config+0x19c>
	} else {
		return AT_PARAM_ERROR;
 800cb90:	2302      	movs	r3, #2
 800cb92:	e081      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 5: coding rate check and set */
	if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_MSK)
 800cb94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d014      	beq.n	800cbc4 <AT_test_set_config+0x1cc>
 800cb9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb9c:	2b03      	cmp	r3, #3
 800cb9e:	d011      	beq.n	800cbc4 <AT_test_set_config+0x1cc>
			|| (testParam.modulation == TEST_BPSK)) {
 800cba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d00e      	beq.n	800cbc4 <AT_test_set_config+0x1cc>
		/* Not used */
	} else if ((testParam.modulation == TEST_LORA)
 800cba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d109      	bne.n	800cbc0 <AT_test_set_config+0x1c8>
			&& ((codingRate >= 5) && (codingRate <= 8))) {
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d906      	bls.n	800cbc0 <AT_test_set_config+0x1c8>
 800cbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb4:	2b08      	cmp	r3, #8
 800cbb6:	d803      	bhi.n	800cbc0 <AT_test_set_config+0x1c8>
		testParam.codingRate = codingRate - 4;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	3b04      	subs	r3, #4
 800cbbc:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbbe:	e001      	b.n	800cbc4 <AT_test_set_config+0x1cc>
	} else {
		return AT_PARAM_ERROR;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e069      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 6: lna state check and set */
	if (lna <= 1) {
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d805      	bhi.n	800cbd6 <AT_test_set_config+0x1de>
		testParam.lna = lna;
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	65bb      	str	r3, [r7, #88]	@ 0x58
	} else {
		return AT_PARAM_ERROR;
	}

	/* 7: pa boost check and set */
	if (paBoost <= 1) {
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d804      	bhi.n	800cbde <AT_test_set_config+0x1e6>
 800cbd4:	e001      	b.n	800cbda <AT_test_set_config+0x1e2>
		return AT_PARAM_ERROR;
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e05e      	b.n	800cc98 <AT_test_set_config+0x2a0>
		/* Not used */
		testParam.paBoost = paBoost;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	}

	/* 9: payloadLen check and set */
	if ((payloadLen != 0) && (payloadLen < 256)) {
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d008      	beq.n	800cbf6 <AT_test_set_config+0x1fe>
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2bff      	cmp	r3, #255	@ 0xff
 800cbe8:	d805      	bhi.n	800cbf6 <AT_test_set_config+0x1fe>
		testParam.payloadLen = payloadLen;
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	663b      	str	r3, [r7, #96]	@ 0x60
	} else {
		return AT_PARAM_ERROR;
	}

	/* 10: fsk Deviation check and set */
	if ((testParam.modulation == TEST_LORA)
 800cbee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d018      	beq.n	800cc26 <AT_test_set_config+0x22e>
 800cbf4:	e001      	b.n	800cbfa <AT_test_set_config+0x202>
		return AT_PARAM_ERROR;
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	e04e      	b.n	800cc98 <AT_test_set_config+0x2a0>
			|| (testParam.modulation == TEST_BPSK)
 800cbfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d012      	beq.n	800cc26 <AT_test_set_config+0x22e>
			|| (testParam.modulation == TEST_MSK)) {
 800cc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d00f      	beq.n	800cc26 <AT_test_set_config+0x22e>
		/* Not used */
	} else if ((testParam.modulation == TEST_FSK)
 800cc06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <AT_test_set_config+0x22a>
			&& ((fskDeviation >= 600) && (fskDeviation <= 200000))) {
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800cc12:	d306      	bcc.n	800cc22 <AT_test_set_config+0x22a>
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	4a1c      	ldr	r2, [pc, #112]	@ (800cc88 <AT_test_set_config+0x290>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d802      	bhi.n	800cc22 <AT_test_set_config+0x22a>
		/*given in MHz*/
		testParam.fskDev = fskDeviation;
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc20:	e001      	b.n	800cc26 <AT_test_set_config+0x22e>
	} else {
		return AT_PARAM_ERROR;
 800cc22:	2302      	movs	r3, #2
 800cc24:	e038      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 11: low datarate optimization check and set */
	if ((testParam.modulation == TEST_FSK)
 800cc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d010      	beq.n	800cc4e <AT_test_set_config+0x256>
			|| (testParam.modulation == TEST_BPSK)
 800cc2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d00d      	beq.n	800cc4e <AT_test_set_config+0x256>
			|| (testParam.modulation == TEST_MSK)) {
 800cc32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d00a      	beq.n	800cc4e <AT_test_set_config+0x256>
		/* Not used */
	} else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2)) {
 800cc38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d105      	bne.n	800cc4a <AT_test_set_config+0x252>
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d802      	bhi.n	800cc4a <AT_test_set_config+0x252>
		testParam.lowDrOpt = lowDrOpt;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc48:	e001      	b.n	800cc4e <AT_test_set_config+0x256>
	} else {
		return AT_PARAM_ERROR;
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	e024      	b.n	800cc98 <AT_test_set_config+0x2a0>
	}

	/* 12: FSK gaussian BT product check and set */
	if ((testParam.modulation == TEST_LORA)
 800cc4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d01b      	beq.n	800cc8c <AT_test_set_config+0x294>
			|| (testParam.modulation == TEST_BPSK)) {
 800cc54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d018      	beq.n	800cc8c <AT_test_set_config+0x294>
		/* Not used */
	} else if (((testParam.modulation == TEST_FSK)
 800cc5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <AT_test_set_config+0x26e>
			|| (testParam.modulation == TEST_MSK)) && (BTproduct <= 4)) {
 800cc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d105      	bne.n	800cc72 <AT_test_set_config+0x27a>
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d802      	bhi.n	800cc72 <AT_test_set_config+0x27a>
		/*given in MHz*/
		testParam.BTproduct = BTproduct;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cc70:	e00c      	b.n	800cc8c <AT_test_set_config+0x294>
	} else {
		return AT_PARAM_ERROR;
 800cc72:	2302      	movs	r3, #2
 800cc74:	e010      	b.n	800cc98 <AT_test_set_config+0x2a0>
 800cc76:	bf00      	nop
 800cc78:	08026db0 	.word	0x08026db0
 800cc7c:	000f4240 	.word	0x000f4240
 800cc80:	00072038 	.word	0x00072038
 800cc84:	000493e0 	.word	0x000493e0
 800cc88:	00030d40 	.word	0x00030d40
	}

	TST_set_config(&testParam);
 800cc8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 fc69 	bl	800e568 <TST_set_config>

	return AT_OK;
 800cc96:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_test_set_config_2 */

	/* USER CODE END AT_test_set_config_2 */
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3770      	adds	r7, #112	@ 0x70
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <AT_test_tx>:

ATEerror_t AT_test_tx(const char *param) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_tx_1 */

	/* USER CODE END AT_test_tx_1 */
	const char *buf = param;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60fb      	str	r3, [r7, #12]
	uint32_t nb_packet;

	if (1 != tiny_sscanf(buf, "%u", &nb_packet)) {
 800ccac:	f107 0308 	add.w	r3, r7, #8
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	490e      	ldr	r1, [pc, #56]	@ (800ccec <AT_test_tx+0x4c>)
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f016 ff25 	bl	8023b04 <tiny_sscanf>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d007      	beq.n	800ccd0 <AT_test_tx+0x30>
		AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 800ccc0:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf0 <AT_test_tx+0x50>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	f017 fe6a 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800cccc:	2302      	movs	r3, #2
 800ccce:	e009      	b.n	800cce4 <AT_test_tx+0x44>
	}

	if (0U == TST_TX_Start(nb_packet)) {
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f001 fc78 	bl	800e5c8 <TST_TX_Start>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <AT_test_tx+0x42>
		return AT_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	e000      	b.n	800cce4 <AT_test_tx+0x44>
	} else {
		return AT_ERROR;
 800cce2:	2301      	movs	r3, #1
	}
	/* USER CODE BEGIN AT_test_tx_2 */

	/* USER CODE END AT_test_tx_2 */
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	080268d0 	.word	0x080268d0
 800ccf0:	08026dd8 	.word	0x08026dd8

0800ccf4 <AT_test_rx>:

ATEerror_t AT_test_rx(const char *param) {
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_rx_1 */

	/* USER CODE END AT_test_rx_1 */
	const char *buf = param;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60fb      	str	r3, [r7, #12]
	uint32_t nb_packet;

	if (1 != tiny_sscanf(buf, "%u", &nb_packet)) {
 800cd00:	f107 0308 	add.w	r3, r7, #8
 800cd04:	461a      	mov	r2, r3
 800cd06:	490e      	ldr	r1, [pc, #56]	@ (800cd40 <AT_test_rx+0x4c>)
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f016 fefb 	bl	8023b04 <tiny_sscanf>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d007      	beq.n	800cd24 <AT_test_rx+0x30>
		AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 800cd14:	4b0b      	ldr	r3, [pc, #44]	@ (800cd44 <AT_test_rx+0x50>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	2100      	movs	r1, #0
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	f017 fe40 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_PARAM_ERROR;
 800cd20:	2302      	movs	r3, #2
 800cd22:	e009      	b.n	800cd38 <AT_test_rx+0x44>
	}

	if (0U == TST_RX_Start(nb_packet)) {
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f001 fdd2 	bl	800e8d0 <TST_RX_Start>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <AT_test_rx+0x42>
		return AT_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e000      	b.n	800cd38 <AT_test_rx+0x44>
	} else {
		return AT_ERROR;
 800cd36:	2301      	movs	r3, #1
	}
	/* USER CODE BEGIN AT_test_rx_2 */

	/* USER CODE END AT_test_rx_2 */
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	080268d0 	.word	0x080268d0
 800cd44:	08026e00 	.word	0x08026e00

0800cd48 <AT_test_tx_hopping>:

ATEerror_t AT_test_tx_hopping(const char *param) {
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b09a      	sub	sp, #104	@ 0x68
 800cd4c:	af04      	add	r7, sp, #16
 800cd4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_tx_hopping_1 */

	/* USER CODE END AT_test_tx_hopping_1 */
	const char *buf = param;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	64fb      	str	r3, [r7, #76]	@ 0x4c

	testParameter_t test_param;
	uint32_t hop_freq;

	if (4
			!= tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop,
 800cd54:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800cd58:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800cd5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	492b      	ldr	r1, [pc, #172]	@ (800ce18 <AT_test_tx_hopping+0xd0>)
 800cd6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cd6e:	f016 fec9 	bl	8023b04 <tiny_sscanf>
 800cd72:	4603      	mov	r3, r0
	if (4
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d001      	beq.n	800cd7c <AT_test_tx_hopping+0x34>
					&delta_f, &nb_tx)) {
		return AT_PARAM_ERROR;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e048      	b.n	800ce0e <AT_test_tx_hopping+0xc6>
	}

	/*if freq is set in MHz, convert to Hz*/
	if (freq_start < 1000) {
 800cd7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd82:	d204      	bcs.n	800cd8e <AT_test_tx_hopping+0x46>
		freq_start *= 1000000;
 800cd84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd86:	4a25      	ldr	r2, [pc, #148]	@ (800ce1c <AT_test_tx_hopping+0xd4>)
 800cd88:	fb02 f303 	mul.w	r3, r2, r3
 800cd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
	}
	if (freq_stop < 1000) {
 800cd8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd94:	d204      	bcs.n	800cda0 <AT_test_tx_hopping+0x58>
		freq_stop *= 1000000;
 800cd96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd98:	4a20      	ldr	r2, [pc, #128]	@ (800ce1c <AT_test_tx_hopping+0xd4>)
 800cd9a:	fb02 f303 	mul.w	r3, r2, r3
 800cd9e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	/**/
	hop_freq = freq_start;
 800cda0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cda2:	657b      	str	r3, [r7, #84]	@ 0x54

	for (int32_t i = 0; i < nb_tx; i++) {
 800cda4:	2300      	movs	r3, #0
 800cda6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cda8:	e02c      	b.n	800ce04 <AT_test_tx_hopping+0xbc>
		/*get current config*/
		TST_get_config(&test_param);
 800cdaa:	f107 030c 	add.w	r3, r7, #12
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f001 fbea 	bl	800e588 <TST_get_config>

		/*increment frequency*/
		test_param.freq = hop_freq;
 800cdb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdb6:	613b      	str	r3, [r7, #16]
		/*Set new config*/
		TST_set_config(&test_param);
 800cdb8:	f107 030c 	add.w	r3, r7, #12
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f001 fbd3 	bl	800e568 <TST_set_config>

		APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 800cdc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc4:	9302      	str	r3, [sp, #8]
 800cdc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	4b14      	ldr	r3, [pc, #80]	@ (800ce20 <AT_test_tx_hopping+0xd8>)
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f017 fde3 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

		if (0U != TST_TX_Start(1)) {
 800cdda:	2001      	movs	r0, #1
 800cddc:	f001 fbf4 	bl	800e5c8 <TST_TX_Start>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <AT_test_tx_hopping+0xa2>
			return AT_BUSY_ERROR;
 800cde6:	2303      	movs	r3, #3
 800cde8:	e011      	b.n	800ce0e <AT_test_tx_hopping+0xc6>
		}

		hop_freq += delta_f;
 800cdea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdee:	4413      	add	r3, r2
 800cdf0:	657b      	str	r3, [r7, #84]	@ 0x54

		if (hop_freq > freq_stop) {
 800cdf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d901      	bls.n	800cdfe <AT_test_tx_hopping+0xb6>
			hop_freq = freq_start;
 800cdfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdfc:	657b      	str	r3, [r7, #84]	@ 0x54
	for (int32_t i = 0; i < nb_tx; i++) {
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce00:	3301      	adds	r3, #1
 800ce02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d3ce      	bcc.n	800cdaa <AT_test_tx_hopping+0x62>
		}
	}

	return AT_OK;
 800ce0c:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_test_tx_hopping_2 */

	/* USER CODE END AT_test_tx_hopping_2 */
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3758      	adds	r7, #88	@ 0x58
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	08026e2c 	.word	0x08026e2c
 800ce1c:	000f4240 	.word	0x000f4240
 800ce20:	08026e38 	.word	0x08026e38

0800ce24 <AT_test_stop>:

ATEerror_t AT_test_stop(const char *param) {
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_test_stop_1 */

	/* USER CODE END AT_test_stop_1 */
	TST_stop();
 800ce2c:	f001 fbbc 	bl	800e5a8 <TST_stop>
	AT_PRINTF("Test Stop\r\n");
 800ce30:	4b05      	ldr	r3, [pc, #20]	@ (800ce48 <AT_test_stop+0x24>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	2100      	movs	r1, #0
 800ce36:	2000      	movs	r0, #0
 800ce38:	f017 fdb2 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	return AT_OK;
 800ce3c:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_test_stop_2 */

	/* USER CODE END AT_test_stop_2 */
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	08026e54 	.word	0x08026e54

0800ce4c <AT_Certif>:

	/* USER CODE END AT_read_register_2 */
}

/* --------------- LoraWAN Certif command --------------- */
ATEerror_t AT_Certif(const char *param) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_Certif_1 */

	/* USER CODE END AT_Certif_1 */
	switch (param[0]) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b30      	cmp	r3, #48	@ 0x30
 800ce5a:	d002      	beq.n	800ce62 <AT_Certif+0x16>
 800ce5c:	2b31      	cmp	r3, #49	@ 0x31
 800ce5e:	d004      	beq.n	800ce6a <AT_Certif+0x1e>
 800ce60:	e01b      	b.n	800ce9a <AT_Certif+0x4e>
	case '0':
		LmHandlerJoin(ACTIVATION_TYPE_ABP, true);
 800ce62:	2101      	movs	r1, #1
 800ce64:	2001      	movs	r0, #1
 800ce66:	f003 fdfd 	bl	8010a64 <LmHandlerJoin>
	case '1':
		LmHandlerJoin(ACTIVATION_TYPE_OTAA, true);
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	2002      	movs	r0, #2
 800ce6e:	f003 fdf9 	bl	8010a64 <LmHandlerJoin>
		break;
 800ce72:	bf00      	nop
	default:
		return AT_PARAM_ERROR;
	}

	UTIL_TIMER_Create(&TxCertifTimer, 8000, UTIL_TIMER_ONESHOT, OnCertifTimer,
 800ce74:	2300      	movs	r3, #0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	4b0a      	ldr	r3, [pc, #40]	@ (800cea4 <AT_Certif+0x58>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800ce80:	4809      	ldr	r0, [pc, #36]	@ (800cea8 <AT_Certif+0x5c>)
 800ce82:	f017 facf 	bl	8024424 <UTIL_TIMER_Create>
	NULL); /* 8s */
	UTIL_TIMER_Start(&TxCertifTimer);
 800ce86:	4808      	ldr	r0, [pc, #32]	@ (800cea8 <AT_Certif+0x5c>)
 800ce88:	f017 fb02 	bl	8024490 <UTIL_TIMER_Start>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU,
 800ce8c:	4a07      	ldr	r2, [pc, #28]	@ (800ceac <AT_Certif+0x60>)
 800ce8e:	2100      	movs	r1, #0
 800ce90:	2008      	movs	r0, #8
 800ce92:	f017 f9af 	bl	80241f4 <UTIL_SEQ_RegTask>
			CertifSend);

	return AT_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e000      	b.n	800ce9c <AT_Certif+0x50>
		return AT_PARAM_ERROR;
 800ce9a:	2302      	movs	r3, #2
	/* USER CODE BEGIN AT_Certif_2 */

	/* USER CODE END AT_Certif_2 */
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	0800dda5 	.word	0x0800dda5
 800cea8:	20000558 	.word	0x20000558
 800ceac:	0800ddbd 	.word	0x0800ddbd

0800ceb0 <AT_bat_get>:

/* --------------- Information command --------------- */
ATEerror_t AT_bat_get(const char *param) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AT_bat_get_1 */

	/* USER CODE END AT_bat_get_1 */
	print_d(SYS_GetBatteryLevel());
 800ceb8:	f7f4 f9d2 	bl	8001260 <SYS_GetBatteryLevel>
 800cebc:	4603      	mov	r3, r0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 ff4c 	bl	800dd5c <print_d>

	return AT_OK;
 800cec4:	2300      	movs	r3, #0
	/* USER CODE BEGIN AT_bat_get_2 */

	/* USER CODE END AT_bat_get_2 */
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
	...

0800ced0 <AT_lora_disconnect>:

/* USER CODE BEGIN EF */
/* --------------- Information command --------------- */

ATEerror_t AT_lora_disconnect(const char *param) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
	if (LmHandlerStop() == LORAMAC_HANDLER_SUCCESS) {
 800ced8:	f004 fcc0 	bl	801185c <LmHandlerStop>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d107      	bne.n	800cef2 <AT_lora_disconnect+0x22>
		AT_PRINTF("Disconnected from LoRaWAN network successfully!\r\n");
 800cee2:	4b09      	ldr	r3, [pc, #36]	@ (800cf08 <AT_lora_disconnect+0x38>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	2100      	movs	r1, #0
 800cee8:	2000      	movs	r0, #0
 800ceea:	f017 fd59 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e006      	b.n	800cf00 <AT_lora_disconnect+0x30>
	} else {
		AT_PRINTF("Disconnect error: MAC is busy\r\n");
 800cef2:	4b06      	ldr	r3, [pc, #24]	@ (800cf0c <AT_lora_disconnect+0x3c>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	2100      	movs	r1, #0
 800cef8:	2000      	movs	r0, #0
 800cefa:	f017 fd51 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800cefe:	2301      	movs	r3, #1
	}
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	08026e74 	.word	0x08026e74
 800cf0c:	08026ea8 	.word	0x08026ea8

0800cf10 <AT_module_status_get>:

/* --------------- AT Module Status command --------------- */
ATEerror_t AT_module_status_get(const char *param) {
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	if (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) {
 800cf18:	f003 fe46 	bl	8010ba8 <LmHandlerJoinStatus>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d107      	bne.n	800cf32 <AT_module_status_get+0x22>
		AT_PRINTF("JOINED\r\n");
 800cf22:	4b09      	ldr	r3, [pc, #36]	@ (800cf48 <AT_module_status_get+0x38>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	2100      	movs	r1, #0
 800cf28:	2000      	movs	r0, #0
 800cf2a:	f017 fd39 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e006      	b.n	800cf40 <AT_module_status_get+0x30>
	} else {
		AT_PRINTF("NOT JOINED\r\n");
 800cf32:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <AT_module_status_get+0x3c>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	2100      	movs	r1, #0
 800cf38:	2000      	movs	r0, #0
 800cf3a:	f017 fd31 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_OK;
 800cf3e:	2300      	movs	r3, #0
	}
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	08026ec8 	.word	0x08026ec8
 800cf4c:	08026ed4 	.word	0x08026ed4

0800cf50 <OnJoinTimerEvent1>:
uint8_t timer_state_flag_1 = 0;
uint8_t timer_state_flag_2 = 0;
uint8_t timer_state_flag_3 = 0;
uint8_t timer_state_flag_4 = 0;

static void OnJoinTimerEvent1(void *context) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 800cf58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf5c:	4803      	ldr	r0, [pc, #12]	@ (800cf6c <OnJoinTimerEvent1+0x1c>)
 800cf5e:	f7f8 fab8 	bl	80054d2 <HAL_GPIO_TogglePin>
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	48000400 	.word	0x48000400

0800cf70 <OnJoinTimerEvent2>:

static void OnJoinTimerEvent2(void *context) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 800cf78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf7c:	4808      	ldr	r0, [pc, #32]	@ (800cfa0 <OnJoinTimerEvent2+0x30>)
 800cf7e:	f7f8 faa8 	bl	80054d2 <HAL_GPIO_TogglePin>
	AT_PPRINTF("Led 1 Toggled\r\n");
 800cf82:	4b08      	ldr	r3, [pc, #32]	@ (800cfa4 <OnJoinTimerEvent2+0x34>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	2100      	movs	r1, #0
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f017 fd09 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1f6      	bne.n	800cf82 <OnJoinTimerEvent2+0x12>
}
 800cf94:	bf00      	nop
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	48000400 	.word	0x48000400
 800cfa4:	08026ee4 	.word	0x08026ee4

0800cfa8 <OnJoinTimerEvent3>:

static void OnJoinTimerEvent3(void *context) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_RED */
 800cfb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cfb4:	4803      	ldr	r0, [pc, #12]	@ (800cfc4 <OnJoinTimerEvent3+0x1c>)
 800cfb6:	f7f8 fa8c 	bl	80054d2 <HAL_GPIO_TogglePin>
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	48000400 	.word	0x48000400

0800cfc8 <OnJoinTimerEvent4>:

static void OnJoinTimerEvent4(void *context) {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_RED */
 800cfd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cfd4:	4808      	ldr	r0, [pc, #32]	@ (800cff8 <OnJoinTimerEvent4+0x30>)
 800cfd6:	f7f8 fa7c 	bl	80054d2 <HAL_GPIO_TogglePin>
	AT_PPRINTF("Led 2 Toggled\r\n");
 800cfda:	4b08      	ldr	r3, [pc, #32]	@ (800cffc <OnJoinTimerEvent4+0x34>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2100      	movs	r1, #0
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	f017 fcdd 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1f6      	bne.n	800cfda <OnJoinTimerEvent4+0x12>
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	48000400 	.word	0x48000400
 800cffc:	08026ef4 	.word	0x08026ef4

0800d000 <AT_timer_config>:

ATEerror_t AT_timer_config(const char *param) {
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af02      	add	r7, sp, #8
 800d006:	6078      	str	r0, [r7, #4]
	uint32_t timer_select;
	uint32_t period;
	if (tiny_sscanf(param, "%d,%d", &timer_select, &period) != 2) {
 800d008:	f107 0308 	add.w	r3, r7, #8
 800d00c:	f107 020c 	add.w	r2, r7, #12
 800d010:	4931      	ldr	r1, [pc, #196]	@ (800d0d8 <AT_timer_config+0xd8>)
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f016 fd76 	bl	8023b04 <tiny_sscanf>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d001      	beq.n	800d022 <AT_timer_config+0x22>
		return AT_PARAM_ERROR;
 800d01e:	2302      	movs	r3, #2
 800d020:	e055      	b.n	800d0ce <AT_timer_config+0xce>
	}

	if (period == 0) {
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <AT_timer_config+0x3e>
		AT_PPRINTF("Period Can't be Zero\r\n");
 800d028:	4b2c      	ldr	r3, [pc, #176]	@ (800d0dc <AT_timer_config+0xdc>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	2100      	movs	r1, #0
 800d02e:	2000      	movs	r0, #0
 800d030:	f017 fcb6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1f6      	bne.n	800d028 <AT_timer_config+0x28>
		return AT_PARAM_ERROR;
 800d03a:	2302      	movs	r3, #2
 800d03c:	e047      	b.n	800d0ce <AT_timer_config+0xce>
	}

	if (timer_select == 0) {
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10b      	bne.n	800d05c <AT_timer_config+0x5c>
		UTIL_TIMER_Create(&event1, period, UTIL_TIMER_PERIODIC,
 800d044:	68b9      	ldr	r1, [r7, #8]
 800d046:	2300      	movs	r3, #0
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	4b25      	ldr	r3, [pc, #148]	@ (800d0e0 <AT_timer_config+0xe0>)
 800d04c:	2201      	movs	r2, #1
 800d04e:	4825      	ldr	r0, [pc, #148]	@ (800d0e4 <AT_timer_config+0xe4>)
 800d050:	f017 f9e8 	bl	8024424 <UTIL_TIMER_Create>
				OnJoinTimerEvent1, NULL);
		timer_flag_1 = 1;
 800d054:	4b24      	ldr	r3, [pc, #144]	@ (800d0e8 <AT_timer_config+0xe8>)
 800d056:	2201      	movs	r2, #1
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	e037      	b.n	800d0cc <AT_timer_config+0xcc>

	} else if (timer_select == 1) {
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d10b      	bne.n	800d07a <AT_timer_config+0x7a>
		UTIL_TIMER_Create(&event2, period, UTIL_TIMER_PERIODIC,
 800d062:	68b9      	ldr	r1, [r7, #8]
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4b20      	ldr	r3, [pc, #128]	@ (800d0ec <AT_timer_config+0xec>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	4820      	ldr	r0, [pc, #128]	@ (800d0f0 <AT_timer_config+0xf0>)
 800d06e:	f017 f9d9 	bl	8024424 <UTIL_TIMER_Create>
				OnJoinTimerEvent2, NULL);
		timer_flag_2 = 1;
 800d072:	4b20      	ldr	r3, [pc, #128]	@ (800d0f4 <AT_timer_config+0xf4>)
 800d074:	2201      	movs	r2, #1
 800d076:	701a      	strb	r2, [r3, #0]
 800d078:	e028      	b.n	800d0cc <AT_timer_config+0xcc>

	} else if (timer_select == 2) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d10b      	bne.n	800d098 <AT_timer_config+0x98>
		UTIL_TIMER_Create(&event3, period, UTIL_TIMER_PERIODIC,
 800d080:	68b9      	ldr	r1, [r7, #8]
 800d082:	2300      	movs	r3, #0
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	4b1c      	ldr	r3, [pc, #112]	@ (800d0f8 <AT_timer_config+0xf8>)
 800d088:	2201      	movs	r2, #1
 800d08a:	481c      	ldr	r0, [pc, #112]	@ (800d0fc <AT_timer_config+0xfc>)
 800d08c:	f017 f9ca 	bl	8024424 <UTIL_TIMER_Create>
				OnJoinTimerEvent3, NULL);
		timer_flag_3 = 1;
 800d090:	4b1b      	ldr	r3, [pc, #108]	@ (800d100 <AT_timer_config+0x100>)
 800d092:	2201      	movs	r2, #1
 800d094:	701a      	strb	r2, [r3, #0]
 800d096:	e019      	b.n	800d0cc <AT_timer_config+0xcc>

	} else if (timer_select == 3) {
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d10b      	bne.n	800d0b6 <AT_timer_config+0xb6>
		UTIL_TIMER_Create(&event4, period, UTIL_TIMER_PERIODIC,
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	4b17      	ldr	r3, [pc, #92]	@ (800d104 <AT_timer_config+0x104>)
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	4817      	ldr	r0, [pc, #92]	@ (800d108 <AT_timer_config+0x108>)
 800d0aa:	f017 f9bb 	bl	8024424 <UTIL_TIMER_Create>
				OnJoinTimerEvent4, NULL);
		timer_flag_4 = 1;
 800d0ae:	4b17      	ldr	r3, [pc, #92]	@ (800d10c <AT_timer_config+0x10c>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
 800d0b4:	e00a      	b.n	800d0cc <AT_timer_config+0xcc>

	} else {
		AT_PPRINTF("Selectable Timers are [0,1,2,3]\r\n");
 800d0b6:	4b16      	ldr	r3, [pc, #88]	@ (800d110 <AT_timer_config+0x110>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	2000      	movs	r0, #0
 800d0be:	f017 fc6f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1f6      	bne.n	800d0b6 <AT_timer_config+0xb6>
		return AT_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <AT_timer_config+0xce>
	}
	return AT_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	08026f04 	.word	0x08026f04
 800d0dc:	08026f0c 	.word	0x08026f0c
 800d0e0:	0800cf51 	.word	0x0800cf51
 800d0e4:	20000570 	.word	0x20000570
 800d0e8:	200005d0 	.word	0x200005d0
 800d0ec:	0800cf71 	.word	0x0800cf71
 800d0f0:	20000588 	.word	0x20000588
 800d0f4:	200005d1 	.word	0x200005d1
 800d0f8:	0800cfa9 	.word	0x0800cfa9
 800d0fc:	200005a0 	.word	0x200005a0
 800d100:	200005d2 	.word	0x200005d2
 800d104:	0800cfc9 	.word	0x0800cfc9
 800d108:	200005b8 	.word	0x200005b8
 800d10c:	200005d3 	.word	0x200005d3
 800d110:	08026f24 	.word	0x08026f24

0800d114 <AT_timer_start>:

ATEerror_t AT_timer_start(const char *param) {
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
	uint32_t timer_select;
	if (tiny_sscanf(param, "%u", &timer_select) != 1) {
 800d11c:	f107 030c 	add.w	r3, r7, #12
 800d120:	461a      	mov	r2, r3
 800d122:	4938      	ldr	r1, [pc, #224]	@ (800d204 <AT_timer_start+0xf0>)
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f016 fced 	bl	8023b04 <tiny_sscanf>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d001      	beq.n	800d134 <AT_timer_start+0x20>
		return AT_PARAM_ERROR;
 800d130:	2302      	movs	r3, #2
 800d132:	e063      	b.n	800d1fc <AT_timer_start+0xe8>
	}

	if (timer_select == 0) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d112      	bne.n	800d160 <AT_timer_start+0x4c>
		if (timer_flag_1) {
 800d13a:	4b33      	ldr	r3, [pc, #204]	@ (800d208 <AT_timer_start+0xf4>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00c      	beq.n	800d15c <AT_timer_start+0x48>
			if (!timer_state_flag_1) {
 800d142:	4b32      	ldr	r3, [pc, #200]	@ (800d20c <AT_timer_start+0xf8>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d106      	bne.n	800d158 <AT_timer_start+0x44>
				UTIL_TIMER_Start(&event1);
 800d14a:	4831      	ldr	r0, [pc, #196]	@ (800d210 <AT_timer_start+0xfc>)
 800d14c:	f017 f9a0 	bl	8024490 <UTIL_TIMER_Start>
				timer_state_flag_1 = 1;
 800d150:	4b2e      	ldr	r3, [pc, #184]	@ (800d20c <AT_timer_start+0xf8>)
 800d152:	2201      	movs	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e050      	b.n	800d1fa <AT_timer_start+0xe6>
			} else {
				return AT_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	e04f      	b.n	800d1fc <AT_timer_start+0xe8>
			}
		} else {
			return AT_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e04d      	b.n	800d1fc <AT_timer_start+0xe8>
		}
	} else if (timer_select == 1) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d112      	bne.n	800d18c <AT_timer_start+0x78>
		if (timer_flag_2) {
 800d166:	4b2b      	ldr	r3, [pc, #172]	@ (800d214 <AT_timer_start+0x100>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <AT_timer_start+0x74>
			if (!timer_state_flag_2) {
 800d16e:	4b2a      	ldr	r3, [pc, #168]	@ (800d218 <AT_timer_start+0x104>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <AT_timer_start+0x70>
				UTIL_TIMER_Start(&event2);
 800d176:	4829      	ldr	r0, [pc, #164]	@ (800d21c <AT_timer_start+0x108>)
 800d178:	f017 f98a 	bl	8024490 <UTIL_TIMER_Start>
				timer_state_flag_2 = 1;
 800d17c:	4b26      	ldr	r3, [pc, #152]	@ (800d218 <AT_timer_start+0x104>)
 800d17e:	2201      	movs	r2, #1
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	e03a      	b.n	800d1fa <AT_timer_start+0xe6>
			} else {
				return AT_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	e039      	b.n	800d1fc <AT_timer_start+0xe8>
			}
		} else {
			return AT_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e037      	b.n	800d1fc <AT_timer_start+0xe8>
		}
	} else if (timer_select == 2) {
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d112      	bne.n	800d1b8 <AT_timer_start+0xa4>
		if (timer_flag_3) {
 800d192:	4b23      	ldr	r3, [pc, #140]	@ (800d220 <AT_timer_start+0x10c>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00c      	beq.n	800d1b4 <AT_timer_start+0xa0>
			if (!timer_state_flag_3) {
 800d19a:	4b22      	ldr	r3, [pc, #136]	@ (800d224 <AT_timer_start+0x110>)
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <AT_timer_start+0x9c>
				UTIL_TIMER_Start(&event3);
 800d1a2:	4821      	ldr	r0, [pc, #132]	@ (800d228 <AT_timer_start+0x114>)
 800d1a4:	f017 f974 	bl	8024490 <UTIL_TIMER_Start>
				timer_state_flag_3 = 1;
 800d1a8:	4b1e      	ldr	r3, [pc, #120]	@ (800d224 <AT_timer_start+0x110>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	e024      	b.n	800d1fa <AT_timer_start+0xe6>
			} else {
				return AT_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e023      	b.n	800d1fc <AT_timer_start+0xe8>
			}
		} else {
			return AT_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e021      	b.n	800d1fc <AT_timer_start+0xe8>
		}
	} else if (timer_select == 3) {
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d112      	bne.n	800d1e4 <AT_timer_start+0xd0>
		if (timer_flag_4) {
 800d1be:	4b1b      	ldr	r3, [pc, #108]	@ (800d22c <AT_timer_start+0x118>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00c      	beq.n	800d1e0 <AT_timer_start+0xcc>
			if (!timer_state_flag_4) {
 800d1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d230 <AT_timer_start+0x11c>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <AT_timer_start+0xc8>
				UTIL_TIMER_Start(&event4);
 800d1ce:	4819      	ldr	r0, [pc, #100]	@ (800d234 <AT_timer_start+0x120>)
 800d1d0:	f017 f95e 	bl	8024490 <UTIL_TIMER_Start>
				timer_state_flag_4 = 1;
 800d1d4:	4b16      	ldr	r3, [pc, #88]	@ (800d230 <AT_timer_start+0x11c>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	e00e      	b.n	800d1fa <AT_timer_start+0xe6>
			} else {
				return AT_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e00d      	b.n	800d1fc <AT_timer_start+0xe8>
			}
		} else {
			return AT_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e00b      	b.n	800d1fc <AT_timer_start+0xe8>
		}
	} else {
		AT_PPRINTF("Selectable Timers are [0,1,2,3]\r\n");
 800d1e4:	4b14      	ldr	r3, [pc, #80]	@ (800d238 <AT_timer_start+0x124>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	f017 fbd8 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1f6      	bne.n	800d1e4 <AT_timer_start+0xd0>
		return AT_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <AT_timer_start+0xe8>
	}

	return AT_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	080268d0 	.word	0x080268d0
 800d208:	200005d0 	.word	0x200005d0
 800d20c:	200005d4 	.word	0x200005d4
 800d210:	20000570 	.word	0x20000570
 800d214:	200005d1 	.word	0x200005d1
 800d218:	200005d5 	.word	0x200005d5
 800d21c:	20000588 	.word	0x20000588
 800d220:	200005d2 	.word	0x200005d2
 800d224:	200005d6 	.word	0x200005d6
 800d228:	200005a0 	.word	0x200005a0
 800d22c:	200005d3 	.word	0x200005d3
 800d230:	200005d7 	.word	0x200005d7
 800d234:	200005b8 	.word	0x200005b8
 800d238:	08026f24 	.word	0x08026f24

0800d23c <AT_timer_stop>:

ATEerror_t AT_timer_stop(const char *param) {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	uint32_t timer_select;
	if (tiny_sscanf(param, "%u", &timer_select) != 1) {
 800d244:	f107 030c 	add.w	r3, r7, #12
 800d248:	461a      	mov	r2, r3
 800d24a:	494a      	ldr	r1, [pc, #296]	@ (800d374 <AT_timer_stop+0x138>)
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f016 fc59 	bl	8023b04 <tiny_sscanf>
 800d252:	4603      	mov	r3, r0
 800d254:	2b01      	cmp	r3, #1
 800d256:	d001      	beq.n	800d25c <AT_timer_stop+0x20>
		return AT_PARAM_ERROR;
 800d258:	2302      	movs	r3, #2
 800d25a:	e087      	b.n	800d36c <AT_timer_stop+0x130>
	}

	if (timer_select == 0) {
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d11b      	bne.n	800d29a <AT_timer_stop+0x5e>
		if (timer_state_flag_1) {
 800d262:	4b45      	ldr	r3, [pc, #276]	@ (800d378 <AT_timer_stop+0x13c>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d015      	beq.n	800d296 <AT_timer_stop+0x5a>
			UTIL_TIMER_Stop(&event1);
 800d26a:	4844      	ldr	r0, [pc, #272]	@ (800d37c <AT_timer_stop+0x140>)
 800d26c:	f017 f97e 	bl	802456c <UTIL_TIMER_Stop>
			AT_PPRINTF("Stopped Timer0\r\n");
 800d270:	4b43      	ldr	r3, [pc, #268]	@ (800d380 <AT_timer_stop+0x144>)
 800d272:	2200      	movs	r2, #0
 800d274:	2100      	movs	r1, #0
 800d276:	2000      	movs	r0, #0
 800d278:	f017 fb92 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1f6      	bne.n	800d270 <AT_timer_stop+0x34>
			timer_state_flag_1 = 0;
 800d282:	4b3d      	ldr	r3, [pc, #244]	@ (800d378 <AT_timer_stop+0x13c>)
 800d284:	2200      	movs	r2, #0
 800d286:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_PIN, 0);
 800d288:	2200      	movs	r2, #0
 800d28a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d28e:	483d      	ldr	r0, [pc, #244]	@ (800d384 <AT_timer_stop+0x148>)
 800d290:	f7f8 f908 	bl	80054a4 <HAL_GPIO_WritePin>
 800d294:	e069      	b.n	800d36a <AT_timer_stop+0x12e>
		} else {
			return AT_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	e068      	b.n	800d36c <AT_timer_stop+0x130>

		}
	} else if (timer_select == 1) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d11b      	bne.n	800d2d8 <AT_timer_stop+0x9c>
		if (timer_state_flag_2) {
 800d2a0:	4b39      	ldr	r3, [pc, #228]	@ (800d388 <AT_timer_stop+0x14c>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d015      	beq.n	800d2d4 <AT_timer_stop+0x98>
			UTIL_TIMER_Stop(&event2);
 800d2a8:	4838      	ldr	r0, [pc, #224]	@ (800d38c <AT_timer_stop+0x150>)
 800d2aa:	f017 f95f 	bl	802456c <UTIL_TIMER_Stop>
			AT_PPRINTF("Stopped Timer1\r\n");
 800d2ae:	4b38      	ldr	r3, [pc, #224]	@ (800d390 <AT_timer_stop+0x154>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f017 fb73 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f6      	bne.n	800d2ae <AT_timer_stop+0x72>
			timer_state_flag_2 = 0;
 800d2c0:	4b31      	ldr	r3, [pc, #196]	@ (800d388 <AT_timer_stop+0x14c>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_PIN, 0);
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d2cc:	482d      	ldr	r0, [pc, #180]	@ (800d384 <AT_timer_stop+0x148>)
 800d2ce:	f7f8 f8e9 	bl	80054a4 <HAL_GPIO_WritePin>
 800d2d2:	e04a      	b.n	800d36a <AT_timer_stop+0x12e>

		} else {
			return AT_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e049      	b.n	800d36c <AT_timer_stop+0x130>

		}
	} else if (timer_select == 2) {
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d11b      	bne.n	800d316 <AT_timer_stop+0xda>
		if (timer_state_flag_3) {
 800d2de:	4b2d      	ldr	r3, [pc, #180]	@ (800d394 <AT_timer_stop+0x158>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d015      	beq.n	800d312 <AT_timer_stop+0xd6>
			UTIL_TIMER_Stop(&event3);
 800d2e6:	482c      	ldr	r0, [pc, #176]	@ (800d398 <AT_timer_stop+0x15c>)
 800d2e8:	f017 f940 	bl	802456c <UTIL_TIMER_Stop>
			AT_PPRINTF("Stopped Timer2\r\n");
 800d2ec:	4b2b      	ldr	r3, [pc, #172]	@ (800d39c <AT_timer_stop+0x160>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f017 fb54 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f6      	bne.n	800d2ec <AT_timer_stop+0xb0>
			timer_state_flag_3 = 0;
 800d2fe:	4b25      	ldr	r3, [pc, #148]	@ (800d394 <AT_timer_stop+0x158>)
 800d300:	2200      	movs	r2, #0
 800d302:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, 0);
 800d304:	2200      	movs	r2, #0
 800d306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d30a:	481e      	ldr	r0, [pc, #120]	@ (800d384 <AT_timer_stop+0x148>)
 800d30c:	f7f8 f8ca 	bl	80054a4 <HAL_GPIO_WritePin>
 800d310:	e02b      	b.n	800d36a <AT_timer_stop+0x12e>

		} else {
			return AT_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	e02a      	b.n	800d36c <AT_timer_stop+0x130>

		}
	} else if (timer_select == 3) {
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d11b      	bne.n	800d354 <AT_timer_stop+0x118>
		if (timer_state_flag_4) {
 800d31c:	4b20      	ldr	r3, [pc, #128]	@ (800d3a0 <AT_timer_stop+0x164>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d015      	beq.n	800d350 <AT_timer_stop+0x114>
			UTIL_TIMER_Stop(&event4);
 800d324:	481f      	ldr	r0, [pc, #124]	@ (800d3a4 <AT_timer_stop+0x168>)
 800d326:	f017 f921 	bl	802456c <UTIL_TIMER_Stop>
			AT_PPRINTF("Stopped Timer3\r\n");
 800d32a:	4b1f      	ldr	r3, [pc, #124]	@ (800d3a8 <AT_timer_stop+0x16c>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	2100      	movs	r1, #0
 800d330:	2000      	movs	r0, #0
 800d332:	f017 fb35 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1f6      	bne.n	800d32a <AT_timer_stop+0xee>
			timer_state_flag_4 = 0;
 800d33c:	4b18      	ldr	r3, [pc, #96]	@ (800d3a0 <AT_timer_stop+0x164>)
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, 0);
 800d342:	2200      	movs	r2, #0
 800d344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d348:	480e      	ldr	r0, [pc, #56]	@ (800d384 <AT_timer_stop+0x148>)
 800d34a:	f7f8 f8ab 	bl	80054a4 <HAL_GPIO_WritePin>
 800d34e:	e00c      	b.n	800d36a <AT_timer_stop+0x12e>

		} else {
			return AT_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	e00b      	b.n	800d36c <AT_timer_stop+0x130>

		}
	} else {
		AT_PPRINTF("Selectable Timers are [0,1,2,3]\r\n");
 800d354:	4b15      	ldr	r3, [pc, #84]	@ (800d3ac <AT_timer_stop+0x170>)
 800d356:	2200      	movs	r2, #0
 800d358:	2100      	movs	r1, #0
 800d35a:	2000      	movs	r0, #0
 800d35c:	f017 fb20 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1f6      	bne.n	800d354 <AT_timer_stop+0x118>
		return AT_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	e000      	b.n	800d36c <AT_timer_stop+0x130>
	}

	return AT_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	080268d0 	.word	0x080268d0
 800d378:	200005d4 	.word	0x200005d4
 800d37c:	20000570 	.word	0x20000570
 800d380:	08026f48 	.word	0x08026f48
 800d384:	48000400 	.word	0x48000400
 800d388:	200005d5 	.word	0x200005d5
 800d38c:	20000588 	.word	0x20000588
 800d390:	08026f5c 	.word	0x08026f5c
 800d394:	200005d6 	.word	0x200005d6
 800d398:	200005a0 	.word	0x200005a0
 800d39c:	08026f70 	.word	0x08026f70
 800d3a0:	200005d7 	.word	0x200005d7
 800d3a4:	200005b8 	.word	0x200005b8
 800d3a8:	08026f84 	.word	0x08026f84
 800d3ac:	08026f24 	.word	0x08026f24

0800d3b0 <AT_get_temp>:

ATEerror_t AT_get_temp(const char *param) {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af02      	add	r7, sp, #8
 800d3b6:	6078      	str	r0, [r7, #4]
	int32_t temp;
	temp = SYS_GetTemperatureLevel();
 800d3b8:	f7f3 ff10 	bl	80011dc <SYS_GetTemperatureLevel>
 800d3bc:	60f8      	str	r0, [r7, #12]
	AT_PPRINTF("Temp: %dC\r\n", temp);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	4b07      	ldr	r3, [pc, #28]	@ (800d3e0 <AT_get_temp+0x30>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f017 fae9 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1f4      	bne.n	800d3be <AT_get_temp+0xe>

	return AT_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	08026f98 	.word	0x08026f98

0800d3e4 <AT_I2C_scan_run>:

ATEerror_t AT_I2C_scan_run(const char *param) {
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	6078      	str	r0, [r7, #4]
	(void) param;

	uint16_t i2c_slave_count = 0U;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	81fb      	strh	r3, [r7, #14]
	uint8_t i2c_status = 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	72fb      	strb	r3, [r7, #11]
	uint16_t i2c_slave_address = 0U;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	81bb      	strh	r3, [r7, #12]

	AT_PRINTF("Scanning I2C Slaves...\r\n");
 800d3f8:	4b20      	ldr	r3, [pc, #128]	@ (800d47c <AT_I2C_scan_run+0x98>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	2000      	movs	r0, #0
 800d400:	f017 face 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

	for (i2c_slave_address = 1U; i2c_slave_address < 128U;
 800d404:	2301      	movs	r3, #1
 800d406:	81bb      	strh	r3, [r7, #12]
 800d408:	e01a      	b.n	800d440 <AT_I2C_scan_run+0x5c>
			i2c_slave_address++) {
		i2c_status = HAL_I2C_IsDeviceReady(&hi2c3,
 800d40a:	89bb      	ldrh	r3, [r7, #12]
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	b299      	uxth	r1, r3
 800d410:	2302      	movs	r3, #2
 800d412:	2202      	movs	r2, #2
 800d414:	481a      	ldr	r0, [pc, #104]	@ (800d480 <AT_I2C_scan_run+0x9c>)
 800d416:	f7f8 fc03 	bl	8005c20 <HAL_I2C_IsDeviceReady>
 800d41a:	4603      	mov	r3, r0
 800d41c:	72fb      	strb	r3, [r7, #11]
				(uint16_t) (i2c_slave_address << 1U), 2U, 2U);

		if (i2c_status == HAL_OK) {
 800d41e:	7afb      	ldrb	r3, [r7, #11]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10a      	bne.n	800d43a <AT_I2C_scan_run+0x56>
			AT_PRINTF("Detected I2C Slave address: 0x%02X\r\n",
 800d424:	89bb      	ldrh	r3, [r7, #12]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4b16      	ldr	r3, [pc, #88]	@ (800d484 <AT_I2C_scan_run+0xa0>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	2100      	movs	r1, #0
 800d42e:	2000      	movs	r0, #0
 800d430:	f017 fab6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
					(unsigned int )i2c_slave_address);
			i2c_slave_count++;
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	3301      	adds	r3, #1
 800d438:	81fb      	strh	r3, [r7, #14]
			i2c_slave_address++) {
 800d43a:	89bb      	ldrh	r3, [r7, #12]
 800d43c:	3301      	adds	r3, #1
 800d43e:	81bb      	strh	r3, [r7, #12]
	for (i2c_slave_address = 1U; i2c_slave_address < 128U;
 800d440:	89bb      	ldrh	r3, [r7, #12]
 800d442:	2b7f      	cmp	r3, #127	@ 0x7f
 800d444:	d9e1      	bls.n	800d40a <AT_I2C_scan_run+0x26>
		}
	}

	if (i2c_slave_count > 0U) {
 800d446:	89fb      	ldrh	r3, [r7, #14]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <AT_I2C_scan_run+0x7a>
		AT_PRINTF("%u Slave(s) Found\r\n", (unsigned int )i2c_slave_count);
 800d44c:	89fb      	ldrh	r3, [r7, #14]
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <AT_I2C_scan_run+0xa4>)
 800d452:	2200      	movs	r2, #0
 800d454:	2100      	movs	r1, #0
 800d456:	2000      	movs	r0, #0
 800d458:	f017 faa2 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800d45c:	e005      	b.n	800d46a <AT_I2C_scan_run+0x86>
	} else {
		AT_PRINTF("No Slave Found\r\n");
 800d45e:	4b0b      	ldr	r3, [pc, #44]	@ (800d48c <AT_I2C_scan_run+0xa8>)
 800d460:	2200      	movs	r2, #0
 800d462:	2100      	movs	r1, #0
 800d464:	2000      	movs	r0, #0
 800d466:	f017 fa9b 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	}
	HAL_I2C_Init(&hi2c3);
 800d46a:	4805      	ldr	r0, [pc, #20]	@ (800d480 <AT_I2C_scan_run+0x9c>)
 800d46c:	f7f8 f84a 	bl	8005504 <HAL_I2C_Init>
	return AT_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	08026fa4 	.word	0x08026fa4
 800d480:	20000238 	.word	0x20000238
 800d484:	08026fc0 	.word	0x08026fc0
 800d488:	08026fe8 	.word	0x08026fe8
 800d48c:	08026ffc 	.word	0x08026ffc

0800d490 <AT_I2C_get>:

/*
 * EMPA Functions
 */

ATEerror_t AT_I2C_get(const char *param) {
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af02      	add	r7, sp, #8
 800d496:	6078      	str	r0, [r7, #4]
	if (param == NULL) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d107      	bne.n	800d4ae <AT_I2C_get+0x1e>
		AT_PRINTF("Error: NULL parameter provided\n");
 800d49e:	4b31      	ldr	r3, [pc, #196]	@ (800d564 <AT_I2C_get+0xd4>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	f017 fa7b 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e055      	b.n	800d55a <AT_I2C_get+0xca>
	}

	uint16_t i2c_device_address = 0U;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	81bb      	strh	r3, [r7, #12]
	uint8_t i2c_register_address = 0U;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	72fb      	strb	r3, [r7, #11]

	if (tiny_sscanf(param, "0x%hx,0x%hhx", &i2c_device_address,
 800d4b6:	f107 030b 	add.w	r3, r7, #11
 800d4ba:	f107 020c 	add.w	r2, r7, #12
 800d4be:	492a      	ldr	r1, [pc, #168]	@ (800d568 <AT_I2C_get+0xd8>)
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f016 fb1f 	bl	8023b04 <tiny_sscanf>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d007      	beq.n	800d4dc <AT_I2C_get+0x4c>
			&i2c_register_address) != 2) {
		AT_PRINTF("Error: Failed to parse input parameter\n");
 800d4cc:	4b27      	ldr	r3, [pc, #156]	@ (800d56c <AT_I2C_get+0xdc>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	f017 fa64 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e03e      	b.n	800d55a <AT_I2C_get+0xca>
	}

	uint8_t i2c_status = 0U;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0U;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	72bb      	strb	r3, [r7, #10]

	i2c_status = HAL_I2C_Master_Transmit(&hi2c3,
 800d4e4:	89bb      	ldrh	r3, [r7, #12]
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	b299      	uxth	r1, r3
 800d4ea:	f107 020b 	add.w	r2, r7, #11
 800d4ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	481e      	ldr	r0, [pc, #120]	@ (800d570 <AT_I2C_get+0xe0>)
 800d4f8:	f7f8 f894 	bl	8005624 <HAL_I2C_Master_Transmit>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	73fb      	strb	r3, [r7, #15]
			(uint16_t) (i2c_device_address << 1U), &i2c_register_address, 1U,
			HAL_MAX_DELAY);

	if (i2c_status == HAL_OK) {
 800d500:	7bfb      	ldrb	r3, [r7, #15]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d122      	bne.n	800d54c <AT_I2C_get+0xbc>
		i2c_status = HAL_I2C_Master_Receive(&hi2c3,
 800d506:	89bb      	ldrh	r3, [r7, #12]
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	b299      	uxth	r1, r3
 800d50c:	f107 020a 	add.w	r2, r7, #10
 800d510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	2301      	movs	r3, #1
 800d518:	4815      	ldr	r0, [pc, #84]	@ (800d570 <AT_I2C_get+0xe0>)
 800d51a:	f7f8 f977 	bl	800580c <HAL_I2C_Master_Receive>
 800d51e:	4603      	mov	r3, r0
 800d520:	73fb      	strb	r3, [r7, #15]
				(uint16_t) (i2c_device_address << 1U), &register_value, 1U,
				HAL_MAX_DELAY);

		if (i2c_status == HAL_OK) {
 800d522:	7bfb      	ldrb	r3, [r7, #15]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d109      	bne.n	800d53c <AT_I2C_get+0xac>
			AT_PRINTF("Register Value: 0x%02X\n",
 800d528:	7abb      	ldrb	r3, [r7, #10]
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	4b11      	ldr	r3, [pc, #68]	@ (800d574 <AT_I2C_get+0xe4>)
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	2000      	movs	r0, #0
 800d534:	f017 fa34 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
					(unsigned int )register_value);
			return AT_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	e00e      	b.n	800d55a <AT_I2C_get+0xca>
		} else {
			AT_PRINTF("Error: I2C receive operation failed\n");
 800d53c:	4b0e      	ldr	r3, [pc, #56]	@ (800d578 <AT_I2C_get+0xe8>)
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	2000      	movs	r0, #0
 800d544:	f017 fa2c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			return AT_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e006      	b.n	800d55a <AT_I2C_get+0xca>
		}
	} else {
		AT_PRINTF("Error: I2C transmit operation failed\n");
 800d54c:	4b0b      	ldr	r3, [pc, #44]	@ (800d57c <AT_I2C_get+0xec>)
 800d54e:	2200      	movs	r2, #0
 800d550:	2100      	movs	r1, #0
 800d552:	2000      	movs	r0, #0
 800d554:	f017 fa24 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d558:	2301      	movs	r3, #1
	}
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	08027010 	.word	0x08027010
 800d568:	08027030 	.word	0x08027030
 800d56c:	08027040 	.word	0x08027040
 800d570:	20000238 	.word	0x20000238
 800d574:	08027068 	.word	0x08027068
 800d578:	08027080 	.word	0x08027080
 800d57c:	080270a8 	.word	0x080270a8

0800d580 <AT_I2C_get_with_length>:

ATEerror_t AT_I2C_get_with_length(const char *param) {
 800d580:	b580      	push	{r7, lr}
 800d582:	b0c8      	sub	sp, #288	@ 0x120
 800d584:	af02      	add	r7, sp, #8
 800d586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d58a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d58e:	6018      	str	r0, [r3, #0]
	if (param == NULL) {
 800d590:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d594:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d107      	bne.n	800d5ae <AT_I2C_get_with_length+0x2e>
		AT_PRINTF("Error: NULL parameter provided\n");
 800d59e:	4b58      	ldr	r3, [pc, #352]	@ (800d700 <AT_I2C_get_with_length+0x180>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f017 f9fb 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e0a2      	b.n	800d6f4 <AT_I2C_get_with_length+0x174>
	}

	uint16_t i2c_device_address = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
	uint8_t i2c_register_address = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
	uint16_t i2c_length = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if (tiny_sscanf(param, "0x%hx,0x%hhx,%hu", &i2c_device_address,
 800d5c0:	f207 1111 	addw	r1, r7, #273	@ 0x111
 800d5c4:	f507 7289 	add.w	r2, r7, #274	@ 0x112
 800d5c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d5cc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800d5d0:	f507 7387 	add.w	r3, r7, #270	@ 0x10e
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	494a      	ldr	r1, [pc, #296]	@ (800d704 <AT_I2C_get_with_length+0x184>)
 800d5da:	6800      	ldr	r0, [r0, #0]
 800d5dc:	f016 fa92 	bl	8023b04 <tiny_sscanf>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d007      	beq.n	800d5f6 <AT_I2C_get_with_length+0x76>
			&i2c_register_address, &i2c_length) != 3) {
		AT_PRINTF("Error: Failed to parse input parameter\n");
 800d5e6:	4b48      	ldr	r3, [pc, #288]	@ (800d708 <AT_I2C_get_with_length+0x188>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f017 f9d7 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e07e      	b.n	800d6f4 <AT_I2C_get_with_length+0x174>
	}

	if (i2c_length == 0U || i2c_length > 256U) {
 800d5f6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d004      	beq.n	800d608 <AT_I2C_get_with_length+0x88>
 800d5fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800d602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d606:	d907      	bls.n	800d618 <AT_I2C_get_with_length+0x98>
		AT_PRINTF("Error: Invalid length parameter\n");
 800d608:	4b40      	ldr	r3, [pc, #256]	@ (800d70c <AT_I2C_get_with_length+0x18c>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	2100      	movs	r1, #0
 800d60e:	2000      	movs	r0, #0
 800d610:	f017 f9c6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	e06d      	b.n	800d6f4 <AT_I2C_get_with_length+0x174>
	}

	uint8_t i2c_status = 0U;
 800d618:	2300      	movs	r3, #0
 800d61a:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
	uint8_t register_values[256] = { 0U };
 800d61e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d622:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	3304      	adds	r3, #4
 800d62c:	22fc      	movs	r2, #252	@ 0xfc
 800d62e:	2100      	movs	r1, #0
 800d630:	4618      	mov	r0, r3
 800d632:	f017 fe14 	bl	802525e <memset>

	i2c_status = HAL_I2C_Master_Transmit(&hi2c3,
 800d636:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	b299      	uxth	r1, r3
 800d63e:	f207 1211 	addw	r2, r7, #273	@ 0x111
 800d642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2301      	movs	r3, #1
 800d64a:	4831      	ldr	r0, [pc, #196]	@ (800d710 <AT_I2C_get_with_length+0x190>)
 800d64c:	f7f7 ffea 	bl	8005624 <HAL_I2C_Master_Transmit>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
			(uint16_t) (i2c_device_address << 1U), &i2c_register_address, 1U,
			HAL_MAX_DELAY);

	if (i2c_status == HAL_OK) {
 800d656:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d143      	bne.n	800d6e6 <AT_I2C_get_with_length+0x166>
		i2c_status = HAL_I2C_Master_Receive(&hi2c3,
 800d65e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	b299      	uxth	r1, r3
 800d666:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800d66a:	f107 020c 	add.w	r2, r7, #12
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d672:	9000      	str	r0, [sp, #0]
 800d674:	4826      	ldr	r0, [pc, #152]	@ (800d710 <AT_I2C_get_with_length+0x190>)
 800d676:	f7f8 f8c9 	bl	800580c <HAL_I2C_Master_Receive>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
				(uint16_t) (i2c_device_address << 1U), register_values,
				i2c_length, HAL_MAX_DELAY);

		if (i2c_status == HAL_OK) {
 800d680:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800d684:	2b00      	cmp	r3, #0
 800d686:	d126      	bne.n	800d6d6 <AT_I2C_get_with_length+0x156>
			for (uint16_t i = 0U; i < i2c_length; i++) {
 800d688:	2300      	movs	r3, #0
 800d68a:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 800d68e:	e01a      	b.n	800d6c6 <AT_I2C_get_with_length+0x146>
				AT_PRINTF("Register 0x%02X: 0x%02X\n",
 800d690:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 800d694:	461a      	mov	r2, r3
 800d696:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800d69a:	4413      	add	r3, r2
 800d69c:	4619      	mov	r1, r3
 800d69e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800d6a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800d6a6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800d6aa:	5cd3      	ldrb	r3, [r2, r3]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	9100      	str	r1, [sp, #0]
 800d6b0:	4b18      	ldr	r3, [pc, #96]	@ (800d714 <AT_I2C_get_with_length+0x194>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f017 f972 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			for (uint16_t i = 0U; i < i2c_length; i++) {
 800d6bc:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 800d6c6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800d6ca:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d3de      	bcc.n	800d690 <AT_I2C_get_with_length+0x110>
						(unsigned int )(i2c_register_address + i),
						(unsigned int )register_values[i]);
			}
			return AT_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	e00e      	b.n	800d6f4 <AT_I2C_get_with_length+0x174>
		} else {
			AT_PRINTF("Error: I2C receive operation failed\n");
 800d6d6:	4b10      	ldr	r3, [pc, #64]	@ (800d718 <AT_I2C_get_with_length+0x198>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2100      	movs	r1, #0
 800d6dc:	2000      	movs	r0, #0
 800d6de:	f017 f95f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			return AT_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e006      	b.n	800d6f4 <AT_I2C_get_with_length+0x174>
		}
	} else {
		AT_PRINTF("Error: I2C transmit operation failed\n");
 800d6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d71c <AT_I2C_get_with_length+0x19c>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	f017 f957 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d6f2:	2301      	movs	r3, #1
	}
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	08027010 	.word	0x08027010
 800d704:	080270d0 	.word	0x080270d0
 800d708:	08027040 	.word	0x08027040
 800d70c:	080270e4 	.word	0x080270e4
 800d710:	20000238 	.word	0x20000238
 800d714:	08027108 	.word	0x08027108
 800d718:	08027080 	.word	0x08027080
 800d71c:	080270a8 	.word	0x080270a8

0800d720 <AT_I2C_set>:

ATEerror_t AT_I2C_set(const char *param) {
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af04      	add	r7, sp, #16
 800d726:	6078      	str	r0, [r7, #4]
	if (param == NULL) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d107      	bne.n	800d73e <AT_I2C_set+0x1e>
		AT_PRINTF("Error: NULL parameter provided\n");
 800d72e:	4b24      	ldr	r3, [pc, #144]	@ (800d7c0 <AT_I2C_set+0xa0>)
 800d730:	2200      	movs	r2, #0
 800d732:	2100      	movs	r1, #0
 800d734:	2000      	movs	r0, #0
 800d736:	f017 f933 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e03c      	b.n	800d7b8 <AT_I2C_set+0x98>
	}

	uint16_t i2c_device_address = 0U;
 800d73e:	2300      	movs	r3, #0
 800d740:	81bb      	strh	r3, [r7, #12]
	uint8_t i2c_register_address = 0U;
 800d742:	2300      	movs	r3, #0
 800d744:	72fb      	strb	r3, [r7, #11]
	uint8_t i2c_register_value = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	72bb      	strb	r3, [r7, #10]

	if (tiny_sscanf(param, "0x%hx,0x%hhx,0x%hhx", &i2c_device_address,
 800d74a:	f107 010b 	add.w	r1, r7, #11
 800d74e:	f107 020c 	add.w	r2, r7, #12
 800d752:	f107 030a 	add.w	r3, r7, #10
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	460b      	mov	r3, r1
 800d75a:	491a      	ldr	r1, [pc, #104]	@ (800d7c4 <AT_I2C_set+0xa4>)
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f016 f9d1 	bl	8023b04 <tiny_sscanf>
 800d762:	4603      	mov	r3, r0
 800d764:	2b03      	cmp	r3, #3
 800d766:	d007      	beq.n	800d778 <AT_I2C_set+0x58>
			&i2c_register_address, &i2c_register_value) != 3) {
		AT_PRINTF("Error: Failed to parse input parameter\n");
 800d768:	4b17      	ldr	r3, [pc, #92]	@ (800d7c8 <AT_I2C_set+0xa8>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	2100      	movs	r1, #0
 800d76e:	2000      	movs	r0, #0
 800d770:	f017 f916 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e01f      	b.n	800d7b8 <AT_I2C_set+0x98>
	}

	uint8_t i2c_status = 0U;
 800d778:	2300      	movs	r3, #0
 800d77a:	73fb      	strb	r3, [r7, #15]

	i2c_status = HAL_I2C_Mem_Write(&hi2c3,
 800d77c:	89bb      	ldrh	r3, [r7, #12]
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	b299      	uxth	r1, r3
 800d782:	7afb      	ldrb	r3, [r7, #11]
 800d784:	461a      	mov	r2, r3
 800d786:	2364      	movs	r3, #100	@ 0x64
 800d788:	9302      	str	r3, [sp, #8]
 800d78a:	2301      	movs	r3, #1
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	f107 030a 	add.w	r3, r7, #10
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	2301      	movs	r3, #1
 800d796:	480d      	ldr	r0, [pc, #52]	@ (800d7cc <AT_I2C_set+0xac>)
 800d798:	f7f8 f92e 	bl	80059f8 <HAL_I2C_Mem_Write>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
			(uint16_t) (i2c_device_address << 1U),
			(uint16_t) i2c_register_address, 1U, &i2c_register_value, 1U, 100U);

	if (i2c_status != HAL_OK) {
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <AT_I2C_set+0x96>
		AT_PRINTF("Error: HAL I2C Mem Write failed\n");
 800d7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d0 <AT_I2C_set+0xb0>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f017 f8f7 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e000      	b.n	800d7b8 <AT_I2C_set+0x98>
	}

	return AT_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	08027010 	.word	0x08027010
 800d7c4:	08027124 	.word	0x08027124
 800d7c8:	08027040 	.word	0x08027040
 800d7cc:	20000238 	.word	0x20000238
 800d7d0:	08027138 	.word	0x08027138

0800d7d4 <AT_I2C_set_with_length>:

ATEerror_t AT_I2C_set_with_length(const char *param) {
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b0c0      	sub	sp, #256	@ 0x100
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
	char input_buffer[100U];
	char formatted_command[100U];
	uint8_t parsed_values[20U] = { 0 };
 800d7dc:	2300      	movs	r3, #0
 800d7de:	60bb      	str	r3, [r7, #8]
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	605a      	str	r2, [r3, #4]
 800d7ea:	609a      	str	r2, [r3, #8]
 800d7ec:	60da      	str	r2, [r3, #12]
	uint32_t parsed_value_count = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

	(void) memset(input_buffer, 0, sizeof(input_buffer));
 800d7f4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800d7f8:	2264      	movs	r2, #100	@ 0x64
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f017 fd2e 	bl	802525e <memset>
	(void) memset(formatted_command, 0, sizeof(formatted_command));
 800d802:	f107 031c 	add.w	r3, r7, #28
 800d806:	2264      	movs	r2, #100	@ 0x64
 800d808:	2100      	movs	r1, #0
 800d80a:	4618      	mov	r0, r3
 800d80c:	f017 fd27 	bl	802525e <memset>

	if (param == NULL) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d107      	bne.n	800d826 <AT_I2C_set_with_length+0x52>
		AT_PRINTF("Invalid parameter: NULL\n");
 800d816:	4b5b      	ldr	r3, [pc, #364]	@ (800d984 <AT_I2C_set_with_length+0x1b0>)
 800d818:	2200      	movs	r2, #0
 800d81a:	2100      	movs	r1, #0
 800d81c:	2000      	movs	r0, #0
 800d81e:	f017 f8bf 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e0aa      	b.n	800d97c <AT_I2C_set_with_length+0x1a8>
	}

	(void) strncpy(input_buffer, param, sizeof(input_buffer) - 1U);
 800d826:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800d82a:	2263      	movs	r2, #99	@ 0x63
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	4618      	mov	r0, r3
 800d830:	f017 fd2f 	bl	8025292 <strncpy>

	char *current_token = strtok(input_buffer, ",");
 800d834:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800d838:	4953      	ldr	r1, [pc, #332]	@ (800d988 <AT_I2C_set_with_length+0x1b4>)
 800d83a:	4618      	mov	r0, r3
 800d83c:	f017 fd3c 	bl	80252b8 <strtok>
 800d840:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
	while ((current_token != NULL)
 800d844:	e02f      	b.n	800d8a6 <AT_I2C_set_with_length+0xd2>
			&& (parsed_value_count < sizeof(parsed_values))) {
		long int temp_value = strtol(current_token, NULL, 0);
 800d846:	2200      	movs	r2, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 800d84e:	f017 fba3 	bl	8024f98 <strtol>
 800d852:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
		if ((temp_value < 0) || (temp_value > 255)) {
 800d856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	db03      	blt.n	800d866 <AT_I2C_set_with_length+0x92>
 800d85e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d862:	2bff      	cmp	r3, #255	@ 0xff
 800d864:	dd0a      	ble.n	800d87c <AT_I2C_set_with_length+0xa8>
			AT_PRINTF("Invalid value: %s\n", current_token);
 800d866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	4b47      	ldr	r3, [pc, #284]	@ (800d98c <AT_I2C_set_with_length+0x1b8>)
 800d86e:	2200      	movs	r2, #0
 800d870:	2100      	movs	r1, #0
 800d872:	2000      	movs	r0, #0
 800d874:	f017 f894 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			return AT_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e07f      	b.n	800d97c <AT_I2C_set_with_length+0x1a8>
		}
		parsed_values[parsed_value_count] = (uint8_t) temp_value;
 800d87c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d880:	b2d9      	uxtb	r1, r3
 800d882:	f107 0208 	add.w	r2, r7, #8
 800d886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d88a:	4413      	add	r3, r2
 800d88c:	460a      	mov	r2, r1
 800d88e:	701a      	strb	r2, [r3, #0]
		parsed_value_count++;
 800d890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d894:	3301      	adds	r3, #1
 800d896:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		current_token = strtok(NULL, ",");
 800d89a:	493b      	ldr	r1, [pc, #236]	@ (800d988 <AT_I2C_set_with_length+0x1b4>)
 800d89c:	2000      	movs	r0, #0
 800d89e:	f017 fd0b 	bl	80252b8 <strtok>
 800d8a2:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
			&& (parsed_value_count < sizeof(parsed_values))) {
 800d8a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <AT_I2C_set_with_length+0xe2>
 800d8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8b2:	2b13      	cmp	r3, #19
 800d8b4:	d9c7      	bls.n	800d846 <AT_I2C_set_with_length+0x72>
	}

	if (parsed_value_count < 3U) {
 800d8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d807      	bhi.n	800d8ce <AT_I2C_set_with_length+0xfa>
		AT_PRINTF("Invalid data: Not enough fields\n");
 800d8be:	4b34      	ldr	r3, [pc, #208]	@ (800d990 <AT_I2C_set_with_length+0x1bc>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	f017 f86b 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e056      	b.n	800d97c <AT_I2C_set_with_length+0x1a8>
	}

	uint8_t i2c_device_address = parsed_values[0];
 800d8ce:	7a3b      	ldrb	r3, [r7, #8]
 800d8d0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	uint8_t i2c_register_address = parsed_values[1];
 800d8d4:	7a7b      	ldrb	r3, [r7, #9]
 800d8d6:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
	uint8_t data_length = parsed_values[2];
 800d8da:	7abb      	ldrb	r3, [r7, #10]
 800d8dc:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5

	if ((parsed_value_count - 3U) != data_length) {
 800d8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8e4:	1eda      	subs	r2, r3, #3
 800d8e6:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d00e      	beq.n	800d90c <AT_I2C_set_with_length+0x138>
		AT_PRINTF("Error: Mismatch in expected and actual value count "
 800d8ee:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800d8f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800d8f6:	3a03      	subs	r2, #3
 800d8f8:	9201      	str	r2, [sp, #4]
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	4b25      	ldr	r3, [pc, #148]	@ (800d994 <AT_I2C_set_with_length+0x1c0>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	2100      	movs	r1, #0
 800d902:	2000      	movs	r0, #0
 800d904:	f017 f84c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
				"(Expected: %u, Found: %u)\n", (unsigned int )data_length,
				(unsigned int )(parsed_value_count - 3U));
		return AT_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e037      	b.n	800d97c <AT_I2C_set_with_length+0x1a8>
	}

	for (uint32_t i = 0U; i < data_length; i++) {
 800d90c:	2300      	movs	r3, #0
 800d90e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d912:	e02c      	b.n	800d96e <AT_I2C_set_with_length+0x19a>
		(void) snprintf(formatted_command, sizeof(formatted_command),
 800d914:	f897 10e7 	ldrb.w	r1, [r7, #231]	@ 0xe7
 800d918:	f897 20e6 	ldrb.w	r2, [r7, #230]	@ 0xe6
				"0x%X,0x%X,0x%X", (unsigned int) i2c_device_address,
				(unsigned int) (i2c_register_address + i),
 800d91c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d920:	4413      	add	r3, r2
				(unsigned int) parsed_values[3U + i]);
 800d922:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d926:	3203      	adds	r2, #3
 800d928:	32f8      	adds	r2, #248	@ 0xf8
 800d92a:	443a      	add	r2, r7
 800d92c:	f812 2cf0 	ldrb.w	r2, [r2, #-240]
		(void) snprintf(formatted_command, sizeof(formatted_command),
 800d930:	f107 001c 	add.w	r0, r7, #28
 800d934:	9201      	str	r2, [sp, #4]
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	460b      	mov	r3, r1
 800d93a:	4a17      	ldr	r2, [pc, #92]	@ (800d998 <AT_I2C_set_with_length+0x1c4>)
 800d93c:	2164      	movs	r1, #100	@ 0x64
 800d93e:	f017 fbf7 	bl	8025130 <sniprintf>
//        AT_PRINTF("Sending: %s\n", formatted_command);

		if (AT_I2C_set(formatted_command) != AT_OK) {
 800d942:	f107 031c 	add.w	r3, r7, #28
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff feea 	bl	800d720 <AT_I2C_set>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <AT_I2C_set_with_length+0x182>
			return AT_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e012      	b.n	800d97c <AT_I2C_set_with_length+0x1a8>
		}
		(void) memset(formatted_command, 0, sizeof(formatted_command));
 800d956:	f107 031c 	add.w	r3, r7, #28
 800d95a:	2264      	movs	r2, #100	@ 0x64
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f017 fc7d 	bl	802525e <memset>
	for (uint32_t i = 0U; i < data_length; i++) {
 800d964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d968:	3301      	adds	r3, #1
 800d96a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d96e:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800d972:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800d976:	429a      	cmp	r2, r3
 800d978:	d3cc      	bcc.n	800d914 <AT_I2C_set_with_length+0x140>
	}

	return AT_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	37f8      	adds	r7, #248	@ 0xf8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0802715c 	.word	0x0802715c
 800d988:	08027178 	.word	0x08027178
 800d98c:	0802717c 	.word	0x0802717c
 800d990:	08027190 	.word	0x08027190
 800d994:	080271b4 	.word	0x080271b4
 800d998:	08027204 	.word	0x08027204

0800d99c <AT_desk_id_set>:

/* --------------- AT Module Status command --------------- */
extern uint32_t Desk_id;
ATEerror_t AT_desk_id_set(const char *param) {
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
	uint32_t desk_id_temp = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]
	if (tiny_sscanf(param, "0x%hx", &desk_id_temp) != 1) {
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	490b      	ldr	r1, [pc, #44]	@ (800d9dc <AT_desk_id_set+0x40>)
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f016 f8a7 	bl	8023b04 <tiny_sscanf>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d007      	beq.n	800d9cc <AT_desk_id_set+0x30>
		AT_PRINTF("Error: Failed to parse input parameter\n");
 800d9bc:	4b08      	ldr	r3, [pc, #32]	@ (800d9e0 <AT_desk_id_set+0x44>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	f016 ffec 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e003      	b.n	800d9d4 <AT_desk_id_set+0x38>
	}
	Desk_id = desk_id_temp;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	4a05      	ldr	r2, [pc, #20]	@ (800d9e4 <AT_desk_id_set+0x48>)
 800d9d0:	6013      	str	r3, [r2, #0]
	return AT_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	08027214 	.word	0x08027214
 800d9e0:	08027040 	.word	0x08027040
 800d9e4:	2000045c 	.word	0x2000045c

0800d9e8 <AT_desk_id_get>:

ATEerror_t AT_desk_id_get(const char *param) {
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	6078      	str	r0, [r7, #4]
	AT_PRINTF("Desk id:%x\r\n", Desk_id);
 800d9f0:	4b06      	ldr	r3, [pc, #24]	@ (800da0c <AT_desk_id_get+0x24>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	4b06      	ldr	r3, [pc, #24]	@ (800da10 <AT_desk_id_get+0x28>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	f016 ffcf 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

}
 800da02:	bf00      	nop
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	2000045c 	.word	0x2000045c
 800da10:	0802721c 	.word	0x0802721c

0800da14 <OnJoinTempEvent>:

static UTIL_TIMER_Object_t eventTemp;
char tempparam[20] = { 0 };
int32_t currentTemp = 0;

static void OnJoinTempEvent(void *context) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
	currentTemp = SYS_GetTemperatureLevel();
 800da1c:	f7f3 fbde 	bl	80011dc <SYS_GetTemperatureLevel>
 800da20:	4603      	mov	r3, r0
 800da22:	4a08      	ldr	r2, [pc, #32]	@ (800da44 <OnJoinTempEvent+0x30>)
 800da24:	6013      	str	r3, [r2, #0]

	sprintf(tempparam, "1:1:%d", currentTemp);
 800da26:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <OnJoinTempEvent+0x30>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	4906      	ldr	r1, [pc, #24]	@ (800da48 <OnJoinTempEvent+0x34>)
 800da2e:	4807      	ldr	r0, [pc, #28]	@ (800da4c <OnJoinTempEvent+0x38>)
 800da30:	f017 fbb2 	bl	8025198 <siprintf>
	AT_Send(tempparam);
 800da34:	4805      	ldr	r0, [pc, #20]	@ (800da4c <OnJoinTempEvent+0x38>)
 800da36:	f7fe fa05 	bl	800be44 <AT_Send>
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000604 	.word	0x20000604
 800da48:	0802722c 	.word	0x0802722c
 800da4c:	200005f0 	.word	0x200005f0

0800da50 <AT_temp_value_send>:
uint8_t flag_temp_event=0;
ATEerror_t AT_temp_value_send(const char *param) {
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af02      	add	r7, sp, #8
 800da56:	6078      	str	r0, [r7, #4]
	uint32_t period;

	if (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) {
 800da58:	f003 f8a6 	bl	8010ba8 <LmHandlerJoinStatus>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d007      	beq.n	800da72 <AT_temp_value_send+0x22>

	} else {
		AT_PRINTF("NOT JOINED\r\n");
 800da62:	4b1d      	ldr	r3, [pc, #116]	@ (800dad8 <AT_temp_value_send+0x88>)
 800da64:	2200      	movs	r2, #0
 800da66:	2100      	movs	r1, #0
 800da68:	2000      	movs	r0, #0
 800da6a:	f016 ff99 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
		return AT_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	e02e      	b.n	800dad0 <AT_temp_value_send+0x80>
	}

	if (tiny_sscanf(param, "%d", &period) != 1) {
 800da72:	f107 030c 	add.w	r3, r7, #12
 800da76:	461a      	mov	r2, r3
 800da78:	4918      	ldr	r1, [pc, #96]	@ (800dadc <AT_temp_value_send+0x8c>)
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f016 f842 	bl	8023b04 <tiny_sscanf>
 800da80:	4603      	mov	r3, r0
 800da82:	2b01      	cmp	r3, #1
 800da84:	d001      	beq.n	800da8a <AT_temp_value_send+0x3a>
		return AT_PARAM_ERROR;
 800da86:	2302      	movs	r3, #2
 800da88:	e022      	b.n	800dad0 <AT_temp_value_send+0x80>
	}
	if(period < 5000){
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f241 3287 	movw	r2, #4999	@ 0x1387
 800da90:	4293      	cmp	r3, r2
 800da92:	d807      	bhi.n	800daa4 <AT_temp_value_send+0x54>
		AT_PRINTF("Period Can't be less than 5000(5sec)\r\n");
 800da94:	4b12      	ldr	r3, [pc, #72]	@ (800dae0 <AT_temp_value_send+0x90>)
 800da96:	2200      	movs	r2, #0
 800da98:	2100      	movs	r1, #0
 800da9a:	2000      	movs	r0, #0
 800da9c:	f016 ff80 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

		return AT_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e015      	b.n	800dad0 <AT_temp_value_send+0x80>

	}
	if(flag_temp_event==1){
 800daa4:	4b0f      	ldr	r3, [pc, #60]	@ (800dae4 <AT_temp_value_send+0x94>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d102      	bne.n	800dab2 <AT_temp_value_send+0x62>
		UTIL_TIMER_Stop(&eventTemp);
 800daac:	480e      	ldr	r0, [pc, #56]	@ (800dae8 <AT_temp_value_send+0x98>)
 800daae:	f016 fd5d 	bl	802456c <UTIL_TIMER_Stop>
	}
	UTIL_TIMER_Create(&eventTemp, period, UTIL_TIMER_PERIODIC, OnJoinTempEvent,
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	2300      	movs	r3, #0
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <AT_temp_value_send+0x9c>)
 800daba:	2201      	movs	r2, #1
 800dabc:	480a      	ldr	r0, [pc, #40]	@ (800dae8 <AT_temp_value_send+0x98>)
 800dabe:	f016 fcb1 	bl	8024424 <UTIL_TIMER_Create>
			NULL);

	UTIL_TIMER_Start(&eventTemp);
 800dac2:	4809      	ldr	r0, [pc, #36]	@ (800dae8 <AT_temp_value_send+0x98>)
 800dac4:	f016 fce4 	bl	8024490 <UTIL_TIMER_Start>
	flag_temp_event=1;
 800dac8:	4b06      	ldr	r3, [pc, #24]	@ (800dae4 <AT_temp_value_send+0x94>)
 800daca:	2201      	movs	r2, #1
 800dacc:	701a      	strb	r2, [r3, #0]
	return AT_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	08026ed4 	.word	0x08026ed4
 800dadc:	08027234 	.word	0x08027234
 800dae0:	08027238 	.word	0x08027238
 800dae4:	20000608 	.word	0x20000608
 800dae8:	200005d8 	.word	0x200005d8
 800daec:	0800da15 	.word	0x0800da15

0800daf0 <sscanf_uint32_as_hhx>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t sscanf_uint32_as_hhx(const char *from, uint32_t *value) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN sscanf_uint32_as_hhx_1 */

	/* USER CODE END sscanf_uint32_as_hhx_1 */
	return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	1cd9      	adds	r1, r3, #3
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	1c98      	adds	r0, r3, #2
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4603      	mov	r3, r0
 800db0e:	460a      	mov	r2, r1
 800db10:	4904      	ldr	r1, [pc, #16]	@ (800db24 <sscanf_uint32_as_hhx+0x34>)
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f015 fff6 	bl	8023b04 <tiny_sscanf>
 800db18:	4603      	mov	r3, r0
			&((unsigned char*) (value))[3], &((unsigned char*) (value))[2],
			&((unsigned char*) (value))[1], &((unsigned char*) (value))[0]);
	/* USER CODE BEGIN sscanf_uint32_as_hhx_2 */

	/* USER CODE END sscanf_uint32_as_hhx_2 */
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	08027260 	.word	0x08027260

0800db28 <sscanf_16_hhx>:

static int32_t sscanf_16_hhx(const char *from, uint8_t *pt) {
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2a:	b099      	sub	sp, #100	@ 0x64
 800db2c:	af0e      	add	r7, sp, #56	@ 0x38
 800db2e:	6278      	str	r0, [r7, #36]	@ 0x24
 800db30:	6239      	str	r1, [r7, #32]
	/* USER CODE BEGIN sscanf_16_hhx_1 */

	/* USER CODE END sscanf_16_hhx_1 */
	return tiny_sscanf(from,
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	f103 0c01 	add.w	ip, r3, #1
 800db38:	6a3b      	ldr	r3, [r7, #32]
 800db3a:	1c99      	adds	r1, r3, #2
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	1cd8      	adds	r0, r3, #3
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	1d1c      	adds	r4, r3, #4
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	1d5d      	adds	r5, r3, #5
 800db48:	6a3b      	ldr	r3, [r7, #32]
 800db4a:	1d9e      	adds	r6, r3, #6
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	3307      	adds	r3, #7
 800db50:	61fb      	str	r3, [r7, #28]
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	f103 0208 	add.w	r2, r3, #8
 800db58:	61ba      	str	r2, [r7, #24]
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	f103 0e09 	add.w	lr, r3, #9
 800db60:	f8c7 e014 	str.w	lr, [r7, #20]
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	330a      	adds	r3, #10
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	f103 020b 	add.w	r2, r3, #11
 800db70:	60fa      	str	r2, [r7, #12]
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	f103 0e0c 	add.w	lr, r3, #12
 800db78:	f8c7 e008 	str.w	lr, [r7, #8]
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	330d      	adds	r3, #13
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	f103 020e 	add.w	r2, r3, #14
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	330f      	adds	r3, #15
 800db8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800db8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db94:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800db98:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	9308      	str	r3, [sp, #32]
 800dba4:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800dba8:	f8cd e01c 	str.w	lr, [sp, #28]
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	9206      	str	r2, [sp, #24]
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	9305      	str	r3, [sp, #20]
 800dbb4:	9604      	str	r6, [sp, #16]
 800dbb6:	9503      	str	r5, [sp, #12]
 800dbb8:	9402      	str	r4, [sp, #8]
 800dbba:	9001      	str	r0, [sp, #4]
 800dbbc:	9100      	str	r1, [sp, #0]
 800dbbe:	4663      	mov	r3, ip
 800dbc0:	6a3a      	ldr	r2, [r7, #32]
 800dbc2:	4904      	ldr	r1, [pc, #16]	@ (800dbd4 <sscanf_16_hhx+0xac>)
 800dbc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbc6:	f015 ff9d 	bl	8023b04 <tiny_sscanf>
 800dbca:	4603      	mov	r3, r0
			&pt[8], &pt[9], &pt[10], &pt[11], &pt[12], &pt[13], &pt[14],
			&pt[15]);
	/* USER CODE BEGIN sscanf_16_hhx_2 */

	/* USER CODE END sscanf_16_hhx_2 */
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	372c      	adds	r7, #44	@ 0x2c
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd4:	08027274 	.word	0x08027274

0800dbd8 <print_uint32_as_02x>:

static void print_uint32_as_02x(uint32_t value) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af04      	add	r7, sp, #16
 800dbde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN print_uint32_as_02x_1 */

	/* USER CODE END print_uint32_as_02x_1 */
	AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 800dbe0:	1d3b      	adds	r3, r7, #4
 800dbe2:	3303      	adds	r3, #3
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	1d3b      	adds	r3, r7, #4
 800dbea:	3302      	adds	r3, #2
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	1d3b      	adds	r3, r7, #4
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	1d3b      	adds	r3, r7, #4
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	9303      	str	r3, [sp, #12]
 800dbfe:	9002      	str	r0, [sp, #8]
 800dc00:	9101      	str	r1, [sp, #4]
 800dc02:	9200      	str	r2, [sp, #0]
 800dc04:	4b04      	ldr	r3, [pc, #16]	@ (800dc18 <print_uint32_as_02x+0x40>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	2100      	movs	r1, #0
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	f016 fec8 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			(unsigned )((unsigned char* )(&value))[1],
			(unsigned )((unsigned char* )(&value))[0]);
	/* USER CODE BEGIN print_uint32_as_02x_2 */

	/* USER CODE END print_uint32_as_02x_2 */
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	080272c4 	.word	0x080272c4

0800dc1c <print_16_02x>:

static void print_16_02x(uint8_t *pt) {
 800dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1e:	b09b      	sub	sp, #108	@ 0x6c
 800dc20:	af10      	add	r7, sp, #64	@ 0x40
 800dc22:	6278      	str	r0, [r7, #36]	@ 0x24
	/* USER CODE BEGIN print_16_02x_1 */

	/* USER CODE END print_16_02x_1 */
	AT_PRINTF(
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	461c      	mov	r4, r3
 800dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc34:	3302      	adds	r3, #2
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	461d      	mov	r5, r3
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3c:	3303      	adds	r3, #3
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	461e      	mov	r6, r3
 800dc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc44:	3304      	adds	r3, #4
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	623b      	str	r3, [r7, #32]
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	3305      	adds	r3, #5
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	61fb      	str	r3, [r7, #28]
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	3306      	adds	r3, #6
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	3307      	adds	r3, #7
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	617b      	str	r3, [r7, #20]
 800dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc64:	3308      	adds	r3, #8
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	613b      	str	r3, [r7, #16]
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6c:	3309      	adds	r3, #9
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	330a      	adds	r3, #10
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	60bb      	str	r3, [r7, #8]
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7c:	330b      	adds	r3, #11
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	607b      	str	r3, [r7, #4]
 800dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc84:	330c      	adds	r3, #12
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	603b      	str	r3, [r7, #0]
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8c:	330d      	adds	r3, #13
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	4619      	mov	r1, r3
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc94:	330e      	adds	r3, #14
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	330f      	adds	r3, #15
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dca2:	920e      	str	r2, [sp, #56]	@ 0x38
 800dca4:	910d      	str	r1, [sp, #52]	@ 0x34
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	920c      	str	r2, [sp, #48]	@ 0x30
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	920a      	str	r2, [sp, #40]	@ 0x28
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	9208      	str	r2, [sp, #32]
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	9207      	str	r2, [sp, #28]
 800dcbe:	69ba      	ldr	r2, [r7, #24]
 800dcc0:	9206      	str	r2, [sp, #24]
 800dcc2:	69fa      	ldr	r2, [r7, #28]
 800dcc4:	9205      	str	r2, [sp, #20]
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	9603      	str	r6, [sp, #12]
 800dccc:	9502      	str	r5, [sp, #8]
 800dcce:	9401      	str	r4, [sp, #4]
 800dcd0:	9000      	str	r0, [sp, #0]
 800dcd2:	4b05      	ldr	r3, [pc, #20]	@ (800dce8 <print_16_02x+0xcc>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	2000      	movs	r0, #0
 800dcda:	f016 fe61 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			pt[0], pt[1], pt[2], pt[3], pt[4], pt[5], pt[6], pt[7], pt[8],
			pt[9], pt[10], pt[11], pt[12], pt[13], pt[14], pt[15]);
	/* USER CODE BEGIN print_16_02x_2 */

	/* USER CODE END print_16_02x_2 */
}
 800dcde:	bf00      	nop
 800dce0:	372c      	adds	r7, #44	@ 0x2c
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dce6:	bf00      	nop
 800dce8:	080272dc 	.word	0x080272dc

0800dcec <print_8_02x>:

static void print_8_02x(uint8_t *pt) {
 800dcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcee:	b08b      	sub	sp, #44	@ 0x2c
 800dcf0:	af08      	add	r7, sp, #32
 800dcf2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN print_8_02x_1 */

	/* USER CODE END print_8_02x_1 */
	AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", pt[0], pt[1],
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	4619      	mov	r1, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3302      	adds	r3, #2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3303      	adds	r3, #3
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	461c      	mov	r4, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	3304      	adds	r3, #4
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	461d      	mov	r5, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3305      	adds	r3, #5
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	461e      	mov	r6, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3306      	adds	r3, #6
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	603b      	str	r3, [r7, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	3307      	adds	r3, #7
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	9307      	str	r3, [sp, #28]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	9605      	str	r6, [sp, #20]
 800dd38:	9504      	str	r5, [sp, #16]
 800dd3a:	9403      	str	r4, [sp, #12]
 800dd3c:	9002      	str	r0, [sp, #8]
 800dd3e:	9101      	str	r1, [sp, #4]
 800dd40:	9200      	str	r2, [sp, #0]
 800dd42:	4b05      	ldr	r3, [pc, #20]	@ (800dd58 <print_8_02x+0x6c>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	2100      	movs	r1, #0
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f016 fe29 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
			pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
	/* USER CODE BEGIN print_8_02x_2 */

	/* USER CODE END print_8_02x_2 */
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd56:	bf00      	nop
 800dd58:	08027330 	.word	0x08027330

0800dd5c <print_d>:

static void print_d(int32_t value) {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN print_d_1 */

	/* USER CODE END print_d_1 */
	AT_PRINTF("%d\r\n", value);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	4b04      	ldr	r3, [pc, #16]	@ (800dd7c <print_d+0x20>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f016 fe16 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	/* USER CODE BEGIN print_d_2 */

	/* USER CODE END print_d_2 */
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	0802735c 	.word	0x0802735c

0800dd80 <print_u>:

static void print_u(uint32_t value) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af02      	add	r7, sp, #8
 800dd86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN print_u_1 */

	/* USER CODE END print_u_1 */
	AT_PRINTF("%u\r\n", value);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	4b04      	ldr	r3, [pc, #16]	@ (800dda0 <print_u+0x20>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2100      	movs	r1, #0
 800dd92:	2000      	movs	r0, #0
 800dd94:	f016 fe04 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
	/* USER CODE BEGIN print_u_2 */

	/* USER CODE END print_u_2 */
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	08027364 	.word	0x08027364

0800dda4 <OnCertifTimer>:

static void OnCertifTimer(void *context) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnCertifTimer_1 */

	/* USER CODE END OnCertifTimer_1 */
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 800ddac:	2100      	movs	r1, #0
 800ddae:	2008      	movs	r0, #8
 800ddb0:	f016 fa42 	bl	8024238 <UTIL_SEQ_SetTask>
	/* USER CODE BEGIN OnCertifTimer_2 */

	/* USER CODE END OnCertifTimer_2 */
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <CertifSend>:

static void CertifSend(void) {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CertifSend_1 */

	/* USER CODE END CertifSend_1 */
	AppData.Buffer[0] = 0x43;
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf4 <CertifSend+0x38>)
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	2243      	movs	r2, #67	@ 0x43
 800ddc6:	701a      	strb	r2, [r3, #0]
	AppData.BufferSize = 1;
 800ddc8:	4b0a      	ldr	r3, [pc, #40]	@ (800ddf4 <CertifSend+0x38>)
 800ddca:	2201      	movs	r2, #1
 800ddcc:	705a      	strb	r2, [r3, #1]
	AppData.Port = 99;
 800ddce:	4b09      	ldr	r3, [pc, #36]	@ (800ddf4 <CertifSend+0x38>)
 800ddd0:	2263      	movs	r2, #99	@ 0x63
 800ddd2:	701a      	strb	r2, [r3, #0]

	/* Restart Tx to prevent a previous Join Failed */
	if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) {
 800ddd4:	f002 fee8 	bl	8010ba8 <LmHandlerJoinStatus>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d002      	beq.n	800dde4 <CertifSend+0x28>
		UTIL_TIMER_Start(&TxCertifTimer);
 800ddde:	4806      	ldr	r0, [pc, #24]	@ (800ddf8 <CertifSend+0x3c>)
 800dde0:	f016 fb56 	bl	8024490 <UTIL_TIMER_Start>
	}
	LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, false);
 800dde4:	2200      	movs	r2, #0
 800dde6:	2100      	movs	r1, #0
 800dde8:	4802      	ldr	r0, [pc, #8]	@ (800ddf4 <CertifSend+0x38>)
 800ddea:	f002 fef9 	bl	8010be0 <LmHandlerSend>
}
 800ddee:	bf00      	nop
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	2000006c 	.word	0x2000006c
 800ddf8:	20000558 	.word	0x20000558

0800ddfc <CMD_Init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void CMD_Init(void (*CmdProcessNotify)(void)) {
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CMD_Init_1 */

	/* USER CODE END CMD_Init_1 */
	UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 800de04:	480d      	ldr	r0, [pc, #52]	@ (800de3c <CMD_Init+0x40>)
 800de06:	f016 fdbb 	bl	8024980 <UTIL_ADV_TRACE_StartRxProcess>
	/* register call back*/
	if (CmdProcessNotify != NULL) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <CMD_Init+0x1a>
		NotifyCb = CmdProcessNotify;
 800de10:	4a0b      	ldr	r2, [pc, #44]	@ (800de40 <CMD_Init+0x44>)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6013      	str	r3, [r2, #0]
	}
	widx = 0;
 800de16:	4b0b      	ldr	r3, [pc, #44]	@ (800de44 <CMD_Init+0x48>)
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
	ridx = 0;
 800de1c:	4b0a      	ldr	r3, [pc, #40]	@ (800de48 <CMD_Init+0x4c>)
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
	charCount = 0;
 800de22:	4b0a      	ldr	r3, [pc, #40]	@ (800de4c <CMD_Init+0x50>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]
	i = 0;
 800de28:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <CMD_Init+0x54>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
	circBuffOverflow = 0;
 800de2e:	4b09      	ldr	r3, [pc, #36]	@ (800de54 <CMD_Init+0x58>)
 800de30:	2200      	movs	r2, #0
 800de32:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN CMD_Init_2 */

	/* USER CODE END CMD_Init_2 */
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	0800e0fd 	.word	0x0800e0fd
 800de40:	20000844 	.word	0x20000844
 800de44:	20000834 	.word	0x20000834
 800de48:	20000838 	.word	0x20000838
 800de4c:	2000083c 	.word	0x2000083c
 800de50:	20000830 	.word	0x20000830
 800de54:	20000840 	.word	0x20000840

0800de58 <CMD_Process>:

void CMD_Process(void) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b090      	sub	sp, #64	@ 0x40
 800de5c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CMD_Process_1 */

	/* USER CODE END CMD_Process_1 */
	/* Process all commands */
	if (circBuffOverflow == 1) {
 800de5e:	4b6b      	ldr	r3, [pc, #428]	@ (800e00c <CMD_Process+0x1b4>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b01      	cmp	r3, #1
 800de64:	f040 80c8 	bne.w	800dff8 <CMD_Process+0x1a0>
		com_error(AT_TEST_PARAM_OVERFLOW);
 800de68:	2004      	movs	r0, #4
 800de6a:	f000 fa4f 	bl	800e30c <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de6e:	f3ef 8310 	mrs	r3, PRIMASK
 800de72:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800de74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		/*Full flush in case of overflow */
		UTILS_ENTER_CRITICAL_SECTION();
 800de76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800de78:	b672      	cpsid	i
}
 800de7a:	bf00      	nop
		ridx = widx;
 800de7c:	4b64      	ldr	r3, [pc, #400]	@ (800e010 <CMD_Process+0x1b8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a64      	ldr	r2, [pc, #400]	@ (800e014 <CMD_Process+0x1bc>)
 800de82:	6013      	str	r3, [r2, #0]
		charCount = 0;
 800de84:	4b64      	ldr	r3, [pc, #400]	@ (800e018 <CMD_Process+0x1c0>)
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
		circBuffOverflow = 0;
 800de8a:	4b60      	ldr	r3, [pc, #384]	@ (800e00c <CMD_Process+0x1b4>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de96:	f383 8810 	msr	PRIMASK, r3
}
 800de9a:	bf00      	nop
		UTILS_EXIT_CRITICAL_SECTION();
		i = 0;
 800de9c:	4b5f      	ldr	r3, [pc, #380]	@ (800e01c <CMD_Process+0x1c4>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
	}

	while (charCount != 0) {
 800dea2:	e0a9      	b.n	800dff8 <CMD_Process+0x1a0>
#if 0 /* echo On    */
    AT_PPRINTF("%c", circBuffer[ridx]);
#endif /* 0 */

		if (circBuffer[ridx] == AT_ERROR_RX_CHAR) {
 800dea4:	4b5b      	ldr	r3, [pc, #364]	@ (800e014 <CMD_Process+0x1bc>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a5d      	ldr	r2, [pc, #372]	@ (800e020 <CMD_Process+0x1c8>)
 800deaa:	5cd3      	ldrb	r3, [r2, r3]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d124      	bne.n	800defa <CMD_Process+0xa2>
			ridx++;
 800deb0:	4b58      	ldr	r3, [pc, #352]	@ (800e014 <CMD_Process+0x1bc>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3301      	adds	r3, #1
 800deb6:	4a57      	ldr	r2, [pc, #348]	@ (800e014 <CMD_Process+0x1bc>)
 800deb8:	6013      	str	r3, [r2, #0]
			if (ridx == CIRC_BUFF_SIZE) {
 800deba:	4b56      	ldr	r3, [pc, #344]	@ (800e014 <CMD_Process+0x1bc>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b08      	cmp	r3, #8
 800dec0:	d102      	bne.n	800dec8 <CMD_Process+0x70>
				ridx = 0;
 800dec2:	4b54      	ldr	r3, [pc, #336]	@ (800e014 <CMD_Process+0x1bc>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dec8:	f3ef 8310 	mrs	r3, PRIMASK
 800decc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dece:	69fb      	ldr	r3, [r7, #28]
			}
			UTILS_ENTER_CRITICAL_SECTION();
 800ded0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800ded2:	b672      	cpsid	i
}
 800ded4:	bf00      	nop
			charCount--;
 800ded6:	4b50      	ldr	r3, [pc, #320]	@ (800e018 <CMD_Process+0x1c0>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3b01      	subs	r3, #1
 800dedc:	4a4e      	ldr	r2, [pc, #312]	@ (800e018 <CMD_Process+0x1c0>)
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	f383 8810 	msr	PRIMASK, r3
}
 800deea:	bf00      	nop
			UTILS_EXIT_CRITICAL_SECTION();
			com_error(AT_RX_ERROR);
 800deec:	2006      	movs	r0, #6
 800deee:	f000 fa0d 	bl	800e30c <com_error>
			i = 0;
 800def2:	4b4a      	ldr	r3, [pc, #296]	@ (800e01c <CMD_Process+0x1c4>)
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	e07e      	b.n	800dff8 <CMD_Process+0x1a0>
		} else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n')) {
 800defa:	4b46      	ldr	r3, [pc, #280]	@ (800e014 <CMD_Process+0x1bc>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a48      	ldr	r2, [pc, #288]	@ (800e020 <CMD_Process+0x1c8>)
 800df00:	5cd3      	ldrb	r3, [r2, r3]
 800df02:	2b0d      	cmp	r3, #13
 800df04:	d005      	beq.n	800df12 <CMD_Process+0xba>
 800df06:	4b43      	ldr	r3, [pc, #268]	@ (800e014 <CMD_Process+0x1bc>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a45      	ldr	r2, [pc, #276]	@ (800e020 <CMD_Process+0x1c8>)
 800df0c:	5cd3      	ldrb	r3, [r2, r3]
 800df0e:	2b0a      	cmp	r3, #10
 800df10:	d13d      	bne.n	800df8e <CMD_Process+0x136>
			ridx++;
 800df12:	4b40      	ldr	r3, [pc, #256]	@ (800e014 <CMD_Process+0x1bc>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	4a3e      	ldr	r2, [pc, #248]	@ (800e014 <CMD_Process+0x1bc>)
 800df1a:	6013      	str	r3, [r2, #0]
			if (ridx == CIRC_BUFF_SIZE) {
 800df1c:	4b3d      	ldr	r3, [pc, #244]	@ (800e014 <CMD_Process+0x1bc>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b08      	cmp	r3, #8
 800df22:	d102      	bne.n	800df2a <CMD_Process+0xd2>
				ridx = 0;
 800df24:	4b3b      	ldr	r3, [pc, #236]	@ (800e014 <CMD_Process+0x1bc>)
 800df26:	2200      	movs	r2, #0
 800df28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df2a:	f3ef 8310 	mrs	r3, PRIMASK
 800df2e:	617b      	str	r3, [r7, #20]
  return(result);
 800df30:	697b      	ldr	r3, [r7, #20]
			}
			UTILS_ENTER_CRITICAL_SECTION();
 800df32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800df34:	b672      	cpsid	i
}
 800df36:	bf00      	nop
			charCount--;
 800df38:	4b37      	ldr	r3, [pc, #220]	@ (800e018 <CMD_Process+0x1c0>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	4a36      	ldr	r2, [pc, #216]	@ (800e018 <CMD_Process+0x1c0>)
 800df40:	6013      	str	r3, [r2, #0]
 800df42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f383 8810 	msr	PRIMASK, r3
}
 800df4c:	bf00      	nop
			UTILS_EXIT_CRITICAL_SECTION();

			if (i != 0) {
 800df4e:	4b33      	ldr	r3, [pc, #204]	@ (800e01c <CMD_Process+0x1c4>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d04f      	beq.n	800dff6 <CMD_Process+0x19e>
				command[i] = '\0';
 800df56:	4b31      	ldr	r3, [pc, #196]	@ (800e01c <CMD_Process+0x1c4>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a32      	ldr	r2, [pc, #200]	@ (800e024 <CMD_Process+0x1cc>)
 800df5c:	2100      	movs	r1, #0
 800df5e:	54d1      	strb	r1, [r2, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df60:	f3ef 8310 	mrs	r3, PRIMASK
 800df64:	60fb      	str	r3, [r7, #12]
  return(result);
 800df66:	68fb      	ldr	r3, [r7, #12]
				UTILS_ENTER_CRITICAL_SECTION();
 800df68:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800df6a:	b672      	cpsid	i
}
 800df6c:	bf00      	nop
				CMD_ProcessBackSpace(command);
 800df6e:	482d      	ldr	r0, [pc, #180]	@ (800e024 <CMD_Process+0x1cc>)
 800df70:	f000 f85a 	bl	800e028 <CMD_ProcessBackSpace>
 800df74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f383 8810 	msr	PRIMASK, r3
}
 800df7e:	bf00      	nop
				UTILS_EXIT_CRITICAL_SECTION();
				parse_cmd(command);
 800df80:	4828      	ldr	r0, [pc, #160]	@ (800e024 <CMD_Process+0x1cc>)
 800df82:	f000 f8fb 	bl	800e17c <parse_cmd>
				i = 0;
 800df86:	4b25      	ldr	r3, [pc, #148]	@ (800e01c <CMD_Process+0x1c4>)
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
		} else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n')) {
 800df8c:	e033      	b.n	800dff6 <CMD_Process+0x19e>
			}
		} else if (i == (CMD_SIZE - 1)) {
 800df8e:	4b23      	ldr	r3, [pc, #140]	@ (800e01c <CMD_Process+0x1c4>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f240 221b 	movw	r2, #539	@ 0x21b
 800df96:	4293      	cmp	r3, r2
 800df98:	d106      	bne.n	800dfa8 <CMD_Process+0x150>
			i = 0;
 800df9a:	4b20      	ldr	r3, [pc, #128]	@ (800e01c <CMD_Process+0x1c4>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
			com_error(AT_TEST_PARAM_OVERFLOW);
 800dfa0:	2004      	movs	r0, #4
 800dfa2:	f000 f9b3 	bl	800e30c <com_error>
 800dfa6:	e027      	b.n	800dff8 <CMD_Process+0x1a0>
		} else {
			command[i++] = circBuffer[ridx++];
 800dfa8:	4b1a      	ldr	r3, [pc, #104]	@ (800e014 <CMD_Process+0x1bc>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	1c53      	adds	r3, r2, #1
 800dfae:	4919      	ldr	r1, [pc, #100]	@ (800e014 <CMD_Process+0x1bc>)
 800dfb0:	600b      	str	r3, [r1, #0]
 800dfb2:	4b1a      	ldr	r3, [pc, #104]	@ (800e01c <CMD_Process+0x1c4>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	1c59      	adds	r1, r3, #1
 800dfb8:	4818      	ldr	r0, [pc, #96]	@ (800e01c <CMD_Process+0x1c4>)
 800dfba:	6001      	str	r1, [r0, #0]
 800dfbc:	4918      	ldr	r1, [pc, #96]	@ (800e020 <CMD_Process+0x1c8>)
 800dfbe:	5c89      	ldrb	r1, [r1, r2]
 800dfc0:	4a18      	ldr	r2, [pc, #96]	@ (800e024 <CMD_Process+0x1cc>)
 800dfc2:	54d1      	strb	r1, [r2, r3]
			if (ridx == CIRC_BUFF_SIZE) {
 800dfc4:	4b13      	ldr	r3, [pc, #76]	@ (800e014 <CMD_Process+0x1bc>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b08      	cmp	r3, #8
 800dfca:	d102      	bne.n	800dfd2 <CMD_Process+0x17a>
				ridx = 0;
 800dfcc:	4b11      	ldr	r3, [pc, #68]	@ (800e014 <CMD_Process+0x1bc>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd6:	607b      	str	r3, [r7, #4]
  return(result);
 800dfd8:	687b      	ldr	r3, [r7, #4]
			}
			UTILS_ENTER_CRITICAL_SECTION();
 800dfda:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 800dfdc:	b672      	cpsid	i
}
 800dfde:	bf00      	nop
			charCount--;
 800dfe0:	4b0d      	ldr	r3, [pc, #52]	@ (800e018 <CMD_Process+0x1c0>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	4a0c      	ldr	r2, [pc, #48]	@ (800e018 <CMD_Process+0x1c0>)
 800dfe8:	6013      	str	r3, [r2, #0]
 800dfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	f383 8810 	msr	PRIMASK, r3
}
 800dff4:	e000      	b.n	800dff8 <CMD_Process+0x1a0>
		} else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n')) {
 800dff6:	bf00      	nop
	while (charCount != 0) {
 800dff8:	4b07      	ldr	r3, [pc, #28]	@ (800e018 <CMD_Process+0x1c0>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f47f af51 	bne.w	800dea4 <CMD_Process+0x4c>
		}
	}
	/* USER CODE BEGIN CMD_Process_2 */

	/* USER CODE END CMD_Process_2 */
}
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	3740      	adds	r7, #64	@ 0x40
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	20000840 	.word	0x20000840
 800e010:	20000834 	.word	0x20000834
 800e014:	20000838 	.word	0x20000838
 800e018:	2000083c 	.word	0x2000083c
 800e01c:	20000830 	.word	0x20000830
 800e020:	2000060c 	.word	0x2000060c
 800e024:	20000614 	.word	0x20000614

0800e028 <CMD_ProcessBackSpace>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd) {
 800e028:	b480      	push	{r7}
 800e02a:	b089      	sub	sp, #36	@ 0x24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CMD_ProcessBackSpace_1 */

	/* USER CODE END CMD_ProcessBackSpace_1 */
	uint32_t i = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	61fb      	str	r3, [r7, #28]
	uint32_t bs_cnt = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	61bb      	str	r3, [r7, #24]
	uint32_t cmd_len = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	617b      	str	r3, [r7, #20]
	/*get command length and number of backspace*/
	while (cmd[cmd_len] != '\0') {
 800e03c:	e00b      	b.n	800e056 <CMD_ProcessBackSpace+0x2e>
		if (cmd[cmd_len] == '\b') {
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b08      	cmp	r3, #8
 800e048:	d102      	bne.n	800e050 <CMD_ProcessBackSpace+0x28>
			bs_cnt++;
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	3301      	adds	r3, #1
 800e04e:	61bb      	str	r3, [r7, #24]
		}
		cmd_len++;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	3301      	adds	r3, #1
 800e054:	617b      	str	r3, [r7, #20]
	while (cmd[cmd_len] != '\0') {
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	4413      	add	r3, r2
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1ed      	bne.n	800e03e <CMD_ProcessBackSpace+0x16>
	}
	/*for every backspace, remove backspace and its preceding character*/
	for (i = 0; i < bs_cnt; i++) {
 800e062:	2300      	movs	r3, #0
 800e064:	61fb      	str	r3, [r7, #28]
 800e066:	e03f      	b.n	800e0e8 <CMD_ProcessBackSpace+0xc0>
		int32_t curs = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	613b      	str	r3, [r7, #16]
		int32_t j = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]

		/*set cursor to backspace*/
		while (cmd[curs] != '\b') {
 800e070:	e002      	b.n	800e078 <CMD_ProcessBackSpace+0x50>
			curs++;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	3301      	adds	r3, #1
 800e076:	613b      	str	r3, [r7, #16]
		while (cmd[curs] != '\b') {
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	4413      	add	r3, r2
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b08      	cmp	r3, #8
 800e082:	d1f6      	bne.n	800e072 <CMD_ProcessBackSpace+0x4a>
		}
		if (curs > 0) {
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	dd28      	ble.n	800e0dc <CMD_ProcessBackSpace+0xb4>
			for (j = curs - 1; j < cmd_len - 2; j++) {
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	e00b      	b.n	800e0aa <CMD_ProcessBackSpace+0x82>
				cmd[j] = cmd[j + 2];
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3302      	adds	r3, #2
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	441a      	add	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	440b      	add	r3, r1
 800e0a0:	7812      	ldrb	r2, [r2, #0]
 800e0a2:	701a      	strb	r2, [r3, #0]
			for (j = curs - 1; j < cmd_len - 2; j++) {
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	60fb      	str	r3, [r7, #12]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	1e9a      	subs	r2, r3, #2
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d8ee      	bhi.n	800e092 <CMD_ProcessBackSpace+0x6a>
			}
			cmd[j++] = '\0';
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	60fa      	str	r2, [r7, #12]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4413      	add	r3, r2
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	701a      	strb	r2, [r3, #0]
			cmd[j++] = '\0';
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	60fa      	str	r2, [r7, #12]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
			cmd_len -= 2;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	3b02      	subs	r3, #2
 800e0d8:	617b      	str	r3, [r7, #20]
 800e0da:	e002      	b.n	800e0e2 <CMD_ProcessBackSpace+0xba>
		} else {
			return -1;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0e0:	e007      	b.n	800e0f2 <CMD_ProcessBackSpace+0xca>
	for (i = 0; i < bs_cnt; i++) {
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d3bb      	bcc.n	800e068 <CMD_ProcessBackSpace+0x40>
		}
	}
	return 0;
 800e0f0:	2300      	movs	r3, #0
	/* USER CODE BEGIN CMD_ProcessBackSpace_2 */

	/* USER CODE END CMD_ProcessBackSpace_2 */
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3724      	adds	r7, #36	@ 0x24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bc80      	pop	{r7}
 800e0fa:	4770      	bx	lr

0800e0fc <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error) {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	807b      	strh	r3, [r7, #2]
 800e108:	4613      	mov	r3, r2
 800e10a:	707b      	strb	r3, [r7, #1]
	/* USER CODE BEGIN CMD_GetChar_1 */

	/* USER CODE END CMD_GetChar_1 */
	charCount++;
 800e10c:	4b16      	ldr	r3, [pc, #88]	@ (800e168 <CMD_GetChar+0x6c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3301      	adds	r3, #1
 800e112:	4a15      	ldr	r2, [pc, #84]	@ (800e168 <CMD_GetChar+0x6c>)
 800e114:	6013      	str	r3, [r2, #0]
	if (charCount == (CIRC_BUFF_SIZE + 1)) {
 800e116:	4b14      	ldr	r3, [pc, #80]	@ (800e168 <CMD_GetChar+0x6c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b09      	cmp	r3, #9
 800e11c:	d108      	bne.n	800e130 <CMD_GetChar+0x34>
		circBuffOverflow = 1;
 800e11e:	4b13      	ldr	r3, [pc, #76]	@ (800e16c <CMD_GetChar+0x70>)
 800e120:	2201      	movs	r2, #1
 800e122:	601a      	str	r2, [r3, #0]
		charCount--;
 800e124:	4b10      	ldr	r3, [pc, #64]	@ (800e168 <CMD_GetChar+0x6c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3b01      	subs	r3, #1
 800e12a:	4a0f      	ldr	r2, [pc, #60]	@ (800e168 <CMD_GetChar+0x6c>)
 800e12c:	6013      	str	r3, [r2, #0]
 800e12e:	e00f      	b.n	800e150 <CMD_GetChar+0x54>
	} else {
		circBuffer[widx++] = *rxChar;
 800e130:	4b0f      	ldr	r3, [pc, #60]	@ (800e170 <CMD_GetChar+0x74>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	490e      	ldr	r1, [pc, #56]	@ (800e170 <CMD_GetChar+0x74>)
 800e138:	600a      	str	r2, [r1, #0]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	7811      	ldrb	r1, [r2, #0]
 800e13e:	4a0d      	ldr	r2, [pc, #52]	@ (800e174 <CMD_GetChar+0x78>)
 800e140:	54d1      	strb	r1, [r2, r3]
		if (widx == CIRC_BUFF_SIZE) {
 800e142:	4b0b      	ldr	r3, [pc, #44]	@ (800e170 <CMD_GetChar+0x74>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b08      	cmp	r3, #8
 800e148:	d102      	bne.n	800e150 <CMD_GetChar+0x54>
			widx = 0;
 800e14a:	4b09      	ldr	r3, [pc, #36]	@ (800e170 <CMD_GetChar+0x74>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	601a      	str	r2, [r3, #0]
		}
	}

	if (NotifyCb != NULL) {
 800e150:	4b09      	ldr	r3, [pc, #36]	@ (800e178 <CMD_GetChar+0x7c>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <CMD_GetChar+0x62>
		NotifyCb();
 800e158:	4b07      	ldr	r3, [pc, #28]	@ (800e178 <CMD_GetChar+0x7c>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4798      	blx	r3
	}
	/* USER CODE BEGIN CMD_GetChar_2 */

	/* USER CODE END CMD_GetChar_2 */
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2000083c 	.word	0x2000083c
 800e16c:	20000840 	.word	0x20000840
 800e170:	20000834 	.word	0x20000834
 800e174:	2000060c 	.word	0x2000060c
 800e178:	20000844 	.word	0x20000844

0800e17c <parse_cmd>:

static void parse_cmd(const char *cmd) {
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN parse_cmd_1 */

	/* USER CODE END parse_cmd_1 */
	ATEerror_t status = AT_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	75fb      	strb	r3, [r7, #23]
	const struct ATCommand_s *Current_ATCommand;
	int32_t i;

	if ((cmd[0] != 'A') || (cmd[1] != 'T')) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b41      	cmp	r3, #65	@ 0x41
 800e18e:	d104      	bne.n	800e19a <parse_cmd+0x1e>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3301      	adds	r3, #1
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b54      	cmp	r3, #84	@ 0x54
 800e198:	d002      	beq.n	800e1a0 <parse_cmd+0x24>
		status = AT_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	75fb      	strb	r3, [r7, #23]
 800e19e:	e0a8      	b.n	800e2f2 <parse_cmd+0x176>
	} else if (cmd[2] == '\0') {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3302      	adds	r3, #2
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f000 80a3 	beq.w	800e2f2 <parse_cmd+0x176>
		/* status = AT_OK; */
	} else if (cmd[2] == '?') {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1b4:	d129      	bne.n	800e20a <parse_cmd+0x8e>
#ifdef NO_HELP
#else
		AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800e1b6:	4b53      	ldr	r3, [pc, #332]	@ (800e304 <parse_cmd+0x188>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f016 fbef 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1f6      	bne.n	800e1b6 <parse_cmd+0x3a>
				"AT+<CMD>         : Run <CMD>\r\n"
				"AT+<CMD>=<value> : Set the value\r\n"
				"AT+<CMD>=?       : Get the value\r\n");
		for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++) {
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	e013      	b.n	800e1f6 <parse_cmd+0x7a>
			AT_PPRINTF(ATCommand[i].help_string);
 800e1ce:	494e      	ldr	r1, [pc, #312]	@ (800e308 <parse_cmd+0x18c>)
 800e1d0:	693a      	ldr	r2, [r7, #16]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	4413      	add	r3, r2
 800e1d8:	00db      	lsls	r3, r3, #3
 800e1da:	440b      	add	r3, r1
 800e1dc:	3314      	adds	r3, #20
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	f016 fbdb 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1ee      	bne.n	800e1ce <parse_cmd+0x52>
		for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++) {
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	2b33      	cmp	r3, #51	@ 0x33
 800e1fa:	d9e8      	bls.n	800e1ce <parse_cmd+0x52>
		}

		while (1 != UTIL_ADV_TRACE_IsBufferEmpty()) {
 800e1fc:	bf00      	nop
 800e1fe:	f016 fbad 	bl	802495c <UTIL_ADV_TRACE_IsBufferEmpty>
 800e202:	4603      	mov	r3, r0
 800e204:	2b01      	cmp	r3, #1
 800e206:	d1fa      	bne.n	800e1fe <parse_cmd+0x82>
 800e208:	e073      	b.n	800e2f2 <parse_cmd+0x176>
			/* Wait that all printfs are completed*/
		}
#endif /* !NO_HELP */
	} else {
		/* point to the start of the command, excluding AT */
		status = AT_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	75fb      	strb	r3, [r7, #23]
		cmd += 2;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3302      	adds	r3, #2
 800e212:	607b      	str	r3, [r7, #4]
		for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++) {
 800e214:	2300      	movs	r3, #0
 800e216:	613b      	str	r3, [r7, #16]
 800e218:	e068      	b.n	800e2ec <parse_cmd+0x170>
			if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string)
 800e21a:	493b      	ldr	r1, [pc, #236]	@ (800e308 <parse_cmd+0x18c>)
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	4613      	mov	r3, r2
 800e220:	005b      	lsls	r3, r3, #1
 800e222:	4413      	add	r3, r2
 800e224:	00db      	lsls	r3, r3, #3
 800e226:	440b      	add	r3, r1
 800e228:	6819      	ldr	r1, [r3, #0]
 800e22a:	4837      	ldr	r0, [pc, #220]	@ (800e308 <parse_cmd+0x18c>)
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	4613      	mov	r3, r2
 800e230:	005b      	lsls	r3, r3, #1
 800e232:	4413      	add	r3, r2
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	4403      	add	r3, r0
 800e238:	3304      	adds	r3, #4
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	461a      	mov	r2, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f017 f815 	bl	802526e <strncmp>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d14d      	bne.n	800e2e6 <parse_cmd+0x16a>
					== 0) {
				Current_ATCommand = &(ATCommand[i]);
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	4613      	mov	r3, r2
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	4413      	add	r3, r2
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	4a2c      	ldr	r2, [pc, #176]	@ (800e308 <parse_cmd+0x18c>)
 800e256:	4413      	add	r3, r2
 800e258:	60fb      	str	r3, [r7, #12]
				/* point to the string after the command to parse it */
				cmd += Current_ATCommand->size_string;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	461a      	mov	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4413      	add	r3, r2
 800e264:	607b      	str	r3, [r7, #4]

				/* parse after the command */
				switch (cmd[0]) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e26c:	d02a      	beq.n	800e2c4 <parse_cmd+0x148>
 800e26e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e270:	dc37      	bgt.n	800e2e2 <parse_cmd+0x166>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <parse_cmd+0x100>
 800e276:	2b3d      	cmp	r3, #61	@ 0x3d
 800e278:	d007      	beq.n	800e28a <parse_cmd+0x10e>
#endif /* !NO_HELP */
					status = AT_OK;
					break;
				default:
					/* not recognized */
					break;
 800e27a:	e032      	b.n	800e2e2 <parse_cmd+0x166>
					status = Current_ATCommand->run(cmd);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	4798      	blx	r3
 800e284:	4603      	mov	r3, r0
 800e286:	75fb      	strb	r3, [r7, #23]
					break;
 800e288:	e02c      	b.n	800e2e4 <parse_cmd+0x168>
					if ((cmd[1] == '?') && (cmd[2] == '\0')) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3301      	adds	r3, #1
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	2b3f      	cmp	r3, #63	@ 0x3f
 800e292:	d10e      	bne.n	800e2b2 <parse_cmd+0x136>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	3302      	adds	r3, #2
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d109      	bne.n	800e2b2 <parse_cmd+0x136>
						status = Current_ATCommand->get(cmd + 1);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	3201      	adds	r2, #1
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4798      	blx	r3
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	75fb      	strb	r3, [r7, #23]
 800e2ae:	bf00      	nop
					break;
 800e2b0:	e018      	b.n	800e2e4 <parse_cmd+0x168>
						status = Current_ATCommand->set(cmd + 1);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	3201      	adds	r2, #1
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	4798      	blx	r3
 800e2be:	4603      	mov	r3, r0
 800e2c0:	75fb      	strb	r3, [r7, #23]
					break;
 800e2c2:	e00f      	b.n	800e2e4 <parse_cmd+0x168>
					AT_PPRINTF(Current_ATCommand->help_string);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f016 fb67 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d001      	beq.n	800e2dc <parse_cmd+0x160>
				case '?':
 800e2d8:	bf00      	nop
 800e2da:	e7f3      	b.n	800e2c4 <parse_cmd+0x148>
					status = AT_OK;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	75fb      	strb	r3, [r7, #23]
					break;
 800e2e0:	e000      	b.n	800e2e4 <parse_cmd+0x168>
					break;
 800e2e2:	bf00      	nop
				}

				/* we end the loop as the command was found */
				break;
 800e2e4:	e005      	b.n	800e2f2 <parse_cmd+0x176>
		for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++) {
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	613b      	str	r3, [r7, #16]
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	2b33      	cmp	r3, #51	@ 0x33
 800e2f0:	d993      	bls.n	800e21a <parse_cmd+0x9e>
			}
		}
	}

	com_error(status);
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 f809 	bl	800e30c <com_error>
	/* USER CODE BEGIN parse_cmd_2 */

	/* USER CODE END parse_cmd_2 */
}
 800e2fa:	bf00      	nop
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	08028744 	.word	0x08028744
 800e308:	08028ee4 	.word	0x08028ee4

0800e30c <com_error>:

static void com_error(ATEerror_t error_type) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN com_error_1 */

	/* USER CODE END com_error_1 */
	if (error_type > AT_MAX) {
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b0a      	cmp	r3, #10
 800e31a:	d901      	bls.n	800e320 <com_error+0x14>
		error_type = AT_MAX;
 800e31c:	230a      	movs	r3, #10
 800e31e:	71fb      	strb	r3, [r7, #7]
	}
	AT_PPRINTF(ATError_description[error_type]);
 800e320:	79fb      	ldrb	r3, [r7, #7]
 800e322:	4a08      	ldr	r2, [pc, #32]	@ (800e344 <com_error+0x38>)
 800e324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e328:	2200      	movs	r2, #0
 800e32a:	2100      	movs	r1, #0
 800e32c:	2000      	movs	r0, #0
 800e32e:	f016 fb37 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1f3      	bne.n	800e320 <com_error+0x14>
	/* USER CODE BEGIN com_error_2 */

	/* USER CODE END com_error_2 */
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	08028eb8 	.word	0x08028eb8

0800e348 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800e34c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800e352:	4b19      	ldr	r3, [pc, #100]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e354:	2200      	movs	r2, #0
 800e356:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800e358:	4b17      	ldr	r3, [pc, #92]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800e35e:	4b16      	ldr	r3, [pc, #88]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e360:	2200      	movs	r2, #0
 800e362:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800e364:	4b14      	ldr	r3, [pc, #80]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	f043 0320 	orr.w	r3, r3, #32
 800e36c:	4a12      	ldr	r2, [pc, #72]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e36e:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800e370:	4b11      	ldr	r3, [pc, #68]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e378:	4a0f      	ldr	r2, [pc, #60]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e37a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800e37c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d10d      	bne.n	800e3a0 <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800e384:	4b0d      	ldr	r3, [pc, #52]	@ (800e3bc <LoraInfo_Init+0x74>)
 800e386:	2200      	movs	r2, #0
 800e388:	2100      	movs	r1, #0
 800e38a:	2000      	movs	r0, #0
 800e38c:	f016 fb08 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800e390:	bf00      	nop
 800e392:	f016 fae3 	bl	802495c <UTIL_ADV_TRACE_IsBufferEmpty>
 800e396:	4603      	mov	r3, r0
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d1fa      	bne.n	800e392 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800e39c:	bf00      	nop
 800e39e:	e7fd      	b.n	800e39c <LoraInfo_Init+0x54>
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 800e3a0:	4b05      	ldr	r3, [pc, #20]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	609a      	str	r2, [r3, #8]
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800e3a6:	4b04      	ldr	r3, [pc, #16]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800e3ac:	4b02      	ldr	r3, [pc, #8]	@ (800e3b8 <LoraInfo_Init+0x70>)
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800e3b2:	bf00      	nop
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20000848 	.word	0x20000848
 800e3bc:	080287cc 	.word	0x080287cc

0800e3c0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800e3c4:	4b02      	ldr	r3, [pc, #8]	@ (800e3d0 <LoraInfo_GetPtr+0x10>)
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bc80      	pop	{r7}
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	20000848 	.word	0x20000848

0800e3d4 <TST_TxTone>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t TST_TxTone(void)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_TxTone_1 */

  /* USER CODE END TST_TxTone_1 */
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 800e3d8:	4b11      	ldr	r3, [pc, #68]	@ (800e420 <TST_TxTone+0x4c>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d118      	bne.n	800e416 <TST_TxTone+0x42>
  {
    TestState |= TX_TEST_TONE;
 800e3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e420 <TST_TxTone+0x4c>)
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	f043 0301 	orr.w	r3, r3, #1
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e420 <TST_TxTone+0x4c>)
 800e3f0:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx FSK Test\r\n");
 800e3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e424 <TST_TxTone+0x50>)
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	f016 fad1 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 800e3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e428 <TST_TxTone+0x54>)
 800e400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e402:	4a0a      	ldr	r2, [pc, #40]	@ (800e42c <TST_TxTone+0x58>)
 800e404:	6850      	ldr	r0, [r2, #4]
 800e406:	4a09      	ldr	r2, [pc, #36]	@ (800e42c <TST_TxTone+0x58>)
 800e408:	6892      	ldr	r2, [r2, #8]
 800e40a:	b251      	sxtb	r1, r2
 800e40c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e410:	4798      	blx	r3

    return 0;
 800e412:	2300      	movs	r3, #0
 800e414:	e001      	b.n	800e41a <TST_TxTone+0x46>
  }
  else
  {
    return -1;
 800e416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
  /* USER CODE BEGIN TST_TxTone_2 */

  /* USER CODE END TST_TxTone_2 */
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	20000858 	.word	0x20000858
 800e424:	0802881c 	.word	0x0802881c
 800e428:	08029818 	.word	0x08029818
 800e42c:	20000074 	.word	0x20000074

0800e430 <TST_RxRssi>:

int32_t TST_RxRssi(void)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b095      	sub	sp, #84	@ 0x54
 800e434:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TST_RxRssi_1 */

  /* USER CODE END TST_RxRssi_1 */
  uint32_t timeout = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	647b      	str	r3, [r7, #68]	@ 0x44
  int16_t rssiVal = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  RxConfigGeneric_t RxConfig;
  /* Test with LNA */
  /* check that test is not already started*/
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 800e440:	4b43      	ldr	r3, [pc, #268]	@ (800e550 <TST_RxRssi+0x120>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	f003 0302 	and.w	r3, r3, #2
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d17b      	bne.n	800e544 <TST_RxRssi+0x114>
  {
    TestState |= RX_TEST_RSSI;
 800e44c:	4b40      	ldr	r3, [pc, #256]	@ (800e550 <TST_RxRssi+0x120>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f043 0302 	orr.w	r3, r3, #2
 800e454:	b2da      	uxtb	r2, r3
 800e456:	4b3e      	ldr	r3, [pc, #248]	@ (800e550 <TST_RxRssi+0x120>)
 800e458:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Rx FSK Test\r\n");
 800e45a:	4b3e      	ldr	r3, [pc, #248]	@ (800e554 <TST_RxRssi+0x124>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	2100      	movs	r1, #0
 800e460:	2000      	movs	r0, #0
 800e462:	f016 fa9d 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetChannel(testParam.freq);
 800e466:	4b3c      	ldr	r3, [pc, #240]	@ (800e558 <TST_RxRssi+0x128>)
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	4a3c      	ldr	r2, [pc, #240]	@ (800e55c <TST_RxRssi+0x12c>)
 800e46c:	6852      	ldr	r2, [r2, #4]
 800e46e:	4610      	mov	r0, r2
 800e470:	4798      	blx	r3

    /* RX Continuous */
    uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e472:	4a3b      	ldr	r2, [pc, #236]	@ (800e560 <TST_RxRssi+0x130>)
 800e474:	463b      	mov	r3, r7
 800e476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e47a:	e883 0003 	stmia.w	r3, {r0, r1}
    RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800e47e:	4b37      	ldr	r3, [pc, #220]	@ (800e55c <TST_RxRssi+0x12c>)
 800e480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e482:	2b00      	cmp	r3, #0
 800e484:	d004      	beq.n	800e490 <TST_RxRssi+0x60>
 800e486:	4b35      	ldr	r3, [pc, #212]	@ (800e55c <TST_RxRssi+0x12c>)
 800e488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48a:	3308      	adds	r3, #8
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	e000      	b.n	800e492 <TST_RxRssi+0x62>
 800e490:	2300      	movs	r3, #0
 800e492:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800e496:	4b31      	ldr	r3, [pc, #196]	@ (800e55c <TST_RxRssi+0x12c>)
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	60fb      	str	r3, [r7, #12]
    RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800e49c:	4b2f      	ldr	r3, [pc, #188]	@ (800e55c <TST_RxRssi+0x12c>)
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	613b      	str	r3, [r7, #16]
    RxConfig.fsk.PreambleLen = 3;   /*in Byte*/
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	617b      	str	r3, [r7, #20]
    RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800e4ac:	463b      	mov	r3, r7
 800e4ae:	61bb      	str	r3, [r7, #24]
    RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 800e4b0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800e4b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800e4bc:	23f2      	movs	r3, #242	@ 0xf2
 800e4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    RxConfig.fsk.CrcPolynomial = 0x1021;
 800e4c2:	f241 0321 	movw	r3, #4129	@ 0x1021
 800e4c6:	843b      	strh	r3, [r7, #32]
    RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800e4ce:	4b22      	ldr	r3, [pc, #136]	@ (800e558 <TST_RxRssi+0x128>)
 800e4d0:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 800e4d2:	f107 0108 	add.w	r1, r7, #8
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2201      	movs	r2, #1
 800e4da:	2000      	movs	r0, #0
 800e4dc:	47a0      	blx	r4

    timeout = 0xFFFFFF; /* continuous Rx */
 800e4de:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800e4e2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (testParam.lna == 0)
 800e4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e55c <TST_RxRssi+0x12c>)
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d104      	bne.n	800e4f6 <TST_RxRssi+0xc6>
    {
      Radio.Rx(timeout);
 800e4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e558 <TST_RxRssi+0x128>)
 800e4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e4f2:	4798      	blx	r3
 800e4f4:	e003      	b.n	800e4fe <TST_RxRssi+0xce>
    }
    else
    {
      Radio.RxBoosted(timeout);
 800e4f6:	4b18      	ldr	r3, [pc, #96]	@ (800e558 <TST_RxRssi+0x128>)
 800e4f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e4fc:	4798      	blx	r3
    }

    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 800e4fe:	4b16      	ldr	r3, [pc, #88]	@ (800e558 <TST_RxRssi+0x128>)
 800e500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e502:	4798      	blx	r3
 800e504:	4603      	mov	r3, r0
 800e506:	4618      	mov	r0, r3
 800e508:	f7f3 fef2 	bl	80022f0 <HAL_Delay>

    rssiVal = Radio.Rssi(MODEM_FSK);
 800e50c:	4b12      	ldr	r3, [pc, #72]	@ (800e558 <TST_RxRssi+0x128>)
 800e50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e510:	2000      	movs	r0, #0
 800e512:	4798      	blx	r3
 800e514:	4603      	mov	r3, r0
 800e516:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 800e51a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	4b10      	ldr	r3, [pc, #64]	@ (800e564 <TST_RxRssi+0x134>)
 800e522:	2201      	movs	r2, #1
 800e524:	2100      	movs	r1, #0
 800e526:	2000      	movs	r0, #0
 800e528:	f016 fa3a 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    Radio.Sleep();
 800e52c:	4b0a      	ldr	r3, [pc, #40]	@ (800e558 <TST_RxRssi+0x128>)
 800e52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e530:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 800e532:	4b07      	ldr	r3, [pc, #28]	@ (800e550 <TST_RxRssi+0x120>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	f023 0302 	bic.w	r3, r3, #2
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	4b04      	ldr	r3, [pc, #16]	@ (800e550 <TST_RxRssi+0x120>)
 800e53e:	701a      	strb	r2, [r3, #0]
    return 0;
 800e540:	2300      	movs	r3, #0
 800e542:	e001      	b.n	800e548 <TST_RxRssi+0x118>
  }
  else
  {
    return -1;
 800e544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
  /* USER CODE BEGIN TST_RxRssi_2 */

  /* USER CODE END TST_RxRssi_2 */
}
 800e548:	4618      	mov	r0, r3
 800e54a:	374c      	adds	r7, #76	@ 0x4c
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd90      	pop	{r4, r7, pc}
 800e550:	20000858 	.word	0x20000858
 800e554:	0802882c 	.word	0x0802882c
 800e558:	08029818 	.word	0x08029818
 800e55c:	20000074 	.word	0x20000074
 800e560:	08028858 	.word	0x08028858
 800e564:	0802883c 	.word	0x0802883c

0800e568 <TST_set_config>:

int32_t  TST_set_config(testParameter_t *Param)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_set_config_1 */

  /* USER CODE END TST_set_config_1 */
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 800e570:	2230      	movs	r2, #48	@ 0x30
 800e572:	6879      	ldr	r1, [r7, #4]
 800e574:	4803      	ldr	r0, [pc, #12]	@ (800e584 <TST_set_config+0x1c>)
 800e576:	f014 fba5 	bl	8022cc4 <UTIL_MEM_cpy_8>

  return 0;
 800e57a:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_set_config_2 */

  /* USER CODE END TST_set_config_2 */
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20000074 	.word	0x20000074

0800e588 <TST_get_config>:

int32_t TST_get_config(testParameter_t *Param)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_get_config_1 */

  /* USER CODE END TST_get_config_1 */
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 800e590:	2230      	movs	r2, #48	@ 0x30
 800e592:	4904      	ldr	r1, [pc, #16]	@ (800e5a4 <TST_get_config+0x1c>)
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f014 fb95 	bl	8022cc4 <UTIL_MEM_cpy_8>
  return 0;
 800e59a:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_get_config_2 */

  /* USER CODE END TST_get_config_2 */
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20000074 	.word	0x20000074

0800e5a8 <TST_stop>:

int32_t TST_stop(void)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_stop_1 */

  /* USER CODE END TST_stop_1 */
  TestState = 0;
 800e5ac:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <TST_stop+0x18>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	701a      	strb	r2, [r3, #0]

  /* Set the radio in Sleep*/
  Radio.Sleep();
 800e5b2:	4b04      	ldr	r3, [pc, #16]	@ (800e5c4 <TST_stop+0x1c>)
 800e5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b6:	4798      	blx	r3

  return 0;
 800e5b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_stop_2 */

  /* USER CODE END TST_stop_2 */
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20000858 	.word	0x20000858
 800e5c4:	08029818 	.word	0x08029818

0800e5c8 <TST_TX_Start>:

int32_t TST_TX_Start(int32_t nb_packet)
{
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b091      	sub	sp, #68	@ 0x44
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	6078      	str	r0, [r7, #4]

  /* USER CODE END TST_TX_Start_1 */
  int32_t i;
  TxConfigGeneric_t TxConfig;

  if ((TestState & TX_TEST_MODU) != TX_TEST_MODU)
 800e5d0:	4b80      	ldr	r3, [pc, #512]	@ (800e7d4 <TST_TX_Start+0x20c>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	f003 0304 	and.w	r3, r3, #4
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f040 815f 	bne.w	800e89c <TST_TX_Start+0x2d4>
  {
    TestState |= TX_TEST_MODU;
 800e5de:	4b7d      	ldr	r3, [pc, #500]	@ (800e7d4 <TST_TX_Start+0x20c>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	f043 0304 	orr.w	r3, r3, #4
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	4b7a      	ldr	r3, [pc, #488]	@ (800e7d4 <TST_TX_Start+0x20c>)
 800e5ea:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx Test\r\n");
 800e5ec:	4b7a      	ldr	r3, [pc, #488]	@ (800e7d8 <TST_TX_Start+0x210>)
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	f016 f9d4 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800e5f8:	4b78      	ldr	r3, [pc, #480]	@ (800e7dc <TST_TX_Start+0x214>)
 800e5fa:	4a79      	ldr	r2, [pc, #484]	@ (800e7e0 <TST_TX_Start+0x218>)
 800e5fc:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800e5fe:	4b77      	ldr	r3, [pc, #476]	@ (800e7dc <TST_TX_Start+0x214>)
 800e600:	4a78      	ldr	r2, [pc, #480]	@ (800e7e4 <TST_TX_Start+0x21c>)
 800e602:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800e604:	4b75      	ldr	r3, [pc, #468]	@ (800e7dc <TST_TX_Start+0x214>)
 800e606:	4a78      	ldr	r2, [pc, #480]	@ (800e7e8 <TST_TX_Start+0x220>)
 800e608:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800e60a:	4b74      	ldr	r3, [pc, #464]	@ (800e7dc <TST_TX_Start+0x214>)
 800e60c:	4a77      	ldr	r2, [pc, #476]	@ (800e7ec <TST_TX_Start+0x224>)
 800e60e:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800e610:	4b72      	ldr	r3, [pc, #456]	@ (800e7dc <TST_TX_Start+0x214>)
 800e612:	4a77      	ldr	r2, [pc, #476]	@ (800e7f0 <TST_TX_Start+0x228>)
 800e614:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800e616:	4b77      	ldr	r3, [pc, #476]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4870      	ldr	r0, [pc, #448]	@ (800e7dc <TST_TX_Start+0x214>)
 800e61c:	4798      	blx	r3
    /*Fill payload with PRBS9 data*/
    Prbs9_generator(payload, testParam.payloadLen);
 800e61e:	4b76      	ldr	r3, [pc, #472]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4619      	mov	r1, r3
 800e626:	4875      	ldr	r0, [pc, #468]	@ (800e7fc <TST_TX_Start+0x234>)
 800e628:	f000 fb28 	bl	800ec7c <Prbs9_generator>

    /* Launch several times payload: nb times given by user */
    for (i = 1; i <= nb_packet; i++)
 800e62c:	2301      	movs	r3, #1
 800e62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e630:	e126      	b.n	800e880 <TST_TX_Start+0x2b8>
    {
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	9301      	str	r3, [sp, #4]
 800e636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4b71      	ldr	r3, [pc, #452]	@ (800e800 <TST_TX_Start+0x238>)
 800e63c:	2201      	movs	r2, #1
 800e63e:	2100      	movs	r1, #0
 800e640:	2000      	movs	r0, #0
 800e642:	f016 f9ad 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 800e646:	4b6b      	ldr	r3, [pc, #428]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	4a6b      	ldr	r2, [pc, #428]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e64c:	6852      	ldr	r2, [r2, #4]
 800e64e:	4610      	mov	r0, r2
 800e650:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800e652:	4b69      	ldr	r3, [pc, #420]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d13b      	bne.n	800e6d2 <TST_TX_Start+0x10a>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e65a:	4a6a      	ldr	r2, [pc, #424]	@ (800e804 <TST_TX_Start+0x23c>)
 800e65c:	f107 0310 	add.w	r3, r7, #16
 800e660:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e664:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800e668:	4b63      	ldr	r3, [pc, #396]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d004      	beq.n	800e67a <TST_TX_Start+0xb2>
 800e670:	4b61      	ldr	r3, [pc, #388]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e674:	3307      	adds	r3, #7
 800e676:	b2db      	uxtb	r3, r3
 800e678:	e000      	b.n	800e67c <TST_TX_Start+0xb4>
 800e67a:	2300      	movs	r3, #0
 800e67c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 800e680:	4b5d      	ldr	r3, [pc, #372]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e684:	633b      	str	r3, [r7, #48]	@ 0x30
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800e686:	4b5c      	ldr	r3, [pc, #368]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	61bb      	str	r3, [r7, #24]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800e68c:	2303      	movs	r3, #3
 800e68e:	61fb      	str	r3, [r7, #28]
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800e690:	2303      	movs	r3, #3
 800e692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800e696:	f107 0310 	add.w	r3, r7, #16
 800e69a:	623b      	str	r3, [r7, #32]
        TxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed  */
 800e69c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800e6a0:	853b      	strh	r3, [r7, #40]	@ 0x28
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800e6a8:	23f2      	movs	r3, #242	@ 0xf2
 800e6aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800e6ae:	f241 0321 	movw	r3, #4129	@ 0x1021
 800e6b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800e6ba:	4b4e      	ldr	r3, [pc, #312]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e6bc:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 800e6be:	4b4e      	ldr	r3, [pc, #312]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	b25a      	sxtb	r2, r3
 800e6c4:	f107 0118 	add.w	r1, r7, #24
 800e6c8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	47a0      	blx	r4
 800e6d0:	e09a      	b.n	800e808 <TST_TX_Start+0x240>
      }
      else if (testParam.modulation == TEST_MSK)
 800e6d2:	4b49      	ldr	r3, [pc, #292]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b03      	cmp	r3, #3
 800e6d8:	d138      	bne.n	800e74c <TST_TX_Start+0x184>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e6da:	4a4a      	ldr	r2, [pc, #296]	@ (800e804 <TST_TX_Start+0x23c>)
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6e4:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.msk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800e6e8:	4b43      	ldr	r3, [pc, #268]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d004      	beq.n	800e6fa <TST_TX_Start+0x132>
 800e6f0:	4b41      	ldr	r3, [pc, #260]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f4:	3307      	adds	r3, #7
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	e000      	b.n	800e6fc <TST_TX_Start+0x134>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        TxConfig.msk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800e700:	4b3d      	ldr	r3, [pc, #244]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	61bb      	str	r3, [r7, #24]
        TxConfig.msk.PreambleLen = 3;   /*in Byte        */
 800e706:	2303      	movs	r3, #3
 800e708:	61fb      	str	r3, [r7, #28]
        TxConfig.msk.SyncWordLength = 3; /*in Byte        */
 800e70a:	2303      	movs	r3, #3
 800e70c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        TxConfig.msk.SyncWord = syncword; /*SyncWord Buffer*/
 800e710:	f107 0308 	add.w	r3, r7, #8
 800e714:	623b      	str	r3, [r7, #32]
        TxConfig.msk.whiteSeed = 0x01FF; /*WhiteningSeed  */
 800e716:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800e71a:	853b      	strh	r3, [r7, #40]	@ 0x28
        TxConfig.msk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        TxConfig.msk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800e722:	23f2      	movs	r3, #242	@ 0xf2
 800e724:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        TxConfig.msk.CrcPolynomial = 0x1021;
 800e728:	f241 0321 	movw	r3, #4129	@ 0x1021
 800e72c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        TxConfig.msk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800e72e:	2300      	movs	r3, #0
 800e730:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        Radio.RadioSetTxGenericConfig(GENERIC_MSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800e734:	4b2f      	ldr	r3, [pc, #188]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e736:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 800e738:	4b2f      	ldr	r3, [pc, #188]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	b25a      	sxtb	r2, r3
 800e73e:	f107 0118 	add.w	r1, r7, #24
 800e742:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e746:	2003      	movs	r0, #3
 800e748:	47a0      	blx	r4
 800e74a:	e05d      	b.n	800e808 <TST_TX_Start+0x240>
      }
      else if (testParam.modulation == TEST_LORA)
 800e74c:	4b2a      	ldr	r3, [pc, #168]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d128      	bne.n	800e7a6 <TST_TX_Start+0x1de>
      {
        /*lora modulation*/
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800e754:	4b28      	ldr	r3, [pc, #160]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	767b      	strb	r3, [r7, #25]
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800e75c:	4b26      	ldr	r3, [pc, #152]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	b2db      	uxtb	r3, r3
 800e762:	763b      	strb	r3, [r7, #24]
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800e764:	4b24      	ldr	r3, [pc, #144]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e766:	695b      	ldr	r3, [r3, #20]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	76bb      	strb	r3, [r7, #26]
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800e76c:	4b22      	ldr	r3, [pc, #136]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e770:	b2db      	uxtb	r3, r3
 800e772:	76fb      	strb	r3, [r7, #27]
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800e774:	2308      	movs	r3, #8
 800e776:	83bb      	strh	r3, [r7, #28]
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800e778:	2300      	movs	r3, #0
 800e77a:	77bb      	strb	r3, [r7, #30]
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800e77c:	2301      	movs	r3, #1
 800e77e:	77fb      	strb	r3, [r7, #31]
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800e780:	2300      	movs	r3, #0
 800e782:	f887 3020 	strb.w	r3, [r7, #32]
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800e786:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e788:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 800e78a:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	b25a      	sxtb	r2, r3
 800e790:	f107 0118 	add.w	r1, r7, #24
 800e794:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e798:	2001      	movs	r0, #1
 800e79a:	47a0      	blx	r4
        Radio.SetPublicNetwork(false); /*set private syncword*/
 800e79c:	4b15      	ldr	r3, [pc, #84]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	4798      	blx	r3
 800e7a4:	e030      	b.n	800e808 <TST_TX_Start+0x240>
      }
      else if (testParam.modulation == TEST_BPSK)
 800e7a6:	4b14      	ldr	r3, [pc, #80]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d10e      	bne.n	800e7cc <TST_TX_Start+0x204>
      {
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800e7ae:	4b12      	ldr	r3, [pc, #72]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	61bb      	str	r3, [r7, #24]
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800e7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f4 <TST_TX_Start+0x22c>)
 800e7b6:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f8 <TST_TX_Start+0x230>)
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	b25a      	sxtb	r2, r3
 800e7be:	f107 0118 	add.w	r1, r7, #24
 800e7c2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e7c6:	2002      	movs	r0, #2
 800e7c8:	47a0      	blx	r4
 800e7ca:	e01d      	b.n	800e808 <TST_TX_Start+0x240>
      }
      else
      {
        return -1; /*error*/
 800e7cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7d0:	e066      	b.n	800e8a0 <TST_TX_Start+0x2d8>
 800e7d2:	bf00      	nop
 800e7d4:	20000858 	.word	0x20000858
 800e7d8:	08028860 	.word	0x08028860
 800e7dc:	20000874 	.word	0x20000874
 800e7e0:	0800ebd5 	.word	0x0800ebd5
 800e7e4:	0800ebed 	.word	0x0800ebed
 800e7e8:	0800ec35 	.word	0x0800ec35
 800e7ec:	0800ec4d 	.word	0x0800ec4d
 800e7f0:	0800ec65 	.word	0x0800ec65
 800e7f4:	08029818 	.word	0x08029818
 800e7f8:	20000074 	.word	0x20000074
 800e7fc:	20000890 	.word	0x20000890
 800e800:	0802886c 	.word	0x0802886c
 800e804:	08028858 	.word	0x08028858
      }
      /* Send payload once*/
      Radio.Send(payload, testParam.payloadLen);
 800e808:	4b27      	ldr	r3, [pc, #156]	@ (800e8a8 <TST_TX_Start+0x2e0>)
 800e80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e80c:	4a27      	ldr	r2, [pc, #156]	@ (800e8ac <TST_TX_Start+0x2e4>)
 800e80e:	6a12      	ldr	r2, [r2, #32]
 800e810:	b2d2      	uxtb	r2, r2
 800e812:	4611      	mov	r1, r2
 800e814:	4826      	ldr	r0, [pc, #152]	@ (800e8b0 <TST_TX_Start+0x2e8>)
 800e816:	4798      	blx	r3
      /* Wait Tx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800e818:	2001      	movs	r0, #1
 800e81a:	f015 fd57 	bl	80242cc <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800e81e:	4b22      	ldr	r3, [pc, #136]	@ (800e8a8 <TST_TX_Start+0x2e0>)
 800e820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e822:	4798      	blx	r3

      if (RadioTxDone_flag == 1)
 800e824:	4b23      	ldr	r3, [pc, #140]	@ (800e8b4 <TST_TX_Start+0x2ec>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d105      	bne.n	800e838 <TST_TX_Start+0x270>
      {
        APP_TPRINTF("OnTxDone\r\n");
 800e82c:	4b22      	ldr	r3, [pc, #136]	@ (800e8b8 <TST_TX_Start+0x2f0>)
 800e82e:	2201      	movs	r2, #1
 800e830:	2100      	movs	r1, #0
 800e832:	2000      	movs	r0, #0
 800e834:	f016 f8b4 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioTxTimeout_flag == 1)
 800e838:	4b20      	ldr	r3, [pc, #128]	@ (800e8bc <TST_TX_Start+0x2f4>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d105      	bne.n	800e84c <TST_TX_Start+0x284>
      {
        APP_TPRINTF("OnTxTimeout\r\n");
 800e840:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c0 <TST_TX_Start+0x2f8>)
 800e842:	2201      	movs	r2, #1
 800e844:	2100      	movs	r1, #0
 800e846:	2000      	movs	r0, #0
 800e848:	f016 f8aa 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800e84c:	4b1d      	ldr	r3, [pc, #116]	@ (800e8c4 <TST_TX_Start+0x2fc>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d105      	bne.n	800e860 <TST_TX_Start+0x298>
      {
        APP_TPRINTF("OnRxError\r\n");
 800e854:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c8 <TST_TX_Start+0x300>)
 800e856:	2201      	movs	r2, #1
 800e858:	2100      	movs	r1, #0
 800e85a:	2000      	movs	r0, #0
 800e85c:	f016 f8a0 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*Delay between 2 consecutive Tx*/
      HAL_Delay(500);
 800e860:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e864:	f7f3 fd44 	bl	80022f0 <HAL_Delay>
      /* Reset TX Done or timeout flags */
      RadioTxDone_flag = 0;
 800e868:	4b12      	ldr	r3, [pc, #72]	@ (800e8b4 <TST_TX_Start+0x2ec>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
      RadioTxTimeout_flag = 0;
 800e86e:	4b13      	ldr	r3, [pc, #76]	@ (800e8bc <TST_TX_Start+0x2f4>)
 800e870:	2200      	movs	r2, #0
 800e872:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800e874:	4b13      	ldr	r3, [pc, #76]	@ (800e8c4 <TST_TX_Start+0x2fc>)
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
    for (i = 1; i <= nb_packet; i++)
 800e87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e87c:	3301      	adds	r3, #1
 800e87e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e880:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	429a      	cmp	r2, r3
 800e886:	f77f aed4 	ble.w	800e632 <TST_TX_Start+0x6a>
    }
    TestState &= ~TX_TEST_MODU;
 800e88a:	4b10      	ldr	r3, [pc, #64]	@ (800e8cc <TST_TX_Start+0x304>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	f023 0304 	bic.w	r3, r3, #4
 800e892:	b2da      	uxtb	r2, r3
 800e894:	4b0d      	ldr	r3, [pc, #52]	@ (800e8cc <TST_TX_Start+0x304>)
 800e896:	701a      	strb	r2, [r3, #0]
    return 0;
 800e898:	2300      	movs	r3, #0
 800e89a:	e001      	b.n	800e8a0 <TST_TX_Start+0x2d8>
  }
  else
  {
    return -1;
 800e89c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
  /* USER CODE BEGIN TST_TX_Start_2 */

  /* USER CODE END TST_TX_Start_2 */
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	373c      	adds	r7, #60	@ 0x3c
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd90      	pop	{r4, r7, pc}
 800e8a8:	08029818 	.word	0x08029818
 800e8ac:	20000074 	.word	0x20000074
 800e8b0:	20000890 	.word	0x20000890
 800e8b4:	2000085c 	.word	0x2000085c
 800e8b8:	0802887c 	.word	0x0802887c
 800e8bc:	20000860 	.word	0x20000860
 800e8c0:	08028888 	.word	0x08028888
 800e8c4:	2000086c 	.word	0x2000086c
 800e8c8:	08028898 	.word	0x08028898
 800e8cc:	20000858 	.word	0x20000858

0800e8d0 <TST_RX_Start>:

int32_t TST_RX_Start(int32_t nb_packet)
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b09d      	sub	sp, #116	@ 0x74
 800e8d4:	af04      	add	r7, sp, #16
 800e8d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_RX_Start_1 */

  /* USER CODE END TST_RX_Start_1 */
  int32_t i;
  /* init of PER counter */
  uint32_t count_RxOk = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t count_RxKo = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t PER = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxConfigGeneric_t RxConfig = {0};
 800e8e4:	f107 0314 	add.w	r3, r7, #20
 800e8e8:	2238      	movs	r2, #56	@ 0x38
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f016 fcb6 	bl	802525e <memset>

  if (((TestState & RX_TEST_MODU) != RX_TEST_MODU) && (nb_packet > 0))
 800e8f2:	4ba3      	ldr	r3, [pc, #652]	@ (800eb80 <TST_RX_Start+0x2b0>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	f003 0308 	and.w	r3, r3, #8
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 813a 	bne.w	800eb74 <TST_RX_Start+0x2a4>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f340 8136 	ble.w	800eb74 <TST_RX_Start+0x2a4>
  {
    TestState |= RX_TEST_MODU;
 800e908:	4b9d      	ldr	r3, [pc, #628]	@ (800eb80 <TST_RX_Start+0x2b0>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f043 0308 	orr.w	r3, r3, #8
 800e910:	b2da      	uxtb	r2, r3
 800e912:	4b9b      	ldr	r3, [pc, #620]	@ (800eb80 <TST_RX_Start+0x2b0>)
 800e914:	701a      	strb	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800e916:	4b9b      	ldr	r3, [pc, #620]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e918:	4a9b      	ldr	r2, [pc, #620]	@ (800eb88 <TST_RX_Start+0x2b8>)
 800e91a:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800e91c:	4b99      	ldr	r3, [pc, #612]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e91e:	4a9b      	ldr	r2, [pc, #620]	@ (800eb8c <TST_RX_Start+0x2bc>)
 800e920:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800e922:	4b98      	ldr	r3, [pc, #608]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e924:	4a9a      	ldr	r2, [pc, #616]	@ (800eb90 <TST_RX_Start+0x2c0>)
 800e926:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800e928:	4b96      	ldr	r3, [pc, #600]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e92a:	4a9a      	ldr	r2, [pc, #616]	@ (800eb94 <TST_RX_Start+0x2c4>)
 800e92c:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800e92e:	4b95      	ldr	r3, [pc, #596]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e930:	4a99      	ldr	r2, [pc, #612]	@ (800eb98 <TST_RX_Start+0x2c8>)
 800e932:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800e934:	4b99      	ldr	r3, [pc, #612]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4892      	ldr	r0, [pc, #584]	@ (800eb84 <TST_RX_Start+0x2b4>)
 800e93a:	4798      	blx	r3

    for (i = 1; i <= nb_packet; i++)
 800e93c:	2301      	movs	r3, #1
 800e93e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e940:	e10a      	b.n	800eb58 <TST_RX_Start+0x288>
    {
      /* Rx config */
      Radio.SetChannel(testParam.freq);
 800e942:	4b96      	ldr	r3, [pc, #600]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	4a96      	ldr	r2, [pc, #600]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e948:	6852      	ldr	r2, [r2, #4]
 800e94a:	4610      	mov	r0, r2
 800e94c:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800e94e:	4b94      	ldr	r3, [pc, #592]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d140      	bne.n	800e9d8 <TST_RX_Start+0x108>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e956:	4a93      	ldr	r2, [pc, #588]	@ (800eba4 <TST_RX_Start+0x2d4>)
 800e958:	f107 030c 	add.w	r3, r7, #12
 800e95c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e960:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800e964:	4b8e      	ldr	r3, [pc, #568]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <TST_RX_Start+0xa6>
 800e96c:	4b8c      	ldr	r3, [pc, #560]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e970:	3308      	adds	r3, #8
 800e972:	b2db      	uxtb	r3, r3
 800e974:	e000      	b.n	800e978 <TST_RX_Start+0xa8>
 800e976:	2300      	movs	r3, #0
 800e978:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800e97c:	4b88      	ldr	r3, [pc, #544]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	61bb      	str	r3, [r7, #24]
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800e982:	4b87      	ldr	r3, [pc, #540]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	61fb      	str	r3, [r7, #28]
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800e988:	2303      	movs	r3, #3
 800e98a:	623b      	str	r3, [r7, #32]
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800e98c:	2303      	movs	r3, #3
 800e98e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800e992:	f107 030c 	add.w	r3, r7, #12
 800e996:	627b      	str	r3, [r7, #36]	@ 0x24
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800e998:	2304      	movs	r3, #4
 800e99a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 800e99e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800e9a2:	863b      	strh	r3, [r7, #48]	@ 0x30
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800e9aa:	23f2      	movs	r3, #242	@ 0xf2
 800e9ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800e9b0:	f241 0321 	movw	r3, #4129	@ 0x1021
 800e9b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        RxConfig.fsk.MaxPayloadLength = 255;
 800e9bc:	23ff      	movs	r3, #255	@ 0xff
 800e9be:	62bb      	str	r3, [r7, #40]	@ 0x28
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800e9c6:	4b75      	ldr	r3, [pc, #468]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800e9c8:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 800e9ca:	f107 0114 	add.w	r1, r7, #20
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	47a0      	blx	r4
 800e9d6:	e033      	b.n	800ea40 <TST_RX_Start+0x170>
      }
      else if (testParam.modulation == TEST_LORA)
 800e9d8:	4b71      	ldr	r3, [pc, #452]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d12c      	bne.n	800ea3a <TST_RX_Start+0x16a>
      {
        /*Lora*/
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800e9e0:	4b6f      	ldr	r3, [pc, #444]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800e9ea:	4b6d      	ldr	r3, [pc, #436]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800e9f4:	4b6a      	ldr	r3, [pc, #424]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800e9f6:	695b      	ldr	r3, [r3, #20]
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800e9fe:	4b68      	ldr	r3, [pc, #416]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800ea00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800ea14:	2301      	movs	r3, #1
 800ea16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800ea20:	4b5e      	ldr	r3, [pc, #376]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800ea22:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 800ea24:	f107 0114 	add.w	r1, r7, #20
 800ea28:	231e      	movs	r3, #30
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	47a0      	blx	r4
        Radio.SetPublicNetwork(false); /*set private syncword*/
 800ea30:	4b5a      	ldr	r3, [pc, #360]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800ea32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea34:	2000      	movs	r0, #0
 800ea36:	4798      	blx	r3
 800ea38:	e002      	b.n	800ea40 <TST_RX_Start+0x170>
      }
      else
      {
        /* excluding MSK Rx */
        return -1; /* error */
 800ea3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea3e:	e09b      	b.n	800eb78 <TST_RX_Start+0x2a8>
      }

      if (testParam.lna == 0)
 800ea40:	4b57      	ldr	r3, [pc, #348]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d105      	bne.n	800ea54 <TST_RX_Start+0x184>
      {
        Radio.Rx(RX_TIMEOUT_VALUE);
 800ea48:	4b54      	ldr	r3, [pc, #336]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800ea4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ea50:	4798      	blx	r3
 800ea52:	e004      	b.n	800ea5e <TST_RX_Start+0x18e>
      }
      else
      {
        Radio.RxBoosted(RX_TIMEOUT_VALUE);
 800ea54:	4b51      	ldr	r3, [pc, #324]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800ea56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea58:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ea5c:	4798      	blx	r3
      }

      /* Wait Rx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ea5e:	2001      	movs	r0, #1
 800ea60:	f015 fc34 	bl	80242cc <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800ea64:	4b4d      	ldr	r3, [pc, #308]	@ (800eb9c <TST_RX_Start+0x2cc>)
 800ea66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea68:	4798      	blx	r3

      if (RadioRxDone_flag == 1)
 800ea6a:	4b4f      	ldr	r3, [pc, #316]	@ (800eba8 <TST_RX_Start+0x2d8>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d12a      	bne.n	800eac8 <TST_RX_Start+0x1f8>
      {
        int16_t rssi = last_rx_rssi;
 800ea72:	4b4e      	ldr	r3, [pc, #312]	@ (800ebac <TST_RX_Start+0x2dc>)
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800ea7a:	4b4d      	ldr	r3, [pc, #308]	@ (800ebb0 <TST_RX_Start+0x2e0>)
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        APP_TPRINTF("OnRxDone\r\n");
 800ea82:	4b4c      	ldr	r3, [pc, #304]	@ (800ebb4 <TST_RX_Start+0x2e4>)
 800ea84:	2201      	movs	r2, #1
 800ea86:	2100      	movs	r1, #0
 800ea88:	2000      	movs	r0, #0
 800ea8a:	f015 ff89 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800ea8e:	4b44      	ldr	r3, [pc, #272]	@ (800eba0 <TST_RX_Start+0x2d0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10c      	bne.n	800eab0 <TST_RX_Start+0x1e0>
        {
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800ea96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ea9a:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 800ea9e:	9201      	str	r2, [sp, #4]
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	4b45      	ldr	r3, [pc, #276]	@ (800ebb8 <TST_RX_Start+0x2e8>)
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	f015 ff79 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800eaae:	e00b      	b.n	800eac8 <TST_RX_Start+0x1f8>
        }
        else
        {
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800eab0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800eab4:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 800eab8:	9201      	str	r2, [sp, #4]
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	4b3f      	ldr	r3, [pc, #252]	@ (800ebbc <TST_RX_Start+0x2ec>)
 800eabe:	2201      	movs	r2, #1
 800eac0:	2100      	movs	r1, #0
 800eac2:	2000      	movs	r0, #0
 800eac4:	f015 ff6c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        }
      }

      if (RadioRxTimeout_flag == 1)
 800eac8:	4b3d      	ldr	r3, [pc, #244]	@ (800ebc0 <TST_RX_Start+0x2f0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d105      	bne.n	800eadc <TST_RX_Start+0x20c>
      {
        APP_TPRINTF("OnRxTimeout\r\n");
 800ead0:	4b3c      	ldr	r3, [pc, #240]	@ (800ebc4 <TST_RX_Start+0x2f4>)
 800ead2:	2201      	movs	r2, #1
 800ead4:	2100      	movs	r1, #0
 800ead6:	2000      	movs	r0, #0
 800ead8:	f015 ff62 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800eadc:	4b3a      	ldr	r3, [pc, #232]	@ (800ebc8 <TST_RX_Start+0x2f8>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d105      	bne.n	800eaf0 <TST_RX_Start+0x220>
      {
        APP_TPRINTF("OnRxError\r\n");
 800eae4:	4b39      	ldr	r3, [pc, #228]	@ (800ebcc <TST_RX_Start+0x2fc>)
 800eae6:	2201      	movs	r2, #1
 800eae8:	2100      	movs	r1, #0
 800eaea:	2000      	movs	r0, #0
 800eaec:	f015 ff58 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800eaf0:	4b33      	ldr	r3, [pc, #204]	@ (800ebc0 <TST_RX_Start+0x2f0>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d003      	beq.n	800eb00 <TST_RX_Start+0x230>
 800eaf8:	4b33      	ldr	r3, [pc, #204]	@ (800ebc8 <TST_RX_Start+0x2f8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d102      	bne.n	800eb06 <TST_RX_Start+0x236>
      {
        count_RxKo++;
 800eb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb02:	3301      	adds	r3, #1
 800eb04:	657b      	str	r3, [r7, #84]	@ 0x54
      }
      if (RadioRxDone_flag == 1)
 800eb06:	4b28      	ldr	r3, [pc, #160]	@ (800eba8 <TST_RX_Start+0x2d8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d102      	bne.n	800eb14 <TST_RX_Start+0x244>
      {
        count_RxOk++;
 800eb0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb10:	3301      	adds	r3, #1
 800eb12:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 800eb14:	4b24      	ldr	r3, [pc, #144]	@ (800eba8 <TST_RX_Start+0x2d8>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	601a      	str	r2, [r3, #0]
      RadioRxTimeout_flag = 0;
 800eb1a:	4b29      	ldr	r3, [pc, #164]	@ (800ebc0 <TST_RX_Start+0x2f0>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800eb20:	4b29      	ldr	r3, [pc, #164]	@ (800ebc8 <TST_RX_Start+0x2f8>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]

      /* Compute PER */
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800eb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb28:	2264      	movs	r2, #100	@ 0x64
 800eb2a:	fb03 f202 	mul.w	r2, r3, r2
 800eb2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eb30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb32:	440b      	add	r3, r1
 800eb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb38:	653b      	str	r3, [r7, #80]	@ 0x50
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 800eb3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb3c:	9302      	str	r3, [sp, #8]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	9301      	str	r3, [sp, #4]
 800eb42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	4b22      	ldr	r3, [pc, #136]	@ (800ebd0 <TST_RX_Start+0x300>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f015 ff27 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 800eb52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb54:	3301      	adds	r3, #1
 800eb56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	f77f aef0 	ble.w	800e942 <TST_RX_Start+0x72>
    }
    TestState &= ~RX_TEST_MODU;
 800eb62:	4b07      	ldr	r3, [pc, #28]	@ (800eb80 <TST_RX_Start+0x2b0>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	f023 0308 	bic.w	r3, r3, #8
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	4b04      	ldr	r3, [pc, #16]	@ (800eb80 <TST_RX_Start+0x2b0>)
 800eb6e:	701a      	strb	r2, [r3, #0]
    return 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	e001      	b.n	800eb78 <TST_RX_Start+0x2a8>
  }
  else
  {
    return -1;
 800eb74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
  /* USER CODE BEGIN TST_RX_Start_2 */

  /* USER CODE END TST_RX_Start_2 */
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3764      	adds	r7, #100	@ 0x64
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd90      	pop	{r4, r7, pc}
 800eb80:	20000858 	.word	0x20000858
 800eb84:	20000874 	.word	0x20000874
 800eb88:	0800ebd5 	.word	0x0800ebd5
 800eb8c:	0800ebed 	.word	0x0800ebed
 800eb90:	0800ec35 	.word	0x0800ec35
 800eb94:	0800ec4d 	.word	0x0800ec4d
 800eb98:	0800ec65 	.word	0x0800ec65
 800eb9c:	08029818 	.word	0x08029818
 800eba0:	20000074 	.word	0x20000074
 800eba4:	08028858 	.word	0x08028858
 800eba8:	20000864 	.word	0x20000864
 800ebac:	20000870 	.word	0x20000870
 800ebb0:	20000872 	.word	0x20000872
 800ebb4:	080288a4 	.word	0x080288a4
 800ebb8:	080288b0 	.word	0x080288b0
 800ebbc:	080288d0 	.word	0x080288d0
 800ebc0:	20000868 	.word	0x20000868
 800ebc4:	080288f4 	.word	0x080288f4
 800ebc8:	2000086c 	.word	0x2000086c
 800ebcc:	08028898 	.word	0x08028898
 800ebd0:	08028904 	.word	0x08028904

0800ebd4 <OnTxDone>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

void OnTxDone(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
  /* Set TxDone flag */
  RadioTxDone_flag = 1;
 800ebd8:	4b03      	ldr	r3, [pc, #12]	@ (800ebe8 <OnTxDone+0x14>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ebde:	2001      	movs	r0, #1
 800ebe0:	f015 fb56 	bl	8024290 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 800ebe4:	bf00      	nop
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	2000085c 	.word	0x2000085c

0800ebec <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	4608      	mov	r0, r1
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	817b      	strh	r3, [r7, #10]
 800ebfe:	460b      	mov	r3, r1
 800ec00:	813b      	strh	r3, [r7, #8]
 800ec02:	4613      	mov	r3, r2
 800ec04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone_1 */

  /* USER CODE END OnRxDone_1 */
  last_rx_rssi = rssi;
 800ec06:	4a08      	ldr	r2, [pc, #32]	@ (800ec28 <OnRxDone+0x3c>)
 800ec08:	893b      	ldrh	r3, [r7, #8]
 800ec0a:	8013      	strh	r3, [r2, #0]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 800ec0c:	4a07      	ldr	r2, [pc, #28]	@ (800ec2c <OnRxDone+0x40>)
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	7013      	strb	r3, [r2, #0]

  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 800ec12:	4b07      	ldr	r3, [pc, #28]	@ (800ec30 <OnRxDone+0x44>)
 800ec14:	2201      	movs	r2, #1
 800ec16:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ec18:	2001      	movs	r0, #1
 800ec1a:	f015 fb39 	bl	8024290 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 800ec1e:	bf00      	nop
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000870 	.word	0x20000870
 800ec2c:	20000872 	.word	0x20000872
 800ec30:	20000864 	.word	0x20000864

0800ec34 <OnTxTimeout>:

void OnTxTimeout(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
  /* Set timeout flag */
  RadioTxTimeout_flag = 1;
 800ec38:	4b03      	ldr	r3, [pc, #12]	@ (800ec48 <OnTxTimeout+0x14>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ec3e:	2001      	movs	r0, #1
 800ec40:	f015 fb26 	bl	8024290 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 800ec44:	bf00      	nop
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20000860 	.word	0x20000860

0800ec4c <OnRxTimeout>:

void OnRxTimeout(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  /* Set timeout flag */
  RadioRxTimeout_flag = 1;
 800ec50:	4b03      	ldr	r3, [pc, #12]	@ (800ec60 <OnRxTimeout+0x14>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ec56:	2001      	movs	r0, #1
 800ec58:	f015 fb1a 	bl	8024290 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 800ec5c:	bf00      	nop
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	20000868 	.word	0x20000868

0800ec64 <OnRxError>:

void OnRxError(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  /* Set error flag */
  RadioError_flag = 1;
 800ec68:	4b03      	ldr	r3, [pc, #12]	@ (800ec78 <OnRxError+0x14>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ec6e:	2001      	movs	r0, #1
 800ec70:	f015 fb0e 	bl	8024290 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 800ec74:	bf00      	nop
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	2000086c 	.word	0x2000086c

0800ec7c <Prbs9_generator>:

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b086      	sub	sp, #24
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	460b      	mov	r3, r1
 800ec86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
 800ec88:	2302      	movs	r3, #2
 800ec8a:	82fb      	strh	r3, [r7, #22]
  /*init payload to 0*/
  UTIL_MEM_set_8(payload, 0, len);
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	461a      	mov	r2, r3
 800ec92:	2100      	movs	r1, #0
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f014 f834 	bl	8022d02 <UTIL_MEM_set_8>

  for (int32_t i = 0; i < len * 8; i++)
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	613b      	str	r3, [r7, #16]
 800ec9e:	e033      	b.n	800ed08 <Prbs9_generator+0x8c>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 800eca0:	8afb      	ldrh	r3, [r7, #22]
 800eca2:	0a1b      	lsrs	r3, r3, #8
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	8afb      	ldrh	r3, [r7, #22]
 800eca8:	091b      	lsrs	r3, r3, #4
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	4053      	eors	r3, r2
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	60fb      	str	r3, [r7, #12]
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 800ecb6:	8afb      	ldrh	r3, [r7, #22]
 800ecb8:	005b      	lsls	r3, r3, #1
 800ecba:	b21a      	sxth	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	b21b      	sxth	r3, r3
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecca:	82fb      	strh	r3, [r7, #22]
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	da00      	bge.n	800ecd4 <Prbs9_generator+0x58>
 800ecd2:	3307      	adds	r3, #7
 800ecd4:	10db      	asrs	r3, r3, #3
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	4602      	mov	r2, r0
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4413      	add	r3, r2
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	b25a      	sxtb	r2, r3
 800ece2:	8afb      	ldrh	r3, [r7, #22]
 800ece4:	f003 0101 	and.w	r1, r3, #1
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	f003 0307 	and.w	r3, r3, #7
 800ecee:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf2:	b25b      	sxtb	r3, r3
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	b25a      	sxtb	r2, r3
 800ecf8:	4601      	mov	r1, r0
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	440b      	add	r3, r1
 800ecfe:	b2d2      	uxtb	r2, r2
 800ed00:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < len * 8; i++)
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	3301      	adds	r3, #1
 800ed06:	613b      	str	r3, [r7, #16]
 800ed08:	78fb      	ldrb	r3, [r7, #3]
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	dbc6      	blt.n	800eca0 <Prbs9_generator+0x24>
  }
  return 0;
 800ed12:	2300      	movs	r3, #0
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ed20:	f7f4 f8c2 	bl	8002ea8 <BSP_RADIO_Init>
 800ed24:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	4603      	mov	r3, r0
 800ed32:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7f4 f8f2 	bl	8002f20 <BSP_RADIO_ConfigRFSwitch>
 800ed3c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ed4a:	f7f4 f93d 	bl	8002fc8 <BSP_RADIO_GetTxConfig>
 800ed4e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ed58:	f7f4 f93d 	bl	8002fd6 <BSP_RADIO_IsTCXO>
 800ed5c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ed66:	f7f4 f93d 	bl	8002fe4 <BSP_RADIO_IsDCDC>
 800ed6a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ed7a:	79fb      	ldrb	r3, [r7, #7]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f4 f938 	bl	8002ff2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ed82:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	33f1      	adds	r3, #241	@ 0xf1
 800ed98:	2210      	movs	r2, #16
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f010 fc75 	bl	801f68c <memset1>
    ctx->M_n = 0;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	22f0      	movs	r2, #240	@ 0xf0
 800edae:	2100      	movs	r1, #0
 800edb0:	4618      	mov	r0, r3
 800edb2:	f010 fc6b 	bl	801f68c <memset1>
}
 800edb6:	bf00      	nop
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	461a      	mov	r2, r3
 800edcc:	2110      	movs	r1, #16
 800edce:	6838      	ldr	r0, [r7, #0]
 800edd0:	f000 fe5c 	bl	800fa8c <lorawan_aes_set_key>
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08c      	sub	sp, #48	@ 0x30
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f000 80a1 	beq.w	800ef36 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800edfa:	f1c3 0310 	rsb	r3, r3, #16
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	4293      	cmp	r3, r2
 800ee02:	bf28      	it	cs
 800ee04:	4613      	movcs	r3, r2
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ee14:	4413      	add	r3, r2
 800ee16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee18:	b292      	uxth	r2, r2
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f010 fbfa 	bl	801f616 <memcpy1>
        ctx->M_n += mlen;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ee28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2a:	441a      	add	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ee38:	2b0f      	cmp	r3, #15
 800ee3a:	f240 808d 	bls.w	800ef58 <AES_CMAC_Update+0x17c>
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	429a      	cmp	r2, r3
 800ee44:	f000 8088 	beq.w	800ef58 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ee48:	2300      	movs	r3, #0
 800ee4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee4c:	e015      	b.n	800ee7a <AES_CMAC_Update+0x9e>
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee52:	4413      	add	r3, r2
 800ee54:	33f1      	adds	r3, #241	@ 0xf1
 800ee56:	781a      	ldrb	r2, [r3, #0]
 800ee58:	68f9      	ldr	r1, [r7, #12]
 800ee5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5c:	440b      	add	r3, r1
 800ee5e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	4053      	eors	r3, r2
 800ee66:	b2d9      	uxtb	r1, r3
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6c:	4413      	add	r3, r2
 800ee6e:	33f1      	adds	r3, #241	@ 0xf1
 800ee70:	460a      	mov	r2, r1
 800ee72:	701a      	strb	r2, [r3, #0]
 800ee74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee76:	3301      	adds	r3, #1
 800ee78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	2b0f      	cmp	r3, #15
 800ee7e:	dde6      	ble.n	800ee4e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ee86:	f107 0314 	add.w	r3, r7, #20
 800ee8a:	2210      	movs	r2, #16
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f010 fbc2 	bl	801f616 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	f107 0114 	add.w	r1, r7, #20
 800ee98:	f107 0314 	add.w	r3, r7, #20
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 fed3 	bl	800fc48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	33f1      	adds	r3, #241	@ 0xf1
 800eea6:	f107 0114 	add.w	r1, r7, #20
 800eeaa:	2210      	movs	r2, #16
 800eeac:	4618      	mov	r0, r3
 800eeae:	f010 fbb2 	bl	801f616 <memcpy1>

        data += mlen;
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb6:	4413      	add	r3, r2
 800eeb8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800eec2:	e038      	b.n	800ef36 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800eec4:	2300      	movs	r3, #0
 800eec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eec8:	e013      	b.n	800eef2 <AES_CMAC_Update+0x116>
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eece:	4413      	add	r3, r2
 800eed0:	33f1      	adds	r3, #241	@ 0xf1
 800eed2:	781a      	ldrb	r2, [r3, #0]
 800eed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed6:	68b9      	ldr	r1, [r7, #8]
 800eed8:	440b      	add	r3, r1
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	4053      	eors	r3, r2
 800eede:	b2d9      	uxtb	r1, r3
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee4:	4413      	add	r3, r2
 800eee6:	33f1      	adds	r3, #241	@ 0xf1
 800eee8:	460a      	mov	r2, r1
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeee:	3301      	adds	r3, #1
 800eef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef4:	2b0f      	cmp	r3, #15
 800eef6:	dde8      	ble.n	800eeca <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800eefe:	f107 0314 	add.w	r3, r7, #20
 800ef02:	2210      	movs	r2, #16
 800ef04:	4618      	mov	r0, r3
 800ef06:	f010 fb86 	bl	801f616 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	f107 0114 	add.w	r1, r7, #20
 800ef10:	f107 0314 	add.w	r3, r7, #20
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fe97 	bl	800fc48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	33f1      	adds	r3, #241	@ 0xf1
 800ef1e:	f107 0114 	add.w	r1, r7, #20
 800ef22:	2210      	movs	r2, #16
 800ef24:	4618      	mov	r0, r3
 800ef26:	f010 fb76 	bl	801f616 <memcpy1>

        data += 16;
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	3310      	adds	r3, #16
 800ef2e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3b10      	subs	r3, #16
 800ef34:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b10      	cmp	r3, #16
 800ef3a:	d8c3      	bhi.n	800eec4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	b292      	uxth	r2, r2
 800ef46:	68b9      	ldr	r1, [r7, #8]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f010 fb64 	bl	801f616 <memcpy1>
    ctx->M_n = len;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ef56:	e000      	b.n	800ef5a <AES_CMAC_Update+0x17e>
            return;
 800ef58:	bf00      	nop
}
 800ef5a:	3730      	adds	r7, #48	@ 0x30
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b092      	sub	sp, #72	@ 0x48
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ef6a:	f107 031c 	add.w	r3, r7, #28
 800ef6e:	2210      	movs	r2, #16
 800ef70:	2100      	movs	r1, #0
 800ef72:	4618      	mov	r0, r3
 800ef74:	f010 fb8a 	bl	801f68c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	f107 011c 	add.w	r1, r7, #28
 800ef7e:	f107 031c 	add.w	r3, r7, #28
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fe60 	bl	800fc48 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ef88:	7f3b      	ldrb	r3, [r7, #28]
 800ef8a:	b25b      	sxtb	r3, r3
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	da30      	bge.n	800eff2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ef90:	2300      	movs	r3, #0
 800ef92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef94:	e01b      	b.n	800efce <AES_CMAC_Final+0x6e>
 800ef96:	f107 021c 	add.w	r2, r7, #28
 800ef9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef9c:	4413      	add	r3, r2
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	b25a      	sxtb	r2, r3
 800efa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efa6:	3301      	adds	r3, #1
 800efa8:	3348      	adds	r3, #72	@ 0x48
 800efaa:	443b      	add	r3, r7
 800efac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800efb0:	09db      	lsrs	r3, r3, #7
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	b25b      	sxtb	r3, r3
 800efb6:	4313      	orrs	r3, r2
 800efb8:	b25b      	sxtb	r3, r3
 800efba:	b2d9      	uxtb	r1, r3
 800efbc:	f107 021c 	add.w	r2, r7, #28
 800efc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efc2:	4413      	add	r3, r2
 800efc4:	460a      	mov	r2, r1
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efca:	3301      	adds	r3, #1
 800efcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800efce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efd0:	2b0e      	cmp	r3, #14
 800efd2:	dde0      	ble.n	800ef96 <AES_CMAC_Final+0x36>
 800efd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800efe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800efe4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800efe8:	43db      	mvns	r3, r3
 800efea:	b2db      	uxtb	r3, r3
 800efec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eff0:	e027      	b.n	800f042 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800eff2:	2300      	movs	r3, #0
 800eff4:	643b      	str	r3, [r7, #64]	@ 0x40
 800eff6:	e01b      	b.n	800f030 <AES_CMAC_Final+0xd0>
 800eff8:	f107 021c 	add.w	r2, r7, #28
 800effc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800effe:	4413      	add	r3, r2
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	b25a      	sxtb	r2, r3
 800f006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f008:	3301      	adds	r3, #1
 800f00a:	3348      	adds	r3, #72	@ 0x48
 800f00c:	443b      	add	r3, r7
 800f00e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f012:	09db      	lsrs	r3, r3, #7
 800f014:	b2db      	uxtb	r3, r3
 800f016:	b25b      	sxtb	r3, r3
 800f018:	4313      	orrs	r3, r2
 800f01a:	b25b      	sxtb	r3, r3
 800f01c:	b2d9      	uxtb	r1, r3
 800f01e:	f107 021c 	add.w	r2, r7, #28
 800f022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f024:	4413      	add	r3, r2
 800f026:	460a      	mov	r2, r1
 800f028:	701a      	strb	r2, [r3, #0]
 800f02a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f02c:	3301      	adds	r3, #1
 800f02e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f032:	2b0e      	cmp	r3, #14
 800f034:	dde0      	ble.n	800eff8 <AES_CMAC_Final+0x98>
 800f036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f048:	2b10      	cmp	r3, #16
 800f04a:	d11d      	bne.n	800f088 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800f04c:	2300      	movs	r3, #0
 800f04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f050:	e016      	b.n	800f080 <AES_CMAC_Final+0x120>
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f056:	4413      	add	r3, r2
 800f058:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800f05c:	781a      	ldrb	r2, [r3, #0]
 800f05e:	f107 011c 	add.w	r1, r7, #28
 800f062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f064:	440b      	add	r3, r1
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	4053      	eors	r3, r2
 800f06a:	b2d9      	uxtb	r1, r3
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f070:	4413      	add	r3, r2
 800f072:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800f076:	460a      	mov	r2, r1
 800f078:	701a      	strb	r2, [r3, #0]
 800f07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f07c:	3301      	adds	r3, #1
 800f07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f082:	2b0f      	cmp	r3, #15
 800f084:	dde5      	ble.n	800f052 <AES_CMAC_Final+0xf2>
 800f086:	e096      	b.n	800f1b6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f088:	7f3b      	ldrb	r3, [r7, #28]
 800f08a:	b25b      	sxtb	r3, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	da30      	bge.n	800f0f2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800f090:	2300      	movs	r3, #0
 800f092:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f094:	e01b      	b.n	800f0ce <AES_CMAC_Final+0x16e>
 800f096:	f107 021c 	add.w	r2, r7, #28
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	4413      	add	r3, r2
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	b25a      	sxtb	r2, r3
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	3348      	adds	r3, #72	@ 0x48
 800f0aa:	443b      	add	r3, r7
 800f0ac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f0b0:	09db      	lsrs	r3, r3, #7
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	b25b      	sxtb	r3, r3
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	b25b      	sxtb	r3, r3
 800f0ba:	b2d9      	uxtb	r1, r3
 800f0bc:	f107 021c 	add.w	r2, r7, #28
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c2:	4413      	add	r3, r2
 800f0c4:	460a      	mov	r2, r1
 800f0c6:	701a      	strb	r2, [r3, #0]
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d0:	2b0e      	cmp	r3, #14
 800f0d2:	dde0      	ble.n	800f096 <AES_CMAC_Final+0x136>
 800f0d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800f0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f0e4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800f0e8:	43db      	mvns	r3, r3
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0f0:	e027      	b.n	800f142 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0f6:	e01b      	b.n	800f130 <AES_CMAC_Final+0x1d0>
 800f0f8:	f107 021c 	add.w	r2, r7, #28
 800f0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0fe:	4413      	add	r3, r2
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	b25a      	sxtb	r2, r3
 800f106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f108:	3301      	adds	r3, #1
 800f10a:	3348      	adds	r3, #72	@ 0x48
 800f10c:	443b      	add	r3, r7
 800f10e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f112:	09db      	lsrs	r3, r3, #7
 800f114:	b2db      	uxtb	r3, r3
 800f116:	b25b      	sxtb	r3, r3
 800f118:	4313      	orrs	r3, r2
 800f11a:	b25b      	sxtb	r3, r3
 800f11c:	b2d9      	uxtb	r1, r3
 800f11e:	f107 021c 	add.w	r2, r7, #28
 800f122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f124:	4413      	add	r3, r2
 800f126:	460a      	mov	r2, r1
 800f128:	701a      	strb	r2, [r3, #0]
 800f12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12c:	3301      	adds	r3, #1
 800f12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f132:	2b0e      	cmp	r3, #14
 800f134:	dde0      	ble.n	800f0f8 <AES_CMAC_Final+0x198>
 800f136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	4413      	add	r3, r2
 800f14c:	2280      	movs	r2, #128	@ 0x80
 800f14e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800f152:	e007      	b.n	800f164 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	4413      	add	r3, r2
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f178:	2b0f      	cmp	r3, #15
 800f17a:	d9eb      	bls.n	800f154 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800f17c:	2300      	movs	r3, #0
 800f17e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f180:	e016      	b.n	800f1b0 <AES_CMAC_Final+0x250>
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f186:	4413      	add	r3, r2
 800f188:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800f18c:	781a      	ldrb	r2, [r3, #0]
 800f18e:	f107 011c 	add.w	r1, r7, #28
 800f192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f194:	440b      	add	r3, r1
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	4053      	eors	r3, r2
 800f19a:	b2d9      	uxtb	r1, r3
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a0:	4413      	add	r3, r2
 800f1a2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800f1a6:	460a      	mov	r2, r1
 800f1a8:	701a      	strb	r2, [r3, #0]
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b2:	2b0f      	cmp	r3, #15
 800f1b4:	dde5      	ble.n	800f182 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1ba:	e015      	b.n	800f1e8 <AES_CMAC_Final+0x288>
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c0:	4413      	add	r3, r2
 800f1c2:	33f1      	adds	r3, #241	@ 0xf1
 800f1c4:	781a      	ldrb	r2, [r3, #0]
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ca:	440b      	add	r3, r1
 800f1cc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	4053      	eors	r3, r2
 800f1d4:	b2d9      	uxtb	r1, r3
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1da:	4413      	add	r3, r2
 800f1dc:	33f1      	adds	r3, #241	@ 0xf1
 800f1de:	460a      	mov	r2, r1
 800f1e0:	701a      	strb	r2, [r3, #0]
 800f1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ea:	2b0f      	cmp	r3, #15
 800f1ec:	dde6      	ble.n	800f1bc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800f1f4:	f107 030c 	add.w	r3, r7, #12
 800f1f8:	2210      	movs	r2, #16
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f010 fa0b 	bl	801f616 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	f107 030c 	add.w	r3, r7, #12
 800f206:	6879      	ldr	r1, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fd1d 	bl	800fc48 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f20e:	f107 031c 	add.w	r3, r7, #28
 800f212:	2210      	movs	r2, #16
 800f214:	2100      	movs	r1, #0
 800f216:	4618      	mov	r0, r3
 800f218:	f010 fa38 	bl	801f68c <memset1>
}
 800f21c:	bf00      	nop
 800f21e:	3748      	adds	r7, #72	@ 0x48
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	781a      	ldrb	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3301      	adds	r3, #1
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	7852      	ldrb	r2, [r2, #1]
 800f23e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	3302      	adds	r3, #2
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	7892      	ldrb	r2, [r2, #2]
 800f248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	3303      	adds	r3, #3
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	78d2      	ldrb	r2, [r2, #3]
 800f252:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3304      	adds	r3, #4
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	7912      	ldrb	r2, [r2, #4]
 800f25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3305      	adds	r3, #5
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	7952      	ldrb	r2, [r2, #5]
 800f266:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3306      	adds	r3, #6
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	7992      	ldrb	r2, [r2, #6]
 800f270:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	3307      	adds	r3, #7
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	79d2      	ldrb	r2, [r2, #7]
 800f27a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3308      	adds	r3, #8
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	7a12      	ldrb	r2, [r2, #8]
 800f284:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3309      	adds	r3, #9
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	7a52      	ldrb	r2, [r2, #9]
 800f28e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	330a      	adds	r3, #10
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	7a92      	ldrb	r2, [r2, #10]
 800f298:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	330b      	adds	r3, #11
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	7ad2      	ldrb	r2, [r2, #11]
 800f2a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	330c      	adds	r3, #12
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	7b12      	ldrb	r2, [r2, #12]
 800f2ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	330d      	adds	r3, #13
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	7b52      	ldrb	r2, [r2, #13]
 800f2b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	330e      	adds	r3, #14
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	7b92      	ldrb	r2, [r2, #14]
 800f2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	330f      	adds	r3, #15
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	7bd2      	ldrb	r2, [r2, #15]
 800f2ca:	701a      	strb	r2, [r3, #0]
#endif
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bc80      	pop	{r7}
 800f2d4:	4770      	bx	lr

0800f2d6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800f2d6:	b480      	push	{r7}
 800f2d8:	b085      	sub	sp, #20
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800f2e4:	e007      	b.n	800f2f6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	1c53      	adds	r3, r2, #1
 800f2ea:	60bb      	str	r3, [r7, #8]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	1c59      	adds	r1, r3, #1
 800f2f0:	60f9      	str	r1, [r7, #12]
 800f2f2:	7812      	ldrb	r2, [r2, #0]
 800f2f4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800f2f6:	79fb      	ldrb	r3, [r7, #7]
 800f2f8:	1e5a      	subs	r2, r3, #1
 800f2fa:	71fa      	strb	r2, [r7, #7]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f2      	bne.n	800f2e6 <copy_block_nn+0x10>
}
 800f300:	bf00      	nop
 800f302:	bf00      	nop
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	bc80      	pop	{r7}
 800f30a:	4770      	bx	lr

0800f30c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	781a      	ldrb	r2, [r3, #0]
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	4053      	eors	r3, r2
 800f320:	b2da      	uxtb	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	3301      	adds	r3, #1
 800f32a:	7819      	ldrb	r1, [r3, #0]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	3301      	adds	r3, #1
 800f330:	781a      	ldrb	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3301      	adds	r3, #1
 800f336:	404a      	eors	r2, r1
 800f338:	b2d2      	uxtb	r2, r2
 800f33a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	3302      	adds	r3, #2
 800f340:	7819      	ldrb	r1, [r3, #0]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	3302      	adds	r3, #2
 800f346:	781a      	ldrb	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3302      	adds	r3, #2
 800f34c:	404a      	eors	r2, r1
 800f34e:	b2d2      	uxtb	r2, r2
 800f350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3303      	adds	r3, #3
 800f356:	7819      	ldrb	r1, [r3, #0]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	3303      	adds	r3, #3
 800f35c:	781a      	ldrb	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3303      	adds	r3, #3
 800f362:	404a      	eors	r2, r1
 800f364:	b2d2      	uxtb	r2, r2
 800f366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	3304      	adds	r3, #4
 800f36c:	7819      	ldrb	r1, [r3, #0]
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	3304      	adds	r3, #4
 800f372:	781a      	ldrb	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	3304      	adds	r3, #4
 800f378:	404a      	eors	r2, r1
 800f37a:	b2d2      	uxtb	r2, r2
 800f37c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3305      	adds	r3, #5
 800f382:	7819      	ldrb	r1, [r3, #0]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	3305      	adds	r3, #5
 800f388:	781a      	ldrb	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	3305      	adds	r3, #5
 800f38e:	404a      	eors	r2, r1
 800f390:	b2d2      	uxtb	r2, r2
 800f392:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	3306      	adds	r3, #6
 800f398:	7819      	ldrb	r1, [r3, #0]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	3306      	adds	r3, #6
 800f39e:	781a      	ldrb	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3306      	adds	r3, #6
 800f3a4:	404a      	eors	r2, r1
 800f3a6:	b2d2      	uxtb	r2, r2
 800f3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	3307      	adds	r3, #7
 800f3ae:	7819      	ldrb	r1, [r3, #0]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	3307      	adds	r3, #7
 800f3b4:	781a      	ldrb	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3307      	adds	r3, #7
 800f3ba:	404a      	eors	r2, r1
 800f3bc:	b2d2      	uxtb	r2, r2
 800f3be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	7819      	ldrb	r1, [r3, #0]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	781a      	ldrb	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3308      	adds	r3, #8
 800f3d0:	404a      	eors	r2, r1
 800f3d2:	b2d2      	uxtb	r2, r2
 800f3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3309      	adds	r3, #9
 800f3da:	7819      	ldrb	r1, [r3, #0]
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	3309      	adds	r3, #9
 800f3e0:	781a      	ldrb	r2, [r3, #0]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	3309      	adds	r3, #9
 800f3e6:	404a      	eors	r2, r1
 800f3e8:	b2d2      	uxtb	r2, r2
 800f3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	330a      	adds	r3, #10
 800f3f0:	7819      	ldrb	r1, [r3, #0]
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	330a      	adds	r3, #10
 800f3f6:	781a      	ldrb	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	330a      	adds	r3, #10
 800f3fc:	404a      	eors	r2, r1
 800f3fe:	b2d2      	uxtb	r2, r2
 800f400:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	330b      	adds	r3, #11
 800f406:	7819      	ldrb	r1, [r3, #0]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	330b      	adds	r3, #11
 800f40c:	781a      	ldrb	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	330b      	adds	r3, #11
 800f412:	404a      	eors	r2, r1
 800f414:	b2d2      	uxtb	r2, r2
 800f416:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	330c      	adds	r3, #12
 800f41c:	7819      	ldrb	r1, [r3, #0]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	330c      	adds	r3, #12
 800f422:	781a      	ldrb	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	330c      	adds	r3, #12
 800f428:	404a      	eors	r2, r1
 800f42a:	b2d2      	uxtb	r2, r2
 800f42c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	330d      	adds	r3, #13
 800f432:	7819      	ldrb	r1, [r3, #0]
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	330d      	adds	r3, #13
 800f438:	781a      	ldrb	r2, [r3, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	330d      	adds	r3, #13
 800f43e:	404a      	eors	r2, r1
 800f440:	b2d2      	uxtb	r2, r2
 800f442:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	330e      	adds	r3, #14
 800f448:	7819      	ldrb	r1, [r3, #0]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	330e      	adds	r3, #14
 800f44e:	781a      	ldrb	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	330e      	adds	r3, #14
 800f454:	404a      	eors	r2, r1
 800f456:	b2d2      	uxtb	r2, r2
 800f458:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	330f      	adds	r3, #15
 800f45e:	7819      	ldrb	r1, [r3, #0]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	330f      	adds	r3, #15
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	330f      	adds	r3, #15
 800f46a:	404a      	eors	r2, r1
 800f46c:	b2d2      	uxtb	r2, r2
 800f46e:	701a      	strb	r2, [r3, #0]
#endif
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	bc80      	pop	{r7}
 800f478:	4770      	bx	lr

0800f47a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800f47a:	b480      	push	{r7}
 800f47c:	b085      	sub	sp, #20
 800f47e:	af00      	add	r7, sp, #0
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	60b9      	str	r1, [r7, #8]
 800f484:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	781a      	ldrb	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	4053      	eors	r3, r2
 800f490:	b2da      	uxtb	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	3301      	adds	r3, #1
 800f49a:	7819      	ldrb	r1, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	781a      	ldrb	r2, [r3, #0]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	404a      	eors	r2, r1
 800f4a8:	b2d2      	uxtb	r2, r2
 800f4aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	3302      	adds	r3, #2
 800f4b0:	7819      	ldrb	r1, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	3302      	adds	r3, #2
 800f4b6:	781a      	ldrb	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3302      	adds	r3, #2
 800f4bc:	404a      	eors	r2, r1
 800f4be:	b2d2      	uxtb	r2, r2
 800f4c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3303      	adds	r3, #3
 800f4c6:	7819      	ldrb	r1, [r3, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3303      	adds	r3, #3
 800f4cc:	781a      	ldrb	r2, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	3303      	adds	r3, #3
 800f4d2:	404a      	eors	r2, r1
 800f4d4:	b2d2      	uxtb	r2, r2
 800f4d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	3304      	adds	r3, #4
 800f4dc:	7819      	ldrb	r1, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	781a      	ldrb	r2, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	404a      	eors	r2, r1
 800f4ea:	b2d2      	uxtb	r2, r2
 800f4ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	3305      	adds	r3, #5
 800f4f2:	7819      	ldrb	r1, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3305      	adds	r3, #5
 800f4f8:	781a      	ldrb	r2, [r3, #0]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3305      	adds	r3, #5
 800f4fe:	404a      	eors	r2, r1
 800f500:	b2d2      	uxtb	r2, r2
 800f502:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	3306      	adds	r3, #6
 800f508:	7819      	ldrb	r1, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3306      	adds	r3, #6
 800f50e:	781a      	ldrb	r2, [r3, #0]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	3306      	adds	r3, #6
 800f514:	404a      	eors	r2, r1
 800f516:	b2d2      	uxtb	r2, r2
 800f518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	3307      	adds	r3, #7
 800f51e:	7819      	ldrb	r1, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3307      	adds	r3, #7
 800f524:	781a      	ldrb	r2, [r3, #0]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	3307      	adds	r3, #7
 800f52a:	404a      	eors	r2, r1
 800f52c:	b2d2      	uxtb	r2, r2
 800f52e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	3308      	adds	r3, #8
 800f534:	7819      	ldrb	r1, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3308      	adds	r3, #8
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3308      	adds	r3, #8
 800f540:	404a      	eors	r2, r1
 800f542:	b2d2      	uxtb	r2, r2
 800f544:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	3309      	adds	r3, #9
 800f54a:	7819      	ldrb	r1, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3309      	adds	r3, #9
 800f550:	781a      	ldrb	r2, [r3, #0]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	3309      	adds	r3, #9
 800f556:	404a      	eors	r2, r1
 800f558:	b2d2      	uxtb	r2, r2
 800f55a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	330a      	adds	r3, #10
 800f560:	7819      	ldrb	r1, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	330a      	adds	r3, #10
 800f566:	781a      	ldrb	r2, [r3, #0]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	330a      	adds	r3, #10
 800f56c:	404a      	eors	r2, r1
 800f56e:	b2d2      	uxtb	r2, r2
 800f570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	330b      	adds	r3, #11
 800f576:	7819      	ldrb	r1, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	330b      	adds	r3, #11
 800f57c:	781a      	ldrb	r2, [r3, #0]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	330b      	adds	r3, #11
 800f582:	404a      	eors	r2, r1
 800f584:	b2d2      	uxtb	r2, r2
 800f586:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	330c      	adds	r3, #12
 800f58c:	7819      	ldrb	r1, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	330c      	adds	r3, #12
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	330c      	adds	r3, #12
 800f598:	404a      	eors	r2, r1
 800f59a:	b2d2      	uxtb	r2, r2
 800f59c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	330d      	adds	r3, #13
 800f5a2:	7819      	ldrb	r1, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	330d      	adds	r3, #13
 800f5a8:	781a      	ldrb	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	330d      	adds	r3, #13
 800f5ae:	404a      	eors	r2, r1
 800f5b0:	b2d2      	uxtb	r2, r2
 800f5b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	330e      	adds	r3, #14
 800f5b8:	7819      	ldrb	r1, [r3, #0]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	330e      	adds	r3, #14
 800f5be:	781a      	ldrb	r2, [r3, #0]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	330e      	adds	r3, #14
 800f5c4:	404a      	eors	r2, r1
 800f5c6:	b2d2      	uxtb	r2, r2
 800f5c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	330f      	adds	r3, #15
 800f5ce:	7819      	ldrb	r1, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	330f      	adds	r3, #15
 800f5d4:	781a      	ldrb	r2, [r3, #0]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	330f      	adds	r3, #15
 800f5da:	404a      	eors	r2, r1
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f5e0:	bf00      	nop
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bc80      	pop	{r7}
 800f5e8:	4770      	bx	lr

0800f5ea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b082      	sub	sp, #8
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff fe88 	bl	800f30c <xor_block>
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	461a      	mov	r2, r3
 800f612:	4b48      	ldr	r3, [pc, #288]	@ (800f734 <shift_sub_rows+0x130>)
 800f614:	5c9a      	ldrb	r2, [r3, r2]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	701a      	strb	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	3304      	adds	r3, #4
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	4619      	mov	r1, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	4a43      	ldr	r2, [pc, #268]	@ (800f734 <shift_sub_rows+0x130>)
 800f628:	5c52      	ldrb	r2, [r2, r1]
 800f62a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3308      	adds	r3, #8
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	4619      	mov	r1, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3308      	adds	r3, #8
 800f638:	4a3e      	ldr	r2, [pc, #248]	@ (800f734 <shift_sub_rows+0x130>)
 800f63a:	5c52      	ldrb	r2, [r2, r1]
 800f63c:	701a      	strb	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	330c      	adds	r3, #12
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	4619      	mov	r1, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	330c      	adds	r3, #12
 800f64a:	4a3a      	ldr	r2, [pc, #232]	@ (800f734 <shift_sub_rows+0x130>)
 800f64c:	5c52      	ldrb	r2, [r2, r1]
 800f64e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	785b      	ldrb	r3, [r3, #1]
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3305      	adds	r3, #5
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	4619      	mov	r1, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3301      	adds	r3, #1
 800f662:	4a34      	ldr	r2, [pc, #208]	@ (800f734 <shift_sub_rows+0x130>)
 800f664:	5c52      	ldrb	r2, [r2, r1]
 800f666:	701a      	strb	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	3309      	adds	r3, #9
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3305      	adds	r3, #5
 800f674:	4a2f      	ldr	r2, [pc, #188]	@ (800f734 <shift_sub_rows+0x130>)
 800f676:	5c52      	ldrb	r2, [r2, r1]
 800f678:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	330d      	adds	r3, #13
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	4619      	mov	r1, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3309      	adds	r3, #9
 800f686:	4a2b      	ldr	r2, [pc, #172]	@ (800f734 <shift_sub_rows+0x130>)
 800f688:	5c52      	ldrb	r2, [r2, r1]
 800f68a:	701a      	strb	r2, [r3, #0]
 800f68c:	7bfa      	ldrb	r2, [r7, #15]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	330d      	adds	r3, #13
 800f692:	4928      	ldr	r1, [pc, #160]	@ (800f734 <shift_sub_rows+0x130>)
 800f694:	5c8a      	ldrb	r2, [r1, r2]
 800f696:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	789b      	ldrb	r3, [r3, #2]
 800f69c:	73fb      	strb	r3, [r7, #15]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	330a      	adds	r3, #10
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	3302      	adds	r3, #2
 800f6aa:	4a22      	ldr	r2, [pc, #136]	@ (800f734 <shift_sub_rows+0x130>)
 800f6ac:	5c52      	ldrb	r2, [r2, r1]
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	7bfa      	ldrb	r2, [r7, #15]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	330a      	adds	r3, #10
 800f6b6:	491f      	ldr	r1, [pc, #124]	@ (800f734 <shift_sub_rows+0x130>)
 800f6b8:	5c8a      	ldrb	r2, [r1, r2]
 800f6ba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	799b      	ldrb	r3, [r3, #6]
 800f6c0:	73fb      	strb	r3, [r7, #15]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	330e      	adds	r3, #14
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	3306      	adds	r3, #6
 800f6ce:	4a19      	ldr	r2, [pc, #100]	@ (800f734 <shift_sub_rows+0x130>)
 800f6d0:	5c52      	ldrb	r2, [r2, r1]
 800f6d2:	701a      	strb	r2, [r3, #0]
 800f6d4:	7bfa      	ldrb	r2, [r7, #15]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	330e      	adds	r3, #14
 800f6da:	4916      	ldr	r1, [pc, #88]	@ (800f734 <shift_sub_rows+0x130>)
 800f6dc:	5c8a      	ldrb	r2, [r1, r2]
 800f6de:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	7bdb      	ldrb	r3, [r3, #15]
 800f6e4:	73fb      	strb	r3, [r7, #15]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	330b      	adds	r3, #11
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	330f      	adds	r3, #15
 800f6f2:	4a10      	ldr	r2, [pc, #64]	@ (800f734 <shift_sub_rows+0x130>)
 800f6f4:	5c52      	ldrb	r2, [r2, r1]
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	4619      	mov	r1, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	330b      	adds	r3, #11
 800f704:	4a0b      	ldr	r2, [pc, #44]	@ (800f734 <shift_sub_rows+0x130>)
 800f706:	5c52      	ldrb	r2, [r2, r1]
 800f708:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3303      	adds	r3, #3
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	4619      	mov	r1, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3307      	adds	r3, #7
 800f716:	4a07      	ldr	r2, [pc, #28]	@ (800f734 <shift_sub_rows+0x130>)
 800f718:	5c52      	ldrb	r2, [r2, r1]
 800f71a:	701a      	strb	r2, [r3, #0]
 800f71c:	7bfa      	ldrb	r2, [r7, #15]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	3303      	adds	r3, #3
 800f722:	4904      	ldr	r1, [pc, #16]	@ (800f734 <shift_sub_rows+0x130>)
 800f724:	5c8a      	ldrb	r2, [r1, r2]
 800f726:	701a      	strb	r2, [r3, #0]
}
 800f728:	bf00      	nop
 800f72a:	3714      	adds	r7, #20
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bc80      	pop	{r7}
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	080293c4 	.word	0x080293c4

0800f738 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800f740:	f107 0308 	add.w	r3, r7, #8
 800f744:	6879      	ldr	r1, [r7, #4]
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff fd6c 	bl	800f224 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f74c:	7a3b      	ldrb	r3, [r7, #8]
 800f74e:	461a      	mov	r2, r3
 800f750:	4b9a      	ldr	r3, [pc, #616]	@ (800f9bc <mix_sub_columns+0x284>)
 800f752:	5c9a      	ldrb	r2, [r3, r2]
 800f754:	7b7b      	ldrb	r3, [r7, #13]
 800f756:	4619      	mov	r1, r3
 800f758:	4b99      	ldr	r3, [pc, #612]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f75a:	5c5b      	ldrb	r3, [r3, r1]
 800f75c:	4053      	eors	r3, r2
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	7cbb      	ldrb	r3, [r7, #18]
 800f762:	4619      	mov	r1, r3
 800f764:	4b97      	ldr	r3, [pc, #604]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f766:	5c5b      	ldrb	r3, [r3, r1]
 800f768:	4053      	eors	r3, r2
 800f76a:	b2da      	uxtb	r2, r3
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	4619      	mov	r1, r3
 800f770:	4b94      	ldr	r3, [pc, #592]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f772:	5c5b      	ldrb	r3, [r3, r1]
 800f774:	4053      	eors	r3, r2
 800f776:	b2da      	uxtb	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f77c:	7a3b      	ldrb	r3, [r7, #8]
 800f77e:	461a      	mov	r2, r3
 800f780:	4b90      	ldr	r3, [pc, #576]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f782:	5c9a      	ldrb	r2, [r3, r2]
 800f784:	7b7b      	ldrb	r3, [r7, #13]
 800f786:	4619      	mov	r1, r3
 800f788:	4b8c      	ldr	r3, [pc, #560]	@ (800f9bc <mix_sub_columns+0x284>)
 800f78a:	5c5b      	ldrb	r3, [r3, r1]
 800f78c:	4053      	eors	r3, r2
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	7cbb      	ldrb	r3, [r7, #18]
 800f792:	4619      	mov	r1, r3
 800f794:	4b8a      	ldr	r3, [pc, #552]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f796:	5c5b      	ldrb	r3, [r3, r1]
 800f798:	4053      	eors	r3, r2
 800f79a:	b2d9      	uxtb	r1, r3
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b88      	ldr	r3, [pc, #544]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f7a2:	5c9a      	ldrb	r2, [r3, r2]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	404a      	eors	r2, r1
 800f7aa:	b2d2      	uxtb	r2, r2
 800f7ac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f7ae:	7a3b      	ldrb	r3, [r7, #8]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4b84      	ldr	r3, [pc, #528]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f7b4:	5c9a      	ldrb	r2, [r3, r2]
 800f7b6:	7b7b      	ldrb	r3, [r7, #13]
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	4b82      	ldr	r3, [pc, #520]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f7bc:	5c5b      	ldrb	r3, [r3, r1]
 800f7be:	4053      	eors	r3, r2
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	7cbb      	ldrb	r3, [r7, #18]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4b7d      	ldr	r3, [pc, #500]	@ (800f9bc <mix_sub_columns+0x284>)
 800f7c8:	5c5b      	ldrb	r3, [r3, r1]
 800f7ca:	4053      	eors	r3, r2
 800f7cc:	b2d9      	uxtb	r1, r3
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4b7b      	ldr	r3, [pc, #492]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f7d4:	5c9a      	ldrb	r2, [r3, r2]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	3302      	adds	r3, #2
 800f7da:	404a      	eors	r2, r1
 800f7dc:	b2d2      	uxtb	r2, r2
 800f7de:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f7e0:	7a3b      	ldrb	r3, [r7, #8]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	4b76      	ldr	r3, [pc, #472]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f7e6:	5c9a      	ldrb	r2, [r3, r2]
 800f7e8:	7b7b      	ldrb	r3, [r7, #13]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	4b75      	ldr	r3, [pc, #468]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f7ee:	5c5b      	ldrb	r3, [r3, r1]
 800f7f0:	4053      	eors	r3, r2
 800f7f2:	b2da      	uxtb	r2, r3
 800f7f4:	7cbb      	ldrb	r3, [r7, #18]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4b72      	ldr	r3, [pc, #456]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f7fa:	5c5b      	ldrb	r3, [r3, r1]
 800f7fc:	4053      	eors	r3, r2
 800f7fe:	b2d9      	uxtb	r1, r3
 800f800:	7dfb      	ldrb	r3, [r7, #23]
 800f802:	461a      	mov	r2, r3
 800f804:	4b6d      	ldr	r3, [pc, #436]	@ (800f9bc <mix_sub_columns+0x284>)
 800f806:	5c9a      	ldrb	r2, [r3, r2]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3303      	adds	r3, #3
 800f80c:	404a      	eors	r2, r1
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f812:	7b3b      	ldrb	r3, [r7, #12]
 800f814:	461a      	mov	r2, r3
 800f816:	4b69      	ldr	r3, [pc, #420]	@ (800f9bc <mix_sub_columns+0x284>)
 800f818:	5c9a      	ldrb	r2, [r3, r2]
 800f81a:	7c7b      	ldrb	r3, [r7, #17]
 800f81c:	4619      	mov	r1, r3
 800f81e:	4b68      	ldr	r3, [pc, #416]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f820:	5c5b      	ldrb	r3, [r3, r1]
 800f822:	4053      	eors	r3, r2
 800f824:	b2da      	uxtb	r2, r3
 800f826:	7dbb      	ldrb	r3, [r7, #22]
 800f828:	4619      	mov	r1, r3
 800f82a:	4b66      	ldr	r3, [pc, #408]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f82c:	5c5b      	ldrb	r3, [r3, r1]
 800f82e:	4053      	eors	r3, r2
 800f830:	b2d9      	uxtb	r1, r3
 800f832:	7afb      	ldrb	r3, [r7, #11]
 800f834:	461a      	mov	r2, r3
 800f836:	4b63      	ldr	r3, [pc, #396]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f838:	5c9a      	ldrb	r2, [r3, r2]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3304      	adds	r3, #4
 800f83e:	404a      	eors	r2, r1
 800f840:	b2d2      	uxtb	r2, r2
 800f842:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f844:	7b3b      	ldrb	r3, [r7, #12]
 800f846:	461a      	mov	r2, r3
 800f848:	4b5e      	ldr	r3, [pc, #376]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f84a:	5c9a      	ldrb	r2, [r3, r2]
 800f84c:	7c7b      	ldrb	r3, [r7, #17]
 800f84e:	4619      	mov	r1, r3
 800f850:	4b5a      	ldr	r3, [pc, #360]	@ (800f9bc <mix_sub_columns+0x284>)
 800f852:	5c5b      	ldrb	r3, [r3, r1]
 800f854:	4053      	eors	r3, r2
 800f856:	b2da      	uxtb	r2, r3
 800f858:	7dbb      	ldrb	r3, [r7, #22]
 800f85a:	4619      	mov	r1, r3
 800f85c:	4b58      	ldr	r3, [pc, #352]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f85e:	5c5b      	ldrb	r3, [r3, r1]
 800f860:	4053      	eors	r3, r2
 800f862:	b2d9      	uxtb	r1, r3
 800f864:	7afb      	ldrb	r3, [r7, #11]
 800f866:	461a      	mov	r2, r3
 800f868:	4b56      	ldr	r3, [pc, #344]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f86a:	5c9a      	ldrb	r2, [r3, r2]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3305      	adds	r3, #5
 800f870:	404a      	eors	r2, r1
 800f872:	b2d2      	uxtb	r2, r2
 800f874:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f876:	7b3b      	ldrb	r3, [r7, #12]
 800f878:	461a      	mov	r2, r3
 800f87a:	4b52      	ldr	r3, [pc, #328]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f87c:	5c9a      	ldrb	r2, [r3, r2]
 800f87e:	7c7b      	ldrb	r3, [r7, #17]
 800f880:	4619      	mov	r1, r3
 800f882:	4b50      	ldr	r3, [pc, #320]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f884:	5c5b      	ldrb	r3, [r3, r1]
 800f886:	4053      	eors	r3, r2
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	7dbb      	ldrb	r3, [r7, #22]
 800f88c:	4619      	mov	r1, r3
 800f88e:	4b4b      	ldr	r3, [pc, #300]	@ (800f9bc <mix_sub_columns+0x284>)
 800f890:	5c5b      	ldrb	r3, [r3, r1]
 800f892:	4053      	eors	r3, r2
 800f894:	b2d9      	uxtb	r1, r3
 800f896:	7afb      	ldrb	r3, [r7, #11]
 800f898:	461a      	mov	r2, r3
 800f89a:	4b49      	ldr	r3, [pc, #292]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f89c:	5c9a      	ldrb	r2, [r3, r2]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3306      	adds	r3, #6
 800f8a2:	404a      	eors	r2, r1
 800f8a4:	b2d2      	uxtb	r2, r2
 800f8a6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f8a8:	7b3b      	ldrb	r3, [r7, #12]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4b44      	ldr	r3, [pc, #272]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f8ae:	5c9a      	ldrb	r2, [r3, r2]
 800f8b0:	7c7b      	ldrb	r3, [r7, #17]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4b43      	ldr	r3, [pc, #268]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f8b6:	5c5b      	ldrb	r3, [r3, r1]
 800f8b8:	4053      	eors	r3, r2
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	7dbb      	ldrb	r3, [r7, #22]
 800f8be:	4619      	mov	r1, r3
 800f8c0:	4b40      	ldr	r3, [pc, #256]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f8c2:	5c5b      	ldrb	r3, [r3, r1]
 800f8c4:	4053      	eors	r3, r2
 800f8c6:	b2d9      	uxtb	r1, r3
 800f8c8:	7afb      	ldrb	r3, [r7, #11]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4b3b      	ldr	r3, [pc, #236]	@ (800f9bc <mix_sub_columns+0x284>)
 800f8ce:	5c9a      	ldrb	r2, [r3, r2]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3307      	adds	r3, #7
 800f8d4:	404a      	eors	r2, r1
 800f8d6:	b2d2      	uxtb	r2, r2
 800f8d8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f8da:	7c3b      	ldrb	r3, [r7, #16]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b37      	ldr	r3, [pc, #220]	@ (800f9bc <mix_sub_columns+0x284>)
 800f8e0:	5c9a      	ldrb	r2, [r3, r2]
 800f8e2:	7d7b      	ldrb	r3, [r7, #21]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4b36      	ldr	r3, [pc, #216]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f8e8:	5c5b      	ldrb	r3, [r3, r1]
 800f8ea:	4053      	eors	r3, r2
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	7abb      	ldrb	r3, [r7, #10]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4b34      	ldr	r3, [pc, #208]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f8f4:	5c5b      	ldrb	r3, [r3, r1]
 800f8f6:	4053      	eors	r3, r2
 800f8f8:	b2d9      	uxtb	r1, r3
 800f8fa:	7bfb      	ldrb	r3, [r7, #15]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4b31      	ldr	r3, [pc, #196]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f900:	5c9a      	ldrb	r2, [r3, r2]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	3308      	adds	r3, #8
 800f906:	404a      	eors	r2, r1
 800f908:	b2d2      	uxtb	r2, r2
 800f90a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f90c:	7c3b      	ldrb	r3, [r7, #16]
 800f90e:	461a      	mov	r2, r3
 800f910:	4b2c      	ldr	r3, [pc, #176]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f912:	5c9a      	ldrb	r2, [r3, r2]
 800f914:	7d7b      	ldrb	r3, [r7, #21]
 800f916:	4619      	mov	r1, r3
 800f918:	4b28      	ldr	r3, [pc, #160]	@ (800f9bc <mix_sub_columns+0x284>)
 800f91a:	5c5b      	ldrb	r3, [r3, r1]
 800f91c:	4053      	eors	r3, r2
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	7abb      	ldrb	r3, [r7, #10]
 800f922:	4619      	mov	r1, r3
 800f924:	4b26      	ldr	r3, [pc, #152]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f926:	5c5b      	ldrb	r3, [r3, r1]
 800f928:	4053      	eors	r3, r2
 800f92a:	b2d9      	uxtb	r1, r3
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
 800f92e:	461a      	mov	r2, r3
 800f930:	4b24      	ldr	r3, [pc, #144]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f932:	5c9a      	ldrb	r2, [r3, r2]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3309      	adds	r3, #9
 800f938:	404a      	eors	r2, r1
 800f93a:	b2d2      	uxtb	r2, r2
 800f93c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f93e:	7c3b      	ldrb	r3, [r7, #16]
 800f940:	461a      	mov	r2, r3
 800f942:	4b20      	ldr	r3, [pc, #128]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f944:	5c9a      	ldrb	r2, [r3, r2]
 800f946:	7d7b      	ldrb	r3, [r7, #21]
 800f948:	4619      	mov	r1, r3
 800f94a:	4b1e      	ldr	r3, [pc, #120]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f94c:	5c5b      	ldrb	r3, [r3, r1]
 800f94e:	4053      	eors	r3, r2
 800f950:	b2da      	uxtb	r2, r3
 800f952:	7abb      	ldrb	r3, [r7, #10]
 800f954:	4619      	mov	r1, r3
 800f956:	4b19      	ldr	r3, [pc, #100]	@ (800f9bc <mix_sub_columns+0x284>)
 800f958:	5c5b      	ldrb	r3, [r3, r1]
 800f95a:	4053      	eors	r3, r2
 800f95c:	b2d9      	uxtb	r1, r3
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	461a      	mov	r2, r3
 800f962:	4b17      	ldr	r3, [pc, #92]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f964:	5c9a      	ldrb	r2, [r3, r2]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	330a      	adds	r3, #10
 800f96a:	404a      	eors	r2, r1
 800f96c:	b2d2      	uxtb	r2, r2
 800f96e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f970:	7c3b      	ldrb	r3, [r7, #16]
 800f972:	461a      	mov	r2, r3
 800f974:	4b12      	ldr	r3, [pc, #72]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f976:	5c9a      	ldrb	r2, [r3, r2]
 800f978:	7d7b      	ldrb	r3, [r7, #21]
 800f97a:	4619      	mov	r1, r3
 800f97c:	4b11      	ldr	r3, [pc, #68]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f97e:	5c5b      	ldrb	r3, [r3, r1]
 800f980:	4053      	eors	r3, r2
 800f982:	b2da      	uxtb	r2, r3
 800f984:	7abb      	ldrb	r3, [r7, #10]
 800f986:	4619      	mov	r1, r3
 800f988:	4b0e      	ldr	r3, [pc, #56]	@ (800f9c4 <mix_sub_columns+0x28c>)
 800f98a:	5c5b      	ldrb	r3, [r3, r1]
 800f98c:	4053      	eors	r3, r2
 800f98e:	b2d9      	uxtb	r1, r3
 800f990:	7bfb      	ldrb	r3, [r7, #15]
 800f992:	461a      	mov	r2, r3
 800f994:	4b09      	ldr	r3, [pc, #36]	@ (800f9bc <mix_sub_columns+0x284>)
 800f996:	5c9a      	ldrb	r2, [r3, r2]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	330b      	adds	r3, #11
 800f99c:	404a      	eors	r2, r1
 800f99e:	b2d2      	uxtb	r2, r2
 800f9a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f9a2:	7d3b      	ldrb	r3, [r7, #20]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4b05      	ldr	r3, [pc, #20]	@ (800f9bc <mix_sub_columns+0x284>)
 800f9a8:	5c9a      	ldrb	r2, [r3, r2]
 800f9aa:	7a7b      	ldrb	r3, [r7, #9]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4b04      	ldr	r3, [pc, #16]	@ (800f9c0 <mix_sub_columns+0x288>)
 800f9b0:	5c5b      	ldrb	r3, [r3, r1]
 800f9b2:	4053      	eors	r3, r2
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	7bbb      	ldrb	r3, [r7, #14]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	e005      	b.n	800f9c8 <mix_sub_columns+0x290>
 800f9bc:	080294c4 	.word	0x080294c4
 800f9c0:	080295c4 	.word	0x080295c4
 800f9c4:	080293c4 	.word	0x080293c4
 800f9c8:	4b2d      	ldr	r3, [pc, #180]	@ (800fa80 <mix_sub_columns+0x348>)
 800f9ca:	5c5b      	ldrb	r3, [r3, r1]
 800f9cc:	4053      	eors	r3, r2
 800f9ce:	b2d9      	uxtb	r1, r3
 800f9d0:	7cfb      	ldrb	r3, [r7, #19]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800fa80 <mix_sub_columns+0x348>)
 800f9d6:	5c9a      	ldrb	r2, [r3, r2]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	330c      	adds	r3, #12
 800f9dc:	404a      	eors	r2, r1
 800f9de:	b2d2      	uxtb	r2, r2
 800f9e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f9e2:	7d3b      	ldrb	r3, [r7, #20]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b26      	ldr	r3, [pc, #152]	@ (800fa80 <mix_sub_columns+0x348>)
 800f9e8:	5c9a      	ldrb	r2, [r3, r2]
 800f9ea:	7a7b      	ldrb	r3, [r7, #9]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4b25      	ldr	r3, [pc, #148]	@ (800fa84 <mix_sub_columns+0x34c>)
 800f9f0:	5c5b      	ldrb	r3, [r3, r1]
 800f9f2:	4053      	eors	r3, r2
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	7bbb      	ldrb	r3, [r7, #14]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4b23      	ldr	r3, [pc, #140]	@ (800fa88 <mix_sub_columns+0x350>)
 800f9fc:	5c5b      	ldrb	r3, [r3, r1]
 800f9fe:	4053      	eors	r3, r2
 800fa00:	b2d9      	uxtb	r1, r3
 800fa02:	7cfb      	ldrb	r3, [r7, #19]
 800fa04:	461a      	mov	r2, r3
 800fa06:	4b1e      	ldr	r3, [pc, #120]	@ (800fa80 <mix_sub_columns+0x348>)
 800fa08:	5c9a      	ldrb	r2, [r3, r2]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	330d      	adds	r3, #13
 800fa0e:	404a      	eors	r2, r1
 800fa10:	b2d2      	uxtb	r2, r2
 800fa12:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800fa14:	7d3b      	ldrb	r3, [r7, #20]
 800fa16:	461a      	mov	r2, r3
 800fa18:	4b19      	ldr	r3, [pc, #100]	@ (800fa80 <mix_sub_columns+0x348>)
 800fa1a:	5c9a      	ldrb	r2, [r3, r2]
 800fa1c:	7a7b      	ldrb	r3, [r7, #9]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4b17      	ldr	r3, [pc, #92]	@ (800fa80 <mix_sub_columns+0x348>)
 800fa22:	5c5b      	ldrb	r3, [r3, r1]
 800fa24:	4053      	eors	r3, r2
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4b15      	ldr	r3, [pc, #84]	@ (800fa84 <mix_sub_columns+0x34c>)
 800fa2e:	5c5b      	ldrb	r3, [r3, r1]
 800fa30:	4053      	eors	r3, r2
 800fa32:	b2d9      	uxtb	r1, r3
 800fa34:	7cfb      	ldrb	r3, [r7, #19]
 800fa36:	461a      	mov	r2, r3
 800fa38:	4b13      	ldr	r3, [pc, #76]	@ (800fa88 <mix_sub_columns+0x350>)
 800fa3a:	5c9a      	ldrb	r2, [r3, r2]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	330e      	adds	r3, #14
 800fa40:	404a      	eors	r2, r1
 800fa42:	b2d2      	uxtb	r2, r2
 800fa44:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800fa46:	7d3b      	ldrb	r3, [r7, #20]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fa88 <mix_sub_columns+0x350>)
 800fa4c:	5c9a      	ldrb	r2, [r3, r2]
 800fa4e:	7a7b      	ldrb	r3, [r7, #9]
 800fa50:	4619      	mov	r1, r3
 800fa52:	4b0b      	ldr	r3, [pc, #44]	@ (800fa80 <mix_sub_columns+0x348>)
 800fa54:	5c5b      	ldrb	r3, [r3, r1]
 800fa56:	4053      	eors	r3, r2
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	4b08      	ldr	r3, [pc, #32]	@ (800fa80 <mix_sub_columns+0x348>)
 800fa60:	5c5b      	ldrb	r3, [r3, r1]
 800fa62:	4053      	eors	r3, r2
 800fa64:	b2d9      	uxtb	r1, r3
 800fa66:	7cfb      	ldrb	r3, [r7, #19]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4b06      	ldr	r3, [pc, #24]	@ (800fa84 <mix_sub_columns+0x34c>)
 800fa6c:	5c9a      	ldrb	r2, [r3, r2]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	330f      	adds	r3, #15
 800fa72:	404a      	eors	r2, r1
 800fa74:	b2d2      	uxtb	r2, r2
 800fa76:	701a      	strb	r2, [r3, #0]
  }
 800fa78:	bf00      	nop
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	080293c4 	.word	0x080293c4
 800fa84:	080294c4 	.word	0x080294c4
 800fa88:	080295c4 	.word	0x080295c4

0800fa8c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	460b      	mov	r3, r1
 800fa96:	607a      	str	r2, [r7, #4]
 800fa98:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800fa9a:	7afb      	ldrb	r3, [r7, #11]
 800fa9c:	3b10      	subs	r3, #16
 800fa9e:	2b10      	cmp	r3, #16
 800faa0:	bf8c      	ite	hi
 800faa2:	2201      	movhi	r2, #1
 800faa4:	2200      	movls	r2, #0
 800faa6:	b2d2      	uxtb	r2, r2
 800faa8:	2a00      	cmp	r2, #0
 800faaa:	d10b      	bne.n	800fac4 <lorawan_aes_set_key+0x38>
 800faac:	4a64      	ldr	r2, [pc, #400]	@ (800fc40 <lorawan_aes_set_key+0x1b4>)
 800faae:	fa22 f303 	lsr.w	r3, r2, r3
 800fab2:	f003 0301 	and.w	r3, r3, #1
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	bf14      	ite	ne
 800faba:	2301      	movne	r3, #1
 800fabc:	2300      	moveq	r3, #0
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d105      	bne.n	800fad0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800facc:	23ff      	movs	r3, #255	@ 0xff
 800face:	e0b2      	b.n	800fc36 <lorawan_aes_set_key+0x1aa>
        break;
 800fad0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	7afa      	ldrb	r2, [r7, #11]
 800fad6:	68f9      	ldr	r1, [r7, #12]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff fbfc 	bl	800f2d6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fade:	7afb      	ldrb	r3, [r7, #11]
 800fae0:	331c      	adds	r3, #28
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800fae8:	7c7b      	ldrb	r3, [r7, #17]
 800faea:	091b      	lsrs	r3, r3, #4
 800faec:	b2db      	uxtb	r3, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800faf8:	7afb      	ldrb	r3, [r7, #11]
 800fafa:	75fb      	strb	r3, [r7, #23]
 800fafc:	2301      	movs	r3, #1
 800fafe:	75bb      	strb	r3, [r7, #22]
 800fb00:	e093      	b.n	800fc2a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
 800fb04:	3b04      	subs	r3, #4
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	5cd3      	ldrb	r3, [r2, r3]
 800fb0a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
 800fb0e:	3b03      	subs	r3, #3
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	5cd3      	ldrb	r3, [r2, r3]
 800fb14:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
 800fb18:	3b02      	subs	r3, #2
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	5cd3      	ldrb	r3, [r2, r3]
 800fb1e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	5cd3      	ldrb	r3, [r2, r3]
 800fb28:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800fb2a:	7dfb      	ldrb	r3, [r7, #23]
 800fb2c:	7afa      	ldrb	r2, [r7, #11]
 800fb2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb32:	fb01 f202 	mul.w	r2, r1, r2
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d127      	bne.n	800fb8e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800fb3e:	7d7b      	ldrb	r3, [r7, #21]
 800fb40:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800fb42:	7d3b      	ldrb	r3, [r7, #20]
 800fb44:	4a3f      	ldr	r2, [pc, #252]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fb46:	5cd2      	ldrb	r2, [r2, r3]
 800fb48:	7dbb      	ldrb	r3, [r7, #22]
 800fb4a:	4053      	eors	r3, r2
 800fb4c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800fb4e:	7cfb      	ldrb	r3, [r7, #19]
 800fb50:	4a3c      	ldr	r2, [pc, #240]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fb52:	5cd3      	ldrb	r3, [r2, r3]
 800fb54:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800fb56:	7cbb      	ldrb	r3, [r7, #18]
 800fb58:	4a3a      	ldr	r2, [pc, #232]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fb5a:	5cd3      	ldrb	r3, [r2, r3]
 800fb5c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800fb5e:	7c3b      	ldrb	r3, [r7, #16]
 800fb60:	4a38      	ldr	r2, [pc, #224]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fb62:	5cd3      	ldrb	r3, [r2, r3]
 800fb64:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800fb66:	7dbb      	ldrb	r3, [r7, #22]
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	b25a      	sxtb	r2, r3
 800fb6c:	7dbb      	ldrb	r3, [r7, #22]
 800fb6e:	09db      	lsrs	r3, r3, #7
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	4619      	mov	r1, r3
 800fb74:	0049      	lsls	r1, r1, #1
 800fb76:	440b      	add	r3, r1
 800fb78:	4619      	mov	r1, r3
 800fb7a:	00c8      	lsls	r0, r1, #3
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	4603      	mov	r3, r0
 800fb80:	440b      	add	r3, r1
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	b25b      	sxtb	r3, r3
 800fb86:	4053      	eors	r3, r2
 800fb88:	b25b      	sxtb	r3, r3
 800fb8a:	75bb      	strb	r3, [r7, #22]
 800fb8c:	e01c      	b.n	800fbc8 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800fb8e:	7afb      	ldrb	r3, [r7, #11]
 800fb90:	2b18      	cmp	r3, #24
 800fb92:	d919      	bls.n	800fbc8 <lorawan_aes_set_key+0x13c>
 800fb94:	7dfb      	ldrb	r3, [r7, #23]
 800fb96:	7afa      	ldrb	r2, [r7, #11]
 800fb98:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb9c:	fb01 f202 	mul.w	r2, r1, r2
 800fba0:	1a9b      	subs	r3, r3, r2
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	2b10      	cmp	r3, #16
 800fba6:	d10f      	bne.n	800fbc8 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800fba8:	7d7b      	ldrb	r3, [r7, #21]
 800fbaa:	4a26      	ldr	r2, [pc, #152]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fbac:	5cd3      	ldrb	r3, [r2, r3]
 800fbae:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800fbb0:	7d3b      	ldrb	r3, [r7, #20]
 800fbb2:	4a24      	ldr	r2, [pc, #144]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fbb4:	5cd3      	ldrb	r3, [r2, r3]
 800fbb6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800fbb8:	7cfb      	ldrb	r3, [r7, #19]
 800fbba:	4a22      	ldr	r2, [pc, #136]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fbbc:	5cd3      	ldrb	r3, [r2, r3]
 800fbbe:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800fbc0:	7cbb      	ldrb	r3, [r7, #18]
 800fbc2:	4a20      	ldr	r2, [pc, #128]	@ (800fc44 <lorawan_aes_set_key+0x1b8>)
 800fbc4:	5cd3      	ldrb	r3, [r2, r3]
 800fbc6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800fbc8:	7dfa      	ldrb	r2, [r7, #23]
 800fbca:	7afb      	ldrb	r3, [r7, #11]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fbd0:	7c3b      	ldrb	r3, [r7, #16]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	5cd1      	ldrb	r1, [r2, r3]
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	7d7a      	ldrb	r2, [r7, #21]
 800fbda:	404a      	eors	r2, r1
 800fbdc:	b2d1      	uxtb	r1, r2
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fbe2:	7c3b      	ldrb	r3, [r7, #16]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	5cd1      	ldrb	r1, [r2, r3]
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	3301      	adds	r3, #1
 800fbee:	7d3a      	ldrb	r2, [r7, #20]
 800fbf0:	404a      	eors	r2, r1
 800fbf2:	b2d1      	uxtb	r1, r2
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fbf8:	7c3b      	ldrb	r3, [r7, #16]
 800fbfa:	3302      	adds	r3, #2
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	5cd1      	ldrb	r1, [r2, r3]
 800fc00:	7dfb      	ldrb	r3, [r7, #23]
 800fc02:	3302      	adds	r3, #2
 800fc04:	7cfa      	ldrb	r2, [r7, #19]
 800fc06:	404a      	eors	r2, r1
 800fc08:	b2d1      	uxtb	r1, r2
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fc0e:	7c3b      	ldrb	r3, [r7, #16]
 800fc10:	3303      	adds	r3, #3
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	5cd1      	ldrb	r1, [r2, r3]
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
 800fc18:	3303      	adds	r3, #3
 800fc1a:	7cba      	ldrb	r2, [r7, #18]
 800fc1c:	404a      	eors	r2, r1
 800fc1e:	b2d1      	uxtb	r1, r2
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fc24:	7dfb      	ldrb	r3, [r7, #23]
 800fc26:	3304      	adds	r3, #4
 800fc28:	75fb      	strb	r3, [r7, #23]
 800fc2a:	7dfa      	ldrb	r2, [r7, #23]
 800fc2c:	7c7b      	ldrb	r3, [r7, #17]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	f4ff af67 	bcc.w	800fb02 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	00010101 	.word	0x00010101
 800fc44:	080293c4 	.word	0x080293c4

0800fc48 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b08a      	sub	sp, #40	@ 0x28
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d038      	beq.n	800fcd0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	f107 0314 	add.w	r3, r7, #20
 800fc64:	68f9      	ldr	r1, [r7, #12]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff fc07 	bl	800f47a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc72:	e014      	b.n	800fc9e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fd5d 	bl	800f738 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fc84:	0112      	lsls	r2, r2, #4
 800fc86:	441a      	add	r2, r3
 800fc88:	f107 0314 	add.w	r3, r7, #20
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff fcab 	bl	800f5ea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc98:	3301      	adds	r3, #1
 800fc9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800fca4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d3e3      	bcc.n	800fc74 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fcac:	f107 0314 	add.w	r3, r7, #20
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff fca7 	bl	800f604 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fcbc:	0112      	lsls	r2, r2, #4
 800fcbe:	441a      	add	r2, r3
 800fcc0:	f107 0314 	add.w	r3, r7, #20
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	68b8      	ldr	r0, [r7, #8]
 800fcc8:	f7ff fbd7 	bl	800f47a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	e000      	b.n	800fcd2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800fcd0:	23ff      	movs	r3, #255	@ 0xff
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3728      	adds	r7, #40	@ 0x28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
	...

0800fcdc <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800fcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcde:	b0a1      	sub	sp, #132	@ 0x84
 800fce0:	af12      	add	r7, sp, #72	@ 0x48
 800fce2:	4603      	mov	r3, r0
 800fce4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fce8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fcec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 fa12 	bl	801011c <SecureElementGetKeyByID>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d174      	bne.n	800fde8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fcfe:	2300      	movs	r3, #0
 800fd00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fd04:	e06c      	b.n	800fde0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800fd06:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fd0a:	4939      	ldr	r1, [pc, #228]	@ (800fdf0 <PrintKey+0x114>)
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	005b      	lsls	r3, r3, #1
 800fd10:	4413      	add	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	440b      	add	r3, r1
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d15a      	bne.n	800fdd6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800fd20:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fd24:	4932      	ldr	r1, [pc, #200]	@ (800fdf0 <PrintKey+0x114>)
 800fd26:	4613      	mov	r3, r2
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	4413      	add	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	440b      	add	r3, r1
 800fd30:	3308      	adds	r3, #8
 800fd32:	6819      	ldr	r1, [r3, #0]
 800fd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd36:	785b      	ldrb	r3, [r3, #1]
 800fd38:	461d      	mov	r5, r3
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3c:	789b      	ldrb	r3, [r3, #2]
 800fd3e:	461e      	mov	r6, r3
 800fd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd42:	78db      	ldrb	r3, [r3, #3]
 800fd44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd48:	791b      	ldrb	r3, [r3, #4]
 800fd4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4e:	795b      	ldrb	r3, [r3, #5]
 800fd50:	623b      	str	r3, [r7, #32]
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	799b      	ldrb	r3, [r3, #6]
 800fd56:	61fb      	str	r3, [r7, #28]
 800fd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5a:	79db      	ldrb	r3, [r3, #7]
 800fd5c:	61bb      	str	r3, [r7, #24]
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd60:	7a1b      	ldrb	r3, [r3, #8]
 800fd62:	617b      	str	r3, [r7, #20]
 800fd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd66:	7a5b      	ldrb	r3, [r3, #9]
 800fd68:	613b      	str	r3, [r7, #16]
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6c:	7a9b      	ldrb	r3, [r3, #10]
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd72:	7adb      	ldrb	r3, [r3, #11]
 800fd74:	60bb      	str	r3, [r7, #8]
 800fd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd78:	7b1b      	ldrb	r3, [r3, #12]
 800fd7a:	607b      	str	r3, [r7, #4]
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7e:	7b5b      	ldrb	r3, [r3, #13]
 800fd80:	461c      	mov	r4, r3
 800fd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd84:	7b9b      	ldrb	r3, [r3, #14]
 800fd86:	4618      	mov	r0, r3
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	7bdb      	ldrb	r3, [r3, #15]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd90:	7c1b      	ldrb	r3, [r3, #16]
 800fd92:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fd96:	900e      	str	r0, [sp, #56]	@ 0x38
 800fd98:	940d      	str	r4, [sp, #52]	@ 0x34
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	920a      	str	r2, [sp, #40]	@ 0x28
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	9209      	str	r2, [sp, #36]	@ 0x24
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	9208      	str	r2, [sp, #32]
 800fdae:	69ba      	ldr	r2, [r7, #24]
 800fdb0:	9207      	str	r2, [sp, #28]
 800fdb2:	69fa      	ldr	r2, [r7, #28]
 800fdb4:	9206      	str	r2, [sp, #24]
 800fdb6:	6a3a      	ldr	r2, [r7, #32]
 800fdb8:	9205      	str	r2, [sp, #20]
 800fdba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdbc:	9204      	str	r2, [sp, #16]
 800fdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc0:	9303      	str	r3, [sp, #12]
 800fdc2:	9602      	str	r6, [sp, #8]
 800fdc4:	9501      	str	r5, [sp, #4]
 800fdc6:	9100      	str	r1, [sp, #0]
 800fdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800fdf4 <PrintKey+0x118>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2100      	movs	r1, #0
 800fdce:	2002      	movs	r0, #2
 800fdd0:	f014 fde6 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
 800fdd4:	e008      	b.n	800fde8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fdd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdda:	3301      	adds	r3, #1
 800fddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fde0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fde4:	2b0a      	cmp	r3, #10
 800fde6:	d98e      	bls.n	800fd06 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800fde8:	373c      	adds	r7, #60	@ 0x3c
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	080296c4 	.word	0x080296c4
 800fdf4:	080289b8 	.word	0x080289b8

0800fdf8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800fdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdfa:	b091      	sub	sp, #68	@ 0x44
 800fdfc:	af08      	add	r7, sp, #32
 800fdfe:	4603      	mov	r3, r0
 800fe00:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800fe06:	f107 0310 	add.w	r3, r7, #16
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 fbda 	bl	80105c4 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800fe10:	7c3b      	ldrb	r3, [r7, #16]
 800fe12:	7c7a      	ldrb	r2, [r7, #17]
 800fe14:	7cb9      	ldrb	r1, [r7, #18]
 800fe16:	7cf8      	ldrb	r0, [r7, #19]
 800fe18:	7d3c      	ldrb	r4, [r7, #20]
 800fe1a:	7d7d      	ldrb	r5, [r7, #21]
 800fe1c:	7dbe      	ldrb	r6, [r7, #22]
 800fe1e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800fe22:	f8cd c01c 	str.w	ip, [sp, #28]
 800fe26:	9606      	str	r6, [sp, #24]
 800fe28:	9505      	str	r5, [sp, #20]
 800fe2a:	9404      	str	r4, [sp, #16]
 800fe2c:	9003      	str	r0, [sp, #12]
 800fe2e:	9102      	str	r1, [sp, #8]
 800fe30:	9201      	str	r2, [sp, #4]
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	4b24      	ldr	r3, [pc, #144]	@ (800fec8 <PrintIds+0xd0>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	2100      	movs	r1, #0
 800fe3a:	2002      	movs	r0, #2
 800fe3c:	f014 fdb0 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800fe40:	f107 0318 	add.w	r3, r7, #24
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 fbed 	bl	8010624 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800fe4a:	7e3b      	ldrb	r3, [r7, #24]
 800fe4c:	7e7a      	ldrb	r2, [r7, #25]
 800fe4e:	7eb9      	ldrb	r1, [r7, #26]
 800fe50:	7ef8      	ldrb	r0, [r7, #27]
 800fe52:	7f3c      	ldrb	r4, [r7, #28]
 800fe54:	7f7d      	ldrb	r5, [r7, #29]
 800fe56:	7fbe      	ldrb	r6, [r7, #30]
 800fe58:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800fe5c:	f8cd c01c 	str.w	ip, [sp, #28]
 800fe60:	9606      	str	r6, [sp, #24]
 800fe62:	9505      	str	r5, [sp, #20]
 800fe64:	9404      	str	r4, [sp, #16]
 800fe66:	9003      	str	r0, [sp, #12]
 800fe68:	9102      	str	r1, [sp, #8]
 800fe6a:	9201      	str	r2, [sp, #4]
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	4b17      	ldr	r3, [pc, #92]	@ (800fecc <PrintIds+0xd4>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	2100      	movs	r1, #0
 800fe74:	2002      	movs	r0, #2
 800fe76:	f014 fd93 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800fe7a:	f107 020c 	add.w	r2, r7, #12
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	4611      	mov	r1, r2
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 fc00 	bl	8010688 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fe88:	f107 030c 	add.w	r3, r7, #12
 800fe8c:	3303      	adds	r3, #3
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	461a      	mov	r2, r3
 800fe92:	f107 030c 	add.w	r3, r7, #12
 800fe96:	3302      	adds	r3, #2
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	f107 030c 	add.w	r3, r7, #12
 800fea0:	3301      	adds	r3, #1
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f107 030c 	add.w	r3, r7, #12
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	9303      	str	r3, [sp, #12]
 800feae:	9002      	str	r0, [sp, #8]
 800feb0:	9101      	str	r1, [sp, #4]
 800feb2:	9200      	str	r2, [sp, #0]
 800feb4:	4b06      	ldr	r3, [pc, #24]	@ (800fed0 <PrintIds+0xd8>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	2100      	movs	r1, #0
 800feba:	2002      	movs	r0, #2
 800febc:	f014 fd70 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800fec0:	bf00      	nop
 800fec2:	3724      	adds	r7, #36	@ 0x24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec8:	08028a14 	.word	0x08028a14
 800fecc:	08028a54 	.word	0x08028a54
 800fed0:	08028a94 	.word	0x08028a94

0800fed4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	4603      	mov	r3, r0
 800fedc:	6039      	str	r1, [r7, #0]
 800fede:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fee0:	2300      	movs	r3, #0
 800fee2:	73fb      	strb	r3, [r7, #15]
 800fee4:	e01a      	b.n	800ff1c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fee6:	4b12      	ldr	r3, [pc, #72]	@ (800ff30 <GetKeyByID+0x5c>)
 800fee8:	6819      	ldr	r1, [r3, #0]
 800feea:	7bfa      	ldrb	r2, [r7, #15]
 800feec:	4613      	mov	r3, r2
 800feee:	011b      	lsls	r3, r3, #4
 800fef0:	4413      	add	r3, r2
 800fef2:	440b      	add	r3, r1
 800fef4:	3318      	adds	r3, #24
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	79fa      	ldrb	r2, [r7, #7]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d10b      	bne.n	800ff16 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800fefe:	4b0c      	ldr	r3, [pc, #48]	@ (800ff30 <GetKeyByID+0x5c>)
 800ff00:	6819      	ldr	r1, [r3, #0]
 800ff02:	7bfa      	ldrb	r2, [r7, #15]
 800ff04:	4613      	mov	r3, r2
 800ff06:	011b      	lsls	r3, r3, #4
 800ff08:	4413      	add	r3, r2
 800ff0a:	3318      	adds	r3, #24
 800ff0c:	18ca      	adds	r2, r1, r3
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ff12:	2300      	movs	r3, #0
 800ff14:	e006      	b.n	800ff24 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff16:	7bfb      	ldrb	r3, [r7, #15]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	73fb      	strb	r3, [r7, #15]
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	2b0a      	cmp	r3, #10
 800ff20:	d9e1      	bls.n	800fee6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ff22:	2303      	movs	r3, #3
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bc80      	pop	{r7}
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	20000990 	.word	0x20000990

0800ff34 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ff34:	b590      	push	{r4, r7, lr}
 800ff36:	b0d1      	sub	sp, #324	@ 0x144
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800ff3e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800ff42:	6020      	str	r0, [r4, #0]
 800ff44:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800ff48:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800ff4c:	6001      	str	r1, [r0, #0]
 800ff4e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ff52:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800ff56:	600a      	str	r2, [r1, #0]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff5e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800ff62:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ff64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff68:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d003      	beq.n	800ff7a <ComputeCmac+0x46>
 800ff72:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ff7a:	2302      	movs	r3, #2
 800ff7c:	e05d      	b.n	801003a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ff7e:	f107 0314 	add.w	r3, r7, #20
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe ff02 	bl	800ed8c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ff88:	f107 0210 	add.w	r2, r7, #16
 800ff8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff90:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	4611      	mov	r1, r2
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7ff ff9b 	bl	800fed4 <GetKeyByID>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ffa4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d144      	bne.n	8010036 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ffac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ffb0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	f107 0314 	add.w	r3, r7, #20
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fe fefd 	bl	800edbe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ffc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ffc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d009      	beq.n	800ffe6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ffd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ffd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ffda:	f107 0014 	add.w	r0, r7, #20
 800ffde:	2210      	movs	r2, #16
 800ffe0:	6819      	ldr	r1, [r3, #0]
 800ffe2:	f7fe fefb 	bl	800eddc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ffe6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ffea:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800ffee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fff2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fff6:	f107 0014 	add.w	r0, r7, #20
 800fffa:	6812      	ldr	r2, [r2, #0]
 800fffc:	6819      	ldr	r1, [r3, #0]
 800fffe:	f7fe feed 	bl	800eddc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010002:	f107 0214 	add.w	r2, r7, #20
 8010006:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801000a:	4611      	mov	r1, r2
 801000c:	4618      	mov	r0, r3
 801000e:	f7fe ffa7 	bl	800ef60 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8010012:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010016:	461a      	mov	r2, r3
 8010018:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 801001c:	021b      	lsls	r3, r3, #8
 801001e:	431a      	orrs	r2, r3
 8010020:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8010024:	041b      	lsls	r3, r3, #16
 8010026:	431a      	orrs	r2, r3
 8010028:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801002c:	061b      	lsls	r3, r3, #24
 801002e:	431a      	orrs	r2, r3
 8010030:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8010034:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8010036:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 801003a:	4618      	mov	r0, r3
 801003c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010040:	46bd      	mov	sp, r7
 8010042:	bd90      	pop	{r4, r7, pc}

08010044 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d101      	bne.n	8010056 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010052:	2302      	movs	r3, #2
 8010054:	e00a      	b.n	801006c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8010056:	4a07      	ldr	r2, [pc, #28]	@ (8010074 <SecureElementInit+0x30>)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 801005c:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <SecureElementInit+0x30>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	22d8      	movs	r2, #216	@ 0xd8
 8010062:	4905      	ldr	r1, [pc, #20]	@ (8010078 <SecureElementInit+0x34>)
 8010064:	4618      	mov	r0, r3
 8010066:	f00f fad6 	bl	801f616 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}
 8010074:	20000990 	.word	0x20000990
 8010078:	08029b4c 	.word	0x08029b4c

0801007c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 801008a:	f107 030c 	add.w	r3, r7, #12
 801008e:	4618      	mov	r0, r3
 8010090:	f000 fa98 	bl	80105c4 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8010094:	f107 0308 	add.w	r3, r7, #8
 8010098:	4619      	mov	r1, r3
 801009a:	2001      	movs	r0, #1
 801009c:	f000 faf4 	bl	8010688 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d024      	beq.n	80100f0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80100aa:	2300      	movs	r3, #0
 80100ac:	75bb      	strb	r3, [r7, #22]
 80100ae:	e00c      	b.n	80100ca <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 80100b0:	7dbb      	ldrb	r3, [r7, #22]
 80100b2:	3318      	adds	r3, #24
 80100b4:	443b      	add	r3, r7
 80100b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d002      	beq.n	80100c4 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 80100be:	2301      	movs	r3, #1
 80100c0:	75fb      	strb	r3, [r7, #23]
                break;
 80100c2:	e005      	b.n	80100d0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80100c4:	7dbb      	ldrb	r3, [r7, #22]
 80100c6:	3301      	adds	r3, #1
 80100c8:	75bb      	strb	r3, [r7, #22]
 80100ca:	7dbb      	ldrb	r3, [r7, #22]
 80100cc:	2b07      	cmp	r3, #7
 80100ce:	d9ef      	bls.n	80100b0 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 80100d0:	7dfb      	ldrb	r3, [r7, #23]
 80100d2:	f083 0301 	eor.w	r3, r3, #1
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d009      	beq.n	80100f0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 80100dc:	f107 020c 	add.w	r2, r7, #12
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4610      	mov	r0, r2
 80100e4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 80100e6:	f107 030c 	add.w	r3, r7, #12
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 fa52 	bl	8010594 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00c      	beq.n	8010110 <SecureElementInitMcuID+0x94>
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d109      	bne.n	8010110 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 80100fc:	f107 0208 	add.w	r2, r7, #8
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	4610      	mov	r0, r2
 8010104:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	4619      	mov	r1, r3
 801010a:	2001      	movs	r0, #1
 801010c:	f000 faa2 	bl	8010654 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010128:	2300      	movs	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
 801012c:	e01a      	b.n	8010164 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801012e:	4b12      	ldr	r3, [pc, #72]	@ (8010178 <SecureElementGetKeyByID+0x5c>)
 8010130:	6819      	ldr	r1, [r3, #0]
 8010132:	7bfa      	ldrb	r2, [r7, #15]
 8010134:	4613      	mov	r3, r2
 8010136:	011b      	lsls	r3, r3, #4
 8010138:	4413      	add	r3, r2
 801013a:	440b      	add	r3, r1
 801013c:	3318      	adds	r3, #24
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	79fa      	ldrb	r2, [r7, #7]
 8010142:	429a      	cmp	r2, r3
 8010144:	d10b      	bne.n	801015e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8010146:	4b0c      	ldr	r3, [pc, #48]	@ (8010178 <SecureElementGetKeyByID+0x5c>)
 8010148:	6819      	ldr	r1, [r3, #0]
 801014a:	7bfa      	ldrb	r2, [r7, #15]
 801014c:	4613      	mov	r3, r2
 801014e:	011b      	lsls	r3, r3, #4
 8010150:	4413      	add	r3, r2
 8010152:	3318      	adds	r3, #24
 8010154:	18ca      	adds	r2, r1, r3
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 801015a:	2300      	movs	r3, #0
 801015c:	e006      	b.n	801016c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	3301      	adds	r3, #1
 8010162:	73fb      	strb	r3, [r7, #15]
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	2b0a      	cmp	r3, #10
 8010168:	d9e1      	bls.n	801012e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801016a:	2303      	movs	r3, #3
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	bc80      	pop	{r7}
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	20000990 	.word	0x20000990

0801017c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 8010180:	2000      	movs	r0, #0
 8010182:	f7ff fdab 	bl	800fcdc <PrintKey>
    PrintKey( NWK_KEY );
 8010186:	2001      	movs	r0, #1
 8010188:	f7ff fda8 	bl	800fcdc <PrintKey>
    PrintKey( APP_S_KEY );
 801018c:	2009      	movs	r0, #9
 801018e:	f7ff fda5 	bl	800fcdc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8010192:	2008      	movs	r0, #8
 8010194:	f7ff fda2 	bl	800fcdc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 8010198:	2000      	movs	r0, #0
 801019a:	f7ff fe2d 	bl	800fdf8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 801019e:	2300      	movs	r3, #0
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80101ae:	200b      	movs	r0, #11
 80101b0:	f7ff fd94 	bl	800fcdc <PrintKey>
    PrintKey( MC_KE_KEY );
 80101b4:	200c      	movs	r0, #12
 80101b6:	f7ff fd91 	bl	800fcdc <PrintKey>
    PrintKey( APP_S_KEY );
 80101ba:	2009      	movs	r0, #9
 80101bc:	f7ff fd8e 	bl	800fcdc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80101c0:	2008      	movs	r0, #8
 80101c2:	f7ff fd8b 	bl	800fcdc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 80101c6:	200a      	movs	r0, #10
 80101c8:	f7ff fd88 	bl	800fcdc <PrintKey>
    PrintIds( mode );
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff fe12 	bl	800fdf8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	6039      	str	r1, [r7, #0]
 80101ea:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80101f2:	2302      	movs	r3, #2
 80101f4:	e04c      	b.n	8010290 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80101f6:	2300      	movs	r3, #0
 80101f8:	77fb      	strb	r3, [r7, #31]
 80101fa:	e045      	b.n	8010288 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80101fc:	4b26      	ldr	r3, [pc, #152]	@ (8010298 <SecureElementSetKey+0xb8>)
 80101fe:	6819      	ldr	r1, [r3, #0]
 8010200:	7ffa      	ldrb	r2, [r7, #31]
 8010202:	4613      	mov	r3, r2
 8010204:	011b      	lsls	r3, r3, #4
 8010206:	4413      	add	r3, r2
 8010208:	440b      	add	r3, r1
 801020a:	3318      	adds	r3, #24
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	429a      	cmp	r2, r3
 8010212:	d136      	bne.n	8010282 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	2b0d      	cmp	r3, #13
 8010218:	d123      	bne.n	8010262 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801021a:	2306      	movs	r3, #6
 801021c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	2200      	movs	r2, #0
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	605a      	str	r2, [r3, #4]
 801022c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 801022e:	f107 030c 	add.w	r3, r7, #12
 8010232:	220c      	movs	r2, #12
 8010234:	2110      	movs	r1, #16
 8010236:	6838      	ldr	r0, [r7, #0]
 8010238:	f000 f876 	bl	8010328 <SecureElementAesEncrypt>
 801023c:	4603      	mov	r3, r0
 801023e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010240:	4b15      	ldr	r3, [pc, #84]	@ (8010298 <SecureElementSetKey+0xb8>)
 8010242:	6819      	ldr	r1, [r3, #0]
 8010244:	7ffa      	ldrb	r2, [r7, #31]
 8010246:	4613      	mov	r3, r2
 8010248:	011b      	lsls	r3, r3, #4
 801024a:	4413      	add	r3, r2
 801024c:	3318      	adds	r3, #24
 801024e:	440b      	add	r3, r1
 8010250:	3301      	adds	r3, #1
 8010252:	f107 010c 	add.w	r1, r7, #12
 8010256:	2210      	movs	r2, #16
 8010258:	4618      	mov	r0, r3
 801025a:	f00f f9dc 	bl	801f616 <memcpy1>
                return retval;
 801025e:	7fbb      	ldrb	r3, [r7, #30]
 8010260:	e016      	b.n	8010290 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010262:	4b0d      	ldr	r3, [pc, #52]	@ (8010298 <SecureElementSetKey+0xb8>)
 8010264:	6819      	ldr	r1, [r3, #0]
 8010266:	7ffa      	ldrb	r2, [r7, #31]
 8010268:	4613      	mov	r3, r2
 801026a:	011b      	lsls	r3, r3, #4
 801026c:	4413      	add	r3, r2
 801026e:	3318      	adds	r3, #24
 8010270:	440b      	add	r3, r1
 8010272:	3301      	adds	r3, #1
 8010274:	2210      	movs	r2, #16
 8010276:	6839      	ldr	r1, [r7, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f00f f9cc 	bl	801f616 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801027e:	2300      	movs	r3, #0
 8010280:	e006      	b.n	8010290 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010282:	7ffb      	ldrb	r3, [r7, #31]
 8010284:	3301      	adds	r3, #1
 8010286:	77fb      	strb	r3, [r7, #31]
 8010288:	7ffb      	ldrb	r3, [r7, #31]
 801028a:	2b0a      	cmp	r3, #10
 801028c:	d9b6      	bls.n	80101fc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801028e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010290:	4618      	mov	r0, r3
 8010292:	3720      	adds	r7, #32
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20000990 	.word	0x20000990

0801029c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b086      	sub	sp, #24
 80102a0:	af02      	add	r7, sp, #8
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	607a      	str	r2, [r7, #4]
 80102a8:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	2b0b      	cmp	r3, #11
 80102ae:	d901      	bls.n	80102b4 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80102b0:	2303      	movs	r3, #3
 80102b2:	e009      	b.n	80102c8 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80102b4:	78fa      	ldrb	r2, [r7, #3]
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	4613      	mov	r3, r2
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	68b9      	ldr	r1, [r7, #8]
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f7ff fe37 	bl	800ff34 <ComputeCmac>
 80102c6:	4603      	mov	r3, r0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b088      	sub	sp, #32
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
 80102dc:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d101      	bne.n	80102e8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80102e4:	2302      	movs	r3, #2
 80102e6:	e01b      	b.n	8010320 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 80102e8:	2306      	movs	r3, #6
 80102ea:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80102f0:	78fa      	ldrb	r2, [r7, #3]
 80102f2:	f107 0310 	add.w	r3, r7, #16
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	4613      	mov	r3, r2
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	68f9      	ldr	r1, [r7, #12]
 80102fe:	2000      	movs	r0, #0
 8010300:	f7ff fe18 	bl	800ff34 <ComputeCmac>
 8010304:	4603      	mov	r3, r0
 8010306:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d001      	beq.n	8010312 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 801030e:	7dfb      	ldrb	r3, [r7, #23]
 8010310:	e006      	b.n	8010320 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	429a      	cmp	r2, r3
 8010318:	d001      	beq.n	801031e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 801031a:	2301      	movs	r3, #1
 801031c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 801031e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b0c2      	sub	sp, #264	@ 0x108
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010334:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8010338:	6001      	str	r1, [r0, #0]
 801033a:	4611      	mov	r1, r2
 801033c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8010340:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8010344:	6013      	str	r3, [r2, #0]
 8010346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801034a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 801034e:	460a      	mov	r2, r1
 8010350:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d006      	beq.n	8010366 <SecureElementAesEncrypt+0x3e>
 8010358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801035c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d101      	bne.n	801036a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010366:	2302      	movs	r3, #2
 8010368:	e059      	b.n	801041e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 801036a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801036e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f003 030f 	and.w	r3, r3, #15
 8010378:	2b00      	cmp	r3, #0
 801037a:	d001      	beq.n	8010380 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801037c:	2305      	movs	r3, #5
 801037e:	e04e      	b.n	801041e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010380:	f107 0314 	add.w	r3, r7, #20
 8010384:	22f0      	movs	r2, #240	@ 0xf0
 8010386:	2100      	movs	r1, #0
 8010388:	4618      	mov	r0, r3
 801038a:	f00f f97f 	bl	801f68c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801038e:	f107 0210 	add.w	r2, r7, #16
 8010392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010396:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7ff fd98 	bl	800fed4 <GetKeyByID>
 80103a4:	4603      	mov	r3, r0
 80103a6:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80103aa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d133      	bne.n	801041a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	3301      	adds	r3, #1
 80103b6:	f107 0214 	add.w	r2, r7, #20
 80103ba:	2110      	movs	r1, #16
 80103bc:	4618      	mov	r0, r3
 80103be:	f7ff fb65 	bl	800fa8c <lorawan_aes_set_key>

        uint8_t block = 0;
 80103c2:	2300      	movs	r3, #0
 80103c4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 80103c8:	e020      	b.n	801040c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80103ca:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80103ce:	68fa      	ldr	r2, [r7, #12]
 80103d0:	18d0      	adds	r0, r2, r3
 80103d2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80103d6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80103da:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80103de:	6812      	ldr	r2, [r2, #0]
 80103e0:	4413      	add	r3, r2
 80103e2:	f107 0214 	add.w	r2, r7, #20
 80103e6:	4619      	mov	r1, r3
 80103e8:	f7ff fc2e 	bl	800fc48 <lorawan_aes_encrypt>
            block = block + 16;
 80103ec:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80103f0:	3310      	adds	r3, #16
 80103f2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 80103f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80103fe:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8010402:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8010406:	6812      	ldr	r2, [r2, #0]
 8010408:	3a10      	subs	r2, #16
 801040a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 801040c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010410:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1d7      	bne.n	80103ca <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 801041a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 801041e:	4618      	mov	r0, r3
 8010420:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
 8010434:	4613      	mov	r3, r2
 8010436:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801043e:	2302      	movs	r3, #2
 8010440:	e02e      	b.n	80104a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8010442:	2306      	movs	r3, #6
 8010444:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8010446:	78bb      	ldrb	r3, [r7, #2]
 8010448:	2b0c      	cmp	r3, #12
 801044a:	d104      	bne.n	8010456 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801044c:	78fb      	ldrb	r3, [r7, #3]
 801044e:	2b0b      	cmp	r3, #11
 8010450:	d001      	beq.n	8010456 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010452:	2303      	movs	r3, #3
 8010454:	e024      	b.n	80104a0 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	f107 0310 	add.w	r3, r7, #16
 801045e:	2200      	movs	r2, #0
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	605a      	str	r2, [r3, #4]
 8010464:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8010466:	f107 030c 	add.w	r3, r7, #12
 801046a:	78fa      	ldrb	r2, [r7, #3]
 801046c:	2110      	movs	r1, #16
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff ff5a 	bl	8010328 <SecureElementAesEncrypt>
 8010474:	4603      	mov	r3, r0
 8010476:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010478:	7ffb      	ldrb	r3, [r7, #31]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 801047e:	7ffb      	ldrb	r3, [r7, #31]
 8010480:	e00e      	b.n	80104a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 8010482:	f107 020c 	add.w	r2, r7, #12
 8010486:	78bb      	ldrb	r3, [r7, #2]
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f7ff fea8 	bl	80101e0 <SecureElementSetKey>
 8010490:	4603      	mov	r3, r0
 8010492:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 801049a:	7ffb      	ldrb	r3, [r7, #31]
 801049c:	e000      	b.n	80104a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 801049e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3720      	adds	r7, #32
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60b9      	str	r1, [r7, #8]
 80104b0:	607b      	str	r3, [r7, #4]
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
 80104b6:	4613      	mov	r3, r2
 80104b8:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d005      	beq.n	80104cc <SecureElementProcessJoinAccept+0x24>
 80104c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d002      	beq.n	80104cc <SecureElementProcessJoinAccept+0x24>
 80104c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d101      	bne.n	80104d0 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80104cc:	2302      	movs	r3, #2
 80104ce:	e05c      	b.n	801058a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80104d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104d4:	2b21      	cmp	r3, #33	@ 0x21
 80104d6:	d901      	bls.n	80104dc <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80104d8:	2305      	movs	r3, #5
 80104da:	e056      	b.n	801058a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 80104dc:	2301      	movs	r3, #1
 80104de:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80104e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	461a      	mov	r2, r3
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104ec:	f00f f893 	bl	801f616 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	1c58      	adds	r0, r3, #1
 80104f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	4619      	mov	r1, r3
 80104fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fe:	3301      	adds	r3, #1
 8010500:	7dfa      	ldrb	r2, [r7, #23]
 8010502:	f7ff ff11 	bl	8010328 <SecureElementAesEncrypt>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 801050c:	2307      	movs	r3, #7
 801050e:	e03c      	b.n	801058a <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010512:	330b      	adds	r3, #11
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	09db      	lsrs	r3, r3, #7
 8010518:	b2da      	uxtb	r2, r3
 801051a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801051c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 801051e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010522:	3b04      	subs	r3, #4
 8010524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010526:	4413      	add	r3, r2
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	4619      	mov	r1, r3
 801052c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010530:	3b03      	subs	r3, #3
 8010532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010534:	4413      	add	r3, r2
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	021b      	lsls	r3, r3, #8
 801053a:	ea41 0203 	orr.w	r2, r1, r3
 801053e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010542:	3b02      	subs	r3, #2
 8010544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010546:	440b      	add	r3, r1
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	041b      	lsls	r3, r3, #16
 801054c:	431a      	orrs	r2, r3
 801054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010552:	3b01      	subs	r3, #1
 8010554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010556:	440b      	add	r3, r1
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	061b      	lsls	r3, r3, #24
 801055c:	4313      	orrs	r3, r2
 801055e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8010560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10d      	bne.n	8010584 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010568:	f897 3020 	ldrb.w	r3, [r7, #32]
 801056c:	3b04      	subs	r3, #4
 801056e:	4619      	mov	r1, r3
 8010570:	2301      	movs	r3, #1
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010576:	f7ff feab 	bl	80102d0 <SecureElementVerifyAesCmac>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d003      	beq.n	8010588 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010580:	2301      	movs	r3, #1
 8010582:	e002      	b.n	801058a <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010584:	2304      	movs	r3, #4
 8010586:	e000      	b.n	801058a <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d101      	bne.n	80105a6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80105a2:	2302      	movs	r3, #2
 80105a4:	e007      	b.n	80105b6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80105a6:	4b06      	ldr	r3, [pc, #24]	@ (80105c0 <SecureElementSetDevEui+0x2c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2208      	movs	r2, #8
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f00f f831 	bl	801f616 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80105b4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	20000990 	.word	0x20000990

080105c4 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d101      	bne.n	80105d6 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80105d2:	2302      	movs	r3, #2
 80105d4:	e007      	b.n	80105e6 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80105d6:	4b06      	ldr	r3, [pc, #24]	@ (80105f0 <SecureElementGetDevEui+0x2c>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2208      	movs	r2, #8
 80105dc:	4619      	mov	r1, r3
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f00f f819 	bl	801f616 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80105e4:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	20000990 	.word	0x20000990

080105f4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010602:	2302      	movs	r3, #2
 8010604:	e008      	b.n	8010618 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8010606:	4b06      	ldr	r3, [pc, #24]	@ (8010620 <SecureElementSetJoinEui+0x2c>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	2208      	movs	r2, #8
 801060e:	6879      	ldr	r1, [r7, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	f00f f800 	bl	801f616 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010616:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20000990 	.word	0x20000990

08010624 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d101      	bne.n	8010636 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010632:	2302      	movs	r3, #2
 8010634:	e008      	b.n	8010648 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8010636:	4b06      	ldr	r3, [pc, #24]	@ (8010650 <SecureElementGetJoinEui+0x2c>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3308      	adds	r3, #8
 801063c:	2208      	movs	r2, #8
 801063e:	4619      	mov	r1, r3
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f00e ffe8 	bl	801f616 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010646:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	20000990 	.word	0x20000990

08010654 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
 801065a:	4603      	mov	r3, r0
 801065c:	6039      	str	r1, [r7, #0]
 801065e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	2b02      	cmp	r3, #2
 8010664:	d104      	bne.n	8010670 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8010666:	4b07      	ldr	r3, [pc, #28]	@ (8010684 <SecureElementSetDevAddr+0x30>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	611a      	str	r2, [r3, #16]
 801066e:	e003      	b.n	8010678 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8010670:	4b04      	ldr	r3, [pc, #16]	@ (8010684 <SecureElementSetDevAddr+0x30>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8010678:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	bc80      	pop	{r7}
 8010682:	4770      	bx	lr
 8010684:	20000990 	.word	0x20000990

08010688 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	6039      	str	r1, [r7, #0]
 8010692:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d101      	bne.n	801069e <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801069a:	2302      	movs	r3, #2
 801069c:	e00e      	b.n	80106bc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 801069e:	79fb      	ldrb	r3, [r7, #7]
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d105      	bne.n	80106b0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80106a4:	4b08      	ldr	r3, [pc, #32]	@ (80106c8 <SecureElementGetDevAddr+0x40>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	691a      	ldr	r2, [r3, #16]
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	e004      	b.n	80106ba <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80106b0:	4b05      	ldr	r3, [pc, #20]	@ (80106c8 <SecureElementGetDevAddr+0x40>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	695a      	ldr	r2, [r3, #20]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80106ba:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bc80      	pop	{r7}
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	20000990 	.word	0x20000990

080106cc <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 80106d6:	4a29      	ldr	r2, [pc, #164]	@ (801077c <LmHandlerInit+0xb0>)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80106dc:	4b28      	ldr	r3, [pc, #160]	@ (8010780 <LmHandlerInit+0xb4>)
 80106de:	4a29      	ldr	r2, [pc, #164]	@ (8010784 <LmHandlerInit+0xb8>)
 80106e0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80106e2:	4b27      	ldr	r3, [pc, #156]	@ (8010780 <LmHandlerInit+0xb4>)
 80106e4:	4a28      	ldr	r2, [pc, #160]	@ (8010788 <LmHandlerInit+0xbc>)
 80106e6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80106e8:	4b25      	ldr	r3, [pc, #148]	@ (8010780 <LmHandlerInit+0xb4>)
 80106ea:	4a28      	ldr	r2, [pc, #160]	@ (801078c <LmHandlerInit+0xc0>)
 80106ec:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80106ee:	4b24      	ldr	r3, [pc, #144]	@ (8010780 <LmHandlerInit+0xb4>)
 80106f0:	4a27      	ldr	r2, [pc, #156]	@ (8010790 <LmHandlerInit+0xc4>)
 80106f2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80106f4:	4b21      	ldr	r3, [pc, #132]	@ (801077c <LmHandlerInit+0xb0>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a26      	ldr	r2, [pc, #152]	@ (8010794 <LmHandlerInit+0xc8>)
 80106fc:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80106fe:	4b1f      	ldr	r3, [pc, #124]	@ (801077c <LmHandlerInit+0xb0>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	4a23      	ldr	r2, [pc, #140]	@ (8010794 <LmHandlerInit+0xc8>)
 8010706:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8010708:	4b1c      	ldr	r3, [pc, #112]	@ (801077c <LmHandlerInit+0xb0>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	4a21      	ldr	r2, [pc, #132]	@ (8010794 <LmHandlerInit+0xc8>)
 8010710:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8010712:	4b1a      	ldr	r3, [pc, #104]	@ (801077c <LmHandlerInit+0xb0>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	4a1e      	ldr	r2, [pc, #120]	@ (8010794 <LmHandlerInit+0xc8>)
 801071a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 801071c:	4b1d      	ldr	r3, [pc, #116]	@ (8010794 <LmHandlerInit+0xc8>)
 801071e:	4a1e      	ldr	r2, [pc, #120]	@ (8010798 <LmHandlerInit+0xcc>)
 8010720:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8010722:	4b16      	ldr	r3, [pc, #88]	@ (801077c <LmHandlerInit+0xb0>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	4a1a      	ldr	r2, [pc, #104]	@ (8010794 <LmHandlerInit+0xc8>)
 801072a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	4a1b      	ldr	r2, [pc, #108]	@ (801079c <LmHandlerInit+0xd0>)
 8010730:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8010732:	4b12      	ldr	r3, [pc, #72]	@ (801077c <LmHandlerInit+0xb0>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010738:	4a18      	ldr	r2, [pc, #96]	@ (801079c <LmHandlerInit+0xd0>)
 801073a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 801073c:	4b17      	ldr	r3, [pc, #92]	@ (801079c <LmHandlerInit+0xd0>)
 801073e:	4a18      	ldr	r2, [pc, #96]	@ (80107a0 <LmHandlerInit+0xd4>)
 8010740:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8010742:	4b16      	ldr	r3, [pc, #88]	@ (801079c <LmHandlerInit+0xd0>)
 8010744:	4a17      	ldr	r2, [pc, #92]	@ (80107a4 <LmHandlerInit+0xd8>)
 8010746:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8010748:	4914      	ldr	r1, [pc, #80]	@ (801079c <LmHandlerInit+0xd0>)
 801074a:	2000      	movs	r0, #0
 801074c:	f000 feca 	bl	80114e4 <LmHandlerPackageRegister>
 8010750:	4603      	mov	r3, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d002      	beq.n	801075c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 8010756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801075a:	e00a      	b.n	8010772 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 801075c:	463b      	mov	r3, r7
 801075e:	4618      	mov	r0, r3
 8010760:	f002 f9cc 	bl	8012afc <LmhpPackagesRegistrationInit>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d002      	beq.n	8010770 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 801076a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801076e:	e000      	b.n	8010772 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	200009e8 	.word	0x200009e8
 8010780:	200009ec 	.word	0x200009ec
 8010784:	08011089 	.word	0x08011089
 8010788:	080110fd 	.word	0x080110fd
 801078c:	080111cd 	.word	0x080111cd
 8010790:	08011375 	.word	0x08011375
 8010794:	200009fc 	.word	0x200009fc
 8010798:	080120a9 	.word	0x080120a9
 801079c:	200009ac 	.word	0x200009ac
 80107a0:	080117a5 	.word	0x080117a5
 80107a4:	080117dd 	.word	0x080117dd

080107a8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b092      	sub	sp, #72	@ 0x48
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 80107b0:	2218      	movs	r2, #24
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	4886      	ldr	r0, [pc, #536]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80107b6:	f00e ff2e 	bl	801f616 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
 80107ba:	4b86      	ldr	r3, [pc, #536]	@ (80109d4 <LmHandlerConfigure+0x22c>)
 80107bc:	2200      	movs	r2, #0
 80107be:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 80107c0:	4b85      	ldr	r3, [pc, #532]	@ (80109d8 <LmHandlerConfigure+0x230>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 80107c6:	f7fd fdfb 	bl	800e3c0 <LoraInfo_GetPtr>
 80107ca:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 80107cc:	4b80      	ldr	r3, [pc, #512]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	2301      	movs	r3, #1
 80107d4:	4093      	lsls	r3, r2
 80107d6:	461a      	mov	r2, r3
 80107d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	4013      	ands	r3, r2
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d107      	bne.n	80107f2 <LmHandlerConfigure+0x4a>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 80107e2:	4b7e      	ldr	r3, [pc, #504]	@ (80109dc <LmHandlerConfigure+0x234>)
 80107e4:	2201      	movs	r2, #1
 80107e6:	2100      	movs	r1, #0
 80107e8:	2000      	movs	r0, #0
 80107ea:	f014 f8d9 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 80107ee:	bf00      	nop
 80107f0:	e7fd      	b.n	80107ee <LmHandlerConfigure+0x46>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 80107f2:	4b77      	ldr	r3, [pc, #476]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	461a      	mov	r2, r3
 80107f8:	4979      	ldr	r1, [pc, #484]	@ (80109e0 <LmHandlerConfigure+0x238>)
 80107fa:	487a      	ldr	r0, [pc, #488]	@ (80109e4 <LmHandlerConfigure+0x23c>)
 80107fc:	f005 fc7e 	bl	80160fc <LoRaMacInitialization>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d002      	beq.n	801080c <LmHandlerConfigure+0x64>
    {
        return LORAMAC_HANDLER_ERROR;
 8010806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801080a:	e0dc      	b.n	80109c6 <LmHandlerConfigure+0x21e>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 801080c:	2327      	movs	r3, #39	@ 0x27
 801080e:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010810:	f107 0318 	add.w	r3, r7, #24
 8010814:	4618      	mov	r0, r3
 8010816:	f006 f9fd 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d103      	bne.n	8010828 <LmHandlerConfigure+0x80>
    {
        CtxRestoreDone = true;
 8010820:	4b71      	ldr	r3, [pc, #452]	@ (80109e8 <LmHandlerConfigure+0x240>)
 8010822:	2201      	movs	r2, #1
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	e02a      	b.n	801087e <LmHandlerConfigure+0xd6>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8010828:	2328      	movs	r3, #40	@ 0x28
 801082a:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 801082c:	4b6f      	ldr	r3, [pc, #444]	@ (80109ec <LmHandlerConfigure+0x244>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	691b      	ldr	r3, [r3, #16]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00c      	beq.n	8010850 <LmHandlerConfigure+0xa8>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010836:	f107 0318 	add.w	r3, r7, #24
 801083a:	4618      	mov	r0, r3
 801083c:	f006 f812 	bl	8016864 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8010840:	4b6a      	ldr	r3, [pc, #424]	@ (80109ec <LmHandlerConfigure+0x244>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	69fa      	ldr	r2, [r7, #28]
 8010848:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 801084c:	4610      	mov	r0, r2
 801084e:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 8010850:	2327      	movs	r3, #39	@ 0x27
 8010852:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010854:	f107 0318 	add.w	r3, r7, #24
 8010858:	4618      	mov	r0, r3
 801085a:	f006 f9db 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10c      	bne.n	801087e <LmHandlerConfigure+0xd6>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010864:	2301      	movs	r3, #1
 8010866:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010868:	f107 0318 	add.w	r3, r7, #24
 801086c:	4618      	mov	r0, r3
 801086e:	f005 fff9 	bl	8016864 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010872:	7f3b      	ldrb	r3, [r7, #28]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <LmHandlerConfigure+0xd6>
            {
                CtxRestoreDone = true;
 8010878:	4b5b      	ldr	r3, [pc, #364]	@ (80109e8 <LmHandlerConfigure+0x240>)
 801087a:	2201      	movs	r2, #1
 801087c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 801087e:	4b5a      	ldr	r3, [pc, #360]	@ (80109e8 <LmHandlerConfigure+0x240>)
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d022      	beq.n	80108cc <LmHandlerConfigure+0x124>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8010886:	4b59      	ldr	r3, [pc, #356]	@ (80109ec <LmHandlerConfigure+0x244>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <LmHandlerConfigure+0xf2>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8010890:	4b56      	ldr	r3, [pc, #344]	@ (80109ec <LmHandlerConfigure+0x244>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	69db      	ldr	r3, [r3, #28]
 8010896:	2000      	movs	r0, #0
 8010898:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 801089a:	2327      	movs	r3, #39	@ 0x27
 801089c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 801089e:	f107 0318 	add.w	r3, r7, #24
 80108a2:	4618      	mov	r0, r3
 80108a4:	f005 ffde 	bl	8016864 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80108ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108ae:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80108b2:	4b47      	ldr	r3, [pc, #284]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80108b4:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80108b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108b8:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 80108bc:	4b44      	ldr	r3, [pc, #272]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80108be:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80108c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108c2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80108c6:	4b42      	ldr	r3, [pc, #264]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80108c8:	709a      	strb	r2, [r3, #2]
 80108ca:	e008      	b.n	80108de <LmHandlerConfigure+0x136>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 80108cc:	2305      	movs	r3, #5
 80108ce:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80108d0:	2300      	movs	r3, #0
 80108d2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80108d4:	f107 0318 	add.w	r3, r7, #24
 80108d8:	4618      	mov	r0, r3
 80108da:	f006 f99b 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80108de:	4b40      	ldr	r3, [pc, #256]	@ (80109e0 <LmHandlerConfigure+0x238>)
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	4a3f      	ldr	r2, [pc, #252]	@ (80109e0 <LmHandlerConfigure+0x238>)
 80108e4:	68d2      	ldr	r2, [r2, #12]
 80108e6:	4611      	mov	r1, r2
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7ff fbc7 	bl	801007c <SecureElementInitMcuID>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d002      	beq.n	80108fa <LmHandlerConfigure+0x152>
    {
        return LORAMAC_HANDLER_ERROR;
 80108f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108f8:	e065      	b.n	80109c6 <LmHandlerConfigure+0x21e>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 80108fa:	2306      	movs	r3, #6
 80108fc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80108fe:	f107 0318 	add.w	r3, r7, #24
 8010902:	4618      	mov	r0, r3
 8010904:	f005 ffae 	bl	8016864 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	4a39      	ldr	r2, [pc, #228]	@ (80109f0 <LmHandlerConfigure+0x248>)
 801090c:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 801090e:	f107 0318 	add.w	r3, r7, #24
 8010912:	4618      	mov	r0, r3
 8010914:	f006 f97e 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 8010918:	2302      	movs	r3, #2
 801091a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 801091c:	4b34      	ldr	r3, [pc, #208]	@ (80109f0 <LmHandlerConfigure+0x248>)
 801091e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010920:	f107 0318 	add.w	r3, r7, #24
 8010924:	4618      	mov	r0, r3
 8010926:	f005 ff9d 	bl	8016864 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 801092a:	2303      	movs	r3, #3
 801092c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 801092e:	4b31      	ldr	r3, [pc, #196]	@ (80109f4 <LmHandlerConfigure+0x24c>)
 8010930:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010932:	f107 0318 	add.w	r3, r7, #24
 8010936:	4618      	mov	r0, r3
 8010938:	f005 ff94 	bl	8016864 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 801093c:	f7ff fc1e 	bl	801017c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8010940:	230f      	movs	r3, #15
 8010942:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8010944:	2301      	movs	r3, #1
 8010946:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010948:	f107 0318 	add.w	r3, r7, #24
 801094c:	4618      	mov	r0, r3
 801094e:	f006 f961 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 8010952:	2310      	movs	r3, #16
 8010954:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8010956:	2300      	movs	r3, #0
 8010958:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801095a:	f107 0318 	add.w	r3, r7, #24
 801095e:	4618      	mov	r0, r3
 8010960:	f006 f958 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 8010964:	2304      	movs	r3, #4
 8010966:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8010968:	4b19      	ldr	r3, [pc, #100]	@ (80109d0 <LmHandlerConfigure+0x228>)
 801096a:	789b      	ldrb	r3, [r3, #2]
 801096c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801096e:	f107 0318 	add.w	r3, r7, #24
 8010972:	4618      	mov	r0, r3
 8010974:	f006 f94e 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8010978:	233a      	movs	r3, #58	@ 0x3a
 801097a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 801097c:	4b14      	ldr	r3, [pc, #80]	@ (80109d0 <LmHandlerConfigure+0x228>)
 801097e:	695b      	ldr	r3, [r3, #20]
 8010980:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010982:	f107 0318 	add.w	r3, r7, #24
 8010986:	4618      	mov	r0, r3
 8010988:	f006 f944 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801098c:	230f      	movs	r3, #15
 801098e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8010990:	4b0f      	ldr	r3, [pc, #60]	@ (80109d0 <LmHandlerConfigure+0x228>)
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	f107 0210 	add.w	r2, r7, #16
 8010998:	4611      	mov	r1, r2
 801099a:	4618      	mov	r0, r3
 801099c:	f00a ff7a 	bl	801b894 <RegionGetPhyParam>
 80109a0:	4603      	mov	r3, r0
 80109a2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	bf14      	ite	ne
 80109aa:	2301      	movne	r3, #1
 80109ac:	2300      	moveq	r3, #0
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	4b07      	ldr	r3, [pc, #28]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80109b2:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 80109b4:	2014      	movs	r0, #20
 80109b6:	f000 fb4f 	bl	8011058 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80109ba:	4b05      	ldr	r3, [pc, #20]	@ (80109d0 <LmHandlerConfigure+0x228>)
 80109bc:	79db      	ldrb	r3, [r3, #7]
 80109be:	4618      	mov	r0, r3
 80109c0:	f006 ffa2 	bl	8017908 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 80109c4:	2300      	movs	r3, #0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3748      	adds	r7, #72	@ 0x48
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	200009d0 	.word	0x200009d0
 80109d4:	20000a34 	.word	0x20000a34
 80109d8:	20000a3c 	.word	0x20000a3c
 80109dc:	08028ac0 	.word	0x08028ac0
 80109e0:	200009fc 	.word	0x200009fc
 80109e4:	200009ec 	.word	0x200009ec
 80109e8:	20000b32 	.word	0x20000b32
 80109ec:	200009e8 	.word	0x200009e8
 80109f0:	20000994 	.word	0x20000994
 80109f4:	2000099c 	.word	0x2000099c

080109f8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 80109fe:	f003 fae5 	bl	8013fcc <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 8010a02:	f000 fe9b 	bl	801173c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 8010a06:	f000 fe6f 	bl	80116e8 <LmHandlerPackageIsTxPending>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d117      	bne.n	8010a40 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 8010a10:	4b0d      	ldr	r3, [pc, #52]	@ (8010a48 <LmHandlerProcess+0x50>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d014      	beq.n	8010a42 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010a18:	2300      	movs	r3, #0
 8010a1a:	703b      	strb	r3, [r7, #0]
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	707b      	strb	r3, [r7, #1]
 8010a20:	2300      	movs	r3, #0
 8010a22:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8010a24:	4b09      	ldr	r3, [pc, #36]	@ (8010a4c <LmHandlerProcess+0x54>)
 8010a26:	78d9      	ldrb	r1, [r3, #3]
 8010a28:	463b      	mov	r3, r7
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 f8d7 	bl	8010be0 <LmHandlerSend>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d104      	bne.n	8010a42 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 8010a38:	4b03      	ldr	r3, [pc, #12]	@ (8010a48 <LmHandlerProcess+0x50>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
 8010a3e:	e000      	b.n	8010a42 <LmHandlerProcess+0x4a>
        return;
 8010a40:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20000a3c 	.word	0x20000a3c
 8010a4c:	200009d0 	.word	0x200009d0

08010a50 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 8010a50:	b480      	push	{r7}
 8010a52:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 8010a54:	4b02      	ldr	r3, [pc, #8]	@ (8010a60 <LmHandlerGetDutyCycleWaitTime+0x10>)
 8010a56:	681b      	ldr	r3, [r3, #0]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bc80      	pop	{r7}
 8010a5e:	4770      	bx	lr
 8010a60:	20000a38 	.word	0x20000a38

08010a64 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b092      	sub	sp, #72	@ 0x48
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	460a      	mov	r2, r1
 8010a6e:	71fb      	strb	r3, [r7, #7]
 8010a70:	4613      	mov	r3, r2
 8010a72:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8010a74:	2301      	movs	r3, #1
 8010a76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8010a7a:	4b46      	ldr	r3, [pc, #280]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010a7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8010a86:	4b43      	ldr	r3, [pc, #268]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010a88:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010a8c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d10b      	bne.n	8010aae <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010a96:	2302      	movs	r3, #2
 8010a98:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8010a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010a9e:	2202      	movs	r2, #2
 8010aa0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8010aa2:	4a3d      	ldr	r2, [pc, #244]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010aa4:	79bb      	ldrb	r3, [r7, #6]
 8010aa6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 8010aa8:	f005 fdde 	bl	8016668 <LoRaMacStart>
 8010aac:	e05c      	b.n	8010b68 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8010ab4:	4b38      	ldr	r3, [pc, #224]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8010aba:	4b36      	ldr	r3, [pc, #216]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010abc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010ac0:	4b35      	ldr	r3, [pc, #212]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010ac2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8010ac4:	4b33      	ldr	r3, [pc, #204]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010ac6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8010aca:	4b33      	ldr	r3, [pc, #204]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010acc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010ace:	4b32      	ldr	r3, [pc, #200]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010ad4:	4a30      	ldr	r2, [pc, #192]	@ (8010b98 <LmHandlerJoin+0x134>)
 8010ad6:	79bb      	ldrb	r3, [r7, #6]
 8010ad8:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 8010ada:	4b30      	ldr	r3, [pc, #192]	@ (8010b9c <LmHandlerJoin+0x138>)
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	f083 0301 	eor.w	r3, r3, #1
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d034      	beq.n	8010b52 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8010ae8:	231f      	movs	r3, #31
 8010aea:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8010aec:	4b29      	ldr	r3, [pc, #164]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010aee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010af2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010af4:	f107 030c 	add.w	r3, r7, #12
 8010af8:	4618      	mov	r0, r3
 8010afa:	f006 f88b 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 8010afe:	2320      	movs	r3, #32
 8010b00:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8010b02:	4b24      	ldr	r3, [pc, #144]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010b04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010b08:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b0a:	f107 030c 	add.w	r3, r7, #12
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f006 f880 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8010b14:	2322      	movs	r3, #34	@ 0x22
 8010b16:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8010b18:	4b1e      	ldr	r3, [pc, #120]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010b1a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010b1e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b20:	f107 030c 	add.w	r3, r7, #12
 8010b24:	4618      	mov	r0, r3
 8010b26:	f006 f875 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010b2a:	2321      	movs	r3, #33	@ 0x21
 8010b2c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8010b2e:	4b19      	ldr	r3, [pc, #100]	@ (8010b94 <LmHandlerJoin+0x130>)
 8010b30:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010b34:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b36:	f107 030c 	add.w	r3, r7, #12
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f006 f86a 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8010b40:	2329      	movs	r3, #41	@ 0x29
 8010b42:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8010b44:	4b16      	ldr	r3, [pc, #88]	@ (8010ba0 <LmHandlerJoin+0x13c>)
 8010b46:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b48:	f107 030c 	add.w	r3, r7, #12
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f006 f861 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 8010b52:	f005 fd89 	bl	8016668 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010b56:	2301      	movs	r3, #1
 8010b58:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010b5e:	f107 030c 	add.w	r3, r7, #12
 8010b62:	4618      	mov	r0, r3
 8010b64:	f006 f856 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8010b68:	4b0c      	ldr	r3, [pc, #48]	@ (8010b9c <LmHandlerJoin+0x138>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f083 0301 	eor.w	r3, r3, #1
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d102      	bne.n	8010b7c <LmHandlerJoin+0x118>
 8010b76:	79bb      	ldrb	r3, [r7, #6]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d004      	beq.n	8010b86 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 8010b7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010b80:	4618      	mov	r0, r3
 8010b82:	f006 fbf1 	bl	8017368 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b88:	4a06      	ldr	r2, [pc, #24]	@ (8010ba4 <LmHandlerJoin+0x140>)
 8010b8a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 8010b8c:	bf00      	nop
 8010b8e:	3748      	adds	r7, #72	@ 0x48
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	200009d0 	.word	0x200009d0
 8010b98:	200000a4 	.word	0x200000a4
 8010b9c:	20000b32 	.word	0x20000b32
 8010ba0:	01000400 	.word	0x01000400
 8010ba4:	20000a38 	.word	0x20000a38

08010ba8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b08c      	sub	sp, #48	@ 0x30
 8010bac:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8010bb2:	1d3b      	adds	r3, r7, #4
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f005 fe55 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 8010bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d106      	bne.n	8010bd6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010bc8:	7a3b      	ldrb	r3, [r7, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e002      	b.n	8010bd8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e000      	b.n	8010bd8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8010bd6:	2300      	movs	r3, #0
    }
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3730      	adds	r7, #48	@ 0x30
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08a      	sub	sp, #40	@ 0x28
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	70fb      	strb	r3, [r7, #3]
 8010bec:	4613      	mov	r3, r2
 8010bee:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010bf0:	23ff      	movs	r3, #255	@ 0xff
 8010bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8010bf6:	f002 ff43 	bl	8013a80 <LoRaMacIsBusy>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d002      	beq.n	8010c06 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010c00:	f06f 0301 	mvn.w	r3, #1
 8010c04:	e0ab      	b.n	8010d5e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8010c06:	f002 ff63 	bl	8013ad0 <LoRaMacIsStopped>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c10:	f06f 0302 	mvn.w	r3, #2
 8010c14:	e0a3      	b.n	8010d5e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010c16:	f7ff ffc7 	bl	8010ba8 <LmHandlerJoinStatus>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d00a      	beq.n	8010c36 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8010c20:	4b51      	ldr	r3, [pc, #324]	@ (8010d68 <LmHandlerSend+0x188>)
 8010c22:	79db      	ldrb	r3, [r3, #7]
 8010c24:	4a50      	ldr	r2, [pc, #320]	@ (8010d68 <LmHandlerSend+0x188>)
 8010c26:	7a12      	ldrb	r2, [r2, #8]
 8010c28:	4611      	mov	r1, r2
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff ff1a 	bl	8010a64 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c30:	f06f 0302 	mvn.w	r3, #2
 8010c34:	e093      	b.n	8010d5e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8010c36:	4a4d      	ldr	r2, [pc, #308]	@ (8010d6c <LmHandlerSend+0x18c>)
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8010c3c:	78fb      	ldrb	r3, [r7, #3]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	bf14      	ite	ne
 8010c42:	2301      	movne	r3, #1
 8010c44:	2300      	moveq	r3, #0
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8010c4a:	4b49      	ldr	r3, [pc, #292]	@ (8010d70 <LmHandlerSend+0x190>)
 8010c4c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010c50:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	785b      	ldrb	r3, [r3, #1]
 8010c56:	f107 020c 	add.w	r2, r7, #12
 8010c5a:	4611      	mov	r1, r2
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f005 fd71 	bl	8016744 <LoRaMacQueryTxPossible>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d009      	beq.n	8010c7c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8010c74:	23f9      	movs	r3, #249	@ 0xf9
 8010c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c7a:	e008      	b.n	8010c8e <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	785b      	ldrb	r3, [r3, #1]
 8010c86:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010c8e:	4b37      	ldr	r3, [pc, #220]	@ (8010d6c <LmHandlerSend+0x18c>)
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	3310      	adds	r3, #16
 8010c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c98:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010c9c:	4b34      	ldr	r3, [pc, #208]	@ (8010d70 <LmHandlerSend+0x190>)
 8010c9e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010ca2:	4b32      	ldr	r3, [pc, #200]	@ (8010d6c <LmHandlerSend+0x18c>)
 8010ca4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8010ca6:	78ba      	ldrb	r2, [r7, #2]
 8010ca8:	f107 0310 	add.w	r3, r7, #16
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f006 fcf2 	bl	8017698 <LoRaMacMcpsRequest>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8010d74 <LmHandlerSend+0x194>)
 8010cbe:	6013      	str	r3, [r2, #0]

    switch( status )
 8010cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010cc4:	2b11      	cmp	r3, #17
 8010cc6:	d843      	bhi.n	8010d50 <LmHandlerSend+0x170>
 8010cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8010cd0 <LmHandlerSend+0xf0>)
 8010cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cce:	bf00      	nop
 8010cd0:	08010d19 	.word	0x08010d19
 8010cd4:	08010d31 	.word	0x08010d31
 8010cd8:	08010d51 	.word	0x08010d51
 8010cdc:	08010d51 	.word	0x08010d51
 8010ce0:	08010d51 	.word	0x08010d51
 8010ce4:	08010d51 	.word	0x08010d51
 8010ce8:	08010d51 	.word	0x08010d51
 8010cec:	08010d39 	.word	0x08010d39
 8010cf0:	08010d51 	.word	0x08010d51
 8010cf4:	08010d51 	.word	0x08010d51
 8010cf8:	08010d51 	.word	0x08010d51
 8010cfc:	08010d49 	.word	0x08010d49
 8010d00:	08010d51 	.word	0x08010d51
 8010d04:	08010d51 	.word	0x08010d51
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d31 	.word	0x08010d31
 8010d10:	08010d31 	.word	0x08010d31
 8010d14:	08010d41 	.word	0x08010d41
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8010d18:	4b17      	ldr	r3, [pc, #92]	@ (8010d78 <LmHandlerSend+0x198>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8010d1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d22:	f113 0f07 	cmn.w	r3, #7
 8010d26:	d017      	beq.n	8010d58 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8010d2e:	e013      	b.n	8010d58 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8010d30:	23fe      	movs	r3, #254	@ 0xfe
 8010d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010d36:	e010      	b.n	8010d5a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010d38:	23fd      	movs	r3, #253	@ 0xfd
 8010d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010d3e:	e00c      	b.n	8010d5a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8010d40:	23fb      	movs	r3, #251	@ 0xfb
 8010d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010d46:	e008      	b.n	8010d5a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8010d48:	23fa      	movs	r3, #250	@ 0xfa
 8010d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010d4e:	e004      	b.n	8010d5a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010d50:	23ff      	movs	r3, #255	@ 0xff
 8010d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010d56:	e000      	b.n	8010d5a <LmHandlerSend+0x17a>
            break;
 8010d58:	bf00      	nop
    }

    return lmhStatus;
 8010d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3728      	adds	r7, #40	@ 0x28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	200000a4 	.word	0x200000a4
 8010d6c:	200000b0 	.word	0x200000b0
 8010d70:	200009d0 	.word	0x200009d0
 8010d74:	20000a38 	.word	0x20000a38
 8010d78:	20000a3c 	.word	0x20000a3c

08010d7c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8010d82:	2309      	movs	r3, #9
 8010d84:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010d86:	463b      	mov	r3, r7
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f006 faed 	bl	8017368 <LoRaMacMlmeRequest>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	4a06      	ldr	r2, [pc, #24]	@ (8010db0 <LmHandlerDeviceTimeReq+0x34>)
 8010d96:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010d98:	7dfb      	ldrb	r3, [r7, #23]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d101      	bne.n	8010da2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e001      	b.n	8010da6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20000a38 	.word	0x20000a38

08010db4 <LmHandlerBeaconReq>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static LmHandlerErrorStatus_t LmHandlerBeaconReq( void )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 8010dba:	230b      	movs	r3, #11
 8010dbc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010dbe:	463b      	mov	r3, r7
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f006 fad1 	bl	8017368 <LoRaMacMlmeRequest>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	4a06      	ldr	r2, [pc, #24]	@ (8010de8 <LmHandlerBeaconReq+0x34>)
 8010dce:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010dd0:	7dfb      	ldrb	r3, [r7, #23]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d101      	bne.n	8010dda <LmHandlerBeaconReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	e001      	b.n	8010dde <LmHandlerBeaconReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3718      	adds	r7, #24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	20000a38 	.word	0x20000a38

08010dec <LmHandlerPingSlotReq>:
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08a      	sub	sp, #40	@ 0x28
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	4603      	mov	r3, r0
 8010df4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010df6:	230c      	movs	r3, #12
 8010df8:	743b      	strb	r3, [r7, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8010dfa:	79fb      	ldrb	r3, [r7, #7]
 8010dfc:	f003 0307 	and.w	r3, r3, #7
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	7d3b      	ldrb	r3, [r7, #20]
 8010e04:	f362 0302 	bfi	r3, r2, #0, #3
 8010e08:	753b      	strb	r3, [r7, #20]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 8010e0a:	7d3b      	ldrb	r3, [r7, #20]
 8010e0c:	f36f 03c7 	bfc	r3, #3, #5
 8010e10:	753b      	strb	r3, [r7, #20]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010e12:	f107 0310 	add.w	r3, r7, #16
 8010e16:	4618      	mov	r0, r3
 8010e18:	f006 faa6 	bl	8017368 <LoRaMacMlmeRequest>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	4a0f      	ldr	r2, [pc, #60]	@ (8010e64 <LmHandlerPingSlotReq+0x78>)
 8010e26:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d112      	bne.n	8010e56 <LmHandlerPingSlotReq+0x6a>
    {
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 8010e30:	4a0d      	ldr	r2, [pc, #52]	@ (8010e68 <LmHandlerPingSlotReq+0x7c>)
 8010e32:	79fb      	ldrb	r3, [r7, #7]
 8010e34:	7413      	strb	r3, [r2, #16]
        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010e36:	2300      	movs	r3, #0
 8010e38:	723b      	strb	r3, [r7, #8]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	727b      	strb	r3, [r7, #9]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	60fb      	str	r3, [r7, #12]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 8010e42:	4b09      	ldr	r3, [pc, #36]	@ (8010e68 <LmHandlerPingSlotReq+0x7c>)
 8010e44:	78d9      	ldrb	r1, [r3, #3]
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7ff fec7 	bl	8010be0 <LmHandlerSend>
 8010e52:	4603      	mov	r3, r0
 8010e54:	e001      	b.n	8010e5a <LmHandlerPingSlotReq+0x6e>
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8010e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3728      	adds	r7, #40	@ 0x28
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20000a38 	.word	0x20000a38
 8010e68:	200009d0 	.word	0x200009d0

08010e6c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08e      	sub	sp, #56	@ 0x38
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8010e76:	2300      	movs	r3, #0
 8010e78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 8010e7c:	f002 fe00 	bl	8013a80 <LoRaMacIsBusy>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010e86:	f06f 0301 	mvn.w	r3, #1
 8010e8a:	e07e      	b.n	8010f8a <LmHandlerRequestClass+0x11e>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8010e8c:	f7ff fe8c 	bl	8010ba8 <LmHandlerJoinStatus>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d002      	beq.n	8010e9c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010e96:	f06f 0302 	mvn.w	r3, #2
 8010e9a:	e076      	b.n	8010f8a <LmHandlerRequestClass+0x11e>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010ea0:	f107 030c 	add.w	r3, r7, #12
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f005 fcdd 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010eb4:	e069      	b.n	8010f8a <LmHandlerRequestClass+0x11e>
    }
    currentClass = mibReq.Param.Class;
 8010eb6:	7c3b      	ldrb	r3, [r7, #16]
 8010eb8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8010ebc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d05f      	beq.n	8010f86 <LmHandlerRequestClass+0x11a>
    {
        switch( newClass )
 8010ec6:	79fb      	ldrb	r3, [r7, #7]
 8010ec8:	2b02      	cmp	r3, #2
 8010eca:	d035      	beq.n	8010f38 <LmHandlerRequestClass+0xcc>
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	dc55      	bgt.n	8010f7c <LmHandlerRequestClass+0x110>
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <LmHandlerRequestClass+0x6e>
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d01e      	beq.n	8010f16 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8010ed8:	e050      	b.n	8010f7c <LmHandlerRequestClass+0x110>
                    if( currentClass != CLASS_A )
 8010eda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d04e      	beq.n	8010f80 <LmHandlerRequestClass+0x114>
                        mibReq.Param.Class = newClass;
 8010ee2:	79fb      	ldrb	r3, [r7, #7]
 8010ee4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010ee6:	f107 030c 	add.w	r3, r7, #12
 8010eea:	4618      	mov	r0, r3
 8010eec:	f005 fe92 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10b      	bne.n	8010f0e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010ef6:	4b27      	ldr	r3, [pc, #156]	@ (8010f94 <LmHandlerRequestClass+0x128>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d03f      	beq.n	8010f80 <LmHandlerRequestClass+0x114>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010f00:	4b24      	ldr	r3, [pc, #144]	@ (8010f94 <LmHandlerRequestClass+0x128>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f06:	79fa      	ldrb	r2, [r7, #7]
 8010f08:	4610      	mov	r0, r2
 8010f0a:	4798      	blx	r3
                break;
 8010f0c:	e038      	b.n	8010f80 <LmHandlerRequestClass+0x114>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010f0e:	23ff      	movs	r3, #255	@ 0xff
 8010f10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8010f14:	e034      	b.n	8010f80 <LmHandlerRequestClass+0x114>
                    if( currentClass != CLASS_A )
 8010f16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <LmHandlerRequestClass+0xba>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010f1e:	23ff      	movs	r3, #255	@ 0xff
 8010f20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8010f24:	e02f      	b.n	8010f86 <LmHandlerRequestClass+0x11a>
                        errorStatus = LmHandlerDeviceTimeReq( );
 8010f26:	f7ff ff29 	bl	8010d7c <LmHandlerDeviceTimeReq>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        IsClassBSwitchPending = true;
 8010f30:	4b19      	ldr	r3, [pc, #100]	@ (8010f98 <LmHandlerRequestClass+0x12c>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	701a      	strb	r2, [r3, #0]
                break;
 8010f36:	e026      	b.n	8010f86 <LmHandlerRequestClass+0x11a>
                    if( currentClass != CLASS_A )
 8010f38:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <LmHandlerRequestClass+0xdc>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010f40:	23ff      	movs	r3, #255	@ 0xff
 8010f42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8010f46:	e01d      	b.n	8010f84 <LmHandlerRequestClass+0x118>
                        mibReq.Param.Class = newClass;
 8010f48:	79fb      	ldrb	r3, [r7, #7]
 8010f4a:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	4618      	mov	r0, r3
 8010f52:	f005 fe5f 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10b      	bne.n	8010f74 <LmHandlerRequestClass+0x108>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f94 <LmHandlerRequestClass+0x128>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00e      	beq.n	8010f84 <LmHandlerRequestClass+0x118>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010f66:	4b0b      	ldr	r3, [pc, #44]	@ (8010f94 <LmHandlerRequestClass+0x128>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f6c:	79fa      	ldrb	r2, [r7, #7]
 8010f6e:	4610      	mov	r0, r2
 8010f70:	4798      	blx	r3
                break;
 8010f72:	e007      	b.n	8010f84 <LmHandlerRequestClass+0x118>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010f74:	23ff      	movs	r3, #255	@ 0xff
 8010f76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8010f7a:	e003      	b.n	8010f84 <LmHandlerRequestClass+0x118>
                break;
 8010f7c:	bf00      	nop
 8010f7e:	e002      	b.n	8010f86 <LmHandlerRequestClass+0x11a>
                break;
 8010f80:	bf00      	nop
 8010f82:	e000      	b.n	8010f86 <LmHandlerRequestClass+0x11a>
                break;
 8010f84:	bf00      	nop
        }
    }
    return errorStatus;
 8010f86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3738      	adds	r7, #56	@ 0x38
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	200009e8 	.word	0x200009e8
 8010f98:	20000a34 	.word	0x20000a34

08010f9c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08c      	sub	sp, #48	@ 0x30
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d102      	bne.n	8010fb0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fae:	e010      	b.n	8010fd2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010fb4:	f107 0308 	add.w	r3, r7, #8
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f005 fc53 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fc8:	e003      	b.n	8010fd2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8010fca:	7b3a      	ldrb	r2, [r7, #12]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3730      	adds	r7, #48	@ 0x30
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b08c      	sub	sp, #48	@ 0x30
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d102      	bne.n	8010ff0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fee:	e016      	b.n	801101e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010ff0:	2320      	movs	r3, #32
 8010ff2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8010ff4:	f107 0308 	add.w	r3, r7, #8
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f005 fc33 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d002      	beq.n	801100a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011008:	e009      	b.n	801101e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 801100a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f993 2000 	ldrsb.w	r2, [r3]
 8011018:	4b03      	ldr	r3, [pc, #12]	@ (8011028 <LmHandlerGetTxDatarate+0x4c>)
 801101a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3730      	adds	r7, #48	@ 0x30
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	200009d0 	.word	0x200009d0

0801102c <LmHandlerGetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerGetActiveRegion( LoRaMacRegion_t *region )
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
    if( region == NULL )
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <LmHandlerGetActiveRegion+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801103e:	e004      	b.n	801104a <LmHandlerGetActiveRegion+0x1e>
    }

    *region = LmHandlerParams.ActiveRegion;
 8011040:	4b04      	ldr	r3, [pc, #16]	@ (8011054 <LmHandlerGetActiveRegion+0x28>)
 8011042:	781a      	ldrb	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	370c      	adds	r7, #12
 801104e:	46bd      	mov	sp, r7
 8011050:	bc80      	pop	{r7}
 8011052:	4770      	bx	lr
 8011054:	200009d0 	.word	0x200009d0

08011058 <LmHandlerSetSystemMaxRxError>:

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08c      	sub	sp, #48	@ 0x30
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8011060:	2323      	movs	r3, #35	@ 0x23
 8011062:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011068:	f107 0308 	add.w	r3, r7, #8
 801106c:	4618      	mov	r0, r3
 801106e:	f005 fdd1 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8011078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801107c:	e000      	b.n	8011080 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 801107e:	2300      	movs	r3, #0
}
 8011080:	4618      	mov	r0, r3
 8011082:	3730      	adds	r7, #48	@ 0x30
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8011090:	4b18      	ldr	r3, [pc, #96]	@ (80110f4 <McpsConfirm+0x6c>)
 8011092:	2201      	movs	r2, #1
 8011094:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	785a      	ldrb	r2, [r3, #1]
 801109a:	4b16      	ldr	r3, [pc, #88]	@ (80110f4 <McpsConfirm+0x6c>)
 801109c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	789b      	ldrb	r3, [r3, #2]
 80110a2:	b25a      	sxtb	r2, r3
 80110a4:	4b13      	ldr	r3, [pc, #76]	@ (80110f4 <McpsConfirm+0x6c>)
 80110a6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	4a11      	ldr	r2, [pc, #68]	@ (80110f4 <McpsConfirm+0x6c>)
 80110ae:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80110b6:	4b0f      	ldr	r3, [pc, #60]	@ (80110f4 <McpsConfirm+0x6c>)
 80110b8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	691b      	ldr	r3, [r3, #16]
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b0c      	ldr	r3, [pc, #48]	@ (80110f4 <McpsConfirm+0x6c>)
 80110c2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	791b      	ldrb	r3, [r3, #4]
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b0a      	ldr	r3, [pc, #40]	@ (80110f4 <McpsConfirm+0x6c>)
 80110cc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 80110ce:	4b0a      	ldr	r3, [pc, #40]	@ (80110f8 <McpsConfirm+0x70>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d004      	beq.n	80110e2 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 80110d8:	4b07      	ldr	r3, [pc, #28]	@ (80110f8 <McpsConfirm+0x70>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110de:	4805      	ldr	r0, [pc, #20]	@ (80110f4 <McpsConfirm+0x6c>)
 80110e0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	2000      	movs	r0, #0
 80110e6:	f000 fa83 	bl	80115f0 <LmHandlerPackagesNotify>
}
 80110ea:	bf00      	nop
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	200000b0 	.word	0x200000b0
 80110f8:	200009e8 	.word	0x200009e8

080110fc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8011106:	2300      	movs	r3, #0
 8011108:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 801110a:	4b2d      	ldr	r3, [pc, #180]	@ (80111c0 <McpsIndication+0xc4>)
 801110c:	2201      	movs	r2, #1
 801110e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	785a      	ldrb	r2, [r3, #1]
 8011114:	4b2a      	ldr	r3, [pc, #168]	@ (80111c0 <McpsIndication+0xc4>)
 8011116:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8011118:	4b29      	ldr	r3, [pc, #164]	@ (80111c0 <McpsIndication+0xc4>)
 801111a:	785b      	ldrb	r3, [r3, #1]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d14b      	bne.n	80111b8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	791b      	ldrb	r3, [r3, #4]
 8011124:	b25a      	sxtb	r2, r3
 8011126:	4b26      	ldr	r3, [pc, #152]	@ (80111c0 <McpsIndication+0xc4>)
 8011128:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011130:	b25a      	sxtb	r2, r3
 8011132:	4b23      	ldr	r3, [pc, #140]	@ (80111c0 <McpsIndication+0xc4>)
 8011134:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	f993 2002 	ldrsb.w	r2, [r3, #2]
 801113c:	4b20      	ldr	r3, [pc, #128]	@ (80111c0 <McpsIndication+0xc4>)
 801113e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	78da      	ldrb	r2, [r3, #3]
 8011144:	4b1e      	ldr	r3, [pc, #120]	@ (80111c0 <McpsIndication+0xc4>)
 8011146:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	4a1c      	ldr	r2, [pc, #112]	@ (80111c0 <McpsIndication+0xc4>)
 801114e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	78db      	ldrb	r3, [r3, #3]
 8011154:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	7b1b      	ldrb	r3, [r3, #12]
 801115a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 8011162:	4b18      	ldr	r3, [pc, #96]	@ (80111c4 <McpsIndication+0xc8>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011168:	2b00      	cmp	r3, #0
 801116a:	d007      	beq.n	801117c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 801116c:	4b15      	ldr	r3, [pc, #84]	@ (80111c4 <McpsIndication+0xc8>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011172:	f107 0210 	add.w	r2, r7, #16
 8011176:	4912      	ldr	r1, [pc, #72]	@ (80111c0 <McpsIndication+0xc4>)
 8011178:	4610      	mov	r0, r2
 801117a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 801117c:	4b11      	ldr	r3, [pc, #68]	@ (80111c4 <McpsIndication+0xc8>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011182:	2b00      	cmp	r3, #0
 8011184:	d007      	beq.n	8011196 <McpsIndication+0x9a>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	7e1b      	ldrb	r3, [r3, #24]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d003      	beq.n	8011196 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 801118e:	4b0d      	ldr	r3, [pc, #52]	@ (80111c4 <McpsIndication+0xc8>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011194:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8011196:	6879      	ldr	r1, [r7, #4]
 8011198:	2001      	movs	r0, #1
 801119a:	f000 fa29 	bl	80115f0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 801119e:	f107 030f 	add.w	r3, r7, #15
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff fefa 	bl	8010f9c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	795b      	ldrb	r3, [r3, #5]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 80111b0:	4b05      	ldr	r3, [pc, #20]	@ (80111c8 <McpsIndication+0xcc>)
 80111b2:	2201      	movs	r2, #1
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	e000      	b.n	80111ba <McpsIndication+0xbe>
        return;
 80111b8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 80111ba:	3718      	adds	r7, #24
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	200000cc 	.word	0x200000cc
 80111c4:	200009e8 	.word	0x200009e8
 80111c8:	20000a3c 	.word	0x20000a3c

080111cc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b08c      	sub	sp, #48	@ 0x30
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 80111d4:	4b5e      	ldr	r3, [pc, #376]	@ (8011350 <MlmeConfirm+0x184>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	785a      	ldrb	r2, [r3, #1]
 80111de:	4b5c      	ldr	r3, [pc, #368]	@ (8011350 <MlmeConfirm+0x184>)
 80111e0:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80111e2:	4b5c      	ldr	r3, [pc, #368]	@ (8011354 <MlmeConfirm+0x188>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d004      	beq.n	80111f6 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 80111ec:	4b59      	ldr	r3, [pc, #356]	@ (8011354 <MlmeConfirm+0x188>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111f2:	4857      	ldr	r0, [pc, #348]	@ (8011350 <MlmeConfirm+0x184>)
 80111f4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	2002      	movs	r0, #2
 80111fa:	f000 f9f9 	bl	80115f0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	3b01      	subs	r3, #1
 8011204:	2b0b      	cmp	r3, #11
 8011206:	f200 809a 	bhi.w	801133e <MlmeConfirm+0x172>
 801120a:	a201      	add	r2, pc, #4	@ (adr r2, 8011210 <MlmeConfirm+0x44>)
 801120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011210:	08011241 	.word	0x08011241
 8011214:	0801133f 	.word	0x0801133f
 8011218:	0801133f 	.word	0x0801133f
 801121c:	0801133f 	.word	0x0801133f
 8011220:	080112bd 	.word	0x080112bd
 8011224:	0801133f 	.word	0x0801133f
 8011228:	0801133f 	.word	0x0801133f
 801122c:	0801133f 	.word	0x0801133f
 8011230:	080112d5 	.word	0x080112d5
 8011234:	0801133f 	.word	0x0801133f
 8011238:	080112e3 	.word	0x080112e3
 801123c:	080112fd 	.word	0x080112fd
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8011240:	2306      	movs	r3, #6
 8011242:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8011244:	f107 0308 	add.w	r3, r7, #8
 8011248:	4618      	mov	r0, r3
 801124a:	f005 fb0b 	bl	8016864 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 801124e:	4b42      	ldr	r3, [pc, #264]	@ (8011358 <MlmeConfirm+0x18c>)
 8011250:	79db      	ldrb	r3, [r3, #7]
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	4611      	mov	r1, r2
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff f9fc 	bl	8010654 <SecureElementSetDevAddr>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d102      	bne.n	8011268 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	4a3d      	ldr	r2, [pc, #244]	@ (801135c <MlmeConfirm+0x190>)
 8011266:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8011268:	483d      	ldr	r0, [pc, #244]	@ (8011360 <MlmeConfirm+0x194>)
 801126a:	f7ff feb7 	bl	8010fdc <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 801126e:	483d      	ldr	r0, [pc, #244]	@ (8011364 <MlmeConfirm+0x198>)
 8011270:	f000 fcde 	bl	8011c30 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8011274:	4b36      	ldr	r3, [pc, #216]	@ (8011350 <MlmeConfirm+0x184>)
 8011276:	785b      	ldrb	r3, [r3, #1]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d108      	bne.n	801128e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 801127c:	4b36      	ldr	r3, [pc, #216]	@ (8011358 <MlmeConfirm+0x18c>)
 801127e:	2200      	movs	r2, #0
 8011280:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8011282:	4b39      	ldr	r3, [pc, #228]	@ (8011368 <MlmeConfirm+0x19c>)
 8011284:	785b      	ldrb	r3, [r3, #1]
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fdf0 	bl	8010e6c <LmHandlerRequestClass>
 801128c:	e002      	b.n	8011294 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 801128e:	4b32      	ldr	r3, [pc, #200]	@ (8011358 <MlmeConfirm+0x18c>)
 8011290:	22ff      	movs	r2, #255	@ 0xff
 8011292:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8011294:	4b2f      	ldr	r3, [pc, #188]	@ (8011354 <MlmeConfirm+0x188>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129a:	2b00      	cmp	r3, #0
 801129c:	d004      	beq.n	80112a8 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 801129e:	4b2d      	ldr	r3, [pc, #180]	@ (8011354 <MlmeConfirm+0x188>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a4:	482c      	ldr	r0, [pc, #176]	@ (8011358 <MlmeConfirm+0x18c>)
 80112a6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80112a8:	4b29      	ldr	r3, [pc, #164]	@ (8011350 <MlmeConfirm+0x184>)
 80112aa:	785b      	ldrb	r3, [r3, #1]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d148      	bne.n	8011342 <MlmeConfirm+0x176>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80112b0:	4b29      	ldr	r3, [pc, #164]	@ (8011358 <MlmeConfirm+0x18c>)
 80112b2:	79db      	ldrb	r3, [r3, #7]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fe ff75 	bl	80101a4 <SecureElementPrintSessionKeys>
                }
            }
            break;
 80112ba:	e042      	b.n	8011342 <MlmeConfirm+0x176>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 80112bc:	4b2b      	ldr	r3, [pc, #172]	@ (801136c <MlmeConfirm+0x1a0>)
 80112be:	2201      	movs	r2, #1
 80112c0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	7a1a      	ldrb	r2, [r3, #8]
 80112c6:	4b29      	ldr	r3, [pc, #164]	@ (801136c <MlmeConfirm+0x1a0>)
 80112c8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	7a5a      	ldrb	r2, [r3, #9]
 80112ce:	4b27      	ldr	r3, [pc, #156]	@ (801136c <MlmeConfirm+0x1a0>)
 80112d0:	74da      	strb	r2, [r3, #19]
            }
            break;
 80112d2:	e039      	b.n	8011348 <MlmeConfirm+0x17c>
        case MLME_DEVICE_TIME:
            {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
                if( IsClassBSwitchPending == true )
 80112d4:	4b26      	ldr	r3, [pc, #152]	@ (8011370 <MlmeConfirm+0x1a4>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d034      	beq.n	8011346 <MlmeConfirm+0x17a>
                {
                    LmHandlerBeaconReq( );
 80112dc:	f7ff fd6a 	bl	8010db4 <LmHandlerBeaconReq>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
 80112e0:	e031      	b.n	8011346 <MlmeConfirm+0x17a>
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	785b      	ldrb	r3, [r3, #1]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d105      	bne.n	80112f6 <MlmeConfirm+0x12a>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 80112ea:	4b1f      	ldr	r3, [pc, #124]	@ (8011368 <MlmeConfirm+0x19c>)
 80112ec:	7c1b      	ldrb	r3, [r3, #16]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff fd7c 	bl	8010dec <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 80112f4:	e028      	b.n	8011348 <MlmeConfirm+0x17c>
                    LmHandlerDeviceTimeReq( );
 80112f6:	f7ff fd41 	bl	8010d7c <LmHandlerDeviceTimeReq>
            break;
 80112fa:	e025      	b.n	8011348 <MlmeConfirm+0x17c>
        case MLME_PING_SLOT_INFO:
            {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	785b      	ldrb	r3, [r3, #1]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d116      	bne.n	8011332 <MlmeConfirm+0x166>
                {
                    MibRequestConfirm_t mibReq;

                    /* Class B is now activated */
                    mibReq.Type = MIB_DEVICE_CLASS;
 8011304:	2300      	movs	r3, #0
 8011306:	723b      	strb	r3, [r7, #8]
                    mibReq.Param.Class = CLASS_B;
 8011308:	2301      	movs	r3, #1
 801130a:	733b      	strb	r3, [r7, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 801130c:	f107 0308 	add.w	r3, r7, #8
 8011310:	4618      	mov	r0, r3
 8011312:	f005 fc7f 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
                    /* Notify upper layer */
                    if( LmHandlerCallbacks->OnClassChange != NULL )
 8011316:	4b0f      	ldr	r3, [pc, #60]	@ (8011354 <MlmeConfirm+0x188>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801131c:	2b00      	cmp	r3, #0
 801131e:	d004      	beq.n	801132a <MlmeConfirm+0x15e>
                    {
                        LmHandlerCallbacks->OnClassChange( CLASS_B );
 8011320:	4b0c      	ldr	r3, [pc, #48]	@ (8011354 <MlmeConfirm+0x188>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011326:	2001      	movs	r0, #1
 8011328:	4798      	blx	r3
                    }
                    IsClassBSwitchPending = false;
 801132a:	4b11      	ldr	r3, [pc, #68]	@ (8011370 <MlmeConfirm+0x1a4>)
 801132c:	2200      	movs	r2, #0
 801132e:	701a      	strb	r2, [r3, #0]
                {
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
 8011330:	e00a      	b.n	8011348 <MlmeConfirm+0x17c>
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8011332:	4b0d      	ldr	r3, [pc, #52]	@ (8011368 <MlmeConfirm+0x19c>)
 8011334:	7c1b      	ldrb	r3, [r3, #16]
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fd58 	bl	8010dec <LmHandlerPingSlotReq>
            break;
 801133c:	e004      	b.n	8011348 <MlmeConfirm+0x17c>
        default:
            break;
 801133e:	bf00      	nop
 8011340:	e002      	b.n	8011348 <MlmeConfirm+0x17c>
            break;
 8011342:	bf00      	nop
 8011344:	e000      	b.n	8011348 <MlmeConfirm+0x17c>
            break;
 8011346:	bf00      	nop
    }
}
 8011348:	bf00      	nop
 801134a:	3730      	adds	r7, #48	@ 0x30
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	200000b0 	.word	0x200000b0
 8011354:	200009e8 	.word	0x200009e8
 8011358:	200000a4 	.word	0x200000a4
 801135c:	20000994 	.word	0x20000994
 8011360:	200000a8 	.word	0x200000a8
 8011364:	200000a9 	.word	0x200000a9
 8011368:	200009d0 	.word	0x200009d0
 801136c:	200000cc 	.word	0x200000cc
 8011370:	20000a34 	.word	0x20000a34

08011374 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8011374:	b5b0      	push	{r4, r5, r7, lr}
 8011376:	b08c      	sub	sp, #48	@ 0x30
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801137e:	4b55      	ldr	r3, [pc, #340]	@ (80114d4 <MlmeIndication+0x160>)
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	785a      	ldrb	r2, [r3, #1]
 8011388:	4b52      	ldr	r3, [pc, #328]	@ (80114d4 <MlmeIndication+0x160>)
 801138a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	789b      	ldrb	r3, [r3, #2]
 8011390:	b25a      	sxtb	r2, r3
 8011392:	4b50      	ldr	r3, [pc, #320]	@ (80114d4 <MlmeIndication+0x160>)
 8011394:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801139c:	b25a      	sxtb	r2, r3
 801139e:	4b4d      	ldr	r3, [pc, #308]	@ (80114d4 <MlmeIndication+0x160>)
 80113a0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80113a8:	4b4a      	ldr	r3, [pc, #296]	@ (80114d4 <MlmeIndication+0x160>)
 80113aa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	78da      	ldrb	r2, [r3, #3]
 80113b0:	4b48      	ldr	r3, [pc, #288]	@ (80114d4 <MlmeIndication+0x160>)
 80113b2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	4a46      	ldr	r2, [pc, #280]	@ (80114d4 <MlmeIndication+0x160>)
 80113ba:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80113bc:	4b46      	ldr	r3, [pc, #280]	@ (80114d8 <MlmeIndication+0x164>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00d      	beq.n	80113e2 <MlmeIndication+0x6e>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	2b0a      	cmp	r3, #10
 80113cc:	d009      	beq.n	80113e2 <MlmeIndication+0x6e>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	2b0e      	cmp	r3, #14
 80113d4:	d005      	beq.n	80113e2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80113d6:	4b40      	ldr	r3, [pc, #256]	@ (80114d8 <MlmeIndication+0x164>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113dc:	493d      	ldr	r1, [pc, #244]	@ (80114d4 <MlmeIndication+0x160>)
 80113de:	2000      	movs	r0, #0
 80113e0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80113e2:	6879      	ldr	r1, [r7, #4]
 80113e4:	2003      	movs	r0, #3
 80113e6:	f000 f903 	bl	80115f0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b0a      	cmp	r3, #10
 80113f0:	d02f      	beq.n	8011452 <MlmeIndication+0xde>
 80113f2:	2b0e      	cmp	r3, #14
 80113f4:	d167      	bne.n	80114c6 <MlmeIndication+0x152>
        case MLME_BEACON_LOST:
            {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
                MibRequestConfirm_t mibReq;
                /* Switch to class A again */
                mibReq.Type = MIB_DEVICE_CLASS;
 80113f6:	2300      	movs	r3, #0
 80113f8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.Class = CLASS_A;
 80113fa:	2300      	movs	r3, #0
 80113fc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80113fe:	f107 0308 	add.w	r3, r7, #8
 8011402:	4618      	mov	r0, r3
 8011404:	f005 fc06 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

                BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8011408:	4b34      	ldr	r3, [pc, #208]	@ (80114dc <MlmeIndication+0x168>)
 801140a:	2201      	movs	r2, #1
 801140c:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info.Time.Seconds = 0;
 801140e:	4b33      	ldr	r3, [pc, #204]	@ (80114dc <MlmeIndication+0x168>)
 8011410:	2200      	movs	r2, #0
 8011412:	605a      	str	r2, [r3, #4]
                BeaconParams.Info.GwSpecific.InfoDesc = 0;
 8011414:	4b31      	ldr	r3, [pc, #196]	@ (80114dc <MlmeIndication+0x168>)
 8011416:	2200      	movs	r2, #0
 8011418:	759a      	strb	r2, [r3, #22]
                memset1( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 801141a:	2206      	movs	r2, #6
 801141c:	2100      	movs	r1, #0
 801141e:	4830      	ldr	r0, [pc, #192]	@ (80114e0 <MlmeIndication+0x16c>)
 8011420:	f00e f934 	bl	801f68c <memset1>

                if( LmHandlerCallbacks->OnClassChange != NULL )
 8011424:	4b2c      	ldr	r3, [pc, #176]	@ (80114d8 <MlmeIndication+0x164>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801142a:	2b00      	cmp	r3, #0
 801142c:	d004      	beq.n	8011438 <MlmeIndication+0xc4>
                {
                    LmHandlerCallbacks->OnClassChange( CLASS_A );
 801142e:	4b2a      	ldr	r3, [pc, #168]	@ (80114d8 <MlmeIndication+0x164>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011434:	2000      	movs	r0, #0
 8011436:	4798      	blx	r3
                }
                if( LmHandlerCallbacks->OnBeaconStatusChange != NULL )
 8011438:	4b27      	ldr	r3, [pc, #156]	@ (80114d8 <MlmeIndication+0x164>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801143e:	2b00      	cmp	r3, #0
 8011440:	d004      	beq.n	801144c <MlmeIndication+0xd8>
                {
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8011442:	4b25      	ldr	r3, [pc, #148]	@ (80114d8 <MlmeIndication+0x164>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011448:	4824      	ldr	r0, [pc, #144]	@ (80114dc <MlmeIndication+0x168>)
 801144a:	4798      	blx	r3
                }

                LmHandlerDeviceTimeReq( );
 801144c:	f7ff fc96 	bl	8010d7c <LmHandlerDeviceTimeReq>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
 8011450:	e03c      	b.n	80114cc <MlmeIndication+0x158>
        case MLME_BEACON:
            {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
                if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	785b      	ldrb	r3, [r3, #1]
 8011456:	2b0d      	cmp	r3, #13
 8011458:	d118      	bne.n	801148c <MlmeIndication+0x118>
                {
                    BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 801145a:	4b20      	ldr	r3, [pc, #128]	@ (80114dc <MlmeIndication+0x168>)
 801145c:	2202      	movs	r2, #2
 801145e:	705a      	strb	r2, [r3, #1]
                    BeaconParams.Info = mlmeIndication->BeaconInfo;
 8011460:	4a1e      	ldr	r2, [pc, #120]	@ (80114dc <MlmeIndication+0x168>)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	1d14      	adds	r4, r2, #4
 8011466:	f103 0508 	add.w	r5, r3, #8
 801146a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801146c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801146e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011472:	e884 0007 	stmia.w	r4, {r0, r1, r2}

                    if( LmHandlerCallbacks->OnBeaconStatusChange != NULL )
 8011476:	4b18      	ldr	r3, [pc, #96]	@ (80114d8 <MlmeIndication+0x164>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801147c:	2b00      	cmp	r3, #0
 801147e:	d024      	beq.n	80114ca <MlmeIndication+0x156>
                    {
                        LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8011480:	4b15      	ldr	r3, [pc, #84]	@ (80114d8 <MlmeIndication+0x164>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011486:	4815      	ldr	r0, [pc, #84]	@ (80114dc <MlmeIndication+0x168>)
 8011488:	4798      	blx	r3
                        LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
                    }
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
 801148a:	e01e      	b.n	80114ca <MlmeIndication+0x156>
                else if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	785b      	ldrb	r3, [r3, #1]
 8011490:	2b0f      	cmp	r3, #15
 8011492:	d11a      	bne.n	80114ca <MlmeIndication+0x156>
                    BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 8011494:	4b11      	ldr	r3, [pc, #68]	@ (80114dc <MlmeIndication+0x168>)
 8011496:	2203      	movs	r2, #3
 8011498:	705a      	strb	r2, [r3, #1]
                    BeaconParams.Info = mlmeIndication->BeaconInfo;
 801149a:	4a10      	ldr	r2, [pc, #64]	@ (80114dc <MlmeIndication+0x168>)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	1d14      	adds	r4, r2, #4
 80114a0:	f103 0508 	add.w	r5, r3, #8
 80114a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80114ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                    if( LmHandlerCallbacks->OnBeaconStatusChange != NULL )
 80114b0:	4b09      	ldr	r3, [pc, #36]	@ (80114d8 <MlmeIndication+0x164>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d007      	beq.n	80114ca <MlmeIndication+0x156>
                        LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 80114ba:	4b07      	ldr	r3, [pc, #28]	@ (80114d8 <MlmeIndication+0x164>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114c0:	4806      	ldr	r0, [pc, #24]	@ (80114dc <MlmeIndication+0x168>)
 80114c2:	4798      	blx	r3
            break;
 80114c4:	e001      	b.n	80114ca <MlmeIndication+0x156>
        default:
            break;
 80114c6:	bf00      	nop
 80114c8:	e000      	b.n	80114cc <MlmeIndication+0x158>
            break;
 80114ca:	bf00      	nop
    }
}
 80114cc:	bf00      	nop
 80114ce:	3730      	adds	r7, #48	@ 0x30
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bdb0      	pop	{r4, r5, r7, pc}
 80114d4:	200000cc 	.word	0x200000cc
 80114d8:	200009e8 	.word	0x200009e8
 80114dc:	20000a14 	.word	0x20000a14
 80114e0:	20000a2b 	.word	0x20000a2b

080114e4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	6039      	str	r1, [r7, #0]
 80114ee:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 80114f0:	2300      	movs	r3, #0
 80114f2:	60fb      	str	r3, [r7, #12]
    switch( id )
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d104      	bne.n	8011504 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 80114fa:	f000 fe17 	bl	801212c <LmhpCompliancePackageFactory>
 80114fe:	4603      	mov	r3, r0
 8011500:	60fb      	str	r3, [r7, #12]
                break;
 8011502:	e00d      	b.n	8011520 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8011504:	f107 020c 	add.w	r2, r7, #12
 8011508:	79fb      	ldrb	r3, [r7, #7]
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f001 faff 	bl	8012b10 <LmhpPackagesRegister>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d002      	beq.n	801151e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8011518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801151c:	e03b      	b.n	8011596 <LmHandlerPackageRegister+0xb2>
                }
                break;
 801151e:	bf00      	nop
            }
    }
    if( package != NULL )
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d035      	beq.n	8011592 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 8011526:	79fb      	ldrb	r3, [r7, #7]
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	491d      	ldr	r1, [pc, #116]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 801152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8011530:	79fb      	ldrb	r3, [r7, #7]
 8011532:	4a1b      	ldr	r2, [pc, #108]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 8011534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011538:	4a1a      	ldr	r2, [pc, #104]	@ (80115a4 <LmHandlerPackageRegister+0xc0>)
 801153a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 801153c:	4b1a      	ldr	r3, [pc, #104]	@ (80115a8 <LmHandlerPackageRegister+0xc4>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	79fb      	ldrb	r3, [r7, #7]
 8011542:	4917      	ldr	r1, [pc, #92]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 8011544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011548:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801154a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 801154c:	4b16      	ldr	r3, [pc, #88]	@ (80115a8 <LmHandlerPackageRegister+0xc4>)
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	79fb      	ldrb	r3, [r7, #7]
 8011552:	4913      	ldr	r1, [pc, #76]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 8011554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011558:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801155a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 801155c:	79fb      	ldrb	r3, [r7, #7]
 801155e:	4a10      	ldr	r2, [pc, #64]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 8011560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011564:	4a11      	ldr	r2, [pc, #68]	@ (80115ac <LmHandlerPackageRegister+0xc8>)
 8011566:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8011568:	4b0f      	ldr	r3, [pc, #60]	@ (80115a8 <LmHandlerPackageRegister+0xc4>)
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	79fb      	ldrb	r3, [r7, #7]
 801156e:	490c      	ldr	r1, [pc, #48]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 8011570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011574:	6992      	ldr	r2, [r2, #24]
 8011576:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8011578:	79fb      	ldrb	r3, [r7, #7]
 801157a:	4a09      	ldr	r2, [pc, #36]	@ (80115a0 <LmHandlerPackageRegister+0xbc>)
 801157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	4a0b      	ldr	r2, [pc, #44]	@ (80115b0 <LmHandlerPackageRegister+0xcc>)
 8011584:	6851      	ldr	r1, [r2, #4]
 8011586:	4a0a      	ldr	r2, [pc, #40]	@ (80115b0 <LmHandlerPackageRegister+0xcc>)
 8011588:	7852      	ldrb	r2, [r2, #1]
 801158a:	6838      	ldr	r0, [r7, #0]
 801158c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 801158e:	2300      	movs	r3, #0
 8011590:	e001      	b.n	8011596 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8011592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8011596:	4618      	mov	r0, r3
 8011598:	3710      	adds	r7, #16
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	200009bc 	.word	0x200009bc
 80115a4:	08010a65 	.word	0x08010a65
 80115a8:	200009e8 	.word	0x200009e8
 80115ac:	08010d7d 	.word	0x08010d7d
 80115b0:	200000e0 	.word	0x200000e0

080115b4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	4603      	mov	r3, r0
 80115bc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80115be:	79fb      	ldrb	r3, [r7, #7]
 80115c0:	2b04      	cmp	r3, #4
 80115c2:	d80e      	bhi.n	80115e2 <LmHandlerPackageIsInitialized+0x2e>
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	4a09      	ldr	r2, [pc, #36]	@ (80115ec <LmHandlerPackageIsInitialized+0x38>)
 80115c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d007      	beq.n	80115e2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	4a05      	ldr	r2, [pc, #20]	@ (80115ec <LmHandlerPackageIsInitialized+0x38>)
 80115d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	4798      	blx	r3
 80115de:	4603      	mov	r3, r0
 80115e0:	e000      	b.n	80115e4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80115e2:	2300      	movs	r3, #0
    }
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	200009bc 	.word	0x200009bc

080115f0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	6039      	str	r1, [r7, #0]
 80115fa:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80115fc:	2300      	movs	r3, #0
 80115fe:	73fb      	strb	r3, [r7, #15]
 8011600:	e067      	b.n	80116d2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 8011602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011606:	4a37      	ldr	r2, [pc, #220]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d05a      	beq.n	80116c6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 8011610:	79fb      	ldrb	r3, [r7, #7]
 8011612:	2b03      	cmp	r3, #3
 8011614:	d84e      	bhi.n	80116b4 <LmHandlerPackagesNotify+0xc4>
 8011616:	a201      	add	r2, pc, #4	@ (adr r2, 801161c <LmHandlerPackagesNotify+0x2c>)
 8011618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801161c:	0801162d 	.word	0x0801162d
 8011620:	0801164f 	.word	0x0801164f
 8011624:	08011671 	.word	0x08011671
 8011628:	08011693 	.word	0x08011693
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011630:	4a2c      	ldr	r2, [pc, #176]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011636:	699b      	ldr	r3, [r3, #24]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d03d      	beq.n	80116b8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801163c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011640:	4a28      	ldr	r2, [pc, #160]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011646:	699b      	ldr	r3, [r3, #24]
 8011648:	6838      	ldr	r0, [r7, #0]
 801164a:	4798      	blx	r3
                        }
                        break;
 801164c:	e034      	b.n	80116b8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 801164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011652:	4a24      	ldr	r2, [pc, #144]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011658:	69db      	ldr	r3, [r3, #28]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d02e      	beq.n	80116bc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 801165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011662:	4a20      	ldr	r2, [pc, #128]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011668:	69db      	ldr	r3, [r3, #28]
 801166a:	6838      	ldr	r0, [r7, #0]
 801166c:	4798      	blx	r3
                        }
                        break;
 801166e:	e025      	b.n	80116bc <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8011670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011674:	4a1b      	ldr	r2, [pc, #108]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801167a:	6a1b      	ldr	r3, [r3, #32]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d01f      	beq.n	80116c0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8011680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011684:	4a17      	ldr	r2, [pc, #92]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801168a:	6a1b      	ldr	r3, [r3, #32]
 801168c:	6838      	ldr	r0, [r7, #0]
 801168e:	4798      	blx	r3
                        }
                        break;
 8011690:	e016      	b.n	80116c0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8011692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011696:	4a13      	ldr	r2, [pc, #76]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 8011698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d010      	beq.n	80116c4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80116a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116a6:	4a0f      	ldr	r2, [pc, #60]	@ (80116e4 <LmHandlerPackagesNotify+0xf4>)
 80116a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ae:	6838      	ldr	r0, [r7, #0]
 80116b0:	4798      	blx	r3
                        }
                        break;
 80116b2:	e007      	b.n	80116c4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 80116b4:	bf00      	nop
 80116b6:	e006      	b.n	80116c6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80116b8:	bf00      	nop
 80116ba:	e004      	b.n	80116c6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80116bc:	bf00      	nop
 80116be:	e002      	b.n	80116c6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80116c0:	bf00      	nop
 80116c2:	e000      	b.n	80116c6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80116c4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80116c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	3301      	adds	r3, #1
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	73fb      	strb	r3, [r7, #15]
 80116d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116d6:	2b04      	cmp	r3, #4
 80116d8:	dd93      	ble.n	8011602 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80116da:	bf00      	nop
 80116dc:	bf00      	nop
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	200009bc 	.word	0x200009bc

080116e8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80116ee:	2300      	movs	r3, #0
 80116f0:	71fb      	strb	r3, [r7, #7]
 80116f2:	e018      	b.n	8011726 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 80116f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116f8:	4a0f      	ldr	r2, [pc, #60]	@ (8011738 <LmHandlerPackageIsTxPending+0x50>)
 80116fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00b      	beq.n	801171a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8011702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011706:	4a0c      	ldr	r2, [pc, #48]	@ (8011738 <LmHandlerPackageIsTxPending+0x50>)
 8011708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	4798      	blx	r3
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 8011716:	2301      	movs	r3, #1
 8011718:	e00a      	b.n	8011730 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801171e:	b2db      	uxtb	r3, r3
 8011720:	3301      	adds	r3, #1
 8011722:	b2db      	uxtb	r3, r3
 8011724:	71fb      	strb	r3, [r7, #7]
 8011726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801172a:	2b04      	cmp	r3, #4
 801172c:	dde2      	ble.n	80116f4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	200009bc 	.word	0x200009bc

0801173c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011742:	2300      	movs	r3, #0
 8011744:	71fb      	strb	r3, [r7, #7]
 8011746:	e022      	b.n	801178e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801174c:	4a14      	ldr	r2, [pc, #80]	@ (80117a0 <LmHandlerPackagesProcess+0x64>)
 801174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d015      	beq.n	8011782 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8011756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801175a:	4a11      	ldr	r2, [pc, #68]	@ (80117a0 <LmHandlerPackagesProcess+0x64>)
 801175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011760:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00d      	beq.n	8011782 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8011766:	79fb      	ldrb	r3, [r7, #7]
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff ff23 	bl	80115b4 <LmHandlerPackageIsInitialized>
 801176e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8011770:	2b00      	cmp	r3, #0
 8011772:	d006      	beq.n	8011782 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8011774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011778:	4a09      	ldr	r2, [pc, #36]	@ (80117a0 <LmHandlerPackagesProcess+0x64>)
 801177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801177e:	691b      	ldr	r3, [r3, #16]
 8011780:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011786:	b2db      	uxtb	r3, r3
 8011788:	3301      	adds	r3, #1
 801178a:	b2db      	uxtb	r3, r3
 801178c:	71fb      	strb	r3, [r7, #7]
 801178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011792:	2b04      	cmp	r3, #4
 8011794:	ddd8      	ble.n	8011748 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 8011796:	bf00      	nop
 8011798:	bf00      	nop
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	200009bc 	.word	0x200009bc

080117a4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	4603      	mov	r3, r0
 80117ac:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80117ae:	4a09      	ldr	r2, [pc, #36]	@ (80117d4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 80117b0:	79fb      	ldrb	r3, [r7, #7]
 80117b2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80117b4:	4b08      	ldr	r3, [pc, #32]	@ (80117d8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d005      	beq.n	80117ca <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80117be:	4b06      	ldr	r3, [pc, #24]	@ (80117d8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117c4:	79fa      	ldrb	r2, [r7, #7]
 80117c6:	4610      	mov	r0, r2
 80117c8:	4798      	blx	r3
    }
}
 80117ca:	bf00      	nop
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	200009d0 	.word	0x200009d0
 80117d8:	200009e8 	.word	0x200009e8

080117dc <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	4603      	mov	r3, r0
 80117e4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80117e6:	4a09      	ldr	r2, [pc, #36]	@ (801180c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 80117e8:	79fb      	ldrb	r3, [r7, #7]
 80117ea:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80117ec:	4b08      	ldr	r3, [pc, #32]	@ (8011810 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d005      	beq.n	8011802 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 80117f6:	4b06      	ldr	r3, [pc, #24]	@ (8011810 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117fc:	79fa      	ldrb	r2, [r7, #7]
 80117fe:	4610      	mov	r0, r2
 8011800:	4798      	blx	r3
    }
}
 8011802:	bf00      	nop
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	200009d0 	.word	0x200009d0
 8011810:	200009e8 	.word	0x200009e8

08011814 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	4603      	mov	r3, r0
 801181c:	6039      	str	r1, [r7, #0]
 801181e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d102      	bne.n	801182c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8011826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801182a:	e00e      	b.n	801184a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 801182c:	79fb      	ldrb	r3, [r7, #7]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d002      	beq.n	8011838 <LmHandlerGetVersion+0x24>
 8011832:	2b01      	cmp	r3, #1
 8011834:	d004      	beq.n	8011840 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 8011836:	e007      	b.n	8011848 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	4a06      	ldr	r2, [pc, #24]	@ (8011854 <LmHandlerGetVersion+0x40>)
 801183c:	601a      	str	r2, [r3, #0]
            break;
 801183e:	e003      	b.n	8011848 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	4a05      	ldr	r2, [pc, #20]	@ (8011858 <LmHandlerGetVersion+0x44>)
 8011844:	601a      	str	r2, [r3, #0]
            break;
 8011846:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011848:	2300      	movs	r3, #0
}
 801184a:	4618      	mov	r0, r3
 801184c:	370c      	adds	r7, #12
 801184e:	46bd      	mov	sp, r7
 8011850:	bc80      	pop	{r7}
 8011852:	4770      	bx	lr
 8011854:	01000400 	.word	0x01000400
 8011858:	02010001 	.word	0x02010001

0801185c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8011860:	f006 f878 	bl	8017954 <LoRaMacDeInitialization>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d101      	bne.n	801186e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801186a:	2300      	movs	r3, #0
 801186c:	e001      	b.n	8011872 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801186e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8011872:	4618      	mov	r0, r3
 8011874:	bd80      	pop	{r7, pc}

08011876 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8011876:	b580      	push	{r7, lr}
 8011878:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801187a:	f004 ff2b 	bl	80166d4 <LoRaMacHalt>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8011884:	2300      	movs	r3, #0
 8011886:	e001      	b.n	801188c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8011888:	f06f 0301 	mvn.w	r3, #1
    }
}
 801188c:	4618      	mov	r0, r3
 801188e:	bd80      	pop	{r7, pc}

08011890 <LmHandlerLinkCheckReq>:

LmHandlerErrorStatus_t LmHandlerLinkCheckReq( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b086      	sub	sp, #24
 8011894:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_LINK_CHECK;
 8011896:	2305      	movs	r3, #5
 8011898:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 801189a:	463b      	mov	r3, r7
 801189c:	4618      	mov	r0, r3
 801189e:	f005 fd63 	bl	8017368 <LoRaMacMlmeRequest>
 80118a2:	4603      	mov	r3, r0
 80118a4:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 80118a6:	7dfb      	ldrb	r3, [r7, #23]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <LmHandlerLinkCheckReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80118ac:	2300      	movs	r3, #0
 80118ae:	e001      	b.n	80118b4 <LmHandlerLinkCheckReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80118b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3718      	adds	r7, #24
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <LmHandlerGetDevEUI>:

LmHandlerErrorStatus_t LmHandlerGetDevEUI( uint8_t *devEUI )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b08c      	sub	sp, #48	@ 0x30
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( devEUI == NULL )
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <LmHandlerGetDevEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80118ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118ce:	e00f      	b.n	80118f0 <LmHandlerGetDevEUI+0x34>
    }

    mibReq.Type = MIB_DEV_EUI;
 80118d0:	2302      	movs	r3, #2
 80118d2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.DevEui = devEUI;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80118d8:	f107 0308 	add.w	r3, r7, #8
 80118dc:	4618      	mov	r0, r3
 80118de:	f004 ffc1 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d002      	beq.n	80118ee <LmHandlerGetDevEUI+0x32>
    {
        return LORAMAC_HANDLER_ERROR;
 80118e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118ec:	e000      	b.n	80118f0 <LmHandlerGetDevEUI+0x34>
    }
    return LORAMAC_HANDLER_SUCCESS;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3730      	adds	r7, #48	@ 0x30
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <LmHandlerSetDevEUI>:

LmHandlerErrorStatus_t LmHandlerSetDevEUI( uint8_t *devEUI )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08c      	sub	sp, #48	@ 0x30
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8011900:	f7ff f952 	bl	8010ba8 <LmHandlerJoinStatus>
 8011904:	4603      	mov	r3, r0
 8011906:	2b01      	cmp	r3, #1
 8011908:	d010      	beq.n	801192c <LmHandlerSetDevEUI+0x34>
    {
        mibReq.Type = MIB_DEV_EUI;
 801190a:	2302      	movs	r3, #2
 801190c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.DevEui = devEUI;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	60fb      	str	r3, [r7, #12]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011912:	f107 0308 	add.w	r3, r7, #8
 8011916:	4618      	mov	r0, r3
 8011918:	f005 f97c 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <LmHandlerSetDevEUI+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8011922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011926:	e003      	b.n	8011930 <LmHandlerSetDevEUI+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8011928:	2300      	movs	r3, #0
 801192a:	e001      	b.n	8011930 <LmHandlerSetDevEUI+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 801192c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8011930:	4618      	mov	r0, r3
 8011932:	3730      	adds	r7, #48	@ 0x30
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <LmHandlerGetAppEUI>:

LmHandlerErrorStatus_t LmHandlerGetAppEUI( uint8_t *appEUI )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08c      	sub	sp, #48	@ 0x30
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if( appEUI == NULL )
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d102      	bne.n	801194c <LmHandlerGetAppEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801194a:	e00f      	b.n	801196c <LmHandlerGetAppEUI+0x34>
    }

    mibReq.Type = MIB_JOIN_EUI;
 801194c:	2303      	movs	r3, #3
 801194e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.JoinEui = appEUI;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011954:	f107 0308 	add.w	r3, r7, #8
 8011958:	4618      	mov	r0, r3
 801195a:	f004 ff83 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <LmHandlerGetAppEUI+0x32>
    {
        return LORAMAC_HANDLER_ERROR;
 8011964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011968:	e000      	b.n	801196c <LmHandlerGetAppEUI+0x34>
    }
    return LORAMAC_HANDLER_SUCCESS;
 801196a:	2300      	movs	r3, #0
}
 801196c:	4618      	mov	r0, r3
 801196e:	3730      	adds	r7, #48	@ 0x30
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <LmHandlerSetAppEUI>:

LmHandlerErrorStatus_t LmHandlerSetAppEUI( uint8_t *appEUI )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b08c      	sub	sp, #48	@ 0x30
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 801197c:	f7ff f914 	bl	8010ba8 <LmHandlerJoinStatus>
 8011980:	4603      	mov	r3, r0
 8011982:	2b01      	cmp	r3, #1
 8011984:	d010      	beq.n	80119a8 <LmHandlerSetAppEUI+0x34>
    {
        mibReq.Type = MIB_JOIN_EUI;
 8011986:	2303      	movs	r3, #3
 8011988:	723b      	strb	r3, [r7, #8]
        mibReq.Param.JoinEui = appEUI;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60fb      	str	r3, [r7, #12]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801198e:	f107 0308 	add.w	r3, r7, #8
 8011992:	4618      	mov	r0, r3
 8011994:	f005 f93e 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d002      	beq.n	80119a4 <LmHandlerSetAppEUI+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 801199e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119a2:	e003      	b.n	80119ac <LmHandlerSetAppEUI+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 80119a4:	2300      	movs	r3, #0
 80119a6:	e001      	b.n	80119ac <LmHandlerSetAppEUI+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 80119a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3730      	adds	r7, #48	@ 0x30
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <LmHandlerGetNetworkID>:

LmHandlerErrorStatus_t LmHandlerGetNetworkID( uint32_t *networkId )
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b08c      	sub	sp, #48	@ 0x30
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if( networkId == NULL )
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d102      	bne.n	80119c8 <LmHandlerGetNetworkID+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80119c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119c6:	e010      	b.n	80119ea <LmHandlerGetNetworkID+0x36>
    }

    mibReq.Type = MIB_NET_ID;
 80119c8:	2305      	movs	r3, #5
 80119ca:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80119cc:	f107 0308 	add.w	r3, r7, #8
 80119d0:	4618      	mov	r0, r3
 80119d2:	f004 ff47 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <LmHandlerGetNetworkID+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80119dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119e0:	e003      	b.n	80119ea <LmHandlerGetNetworkID+0x36>
    }
    *networkId = mibReq.Param.NetID;
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3730      	adds	r7, #48	@ 0x30
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <LmHandlerSetNetworkID>:

LmHandlerErrorStatus_t LmHandlerSetNetworkID( uint32_t networkId )
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b08c      	sub	sp, #48	@ 0x30
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 80119fa:	f7ff f8d5 	bl	8010ba8 <LmHandlerJoinStatus>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d010      	beq.n	8011a26 <LmHandlerSetNetworkID+0x34>
    {
        mibReq.Type = MIB_NET_ID;
 8011a04:	2305      	movs	r3, #5
 8011a06:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetID = networkId;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	60fb      	str	r3, [r7, #12]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011a0c:	f107 0308 	add.w	r3, r7, #8
 8011a10:	4618      	mov	r0, r3
 8011a12:	f005 f8ff 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d002      	beq.n	8011a22 <LmHandlerSetNetworkID+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8011a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a20:	e003      	b.n	8011a2a <LmHandlerSetNetworkID+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8011a22:	2300      	movs	r3, #0
 8011a24:	e001      	b.n	8011a2a <LmHandlerSetNetworkID+0x38>
    }
    else
    {
        /* Cannot change NetworkID in running state */
        return LORAMAC_HANDLER_ERROR;
 8011a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3730      	adds	r7, #48	@ 0x30
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <LmHandlerGetDevAddr>:

LmHandlerErrorStatus_t LmHandlerGetDevAddr( uint32_t *devAddr )
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b08c      	sub	sp, #48	@ 0x30
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if( devAddr == NULL )
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d102      	bne.n	8011a46 <LmHandlerGetDevAddr+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a44:	e010      	b.n	8011a68 <LmHandlerGetDevAddr+0x36>
    }

    mibReq.Type = MIB_DEV_ADDR;
 8011a46:	2306      	movs	r3, #6
 8011a48:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011a4a:	f107 0308 	add.w	r3, r7, #8
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f004 ff08 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d002      	beq.n	8011a60 <LmHandlerGetDevAddr+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a5e:	e003      	b.n	8011a68 <LmHandlerGetDevAddr+0x36>
    }
    *devAddr = mibReq.Param.DevAddr;
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3730      	adds	r7, #48	@ 0x30
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <LmHandlerSetDevAddr>:

LmHandlerErrorStatus_t LmHandlerSetDevAddr( uint32_t devAddr )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b08c      	sub	sp, #48	@ 0x30
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8011a78:	f7ff f896 	bl	8010ba8 <LmHandlerJoinStatus>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d010      	beq.n	8011aa4 <LmHandlerSetDevAddr+0x34>
    {
        mibReq.Type = MIB_DEV_ADDR;
 8011a82:	2306      	movs	r3, #6
 8011a84:	723b      	strb	r3, [r7, #8]
        mibReq.Param.DevAddr = devAddr;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	60fb      	str	r3, [r7, #12]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011a8a:	f107 0308 	add.w	r3, r7, #8
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f005 f8c0 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d002      	beq.n	8011aa0 <LmHandlerSetDevAddr+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8011a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a9e:	e003      	b.n	8011aa8 <LmHandlerSetDevAddr+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e001      	b.n	8011aa8 <LmHandlerSetDevAddr+0x38>
    }
    else
    {
        /* Cannot change DevAddr in running state */
        return LORAMAC_HANDLER_ERROR;
 8011aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3730      	adds	r7, #48	@ 0x30
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <LmHandlerSetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerSetActiveRegion( LoRaMacRegion_t region )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	71fb      	strb	r3, [r7, #7]
    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8011aba:	f7ff f875 	bl	8010ba8 <LmHandlerJoinStatus>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d007      	beq.n	8011ad4 <LmHandlerSetActiveRegion+0x24>
    {
        LmHandlerParams.ActiveRegion = region;
 8011ac4:	4a06      	ldr	r2, [pc, #24]	@ (8011ae0 <LmHandlerSetActiveRegion+0x30>)
 8011ac6:	79fb      	ldrb	r3, [r7, #7]
 8011ac8:	7013      	strb	r3, [r2, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 8011aca:	4805      	ldr	r0, [pc, #20]	@ (8011ae0 <LmHandlerSetActiveRegion+0x30>)
 8011acc:	f7fe fe6c 	bl	80107a8 <LmHandlerConfigure>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	e001      	b.n	8011ad8 <LmHandlerSetActiveRegion+0x28>
    }
    else
    {
        /* Cannot change Region in running state */
        return LORAMAC_HANDLER_ERROR;
 8011ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	200009d0 	.word	0x200009d0

08011ae4 <LmHandlerGetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerGetAdrEnable( bool *adrEnable )
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
    if( adrEnable == NULL )
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d102      	bne.n	8011af8 <LmHandlerGetAdrEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011af6:	e004      	b.n	8011b02 <LmHandlerGetAdrEnable+0x1e>
    }

    *adrEnable = LmHandlerParams.AdrEnable;
 8011af8:	4b04      	ldr	r3, [pc, #16]	@ (8011b0c <LmHandlerGetAdrEnable+0x28>)
 8011afa:	789a      	ldrb	r2, [r3, #2]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011b00:	2300      	movs	r3, #0
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bc80      	pop	{r7}
 8011b0a:	4770      	bx	lr
 8011b0c:	200009d0 	.word	0x200009d0

08011b10 <LmHandlerSetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerSetAdrEnable( bool adrEnable )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b08c      	sub	sp, #48	@ 0x30
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_ADR;
 8011b1a:	2304      	movs	r3, #4
 8011b1c:	723b      	strb	r3, [r7, #8]
    mibReq.Param.AdrEnable = adrEnable;
 8011b1e:	79fb      	ldrb	r3, [r7, #7]
 8011b20:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011b22:	f107 0308 	add.w	r3, r7, #8
 8011b26:	4618      	mov	r0, r3
 8011b28:	f005 f874 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d002      	beq.n	8011b38 <LmHandlerSetAdrEnable+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 8011b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b36:	e003      	b.n	8011b40 <LmHandlerSetAdrEnable+0x30>
    }
    LmHandlerParams.AdrEnable = adrEnable;
 8011b38:	4a03      	ldr	r2, [pc, #12]	@ (8011b48 <LmHandlerSetAdrEnable+0x38>)
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
 8011b3c:	7093      	strb	r3, [r2, #2]

    return LORAMAC_HANDLER_SUCCESS;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3730      	adds	r7, #48	@ 0x30
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	200009d0 	.word	0x200009d0

08011b4c <LmHandlerSetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerSetTxDatarate( int8_t txDatarate )
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08c      	sub	sp, #48	@ 0x30
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	71fb      	strb	r3, [r7, #7]
    if( LmHandlerParams.AdrEnable == true )
 8011b56:	4b0f      	ldr	r3, [pc, #60]	@ (8011b94 <LmHandlerSetTxDatarate+0x48>)
 8011b58:	789b      	ldrb	r3, [r3, #2]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d002      	beq.n	8011b64 <LmHandlerSetTxDatarate+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8011b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b62:	e012      	b.n	8011b8a <LmHandlerSetTxDatarate+0x3e>
    }

    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8011b64:	2320      	movs	r3, #32
 8011b66:	723b      	strb	r3, [r7, #8]
    mibReq.Param.ChannelsDatarate = txDatarate;
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011b6c:	f107 0308 	add.w	r3, r7, #8
 8011b70:	4618      	mov	r0, r3
 8011b72:	f005 f84f 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d002      	beq.n	8011b82 <LmHandlerSetTxDatarate+0x36>
    {
        return LORAMAC_HANDLER_ERROR;
 8011b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b80:	e003      	b.n	8011b8a <LmHandlerSetTxDatarate+0x3e>
    }

    LmHandlerParams.TxDatarate = txDatarate;
 8011b82:	4a04      	ldr	r2, [pc, #16]	@ (8011b94 <LmHandlerSetTxDatarate+0x48>)
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	7113      	strb	r3, [r2, #4]

    return LORAMAC_HANDLER_SUCCESS;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3730      	adds	r7, #48	@ 0x30
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	200009d0 	.word	0x200009d0

08011b98 <LmHandlerGetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable( bool *dutyCycleEnable )
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
    if( dutyCycleEnable == NULL )
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d102      	bne.n	8011bac <LmHandlerGetDutyCycleEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011baa:	e004      	b.n	8011bb6 <LmHandlerGetDutyCycleEnable+0x1e>
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 8011bac:	4b04      	ldr	r3, [pc, #16]	@ (8011bc0 <LmHandlerGetDutyCycleEnable+0x28>)
 8011bae:	79da      	ldrb	r2, [r3, #7]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bc80      	pop	{r7}
 8011bbe:	4770      	bx	lr
 8011bc0:	200009d0 	.word	0x200009d0

08011bc4 <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable( bool dutyCycleEnable )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	4603      	mov	r3, r0
 8011bcc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 8011bce:	4a06      	ldr	r2, [pc, #24]	@ (8011be8 <LmHandlerSetDutyCycleEnable+0x24>)
 8011bd0:	79fb      	ldrb	r3, [r7, #7]
 8011bd2:	71d3      	strb	r3, [r2, #7]
    LoRaMacTestSetDutyCycleOn( dutyCycleEnable );
 8011bd4:	79fb      	ldrb	r3, [r7, #7]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f005 fe96 	bl	8017908 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	200009d0 	.word	0x200009d0

08011bec <LmHandlerGetRX2Params>:

LmHandlerErrorStatus_t LmHandlerGetRX2Params( RxChannelParams_t *rxParams )
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08c      	sub	sp, #48	@ 0x30
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
    if( rxParams == NULL )
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d102      	bne.n	8011c00 <LmHandlerGetRX2Params+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011bfe:	e013      	b.n	8011c28 <LmHandlerGetRX2Params+0x3c>
    }

    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 8011c00:	2312      	movs	r3, #18
 8011c02:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011c04:	f107 0308 	add.w	r3, r7, #8
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f004 fe2b 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d002      	beq.n	8011c1a <LmHandlerGetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c18:	e006      	b.n	8011c28 <LmHandlerGetRX2Params+0x3c>
    }

    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	601a      	str	r2, [r3, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 8011c20:	7c3a      	ldrb	r2, [r7, #16]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3730      	adds	r7, #48	@ 0x30
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <LmHandlerGetTxPower>:

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08c      	sub	sp, #48	@ 0x30
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d102      	bne.n	8011c44 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c42:	e016      	b.n	8011c72 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8011c44:	2321      	movs	r3, #33	@ 0x21
 8011c46:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011c48:	f107 0308 	add.w	r3, r7, #8
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f004 fe09 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c5c:	e009      	b.n	8011c72 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8011c5e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f993 2000 	ldrsb.w	r2, [r3]
 8011c6c:	4b03      	ldr	r3, [pc, #12]	@ (8011c7c <LmHandlerGetTxPower+0x4c>)
 8011c6e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3730      	adds	r7, #48	@ 0x30
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	200009d0 	.word	0x200009d0

08011c80 <LmHandlerGetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx1Delay( uint32_t *rxDelay )
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b08c      	sub	sp, #48	@ 0x30
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d102      	bne.n	8011c94 <LmHandlerGetRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c92:	e010      	b.n	8011cb6 <LmHandlerGetRx1Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8011c94:	231a      	movs	r3, #26
 8011c96:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011c98:	f107 0308 	add.w	r3, r7, #8
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f004 fde1 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <LmHandlerGetRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cac:	e003      	b.n	8011cb6 <LmHandlerGetRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay1;
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3730      	adds	r7, #48	@ 0x30
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <LmHandlerGetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx2Delay( uint32_t *rxDelay )
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b08c      	sub	sp, #48	@ 0x30
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d102      	bne.n	8011cd2 <LmHandlerGetRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cd0:	e010      	b.n	8011cf4 <LmHandlerGetRx2Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8011cd2:	231b      	movs	r3, #27
 8011cd4:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011cd6:	f107 0308 	add.w	r3, r7, #8
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f004 fdc2 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d002      	beq.n	8011cec <LmHandlerGetRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cea:	e003      	b.n	8011cf4 <LmHandlerGetRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay2;
 8011cec:	68fa      	ldr	r2, [r7, #12]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011cf2:	2300      	movs	r3, #0
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3730      	adds	r7, #48	@ 0x30
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <LmHandlerGetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx1Delay( uint32_t *rxDelay )
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b08c      	sub	sp, #48	@ 0x30
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d102      	bne.n	8011d10 <LmHandlerGetJoinRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d0e:	e010      	b.n	8011d32 <LmHandlerGetJoinRx1Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8011d10:	231c      	movs	r3, #28
 8011d12:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011d14:	f107 0308 	add.w	r3, r7, #8
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f004 fda3 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d002      	beq.n	8011d2a <LmHandlerGetJoinRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d28:	e003      	b.n	8011d32 <LmHandlerGetJoinRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3730      	adds	r7, #48	@ 0x30
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <LmHandlerGetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx2Delay( uint32_t *rxDelay )
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b08c      	sub	sp, #48	@ 0x30
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d102      	bne.n	8011d4e <LmHandlerGetJoinRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d4c:	e010      	b.n	8011d70 <LmHandlerGetJoinRx2Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8011d4e:	231d      	movs	r3, #29
 8011d50:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011d52:	f107 0308 	add.w	r3, r7, #8
 8011d56:	4618      	mov	r0, r3
 8011d58:	f004 fd84 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d002      	beq.n	8011d68 <LmHandlerGetJoinRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d66:	e003      	b.n	8011d70 <LmHandlerGetJoinRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3730      	adds	r7, #48	@ 0x30
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <LmHandlerSetTxPower>:

LmHandlerErrorStatus_t LmHandlerSetTxPower( int8_t txPower )
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b08c      	sub	sp, #48	@ 0x30
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	4603      	mov	r3, r0
 8011d80:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8011d82:	2321      	movs	r3, #33	@ 0x21
 8011d84:	723b      	strb	r3, [r7, #8]
    mibReq.Param.ChannelsTxPower = txPower;
 8011d86:	79fb      	ldrb	r3, [r7, #7]
 8011d88:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011d8a:	f107 0308 	add.w	r3, r7, #8
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f004 ff40 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <LmHandlerSetTxPower+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 8011d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d9e:	e003      	b.n	8011da8 <LmHandlerSetTxPower+0x30>
    }

    LmHandlerParams.TxPower = txPower;
 8011da0:	4a03      	ldr	r2, [pc, #12]	@ (8011db0 <LmHandlerSetTxPower+0x38>)
 8011da2:	79fb      	ldrb	r3, [r7, #7]
 8011da4:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3730      	adds	r7, #48	@ 0x30
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	200009d0 	.word	0x200009d0

08011db4 <LmHandlerSetRX2Params>:

LmHandlerErrorStatus_t LmHandlerSetRX2Params( RxChannelParams_t *rxParams )
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b08c      	sub	sp, #48	@ 0x30
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 8011dbc:	2312      	movs	r3, #18
 8011dbe:	723b      	strb	r3, [r7, #8]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	791b      	ldrb	r3, [r3, #4]
 8011dca:	743b      	strb	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011dcc:	f107 0308 	add.w	r3, r7, #8
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f004 ff1f 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d002      	beq.n	8011de2 <LmHandlerSetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011de0:	e000      	b.n	8011de4 <LmHandlerSetRX2Params+0x30>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3730      	adds	r7, #48	@ 0x30
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <LmHandlerSetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx1Delay( uint32_t rxDelay )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b08c      	sub	sp, #48	@ 0x30
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8011df4:	231a      	movs	r3, #26
 8011df6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.ReceiveDelay1 = rxDelay;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011dfc:	f107 0308 	add.w	r3, r7, #8
 8011e00:	4618      	mov	r0, r3
 8011e02:	f004 ff07 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d002      	beq.n	8011e12 <LmHandlerSetRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8011e0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e10:	e000      	b.n	8011e14 <LmHandlerSetRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011e12:	2300      	movs	r3, #0
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3730      	adds	r7, #48	@ 0x30
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <LmHandlerSetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx2Delay( uint32_t rxDelay )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b08c      	sub	sp, #48	@ 0x30
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8011e24:	231b      	movs	r3, #27
 8011e26:	723b      	strb	r3, [r7, #8]
    mibReq.Param.ReceiveDelay2 = rxDelay;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011e2c:	f107 0308 	add.w	r3, r7, #8
 8011e30:	4618      	mov	r0, r3
 8011e32:	f004 feef 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d002      	beq.n	8011e42 <LmHandlerSetRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e40:	e000      	b.n	8011e44 <LmHandlerSetRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3730      	adds	r7, #48	@ 0x30
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <LmHandlerSetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx1Delay( uint32_t rxDelay )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b08c      	sub	sp, #48	@ 0x30
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8011e54:	231c      	movs	r3, #28
 8011e56:	723b      	strb	r3, [r7, #8]
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011e5c:	f107 0308 	add.w	r3, r7, #8
 8011e60:	4618      	mov	r0, r3
 8011e62:	f004 fed7 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d002      	beq.n	8011e72 <LmHandlerSetJoinRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e70:	e000      	b.n	8011e74 <LmHandlerSetJoinRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011e72:	2300      	movs	r3, #0
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3730      	adds	r7, #48	@ 0x30
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <LmHandlerSetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx2Delay( uint32_t rxDelay )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b08c      	sub	sp, #48	@ 0x30
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8011e84:	231d      	movs	r3, #29
 8011e86:	723b      	strb	r3, [r7, #8]
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011e8c:	f107 0308 	add.w	r3, r7, #8
 8011e90:	4618      	mov	r0, r3
 8011e92:	f004 febf 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <LmHandlerSetJoinRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8011e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ea0:	e000      	b.n	8011ea4 <LmHandlerSetJoinRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3730      	adds	r7, #48	@ 0x30
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <LmHandlerGetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerGetPingPeriodicity( uint8_t *pingPeriodicity )
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( pingPeriodicity == NULL )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <LmHandlerGetPingPeriodicity+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ebe:	e004      	b.n	8011eca <LmHandlerGetPingPeriodicity+0x1e>
    }

    *pingPeriodicity = LmHandlerParams.PingSlotPeriodicity;
 8011ec0:	4b04      	ldr	r3, [pc, #16]	@ (8011ed4 <LmHandlerGetPingPeriodicity+0x28>)
 8011ec2:	7c1a      	ldrb	r2, [r3, #16]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011ec8:	2300      	movs	r3, #0
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bc80      	pop	{r7}
 8011ed2:	4770      	bx	lr
 8011ed4:	200009d0 	.word	0x200009d0

08011ed8 <LmHandlerSetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerSetPingPeriodicity( uint8_t pingPeriodicity )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8011ee2:	f7fe fe61 	bl	8010ba8 <LmHandlerJoinStatus>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d004      	beq.n	8011ef6 <LmHandlerSetPingPeriodicity+0x1e>
    {
        LmHandlerParams.PingSlotPeriodicity = pingPeriodicity;
 8011eec:	4a06      	ldr	r2, [pc, #24]	@ (8011f08 <LmHandlerSetPingPeriodicity+0x30>)
 8011eee:	79fb      	ldrb	r3, [r7, #7]
 8011ef0:	7413      	strb	r3, [r2, #16]
        return LORAMAC_HANDLER_SUCCESS;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	e004      	b.n	8011f00 <LmHandlerSetPingPeriodicity+0x28>
    }
    else
    {
        /* Cannot change Region in running state */
        return LmHandlerPingSlotReq( pingPeriodicity );
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fe ff77 	bl	8010dec <LmHandlerPingSlotReq>
 8011efe:	4603      	mov	r3, r0
    }
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	200009d0 	.word	0x200009d0

08011f0c <LmHandlerGetBeaconState>:

LmHandlerErrorStatus_t LmHandlerGetBeaconState( BeaconState_t *beaconState )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08c      	sub	sp, #48	@ 0x30
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    MibRequestConfirm_t mibReq;

    if( beaconState == NULL )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d102      	bne.n	8011f20 <LmHandlerGetBeaconState+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8011f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f1e:	e010      	b.n	8011f42 <LmHandlerGetBeaconState+0x36>
    }

    mibReq.Type = MIB_BEACON_STATE;
 8011f20:	2342      	movs	r3, #66	@ 0x42
 8011f22:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011f24:	f107 0308 	add.w	r3, r7, #8
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f004 fc9b 	bl	8016864 <LoRaMacMibGetRequestConfirm>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <LmHandlerGetBeaconState+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8011f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f38:	e003      	b.n	8011f42 <LmHandlerGetBeaconState+0x36>
    }
    *beaconState =  mibReq.Param.BeaconState;
 8011f3a:	7b3a      	ldrb	r2, [r7, #12]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8011f40:	2300      	movs	r3, #0
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3730      	adds	r7, #48	@ 0x30
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <LmHandlerGetKey>:

LmHandlerErrorStatus_t LmHandlerGetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b084      	sub	sp, #16
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	4603      	mov	r3, r0
 8011f52:	6039      	str	r1, [r7, #0]
 8011f54:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
#endif /* LORAWAN_KMS */

    if( key == NULL )
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <LmHandlerGetKey+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8011f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f60:	e014      	b.n	8011f8c <LmHandlerGetKey+0x42>
    }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID( keyID, &keyItem ) )
 8011f62:	f107 020c 	add.w	r2, r7, #12
 8011f66:	79fb      	ldrb	r3, [r7, #7]
 8011f68:	4611      	mov	r1, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fe f8d6 	bl	801011c <SecureElementGetKeyByID>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d002      	beq.n	8011f7c <LmHandlerGetKey+0x32>
    {
        return LORAMAC_HANDLER_ERROR;
 8011f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f7a:	e007      	b.n	8011f8c <LmHandlerGetKey+0x42>
    }
    memcpy1( key, keyItem->KeyValue, 16 );
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	2210      	movs	r2, #16
 8011f82:	4619      	mov	r1, r3
 8011f84:	6838      	ldr	r0, [r7, #0]
 8011f86:	f00d fb46 	bl	801f616 <memcpy1>
        return LORAMAC_HANDLER_ERROR;
    }

#endif /* LORAWAN_KMS */

    return LORAMAC_HANDLER_SUCCESS;
 8011f8a:	2300      	movs	r3, #0
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3710      	adds	r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <LmHandlerSetKey>:

LmHandlerErrorStatus_t LmHandlerSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b08c      	sub	sp, #48	@ 0x30
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	6039      	str	r1, [r7, #0]
 8011f9e:	71fb      	strb	r3, [r7, #7]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8011fa0:	f7fe fe02 	bl	8010ba8 <LmHandlerJoinStatus>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d01e      	beq.n	8011fe8 <LmHandlerSetKey+0x54>
    {
        if( keyID == APP_KEY ) /* Specific usage because APP_KEY is used to derive other keys */
 8011faa:	79fb      	ldrb	r3, [r7, #7]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d110      	bne.n	8011fd2 <LmHandlerSetKey+0x3e>
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_APP_KEY;
 8011fb0:	2307      	movs	r3, #7
 8011fb2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AppKey = key;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	60fb      	str	r3, [r7, #12]
            if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8011fb8:	f107 0308 	add.w	r3, r7, #8
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f004 fe29 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <LmHandlerSetKey+0x3a>
            {
                return LORAMAC_HANDLER_ERROR;
 8011fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011fcc:	e010      	b.n	8011ff0 <LmHandlerSetKey+0x5c>
            }
            return LORAMAC_HANDLER_SUCCESS;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	e00e      	b.n	8011ff0 <LmHandlerSetKey+0x5c>
        }
        else if( SECURE_ELEMENT_SUCCESS != SecureElementSetKey( keyID, key ) )
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	6839      	ldr	r1, [r7, #0]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe f902 	bl	80101e0 <SecureElementSetKey>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d005      	beq.n	8011fee <LmHandlerSetKey+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 8011fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011fe6:	e003      	b.n	8011ff0 <LmHandlerSetKey+0x5c>
        }
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 8011fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011fec:	e000      	b.n	8011ff0 <LmHandlerSetKey+0x5c>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011fee:	2300      	movs	r3, #0
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3730      	adds	r7, #48	@ 0x30
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <LmHandlerNvmDataStore>:

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b08e      	sub	sp, #56	@ 0x38
 8011ffc:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8011ffe:	2300      	movs	r3, #0
 8012000:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 8012008:	f7ff fc35 	bl	8011876 <LmHandlerHalt>
 801200c:	4603      	mov	r3, r0
 801200e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8012012:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012016:	2b00      	cmp	r3, #0
 8012018:	d12f      	bne.n	801207a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 801201a:	f000 f859 	bl	80120d0 <NvmDataMgmtStoreBegin>
 801201e:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8012020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012022:	f113 0f02 	cmn.w	r3, #2
 8012026:	d103      	bne.n	8012030 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8012028:	23f8      	movs	r3, #248	@ 0xf8
 801202a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801202e:	e01c      	b.n	801206a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8012030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012032:	2b00      	cmp	r3, #0
 8012034:	d104      	bne.n	8012040 <LmHandlerNvmDataStore+0x48>
 8012036:	4b1b      	ldr	r3, [pc, #108]	@ (80120a4 <LmHandlerNvmDataStore+0xac>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d103      	bne.n	8012048 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8012040:	23ff      	movs	r3, #255	@ 0xff
 8012042:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012046:	e010      	b.n	801206a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8012048:	2327      	movs	r3, #39	@ 0x27
 801204a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 801204c:	463b      	mov	r3, r7
 801204e:	4618      	mov	r0, r3
 8012050:	f004 fc08 	bl	8016864 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 8012058:	f44f 63ba 	mov.w	r3, #1488	@ 0x5d0
 801205c:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 801205e:	4b11      	ldr	r3, [pc, #68]	@ (80120a4 <LmHandlerNvmDataStore+0xac>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012068:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801206a:	f000 f847 	bl	80120fc <NvmDataMgmtStoreEnd>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d002      	beq.n	801207a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8012074:	23ff      	movs	r3, #255	@ 0xff
 8012076:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 801207a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801207e:	2b00      	cmp	r3, #0
 8012080:	d109      	bne.n	8012096 <LmHandlerNvmDataStore+0x9e>
 8012082:	4b08      	ldr	r3, [pc, #32]	@ (80120a4 <LmHandlerNvmDataStore+0xac>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	69db      	ldr	r3, [r3, #28]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d004      	beq.n	8012096 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 801208c:	4b05      	ldr	r3, [pc, #20]	@ (80120a4 <LmHandlerNvmDataStore+0xac>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	69db      	ldr	r3, [r3, #28]
 8012092:	2001      	movs	r0, #1
 8012094:	4798      	blx	r3
    }

    return lmhStatus;
 8012096:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801209a:	4618      	mov	r0, r3
 801209c:	3738      	adds	r7, #56	@ 0x38
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	200009e8 	.word	0x200009e8

080120a8 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80120b2:	4b06      	ldr	r3, [pc, #24]	@ (80120cc <NvmDataMgmtEvent+0x24>)
 80120b4:	881a      	ldrh	r2, [r3, #0]
 80120b6:	88fb      	ldrh	r3, [r7, #6]
 80120b8:	4313      	orrs	r3, r2
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	4b03      	ldr	r3, [pc, #12]	@ (80120cc <NvmDataMgmtEvent+0x24>)
 80120be:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bc80      	pop	{r7}
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop
 80120cc:	20000b34 	.word	0x20000b34

080120d0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80120d4:	4b08      	ldr	r3, [pc, #32]	@ (80120f8 <NvmDataMgmtStoreBegin+0x28>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d102      	bne.n	80120e2 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80120dc:	f06f 0301 	mvn.w	r3, #1
 80120e0:	e008      	b.n	80120f4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80120e2:	f004 facf 	bl	8016684 <LoRaMacStop>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 80120ec:	f06f 0302 	mvn.w	r3, #2
 80120f0:	e000      	b.n	80120f4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 80120f2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	20000b34 	.word	0x20000b34

080120fc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012100:	4b03      	ldr	r3, [pc, #12]	@ (8012110 <NvmDataMgmtStoreEnd+0x14>)
 8012102:	2200      	movs	r2, #0
 8012104:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 8012106:	f004 faaf 	bl	8016668 <LoRaMacStart>
    return NVM_DATA_OK;
 801210a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801210c:	4618      	mov	r0, r3
 801210e:	bd80      	pop	{r7, pc}
 8012110:	20000b34 	.word	0x20000b34

08012114 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8012118:	2220      	movs	r2, #32
 801211a:	2100      	movs	r1, #0
 801211c:	4802      	ldr	r0, [pc, #8]	@ (8012128 <ClassBStatusReset+0x14>)
 801211e:	f00d fab5 	bl	801f68c <memset1>
}
 8012122:	bf00      	nop
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20000b4c 	.word	0x20000b4c

0801212c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801212c:	b480      	push	{r7}
 801212e:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8012130:	4b02      	ldr	r3, [pc, #8]	@ (801213c <LmhpCompliancePackageFactory+0x10>)
}
 8012132:	4618      	mov	r0, r3
 8012134:	46bd      	mov	sp, r7
 8012136:	bc80      	pop	{r7}
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop
 801213c:	200000e8 	.word	0x200000e8

08012140 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af02      	add	r7, sp, #8
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	4613      	mov	r3, r2
 801214c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d018      	beq.n	8012186 <LmhpComplianceInit+0x46>
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d015      	beq.n	8012186 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 801215a:	4a19      	ldr	r2, [pc, #100]	@ (80121c0 <LmhpComplianceInit+0x80>)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8012160:	4a18      	ldr	r2, [pc, #96]	@ (80121c4 <LmhpComplianceInit+0x84>)
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8012166:	4a17      	ldr	r2, [pc, #92]	@ (80121c4 <LmhpComplianceInit+0x84>)
 8012168:	79fb      	ldrb	r3, [r7, #7]
 801216a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 801216c:	4b15      	ldr	r3, [pc, #84]	@ (80121c4 <LmhpComplianceInit+0x84>)
 801216e:	2201      	movs	r2, #1
 8012170:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8012172:	2300      	movs	r3, #0
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	4b14      	ldr	r3, [pc, #80]	@ (80121c8 <LmhpComplianceInit+0x88>)
 8012178:	2200      	movs	r2, #0
 801217a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801217e:	4813      	ldr	r0, [pc, #76]	@ (80121cc <LmhpComplianceInit+0x8c>)
 8012180:	f012 f950 	bl	8024424 <UTIL_TIMER_Create>
 8012184:	e005      	b.n	8012192 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 8012186:	4b0e      	ldr	r3, [pc, #56]	@ (80121c0 <LmhpComplianceInit+0x80>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 801218c:	4b0d      	ldr	r3, [pc, #52]	@ (80121c4 <LmhpComplianceInit+0x84>)
 801218e:	2200      	movs	r2, #0
 8012190:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 8012192:	4b0c      	ldr	r3, [pc, #48]	@ (80121c4 <LmhpComplianceInit+0x84>)
 8012194:	2200      	movs	r2, #0
 8012196:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 8012198:	f7ff ffbc 	bl	8012114 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 801219c:	4b09      	ldr	r3, [pc, #36]	@ (80121c4 <LmhpComplianceInit+0x84>)
 801219e:	2200      	movs	r2, #0
 80121a0:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80121a2:	4b08      	ldr	r3, [pc, #32]	@ (80121c4 <LmhpComplianceInit+0x84>)
 80121a4:	2200      	movs	r2, #0
 80121a6:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80121a8:	4b06      	ldr	r3, [pc, #24]	@ (80121c4 <LmhpComplianceInit+0x84>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80121b0:	4b04      	ldr	r3, [pc, #16]	@ (80121c4 <LmhpComplianceInit+0x84>)
 80121b2:	2200      	movs	r2, #0
 80121b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 80121b8:	bf00      	nop
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	20000b70 	.word	0x20000b70
 80121c4:	20000b38 	.word	0x20000b38
 80121c8:	08012ac9 	.word	0x08012ac9
 80121cc:	20000b74 	.word	0x20000b74

080121d0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80121d0:	b480      	push	{r7}
 80121d2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80121d4:	4b02      	ldr	r3, [pc, #8]	@ (80121e0 <LmhpComplianceIsInitialized+0x10>)
 80121d6:	781b      	ldrb	r3, [r3, #0]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	46bd      	mov	sp, r7
 80121dc:	bc80      	pop	{r7}
 80121de:	4770      	bx	lr
 80121e0:	20000b38 	.word	0x20000b38

080121e4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 80121e4:	b480      	push	{r7}
 80121e6:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 80121e8:	4b02      	ldr	r3, [pc, #8]	@ (80121f4 <LmhpComplianceIsTxPending+0x10>)
 80121ea:	785b      	ldrb	r3, [r3, #1]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bc80      	pop	{r7}
 80121f2:	4770      	bx	lr
 80121f4:	20000b38 	.word	0x20000b38

080121f8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 80121fe:	4b33      	ldr	r3, [pc, #204]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012200:	785b      	ldrb	r3, [r3, #1]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d03e      	beq.n	8012284 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 8012206:	f012 facb 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 801220a:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 801220c:	4b2f      	ldr	r3, [pc, #188]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 801220e:	685c      	ldr	r4, [r3, #4]
 8012210:	f7fe fc1e 	bl	8010a50 <LmHandlerGetDutyCycleWaitTime>
 8012214:	4603      	mov	r3, r0
 8012216:	4423      	add	r3, r4
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	429a      	cmp	r2, r3
 801221c:	d941      	bls.n	80122a2 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 801221e:	4b2b      	ldr	r3, [pc, #172]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012220:	7a9b      	ldrb	r3, [r3, #10]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d03d      	beq.n	80122a2 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 8012226:	23e0      	movs	r3, #224	@ 0xe0
 8012228:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 801222a:	4b28      	ldr	r3, [pc, #160]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 801222c:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 801222e:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8012230:	4b26      	ldr	r3, [pc, #152]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012232:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 8012234:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8012236:	23ff      	movs	r3, #255	@ 0xff
 8012238:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 801223a:	4b24      	ldr	r3, [pc, #144]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 801223c:	7a19      	ldrb	r1, [r3, #8]
 801223e:	463b      	mov	r3, r7
 8012240:	2201      	movs	r2, #1
 8012242:	4618      	mov	r0, r3
 8012244:	f7fe fccc 	bl	8010be0 <LmHandlerSend>
 8012248:	4603      	mov	r3, r0
 801224a:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 801224c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d004      	beq.n	801225e <LmhpComplianceProcess+0x66>
 8012254:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012258:	f113 0f07 	cmn.w	r3, #7
 801225c:	d106      	bne.n	801226c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 801225e:	4b1b      	ldr	r3, [pc, #108]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012260:	2200      	movs	r2, #0
 8012262:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8012264:	4b19      	ldr	r3, [pc, #100]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012266:	2200      	movs	r2, #0
 8012268:	729a      	strb	r2, [r3, #10]
 801226a:	e007      	b.n	801227c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 801226c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8012270:	4817      	ldr	r0, [pc, #92]	@ (80122d0 <LmhpComplianceProcess+0xd8>)
 8012272:	f012 f9eb 	bl	802464c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8012276:	4816      	ldr	r0, [pc, #88]	@ (80122d0 <LmhpComplianceProcess+0xd8>)
 8012278:	f012 f90a 	bl	8024490 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 801227c:	4a13      	ldr	r2, [pc, #76]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6053      	str	r3, [r2, #4]
 8012282:	e00e      	b.n	80122a2 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8012284:	4b11      	ldr	r3, [pc, #68]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801228a:	2b00      	cmp	r3, #0
 801228c:	d009      	beq.n	80122a2 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 801228e:	4b0f      	ldr	r3, [pc, #60]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012290:	2200      	movs	r2, #0
 8012292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8012296:	4b0d      	ldr	r3, [pc, #52]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 8012298:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fde5 	bl	8010e6c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 80122a2:	4b0a      	ldr	r3, [pc, #40]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 80122a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00a      	beq.n	80122c2 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80122ac:	4b07      	ldr	r3, [pc, #28]	@ (80122cc <LmhpComplianceProcess+0xd4>)
 80122ae:	2200      	movs	r2, #0
 80122b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80122b4:	4b07      	ldr	r3, [pc, #28]	@ (80122d4 <LmhpComplianceProcess+0xdc>)
 80122b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d002      	beq.n	80122c2 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 80122bc:	4b05      	ldr	r3, [pc, #20]	@ (80122d4 <LmhpComplianceProcess+0xdc>)
 80122be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122c0:	4798      	blx	r3
        }
    }
}
 80122c2:	bf00      	nop
 80122c4:	3714      	adds	r7, #20
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd90      	pop	{r4, r7, pc}
 80122ca:	bf00      	nop
 80122cc:	20000b38 	.word	0x20000b38
 80122d0:	20000b74 	.word	0x20000b74
 80122d4:	200000e8 	.word	0x200000e8

080122d8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80122d8:	b5b0      	push	{r4, r5, r7, lr}
 80122da:	b0a4      	sub	sp, #144	@ 0x90
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 80122e0:	2300      	movs	r3, #0
 80122e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 80122e6:	4bd0      	ldr	r3, [pc, #832]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	f083 0301 	eor.w	r3, r3, #1
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f040 83bf 	bne.w	8012a74 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	78db      	ldrb	r3, [r3, #3]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d103      	bne.n	8012306 <LmhpComplianceOnMcpsIndication+0x2e>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	7b9b      	ldrb	r3, [r3, #14]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d005      	beq.n	8012312 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 8012306:	4bc8      	ldr	r3, [pc, #800]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012308:	8a1b      	ldrh	r3, [r3, #16]
 801230a:	3301      	adds	r3, #1
 801230c:	b29a      	uxth	r2, r3
 801230e:	4bc6      	ldr	r3, [pc, #792]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012310:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	7b5b      	ldrb	r3, [r3, #13]
 8012316:	f083 0301 	eor.w	r3, r3, #1
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b00      	cmp	r3, #0
 801231e:	f040 83ab 	bne.w	8012a78 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	78db      	ldrb	r3, [r3, #3]
 8012326:	2be0      	cmp	r3, #224	@ 0xe0
 8012328:	f040 83a8 	bne.w	8012a7c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 801232c:	4bbe      	ldr	r3, [pc, #760]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 801232e:	2200      	movs	r2, #0
 8012330:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	689a      	ldr	r2, [r3, #8]
 8012336:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801233a:	1c59      	adds	r1, r3, #1
 801233c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 8012340:	4413      	add	r3, r2
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2b7f      	cmp	r3, #127	@ 0x7f
 8012346:	f200 8372 	bhi.w	8012a2e <LmhpComplianceOnMcpsIndication+0x756>
 801234a:	a201      	add	r2, pc, #4	@ (adr r2, 8012350 <LmhpComplianceOnMcpsIndication+0x78>)
 801234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012350:	08012551 	.word	0x08012551
 8012354:	08012595 	.word	0x08012595
 8012358:	0801259f 	.word	0x0801259f
 801235c:	080125b5 	.word	0x080125b5
 8012360:	080125d7 	.word	0x080125d7
 8012364:	08012605 	.word	0x08012605
 8012368:	08012631 	.word	0x08012631
 801236c:	0801268f 	.word	0x0801268f
 8012370:	080126e7 	.word	0x080126e7
 8012374:	08012753 	.word	0x08012753
 8012378:	080127a3 	.word	0x080127a3
 801237c:	08012a2f 	.word	0x08012a2f
 8012380:	08012a2f 	.word	0x08012a2f
 8012384:	08012a2f 	.word	0x08012a2f
 8012388:	08012a2f 	.word	0x08012a2f
 801238c:	08012a2f 	.word	0x08012a2f
 8012390:	08012a2f 	.word	0x08012a2f
 8012394:	08012a2f 	.word	0x08012a2f
 8012398:	08012a2f 	.word	0x08012a2f
 801239c:	08012a2f 	.word	0x08012a2f
 80123a0:	08012a2f 	.word	0x08012a2f
 80123a4:	08012a2f 	.word	0x08012a2f
 80123a8:	08012a2f 	.word	0x08012a2f
 80123ac:	08012a2f 	.word	0x08012a2f
 80123b0:	08012a2f 	.word	0x08012a2f
 80123b4:	08012a2f 	.word	0x08012a2f
 80123b8:	08012a2f 	.word	0x08012a2f
 80123bc:	08012a2f 	.word	0x08012a2f
 80123c0:	08012a2f 	.word	0x08012a2f
 80123c4:	08012a2f 	.word	0x08012a2f
 80123c8:	08012a2f 	.word	0x08012a2f
 80123cc:	08012a2f 	.word	0x08012a2f
 80123d0:	080127ab 	.word	0x080127ab
 80123d4:	080127bd 	.word	0x080127bd
 80123d8:	080127c5 	.word	0x080127c5
 80123dc:	08012a2f 	.word	0x08012a2f
 80123e0:	08012a2f 	.word	0x08012a2f
 80123e4:	08012a2f 	.word	0x08012a2f
 80123e8:	08012a2f 	.word	0x08012a2f
 80123ec:	08012a2f 	.word	0x08012a2f
 80123f0:	08012a2f 	.word	0x08012a2f
 80123f4:	08012a2f 	.word	0x08012a2f
 80123f8:	08012a2f 	.word	0x08012a2f
 80123fc:	08012a2f 	.word	0x08012a2f
 8012400:	08012a2f 	.word	0x08012a2f
 8012404:	08012a2f 	.word	0x08012a2f
 8012408:	08012a2f 	.word	0x08012a2f
 801240c:	08012a2f 	.word	0x08012a2f
 8012410:	08012a2f 	.word	0x08012a2f
 8012414:	08012a2f 	.word	0x08012a2f
 8012418:	08012a2f 	.word	0x08012a2f
 801241c:	08012a2f 	.word	0x08012a2f
 8012420:	08012a2f 	.word	0x08012a2f
 8012424:	08012a2f 	.word	0x08012a2f
 8012428:	08012a2f 	.word	0x08012a2f
 801242c:	08012a2f 	.word	0x08012a2f
 8012430:	08012a2f 	.word	0x08012a2f
 8012434:	08012a2f 	.word	0x08012a2f
 8012438:	08012a2f 	.word	0x08012a2f
 801243c:	08012a2f 	.word	0x08012a2f
 8012440:	08012a2f 	.word	0x08012a2f
 8012444:	08012a2f 	.word	0x08012a2f
 8012448:	08012a2f 	.word	0x08012a2f
 801244c:	08012a2f 	.word	0x08012a2f
 8012450:	08012a2f 	.word	0x08012a2f
 8012454:	08012a2f 	.word	0x08012a2f
 8012458:	08012a2f 	.word	0x08012a2f
 801245c:	08012a2f 	.word	0x08012a2f
 8012460:	08012a2f 	.word	0x08012a2f
 8012464:	08012a2f 	.word	0x08012a2f
 8012468:	08012a2f 	.word	0x08012a2f
 801246c:	08012a2f 	.word	0x08012a2f
 8012470:	08012a2f 	.word	0x08012a2f
 8012474:	08012a2f 	.word	0x08012a2f
 8012478:	08012a2f 	.word	0x08012a2f
 801247c:	08012a2f 	.word	0x08012a2f
 8012480:	08012a2f 	.word	0x08012a2f
 8012484:	08012a2f 	.word	0x08012a2f
 8012488:	08012a2f 	.word	0x08012a2f
 801248c:	08012a2f 	.word	0x08012a2f
 8012490:	08012a2f 	.word	0x08012a2f
 8012494:	08012a2f 	.word	0x08012a2f
 8012498:	08012a2f 	.word	0x08012a2f
 801249c:	08012a2f 	.word	0x08012a2f
 80124a0:	08012a2f 	.word	0x08012a2f
 80124a4:	08012a2f 	.word	0x08012a2f
 80124a8:	08012a2f 	.word	0x08012a2f
 80124ac:	08012a2f 	.word	0x08012a2f
 80124b0:	08012a2f 	.word	0x08012a2f
 80124b4:	08012a2f 	.word	0x08012a2f
 80124b8:	08012a2f 	.word	0x08012a2f
 80124bc:	08012a2f 	.word	0x08012a2f
 80124c0:	08012a2f 	.word	0x08012a2f
 80124c4:	08012a2f 	.word	0x08012a2f
 80124c8:	08012a2f 	.word	0x08012a2f
 80124cc:	08012a2f 	.word	0x08012a2f
 80124d0:	08012a2f 	.word	0x08012a2f
 80124d4:	08012a2f 	.word	0x08012a2f
 80124d8:	08012a2f 	.word	0x08012a2f
 80124dc:	08012a2f 	.word	0x08012a2f
 80124e0:	08012a2f 	.word	0x08012a2f
 80124e4:	08012a2f 	.word	0x08012a2f
 80124e8:	08012a2f 	.word	0x08012a2f
 80124ec:	08012a2f 	.word	0x08012a2f
 80124f0:	08012a2f 	.word	0x08012a2f
 80124f4:	08012a2f 	.word	0x08012a2f
 80124f8:	08012a2f 	.word	0x08012a2f
 80124fc:	08012a2f 	.word	0x08012a2f
 8012500:	08012a2f 	.word	0x08012a2f
 8012504:	08012a2f 	.word	0x08012a2f
 8012508:	08012a2f 	.word	0x08012a2f
 801250c:	08012a2f 	.word	0x08012a2f
 8012510:	08012a2f 	.word	0x08012a2f
 8012514:	08012a2f 	.word	0x08012a2f
 8012518:	08012a2f 	.word	0x08012a2f
 801251c:	08012a2f 	.word	0x08012a2f
 8012520:	08012a2f 	.word	0x08012a2f
 8012524:	08012a2f 	.word	0x08012a2f
 8012528:	08012a2f 	.word	0x08012a2f
 801252c:	08012a2f 	.word	0x08012a2f
 8012530:	08012a2f 	.word	0x08012a2f
 8012534:	08012a2f 	.word	0x08012a2f
 8012538:	08012a2f 	.word	0x08012a2f
 801253c:	08012a2f 	.word	0x08012a2f
 8012540:	08012a2f 	.word	0x08012a2f
 8012544:	080127f7 	.word	0x080127f7
 8012548:	080128a7 	.word	0x080128a7
 801254c:	080128d9 	.word	0x080128d9
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8012550:	4b35      	ldr	r3, [pc, #212]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012552:	68da      	ldr	r2, [r3, #12]
 8012554:	4b34      	ldr	r3, [pc, #208]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012556:	7a9b      	ldrb	r3, [r3, #10]
 8012558:	1c59      	adds	r1, r3, #1
 801255a:	b2c8      	uxtb	r0, r1
 801255c:	4932      	ldr	r1, [pc, #200]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 801255e:	7288      	strb	r0, [r1, #10]
 8012560:	4413      	add	r3, r2
 8012562:	2200      	movs	r2, #0
 8012564:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8012566:	4b30      	ldr	r3, [pc, #192]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012568:	68da      	ldr	r2, [r3, #12]
 801256a:	4b2f      	ldr	r3, [pc, #188]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 801256c:	7a9b      	ldrb	r3, [r3, #10]
 801256e:	1c59      	adds	r1, r3, #1
 8012570:	b2c8      	uxtb	r0, r1
 8012572:	492d      	ldr	r1, [pc, #180]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012574:	7288      	strb	r0, [r1, #10]
 8012576:	4413      	add	r3, r2
 8012578:	2206      	movs	r2, #6
 801257a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 801257c:	4b2a      	ldr	r3, [pc, #168]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 801257e:	68da      	ldr	r2, [r3, #12]
 8012580:	4b29      	ldr	r3, [pc, #164]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012582:	7a9b      	ldrb	r3, [r3, #10]
 8012584:	1c59      	adds	r1, r3, #1
 8012586:	b2c8      	uxtb	r0, r1
 8012588:	4927      	ldr	r1, [pc, #156]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 801258a:	7288      	strb	r0, [r1, #10]
 801258c:	4413      	add	r3, r2
 801258e:	2201      	movs	r2, #1
 8012590:	701a      	strb	r2, [r3, #0]
                break;
 8012592:	e257      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8012594:	4b24      	ldr	r3, [pc, #144]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 8012596:	2201      	movs	r2, #1
 8012598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 801259c:	e252      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 801259e:	4b23      	ldr	r3, [pc, #140]	@ (801262c <LmhpComplianceOnMcpsIndication+0x354>)
 80125a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 8245 	beq.w	8012a32 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80125a8:	4b20      	ldr	r3, [pc, #128]	@ (801262c <LmhpComplianceOnMcpsIndication+0x354>)
 80125aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125ac:	2101      	movs	r1, #1
 80125ae:	2002      	movs	r0, #2
 80125b0:	4798      	blx	r3
                }
                break;
 80125b2:	e23e      	b.n	8012a32 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	689a      	ldr	r2, [r3, #8]
 80125b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80125bc:	1c59      	adds	r1, r3, #1
 80125be:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 80125c2:	4413      	add	r3, r2
 80125c4:	781a      	ldrb	r2, [r3, #0]
 80125c6:	4b18      	ldr	r3, [pc, #96]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 80125c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80125cc:	4b16      	ldr	r3, [pc, #88]	@ (8012628 <LmhpComplianceOnMcpsIndication+0x350>)
 80125ce:	2201      	movs	r2, #1
 80125d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 80125d4:	e236      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 80125d6:	2304      	movs	r3, #4
 80125d8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	689a      	ldr	r2, [r3, #8]
 80125de:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80125e2:	1c59      	adds	r1, r3, #1
 80125e4:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 80125e8:	4413      	add	r3, r2
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bf14      	ite	ne
 80125f0:	2301      	movne	r3, #1
 80125f2:	2300      	moveq	r3, #0
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 80125f8:	f107 0308 	add.w	r3, r7, #8
 80125fc:	4618      	mov	r0, r3
 80125fe:	f004 fb09 	bl	8016c14 <LoRaMacMibSetRequestConfirm>
                break;
 8012602:	e21f      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	689a      	ldr	r2, [r3, #8]
 8012608:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801260c:	1c59      	adds	r1, r3, #1
 801260e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 8012612:	4413      	add	r3, r2
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	bf14      	ite	ne
 801261a:	2301      	movne	r3, #1
 801261c:	2300      	moveq	r3, #0
 801261e:	b2db      	uxtb	r3, r3
 8012620:	4618      	mov	r0, r3
 8012622:	f005 f971 	bl	8017908 <LoRaMacTestSetDutyCycleOn>
                break;
 8012626:	e20d      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
 8012628:	20000b38 	.word	0x20000b38
 801262c:	200000e8 	.word	0x200000e8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8012630:	4ba5      	ldr	r3, [pc, #660]	@ (80128c8 <LmhpComplianceOnMcpsIndication+0x5f0>)
 8012632:	f107 0408 	add.w	r4, r7, #8
 8012636:	461d      	mov	r5, r3
 8012638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801263c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801263e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	689a      	ldr	r2, [r3, #8]
 801264c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012650:	1c59      	adds	r1, r3, #1
 8012652:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 8012656:	4413      	add	r3, r2
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 801265e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8012662:	2b0a      	cmp	r3, #10
 8012664:	f200 81e7 	bhi.w	8012a36 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8012668:	4b98      	ldr	r3, [pc, #608]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	f000 81e1 	beq.w	8012a36 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8012674:	4b95      	ldr	r3, [pc, #596]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	685a      	ldr	r2, [r3, #4]
 801267a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	3390      	adds	r3, #144	@ 0x90
 8012682:	443b      	add	r3, r7
 8012684:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8012688:	4618      	mov	r0, r3
 801268a:	4790      	blx	r2
                    }
                }
                break;
 801268c:	e1d3      	b.n	8012a36 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	689a      	ldr	r2, [r3, #8]
 8012692:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012696:	1c59      	adds	r1, r3, #1
 8012698:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 801269c:	4413      	add	r3, r2
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 80126a4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d004      	beq.n	80126b6 <LmhpComplianceOnMcpsIndication+0x3de>
 80126ac:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	f040 81c2 	bne.w	8012a3a <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80126b6:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	bf14      	ite	ne
 80126be:	2301      	movne	r3, #1
 80126c0:	2300      	moveq	r3, #0
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	461a      	mov	r2, r3
 80126c6:	4b82      	ldr	r3, [pc, #520]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80126c8:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 80126ca:	4b80      	ldr	r3, [pc, #512]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	689b      	ldr	r3, [r3, #8]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 81b2 	beq.w	8012a3a <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80126d6:	4b7d      	ldr	r3, [pc, #500]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	4a7c      	ldr	r2, [pc, #496]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80126de:	7a12      	ldrb	r2, [r2, #8]
 80126e0:	4610      	mov	r0, r2
 80126e2:	4798      	blx	r3
                    }
                }
                break;
 80126e4:	e1a9      	b.n	8012a3a <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80126e6:	4b7a      	ldr	r3, [pc, #488]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80126e8:	68da      	ldr	r2, [r3, #12]
 80126ea:	4b79      	ldr	r3, [pc, #484]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80126ec:	7a9b      	ldrb	r3, [r3, #10]
 80126ee:	1c59      	adds	r1, r3, #1
 80126f0:	b2c8      	uxtb	r0, r1
 80126f2:	4977      	ldr	r1, [pc, #476]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80126f4:	7288      	strb	r0, [r1, #10]
 80126f6:	4413      	add	r3, r2
 80126f8:	2208      	movs	r2, #8
 80126fa:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80126fc:	2301      	movs	r3, #1
 80126fe:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8012702:	e019      	b.n	8012738 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	689a      	ldr	r2, [r3, #8]
 8012708:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801270c:	1c59      	adds	r1, r3, #1
 801270e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 8012712:	4413      	add	r3, r2
 8012714:	781a      	ldrb	r2, [r3, #0]
 8012716:	4b6e      	ldr	r3, [pc, #440]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012718:	68d9      	ldr	r1, [r3, #12]
 801271a:	4b6d      	ldr	r3, [pc, #436]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801271c:	7a9b      	ldrb	r3, [r3, #10]
 801271e:	1c58      	adds	r0, r3, #1
 8012720:	b2c4      	uxtb	r4, r0
 8012722:	486b      	ldr	r0, [pc, #428]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012724:	7284      	strb	r4, [r0, #10]
 8012726:	440b      	add	r3, r1
 8012728:	3201      	adds	r2, #1
 801272a:	b2d2      	uxtb	r2, r2
 801272c:	701a      	strb	r2, [r3, #0]
                     i++ )
 801272e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8012732:	3301      	adds	r3, #1
 8012734:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8012738:	4b65      	ldr	r3, [pc, #404]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801273a:	7a5a      	ldrb	r2, [r3, #9]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	7b1b      	ldrb	r3, [r3, #12]
 8012740:	4293      	cmp	r3, r2
 8012742:	bf28      	it	cs
 8012744:	4613      	movcs	r3, r2
 8012746:	b2db      	uxtb	r3, r3
 8012748:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 801274c:	429a      	cmp	r2, r3
 801274e:	d3d9      	bcc.n	8012704 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8012750:	e178      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8012752:	4b5f      	ldr	r3, [pc, #380]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012754:	68da      	ldr	r2, [r3, #12]
 8012756:	4b5e      	ldr	r3, [pc, #376]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012758:	7a9b      	ldrb	r3, [r3, #10]
 801275a:	1c59      	adds	r1, r3, #1
 801275c:	b2c8      	uxtb	r0, r1
 801275e:	495c      	ldr	r1, [pc, #368]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012760:	7288      	strb	r0, [r1, #10]
 8012762:	4413      	add	r3, r2
 8012764:	2209      	movs	r2, #9
 8012766:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8012768:	4b59      	ldr	r3, [pc, #356]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801276a:	8a18      	ldrh	r0, [r3, #16]
 801276c:	4b58      	ldr	r3, [pc, #352]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801276e:	68da      	ldr	r2, [r3, #12]
 8012770:	4b57      	ldr	r3, [pc, #348]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012772:	7a9b      	ldrb	r3, [r3, #10]
 8012774:	1c59      	adds	r1, r3, #1
 8012776:	b2cc      	uxtb	r4, r1
 8012778:	4955      	ldr	r1, [pc, #340]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801277a:	728c      	strb	r4, [r1, #10]
 801277c:	4413      	add	r3, r2
 801277e:	b2c2      	uxtb	r2, r0
 8012780:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8012782:	4b53      	ldr	r3, [pc, #332]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012784:	8a1b      	ldrh	r3, [r3, #16]
 8012786:	0a1b      	lsrs	r3, r3, #8
 8012788:	b298      	uxth	r0, r3
 801278a:	4b51      	ldr	r3, [pc, #324]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801278c:	68da      	ldr	r2, [r3, #12]
 801278e:	4b50      	ldr	r3, [pc, #320]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012790:	7a9b      	ldrb	r3, [r3, #10]
 8012792:	1c59      	adds	r1, r3, #1
 8012794:	b2cc      	uxtb	r4, r1
 8012796:	494e      	ldr	r1, [pc, #312]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8012798:	728c      	strb	r4, [r1, #10]
 801279a:	4413      	add	r3, r2
 801279c:	b2c2      	uxtb	r2, r0
 801279e:	701a      	strb	r2, [r3, #0]
                break;
 80127a0:	e150      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 80127a2:	4b4b      	ldr	r3, [pc, #300]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80127a4:	2200      	movs	r2, #0
 80127a6:	821a      	strh	r2, [r3, #16]
                break;
 80127a8:	e14c      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 80127aa:	2305      	movs	r3, #5
 80127ac:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 80127b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80127b4:	4618      	mov	r0, r3
 80127b6:	f004 fdd7 	bl	8017368 <LoRaMacMlmeRequest>
                break;
 80127ba:	e143      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 80127bc:	4b45      	ldr	r3, [pc, #276]	@ (80128d4 <LmhpComplianceOnMcpsIndication+0x5fc>)
 80127be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127c0:	4798      	blx	r3
                break;
 80127c2:	e13f      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	689a      	ldr	r2, [r3, #8]
 80127c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80127cc:	1c59      	adds	r1, r3, #1
 80127ce:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 80127d2:	4413      	add	r3, r2
 80127d4:	781a      	ldrb	r2, [r3, #0]
 80127d6:	4b3e      	ldr	r3, [pc, #248]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80127d8:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80127da:	4b3c      	ldr	r3, [pc, #240]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f000 812c 	beq.w	8012a3e <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 80127e6:	4b39      	ldr	r3, [pc, #228]	@ (80128cc <LmhpComplianceOnMcpsIndication+0x5f4>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	4a38      	ldr	r2, [pc, #224]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80127ee:	7d52      	ldrb	r2, [r2, #21]
 80127f0:	4610      	mov	r0, r2
 80127f2:	4798      	blx	r3
                }
                break;
 80127f4:	e123      	b.n	8012a3e <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	7b1b      	ldrb	r3, [r3, #12]
 80127fa:	2b07      	cmp	r3, #7
 80127fc:	f040 8121 	bne.w	8012a42 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8012800:	2306      	movs	r3, #6
 8012802:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	689a      	ldr	r2, [r3, #8]
 801280a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801280e:	4413      	add	r3, r2
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	b21a      	sxth	r2, r3
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6899      	ldr	r1, [r3, #8]
 8012818:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801281c:	3301      	adds	r3, #1
 801281e:	440b      	add	r3, r1
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	b21b      	sxth	r3, r3
 8012826:	4313      	orrs	r3, r2
 8012828:	b21b      	sxth	r3, r3
 801282a:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 801282c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 8012830:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012834:	3302      	adds	r3, #2
 8012836:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012842:	4413      	add	r3, r2
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	4619      	mov	r1, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	689a      	ldr	r2, [r3, #8]
 801284c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012850:	3301      	adds	r3, #1
 8012852:	4413      	add	r3, r2
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	021b      	lsls	r3, r3, #8
 8012858:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6899      	ldr	r1, [r3, #8]
 8012860:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012864:	3302      	adds	r3, #2
 8012866:	440b      	add	r3, r1
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 801286c:	4313      	orrs	r3, r2
 801286e:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8012870:	2364      	movs	r3, #100	@ 0x64
 8012872:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8012876:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 8012878:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801287c:	3303      	adds	r3, #3
 801287e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	689a      	ldr	r2, [r3, #8]
 8012886:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801288a:	1c59      	adds	r1, r3, #1
 801288c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 8012890:	4413      	add	r3, r2
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	b25b      	sxtb	r3, r3
 8012896:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 801289a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801289e:	4618      	mov	r0, r3
 80128a0:	f004 fd62 	bl	8017368 <LoRaMacMlmeRequest>
                }
                break;
 80128a4:	e0cd      	b.n	8012a42 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 80128a6:	233b      	movs	r3, #59	@ 0x3b
 80128a8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 80128ac:	2300      	movs	r3, #0
 80128ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 80128b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80128b6:	4618      	mov	r0, r3
 80128b8:	f004 f9ac 	bl	8016c14 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 80128bc:	4b04      	ldr	r3, [pc, #16]	@ (80128d0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80128be:	2201      	movs	r2, #1
 80128c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 80128c4:	e0be      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
 80128c6:	bf00      	nop
 80128c8:	08028b0c 	.word	0x08028b0c
 80128cc:	20000b70 	.word	0x20000b70
 80128d0:	20000b38 	.word	0x20000b38
 80128d4:	200000e8 	.word	0x200000e8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 80128d8:	232a      	movs	r3, #42	@ 0x2a
 80128da:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 80128dc:	f107 0308 	add.w	r3, r7, #8
 80128e0:	4618      	mov	r0, r3
 80128e2:	f003 ffbf 	bl	8016864 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80128ee:	4b65      	ldr	r3, [pc, #404]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80128f0:	68da      	ldr	r2, [r3, #12]
 80128f2:	4b64      	ldr	r3, [pc, #400]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80128f4:	7a9b      	ldrb	r3, [r3, #10]
 80128f6:	1c59      	adds	r1, r3, #1
 80128f8:	b2c8      	uxtb	r0, r1
 80128fa:	4962      	ldr	r1, [pc, #392]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80128fc:	7288      	strb	r0, [r1, #10]
 80128fe:	4413      	add	r3, r2
 8012900:	227f      	movs	r2, #127	@ 0x7f
 8012902:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8012904:	4b60      	ldr	r3, [pc, #384]	@ (8012a88 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	4b5e      	ldr	r3, [pc, #376]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801290a:	68d9      	ldr	r1, [r3, #12]
 801290c:	4b5d      	ldr	r3, [pc, #372]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801290e:	7a9b      	ldrb	r3, [r3, #10]
 8012910:	1c58      	adds	r0, r3, #1
 8012912:	b2c4      	uxtb	r4, r0
 8012914:	485b      	ldr	r0, [pc, #364]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012916:	7284      	strb	r4, [r0, #10]
 8012918:	440b      	add	r3, r1
 801291a:	78d2      	ldrb	r2, [r2, #3]
 801291c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 801291e:	4b5a      	ldr	r3, [pc, #360]	@ (8012a88 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	4b58      	ldr	r3, [pc, #352]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012924:	68d9      	ldr	r1, [r3, #12]
 8012926:	4b57      	ldr	r3, [pc, #348]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012928:	7a9b      	ldrb	r3, [r3, #10]
 801292a:	1c58      	adds	r0, r3, #1
 801292c:	b2c4      	uxtb	r4, r0
 801292e:	4855      	ldr	r0, [pc, #340]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012930:	7284      	strb	r4, [r0, #10]
 8012932:	440b      	add	r3, r1
 8012934:	7892      	ldrb	r2, [r2, #2]
 8012936:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8012938:	4b53      	ldr	r3, [pc, #332]	@ (8012a88 <LmhpComplianceOnMcpsIndication+0x7b0>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	4b51      	ldr	r3, [pc, #324]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801293e:	68d9      	ldr	r1, [r3, #12]
 8012940:	4b50      	ldr	r3, [pc, #320]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012942:	7a9b      	ldrb	r3, [r3, #10]
 8012944:	1c58      	adds	r0, r3, #1
 8012946:	b2c4      	uxtb	r4, r0
 8012948:	484e      	ldr	r0, [pc, #312]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801294a:	7284      	strb	r4, [r0, #10]
 801294c:	440b      	add	r3, r1
 801294e:	7852      	ldrb	r2, [r2, #1]
 8012950:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8012952:	4b4d      	ldr	r3, [pc, #308]	@ (8012a88 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	4b4b      	ldr	r3, [pc, #300]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012958:	68d9      	ldr	r1, [r3, #12]
 801295a:	4b4a      	ldr	r3, [pc, #296]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801295c:	7a9b      	ldrb	r3, [r3, #10]
 801295e:	1c58      	adds	r0, r3, #1
 8012960:	b2c4      	uxtb	r4, r0
 8012962:	4848      	ldr	r0, [pc, #288]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012964:	7284      	strb	r4, [r0, #10]
 8012966:	440b      	add	r3, r1
 8012968:	7812      	ldrb	r2, [r2, #0]
 801296a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 801296c:	4b45      	ldr	r3, [pc, #276]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801296e:	68da      	ldr	r2, [r3, #12]
 8012970:	4b44      	ldr	r3, [pc, #272]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012972:	7a9b      	ldrb	r3, [r3, #10]
 8012974:	1c59      	adds	r1, r3, #1
 8012976:	b2c8      	uxtb	r0, r1
 8012978:	4942      	ldr	r1, [pc, #264]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801297a:	7288      	strb	r0, [r1, #10]
 801297c:	4413      	add	r3, r2
 801297e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8012982:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8012984:	4b3f      	ldr	r3, [pc, #252]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012986:	68da      	ldr	r2, [r3, #12]
 8012988:	4b3e      	ldr	r3, [pc, #248]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801298a:	7a9b      	ldrb	r3, [r3, #10]
 801298c:	1c59      	adds	r1, r3, #1
 801298e:	b2c8      	uxtb	r0, r1
 8012990:	493c      	ldr	r1, [pc, #240]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012992:	7288      	strb	r0, [r1, #10]
 8012994:	4413      	add	r3, r2
 8012996:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 801299a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 801299c:	4b39      	ldr	r3, [pc, #228]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801299e:	68da      	ldr	r2, [r3, #12]
 80129a0:	4b38      	ldr	r3, [pc, #224]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129a2:	7a9b      	ldrb	r3, [r3, #10]
 80129a4:	1c59      	adds	r1, r3, #1
 80129a6:	b2c8      	uxtb	r0, r1
 80129a8:	4936      	ldr	r1, [pc, #216]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129aa:	7288      	strb	r0, [r1, #10]
 80129ac:	4413      	add	r3, r2
 80129ae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80129b2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80129b4:	4b33      	ldr	r3, [pc, #204]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129b6:	68da      	ldr	r2, [r3, #12]
 80129b8:	4b32      	ldr	r3, [pc, #200]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129ba:	7a9b      	ldrb	r3, [r3, #10]
 80129bc:	1c59      	adds	r1, r3, #1
 80129be:	b2c8      	uxtb	r0, r1
 80129c0:	4930      	ldr	r1, [pc, #192]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129c2:	7288      	strb	r0, [r1, #10]
 80129c4:	4413      	add	r3, r2
 80129c6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80129ca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 80129cc:	4b2d      	ldr	r3, [pc, #180]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129ce:	68da      	ldr	r2, [r3, #12]
 80129d0:	4b2c      	ldr	r3, [pc, #176]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129d2:	7a9b      	ldrb	r3, [r3, #10]
 80129d4:	1c59      	adds	r1, r3, #1
 80129d6:	b2c8      	uxtb	r0, r1
 80129d8:	492a      	ldr	r1, [pc, #168]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129da:	7288      	strb	r0, [r1, #10]
 80129dc:	4413      	add	r3, r2
 80129de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80129e2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 80129e4:	4b27      	ldr	r3, [pc, #156]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129e6:	68da      	ldr	r2, [r3, #12]
 80129e8:	4b26      	ldr	r3, [pc, #152]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129ea:	7a9b      	ldrb	r3, [r3, #10]
 80129ec:	1c59      	adds	r1, r3, #1
 80129ee:	b2c8      	uxtb	r0, r1
 80129f0:	4924      	ldr	r1, [pc, #144]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129f2:	7288      	strb	r0, [r1, #10]
 80129f4:	4413      	add	r3, r2
 80129f6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80129fa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 80129fc:	4b21      	ldr	r3, [pc, #132]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80129fe:	68da      	ldr	r2, [r3, #12]
 8012a00:	4b20      	ldr	r3, [pc, #128]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a02:	7a9b      	ldrb	r3, [r3, #10]
 8012a04:	1c59      	adds	r1, r3, #1
 8012a06:	b2c8      	uxtb	r0, r1
 8012a08:	491e      	ldr	r1, [pc, #120]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a0a:	7288      	strb	r0, [r1, #10]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8012a12:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8012a14:	4b1b      	ldr	r3, [pc, #108]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a16:	68da      	ldr	r2, [r3, #12]
 8012a18:	4b1a      	ldr	r3, [pc, #104]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a1a:	7a9b      	ldrb	r3, [r3, #10]
 8012a1c:	1c59      	adds	r1, r3, #1
 8012a1e:	b2c8      	uxtb	r0, r1
 8012a20:	4918      	ldr	r1, [pc, #96]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a22:	7288      	strb	r0, [r1, #10]
 8012a24:	4413      	add	r3, r2
 8012a26:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8012a2a:	701a      	strb	r2, [r3, #0]
                break;
 8012a2c:	e00a      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8012a2e:	bf00      	nop
 8012a30:	e008      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012a32:	bf00      	nop
 8012a34:	e006      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012a36:	bf00      	nop
 8012a38:	e004      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012a3a:	bf00      	nop
 8012a3c:	e002      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012a3e:	bf00      	nop
 8012a40:	e000      	b.n	8012a44 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012a42:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8012a44:	4b0f      	ldr	r3, [pc, #60]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a46:	7a9b      	ldrb	r3, [r3, #10]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00c      	beq.n	8012a66 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8012a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8012a8c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012a4e:	7a5b      	ldrb	r3, [r3, #9]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d114      	bne.n	8012a7e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8012a54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012a58:	480c      	ldr	r0, [pc, #48]	@ (8012a8c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012a5a:	f011 fdf7 	bl	802464c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8012a5e:	480b      	ldr	r0, [pc, #44]	@ (8012a8c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012a60:	f011 fd16 	bl	8024490 <UTIL_TIMER_Start>
 8012a64:	e00b      	b.n	8012a7e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8012a66:	4809      	ldr	r0, [pc, #36]	@ (8012a8c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012a68:	f011 fd80 	bl	802456c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8012a6c:	4b05      	ldr	r3, [pc, #20]	@ (8012a84 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	705a      	strb	r2, [r3, #1]
 8012a72:	e004      	b.n	8012a7e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012a74:	bf00      	nop
 8012a76:	e002      	b.n	8012a7e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012a78:	bf00      	nop
 8012a7a:	e000      	b.n	8012a7e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012a7c:	bf00      	nop
    }
}
 8012a7e:	3790      	adds	r7, #144	@ 0x90
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bdb0      	pop	{r4, r5, r7, pc}
 8012a84:	20000b38 	.word	0x20000b38
 8012a88:	20000b70 	.word	0x20000b70
 8012a8c:	20000b74 	.word	0x20000b74

08012a90 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8012a98:	bf00      	nop
    }
}
 8012a9a:	bf00      	nop
 8012a9c:	370c      	adds	r7, #12
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bc80      	pop	{r7}
 8012aa2:	4770      	bx	lr

08012aa4 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8012aac:	4b05      	ldr	r3, [pc, #20]	@ (8012ac4 <LmhpComplianceOnMlmeIndication+0x20>)
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	f083 0301 	eor.w	r3, r3, #1
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	2b00      	cmp	r3, #0
    {
        return;
 8012ab8:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8012aba:	370c      	adds	r7, #12
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bc80      	pop	{r7}
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	20000b38 	.word	0x20000b38

08012ac8 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8012ad0:	4b08      	ldr	r3, [pc, #32]	@ (8012af4 <OnProcessTimer+0x2c>)
 8012ad2:	7a9b      	ldrb	r3, [r3, #10]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 8012ad8:	4b06      	ldr	r3, [pc, #24]	@ (8012af4 <OnProcessTimer+0x2c>)
 8012ada:	2201      	movs	r2, #1
 8012adc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8012ade:	4b06      	ldr	r3, [pc, #24]	@ (8012af8 <OnProcessTimer+0x30>)
 8012ae0:	695b      	ldr	r3, [r3, #20]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 8012ae6:	4b04      	ldr	r3, [pc, #16]	@ (8012af8 <OnProcessTimer+0x30>)
 8012ae8:	695b      	ldr	r3, [r3, #20]
 8012aea:	4798      	blx	r3
    }
}
 8012aec:	bf00      	nop
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	20000b38 	.word	0x20000b38
 8012af8:	200000e8 	.word	0x200000e8

08012afc <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8012b04:	2300      	movs	r3, #0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bc80      	pop	{r7}
 8012b0e:	4770      	bx	lr

08012b10 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8012b10:	b480      	push	{r7}
 8012b12:	b083      	sub	sp, #12
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4603      	mov	r3, r0
 8012b18:	6039      	str	r1, [r7, #0]
 8012b1a:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8012b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bc80      	pop	{r7}
 8012b28:	4770      	bx	lr
	...

08012b2c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8012b2c:	b590      	push	{r4, r7, lr}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8012b32:	f011 fe35 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 8012b36:	4603      	mov	r3, r0
 8012b38:	4a0f      	ldr	r2, [pc, #60]	@ (8012b78 <OnRadioTxDone+0x4c>)
 8012b3a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8012b3c:	4c0f      	ldr	r4, [pc, #60]	@ (8012b7c <OnRadioTxDone+0x50>)
 8012b3e:	463b      	mov	r3, r7
 8012b40:	4618      	mov	r0, r3
 8012b42:	f010 f999 	bl	8022e78 <SysTimeGet>
 8012b46:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 8012b4a:	463a      	mov	r2, r7
 8012b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b50:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8012b54:	4a0a      	ldr	r2, [pc, #40]	@ (8012b80 <OnRadioTxDone+0x54>)
 8012b56:	7813      	ldrb	r3, [r2, #0]
 8012b58:	f043 0320 	orr.w	r3, r3, #32
 8012b5c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012b5e:	f003 fa7d 	bl	801605c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8012b62:	4b08      	ldr	r3, [pc, #32]	@ (8012b84 <OnRadioTxDone+0x58>)
 8012b64:	2201      	movs	r2, #1
 8012b66:	2100      	movs	r1, #0
 8012b68:	2002      	movs	r0, #2
 8012b6a:	f011 ff19 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012b6e:	bf00      	nop
 8012b70:	370c      	adds	r7, #12
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd90      	pop	{r4, r7, pc}
 8012b76:	bf00      	nop
 8012b78:	20001cd4 	.word	0x20001cd4
 8012b7c:	20000b8c 	.word	0x20000b8c
 8012b80:	20001cd0 	.word	0x20001cd0
 8012b84:	08028b38 	.word	0x08028b38

08012b88 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	4608      	mov	r0, r1
 8012b92:	4611      	mov	r1, r2
 8012b94:	461a      	mov	r2, r3
 8012b96:	4603      	mov	r3, r0
 8012b98:	817b      	strh	r3, [r7, #10]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	813b      	strh	r3, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8012ba2:	f011 fdfd 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4a11      	ldr	r2, [pc, #68]	@ (8012bf0 <OnRadioRxDone+0x68>)
 8012baa:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8012bac:	4a10      	ldr	r2, [pc, #64]	@ (8012bf0 <OnRadioRxDone+0x68>)
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8012bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8012bf0 <OnRadioRxDone+0x68>)
 8012bb4:	897b      	ldrh	r3, [r7, #10]
 8012bb6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8012bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8012bf0 <OnRadioRxDone+0x68>)
 8012bba:	893b      	ldrh	r3, [r7, #8]
 8012bbc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8012bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8012bf0 <OnRadioRxDone+0x68>)
 8012bc0:	79fb      	ldrb	r3, [r7, #7]
 8012bc2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8012bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8012bf4 <OnRadioRxDone+0x6c>)
 8012bc6:	7813      	ldrb	r3, [r2, #0]
 8012bc8:	f043 0310 	orr.w	r3, r3, #16
 8012bcc:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8012bce:	4a09      	ldr	r2, [pc, #36]	@ (8012bf4 <OnRadioRxDone+0x6c>)
 8012bd0:	7813      	ldrb	r3, [r2, #0]
 8012bd2:	f043 0301 	orr.w	r3, r3, #1
 8012bd6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8012bd8:	f003 fa40 	bl	801605c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8012bdc:	4b06      	ldr	r3, [pc, #24]	@ (8012bf8 <OnRadioRxDone+0x70>)
 8012bde:	2201      	movs	r2, #1
 8012be0:	2100      	movs	r1, #0
 8012be2:	2002      	movs	r0, #2
 8012be4:	f011 fedc 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012be8:	bf00      	nop
 8012bea:	3710      	adds	r7, #16
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	20001cd8 	.word	0x20001cd8
 8012bf4:	20001cd0 	.word	0x20001cd0
 8012bf8:	08028b48 	.word	0x08028b48

08012bfc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8012c00:	4a07      	ldr	r2, [pc, #28]	@ (8012c20 <OnRadioTxTimeout+0x24>)
 8012c02:	7813      	ldrb	r3, [r2, #0]
 8012c04:	f043 0308 	orr.w	r3, r3, #8
 8012c08:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012c0a:	f003 fa27 	bl	801605c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8012c0e:	4b05      	ldr	r3, [pc, #20]	@ (8012c24 <OnRadioTxTimeout+0x28>)
 8012c10:	2201      	movs	r2, #1
 8012c12:	2100      	movs	r1, #0
 8012c14:	2002      	movs	r0, #2
 8012c16:	f011 fec3 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012c1a:	bf00      	nop
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	20001cd0 	.word	0x20001cd0
 8012c24:	08028b58 	.word	0x08028b58

08012c28 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8012c2c:	4a04      	ldr	r2, [pc, #16]	@ (8012c40 <OnRadioRxError+0x18>)
 8012c2e:	7813      	ldrb	r3, [r2, #0]
 8012c30:	f043 0304 	orr.w	r3, r3, #4
 8012c34:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012c36:	f003 fa11 	bl	801605c <OnMacProcessNotify>
}
 8012c3a:	bf00      	nop
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	20001cd0 	.word	0x20001cd0

08012c44 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8012c48:	4a07      	ldr	r2, [pc, #28]	@ (8012c68 <OnRadioRxTimeout+0x24>)
 8012c4a:	7813      	ldrb	r3, [r2, #0]
 8012c4c:	f043 0302 	orr.w	r3, r3, #2
 8012c50:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012c52:	f003 fa03 	bl	801605c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8012c56:	4b05      	ldr	r3, [pc, #20]	@ (8012c6c <OnRadioRxTimeout+0x28>)
 8012c58:	2201      	movs	r2, #1
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	2002      	movs	r0, #2
 8012c5e:	f011 fe9f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012c62:	bf00      	nop
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	20001cd0 	.word	0x20001cd0
 8012c6c:	08028b68 	.word	0x08028b68

08012c70 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8012c70:	b480      	push	{r7}
 8012c72:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012c74:	4b08      	ldr	r3, [pc, #32]	@ (8012c98 <UpdateRxSlotIdleState+0x28>)
 8012c76:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012c7a:	2b02      	cmp	r3, #2
 8012c7c:	d004      	beq.n	8012c88 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8012c7e:	4b07      	ldr	r3, [pc, #28]	@ (8012c9c <UpdateRxSlotIdleState+0x2c>)
 8012c80:	2206      	movs	r2, #6
 8012c82:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8012c86:	e003      	b.n	8012c90 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012c88:	4b04      	ldr	r3, [pc, #16]	@ (8012c9c <UpdateRxSlotIdleState+0x2c>)
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 8012c90:	bf00      	nop
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bc80      	pop	{r7}
 8012c96:	4770      	bx	lr
 8012c98:	200010a8 	.word	0x200010a8
 8012c9c:	20000b8c 	.word	0x20000b8c

08012ca0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b092      	sub	sp, #72	@ 0x48
 8012ca4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012ca8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012cac:	2b02      	cmp	r3, #2
 8012cae:	d002      	beq.n	8012cb6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8012cb0:	4b48      	ldr	r3, [pc, #288]	@ (8012dd4 <ProcessRadioTxDone+0x134>)
 8012cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cb4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8012cba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8012cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8012cc0:	b672      	cpsid	i
}
 8012cc2:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8012cc4:	f011 fd6c 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	4b43      	ldr	r3, [pc, #268]	@ (8012dd8 <ProcessRadioTxDone+0x138>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8012cd2:	4b42      	ldr	r3, [pc, #264]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012cd4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	4619      	mov	r1, r3
 8012cde:	4840      	ldr	r0, [pc, #256]	@ (8012de0 <ProcessRadioTxDone+0x140>)
 8012ce0:	f011 fcb4 	bl	802464c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8012ce4:	483e      	ldr	r0, [pc, #248]	@ (8012de0 <ProcessRadioTxDone+0x140>)
 8012ce6:	f011 fbd3 	bl	8024490 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8012cea:	4b3c      	ldr	r3, [pc, #240]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012cec:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cf2:	1ad3      	subs	r3, r2, r3
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	483b      	ldr	r0, [pc, #236]	@ (8012de4 <ProcessRadioTxDone+0x144>)
 8012cf8:	f011 fca8 	bl	802464c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8012cfc:	4839      	ldr	r0, [pc, #228]	@ (8012de4 <ProcessRadioTxDone+0x144>)
 8012cfe:	f011 fbc7 	bl	8024490 <UTIL_TIMER_Start>
 8012d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d04:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d08:	f383 8810 	msr	PRIMASK, r3
}
 8012d0c:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8012d0e:	4b33      	ldr	r3, [pc, #204]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012d10:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d01a      	beq.n	8012d4e <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8012d18:	2315      	movs	r3, #21
 8012d1a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012d20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d24:	f107 0220 	add.w	r2, r7, #32
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f008 fdb2 	bl	801b894 <RegionGetPhyParam>
 8012d30:	4603      	mov	r3, r0
 8012d32:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8012d34:	4b29      	ldr	r3, [pc, #164]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012d36:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	4619      	mov	r1, r3
 8012d40:	4829      	ldr	r0, [pc, #164]	@ (8012de8 <ProcessRadioTxDone+0x148>)
 8012d42:	f011 fc83 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8012d46:	4828      	ldr	r0, [pc, #160]	@ (8012de8 <ProcessRadioTxDone+0x148>)
 8012d48:	f011 fba2 	bl	8024490 <UTIL_TIMER_Start>
 8012d4c:	e003      	b.n	8012d56 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012d4e:	4b23      	ldr	r3, [pc, #140]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8012d56:	4b20      	ldr	r3, [pc, #128]	@ (8012dd8 <ProcessRadioTxDone+0x138>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8012d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012d60:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8012d64:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8012d66:	4b1c      	ldr	r3, [pc, #112]	@ (8012dd8 <ProcessRadioTxDone+0x138>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012d6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012d70:	4618      	mov	r0, r3
 8012d72:	f010 f8b9 	bl	8022ee8 <SysTimeGetMcuTime>
 8012d76:	4638      	mov	r0, r7
 8012d78:	4b15      	ldr	r3, [pc, #84]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012d7a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8012d7e:	9200      	str	r2, [sp, #0]
 8012d80:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8012d84:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012d88:	ca06      	ldmia	r2, {r1, r2}
 8012d8a:	f010 f80e 	bl	8022daa <SysTimeSub>
 8012d8e:	f107 0314 	add.w	r3, r7, #20
 8012d92:	463a      	mov	r2, r7
 8012d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d98:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8012d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8012ddc <ProcessRadioTxDone+0x13c>)
 8012d9e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012da2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8012da4:	2301      	movs	r3, #1
 8012da6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012da8:	4b09      	ldr	r3, [pc, #36]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012daa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d101      	bne.n	8012db6 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8012db2:	2300      	movs	r3, #0
 8012db4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8012db6:	4b06      	ldr	r3, [pc, #24]	@ (8012dd0 <ProcessRadioTxDone+0x130>)
 8012db8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012dbc:	f107 0208 	add.w	r2, r7, #8
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f008 fd87 	bl	801b8d6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8012dc8:	bf00      	nop
 8012dca:	3740      	adds	r7, #64	@ 0x40
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	200010a8 	.word	0x200010a8
 8012dd4:	08029818 	.word	0x08029818
 8012dd8:	20001cd4 	.word	0x20001cd4
 8012ddc:	20000b8c 	.word	0x20000b8c
 8012de0:	20000f0c 	.word	0x20000f0c
 8012de4:	20000f24 	.word	0x20000f24
 8012de8:	20000f8c 	.word	0x20000f8c

08012dec <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8012df0:	4b10      	ldr	r3, [pc, #64]	@ (8012e34 <PrepareRxDoneAbort+0x48>)
 8012df2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8012e34 <PrepareRxDoneAbort+0x48>)
 8012dfc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 8012e00:	4b0c      	ldr	r3, [pc, #48]	@ (8012e34 <PrepareRxDoneAbort+0x48>)
 8012e02:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d002      	beq.n	8012e10 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	f001 f9fa 	bl	8014204 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8012e10:	4a08      	ldr	r2, [pc, #32]	@ (8012e34 <PrepareRxDoneAbort+0x48>)
 8012e12:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012e16:	f043 0302 	orr.w	r3, r3, #2
 8012e1a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012e1e:	4a05      	ldr	r2, [pc, #20]	@ (8012e34 <PrepareRxDoneAbort+0x48>)
 8012e20:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012e24:	f043 0310 	orr.w	r3, r3, #16
 8012e28:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 8012e2c:	f7ff ff20 	bl	8012c70 <UpdateRxSlotIdleState>
}
 8012e30:	bf00      	nop
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	20000b8c 	.word	0x20000b8c

08012e38 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8012e38:	b590      	push	{r4, r7, lr}
 8012e3a:	b0ab      	sub	sp, #172	@ 0xac
 8012e3c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012e3e:	2312      	movs	r3, #18
 8012e40:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8012e44:	4b81      	ldr	r3, [pc, #516]	@ (801304c <ProcessRadioRxDone+0x214>)
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 8012e4c:	4b7f      	ldr	r3, [pc, #508]	@ (801304c <ProcessRadioRxDone+0x214>)
 8012e4e:	891b      	ldrh	r3, [r3, #8]
 8012e50:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8012e54:	4b7d      	ldr	r3, [pc, #500]	@ (801304c <ProcessRadioRxDone+0x214>)
 8012e56:	895b      	ldrh	r3, [r3, #10]
 8012e58:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 8012e5c:	4b7b      	ldr	r3, [pc, #492]	@ (801304c <ProcessRadioRxDone+0x214>)
 8012e5e:	7b1b      	ldrb	r3, [r3, #12]
 8012e60:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 8012e64:	2300      	movs	r3, #0
 8012e66:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8012e6e:	4b78      	ldr	r3, [pc, #480]	@ (8013050 <ProcessRadioRxDone+0x218>)
 8012e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8012e84:	2301      	movs	r3, #1
 8012e86:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8012e8a:	4a72      	ldr	r2, [pc, #456]	@ (8013054 <ProcessRadioRxDone+0x21c>)
 8012e8c:	7813      	ldrb	r3, [r2, #0]
 8012e8e:	f36f 0300 	bfc	r3, #0, #1
 8012e92:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8012e94:	4b70      	ldr	r3, [pc, #448]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8012e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012e9e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012ea2:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 8012ea6:	4a6c      	ldr	r2, [pc, #432]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ea8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012eac:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8012eb0:	4b69      	ldr	r3, [pc, #420]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012eb2:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 8012eb6:	4b68      	ldr	r3, [pc, #416]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012eb8:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 8012ebc:	4b66      	ldr	r3, [pc, #408]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8012ec4:	4b64      	ldr	r3, [pc, #400]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8012ecc:	4b62      	ldr	r3, [pc, #392]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ece:	2200      	movs	r2, #0
 8012ed0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8012ed4:	4b60      	ldr	r3, [pc, #384]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8012edc:	4b5e      	ldr	r3, [pc, #376]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 8012ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8012eec:	4b5a      	ldr	r3, [pc, #360]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012eee:	2200      	movs	r2, #0
 8012ef0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8012ef4:	4b58      	ldr	r3, [pc, #352]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8012efc:	4b56      	ldr	r3, [pc, #344]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8012f04:	4b54      	ldr	r3, [pc, #336]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012f0c:	4b52      	ldr	r3, [pc, #328]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8012f14:	4b50      	ldr	r3, [pc, #320]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f16:	2200      	movs	r2, #0
 8012f18:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8012f1c:	4b4f      	ldr	r3, [pc, #316]	@ (801305c <ProcessRadioRxDone+0x224>)
 8012f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f20:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012f22:	4b4d      	ldr	r3, [pc, #308]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f24:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d102      	bne.n	8012f32 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012f2c:	484c      	ldr	r0, [pc, #304]	@ (8013060 <ProcessRadioRxDone+0x228>)
 8012f2e:	f011 fb1d 	bl	802456c <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8012f32:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012f36:	4619      	mov	r1, r3
 8012f38:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8012f3c:	f006 f866 	bl	801900c <LoRaMacClassBRxBeacon>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d00b      	beq.n	8012f5e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8012f46:	4a44      	ldr	r2, [pc, #272]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f48:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012f4c:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8012f50:	4a41      	ldr	r2, [pc, #260]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f52:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012f56:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 8012f5a:	f000 bc75 	b.w	8013848 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8013050 <ProcessRadioRxDone+0x218>)
 8012f60:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d11e      	bne.n	8012fa6 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012f68:	f006 f9fc 	bl	8019364 <LoRaMacClassBIsPingExpected>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00a      	beq.n	8012f88 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012f72:	2000      	movs	r0, #0
 8012f74:	f005 fb2a 	bl	80185cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012f78:	2000      	movs	r0, #0
 8012f7a:	f005 fd6f 	bl	8018a5c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8012f7e:	4b36      	ldr	r3, [pc, #216]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012f80:	2204      	movs	r2, #4
 8012f82:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 8012f86:	e00e      	b.n	8012fa6 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012f88:	f006 f9fc 	bl	8019384 <LoRaMacClassBIsMulticastExpected>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d009      	beq.n	8012fa6 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012f92:	2000      	movs	r0, #0
 8012f94:	f005 fb2a 	bl	80185ec <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012f98:	2000      	movs	r0, #0
 8012f9a:	f005 fea7 	bl	8018cec <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8012f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012fa0:	2205      	movs	r2, #5
 8012fa2:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8012fa6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d107      	bne.n	8012fbe <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012fae:	4b2a      	ldr	r3, [pc, #168]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 8012fb6:	f7ff ff19 	bl	8012dec <PrepareRxDoneAbort>
        return;
 8012fba:	f000 bc45 	b.w	8013848 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8012fbe:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 8012fc8:	461a      	mov	r2, r3
 8012fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012fce:	4413      	add	r3, r2
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8012fd6:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8012fda:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	2b06      	cmp	r3, #6
 8012fe4:	f200 8403 	bhi.w	80137ee <ProcessRadioRxDone+0x9b6>
 8012fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8012ff0 <ProcessRadioRxDone+0x1b8>)
 8012fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fee:	bf00      	nop
 8012ff0:	0801300d 	.word	0x0801300d
 8012ff4:	080137ef 	.word	0x080137ef
 8012ff8:	0801320b 	.word	0x0801320b
 8012ffc:	080137ef 	.word	0x080137ef
 8013000:	08013203 	.word	0x08013203
 8013004:	080137ef 	.word	0x080137ef
 8013008:	08013793 	.word	0x08013793
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 801300c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013010:	2b10      	cmp	r3, #16
 8013012:	d807      	bhi.n	8013024 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013014:	4b10      	ldr	r3, [pc, #64]	@ (8013058 <ProcessRadioRxDone+0x220>)
 8013016:	2201      	movs	r2, #1
 8013018:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801301c:	f7ff fee6 	bl	8012dec <PrepareRxDoneAbort>
                return;
 8013020:	f000 bc12 	b.w	8013848 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8013024:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013028:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 801302a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801302e:	b2db      	uxtb	r3, r3
 8013030:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013032:	4b07      	ldr	r3, [pc, #28]	@ (8013050 <ProcessRadioRxDone+0x218>)
 8013034:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013038:	2b00      	cmp	r3, #0
 801303a:	d013      	beq.n	8013064 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801303c:	4b06      	ldr	r3, [pc, #24]	@ (8013058 <ProcessRadioRxDone+0x220>)
 801303e:	2201      	movs	r2, #1
 8013040:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8013044:	f7ff fed2 	bl	8012dec <PrepareRxDoneAbort>
                return;
 8013048:	e3fe      	b.n	8013848 <ProcessRadioRxDone+0xa10>
 801304a:	bf00      	nop
 801304c:	20001cd8 	.word	0x20001cd8
 8013050:	200010a8 	.word	0x200010a8
 8013054:	20001cd0 	.word	0x20001cd0
 8013058:	20000b8c 	.word	0x20000b8c
 801305c:	08029818 	.word	0x08029818
 8013060:	20000f24 	.word	0x20000f24
            }

            SecureElementGetJoinEui( joinEui );
 8013064:	f107 0308 	add.w	r3, r7, #8
 8013068:	4618      	mov	r0, r3
 801306a:	f7fd fadb 	bl	8010624 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801306e:	f107 0218 	add.w	r2, r7, #24
 8013072:	f107 0308 	add.w	r3, r7, #8
 8013076:	4619      	mov	r1, r3
 8013078:	20ff      	movs	r0, #255	@ 0xff
 801307a:	f007 fe8d 	bl	801ad98 <LoRaMacCryptoHandleJoinAccept>
 801307e:	4603      	mov	r3, r0
 8013080:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8013084:	2300      	movs	r3, #0
 8013086:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801308a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801308e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013092:	b2db      	uxtb	r3, r3
 8013094:	b25b      	sxtb	r3, r3
 8013096:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013098:	4bb1      	ldr	r3, [pc, #708]	@ (8013360 <ProcessRadioRxDone+0x528>)
 801309a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801309e:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80130a0:	4baf      	ldr	r3, [pc, #700]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80130a6:	1d39      	adds	r1, r7, #4
 80130a8:	2207      	movs	r2, #7
 80130aa:	4618      	mov	r0, r3
 80130ac:	f008 fc40 	bl	801b930 <RegionVerify>
 80130b0:	4603      	mov	r3, r0
 80130b2:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80130b6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	f040 8095 	bne.w	80131ea <ProcessRadioRxDone+0x3b2>
 80130c0:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f000 8090 	beq.w	80131ea <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80130ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80130ce:	461a      	mov	r2, r3
 80130d0:	4ba3      	ldr	r3, [pc, #652]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80130d6:	4ba2      	ldr	r3, [pc, #648]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80130dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80130e0:	021b      	lsls	r3, r3, #8
 80130e2:	4313      	orrs	r3, r2
 80130e4:	4a9e      	ldr	r2, [pc, #632]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80130ea:	4b9d      	ldr	r3, [pc, #628]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80130f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80130f4:	041b      	lsls	r3, r3, #16
 80130f6:	4313      	orrs	r3, r2
 80130f8:	4a99      	ldr	r2, [pc, #612]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80130fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80130fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013100:	4a97      	ldr	r2, [pc, #604]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8013106:	4b96      	ldr	r3, [pc, #600]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801310c:	4619      	mov	r1, r3
 801310e:	2002      	movs	r0, #2
 8013110:	f7fd faa0 	bl	8010654 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8013114:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013118:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801311c:	b2db      	uxtb	r3, r3
 801311e:	461a      	mov	r2, r3
 8013120:	4b8f      	ldr	r3, [pc, #572]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013122:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8013126:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801312a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801312e:	b2db      	uxtb	r3, r3
 8013130:	461a      	mov	r2, r3
 8013132:	4b8b      	ldr	r3, [pc, #556]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013134:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8013138:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801313c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013140:	b2db      	uxtb	r3, r3
 8013142:	461a      	mov	r2, r3
 8013144:	4b86      	ldr	r3, [pc, #536]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801314a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801314e:	461a      	mov	r2, r3
 8013150:	4b83      	ldr	r3, [pc, #524]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013152:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8013154:	4b82      	ldr	r3, [pc, #520]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801315c:	4b80      	ldr	r3, [pc, #512]	@ (8013360 <ProcessRadioRxDone+0x528>)
 801315e:	2201      	movs	r2, #1
 8013160:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8013162:	4b7f      	ldr	r3, [pc, #508]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013166:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801316a:	fb02 f303 	mul.w	r3, r2, r3
 801316e:	4a7c      	ldr	r2, [pc, #496]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013170:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8013172:	4b7b      	ldr	r3, [pc, #492]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013176:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801317a:	4a79      	ldr	r2, [pc, #484]	@ (8013360 <ProcessRadioRxDone+0x528>)
 801317c:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 801317e:	4b78      	ldr	r3, [pc, #480]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013180:	2201      	movs	r2, #1
 8013182:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8013186:	4b76      	ldr	r3, [pc, #472]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013188:	2200      	movs	r2, #0
 801318a:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801318e:	f107 0318 	add.w	r3, r7, #24
 8013192:	3312      	adds	r3, #18
 8013194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8013198:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801319c:	b2db      	uxtb	r3, r3
 801319e:	3b11      	subs	r3, #17
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 80131a6:	4b6f      	ldr	r3, [pc, #444]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 80131a8:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 80131ac:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80131b0:	4b6b      	ldr	r3, [pc, #428]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80131b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80131b6:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80131ba:	4611      	mov	r1, r2
 80131bc:	4618      	mov	r0, r3
 80131be:	f008 fbd8 	bl	801b972 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80131c2:	4b67      	ldr	r3, [pc, #412]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80131c4:	2202      	movs	r2, #2
 80131c6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80131ca:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80131ce:	4618      	mov	r0, r3
 80131d0:	f007 f8ec 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	f000 8311 	beq.w	80137fe <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80131dc:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80131e0:	4619      	mov	r1, r3
 80131e2:	2000      	movs	r0, #0
 80131e4:	f007 f856 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80131e8:	e309      	b.n	80137fe <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80131ea:	2001      	movs	r0, #1
 80131ec:	f007 f8de 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f000 8302 	beq.w	80137fc <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80131f8:	2101      	movs	r1, #1
 80131fa:	2007      	movs	r0, #7
 80131fc:	f007 f84a 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8013200:	e2fc      	b.n	80137fc <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8013202:	4b58      	ldr	r3, [pc, #352]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 8013204:	2201      	movs	r2, #1
 8013206:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801320a:	4b55      	ldr	r3, [pc, #340]	@ (8013360 <ProcessRadioRxDone+0x528>)
 801320c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013210:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8013214:	4b53      	ldr	r3, [pc, #332]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 8013216:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 801321a:	b25b      	sxtb	r3, r3
 801321c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8013220:	230d      	movs	r3, #13
 8013222:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8013226:	4b4e      	ldr	r3, [pc, #312]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013228:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8013230:	230e      	movs	r3, #14
 8013232:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013236:	4b4a      	ldr	r3, [pc, #296]	@ (8013360 <ProcessRadioRxDone+0x528>)
 8013238:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801323c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8013240:	4611      	mov	r1, r2
 8013242:	4618      	mov	r0, r3
 8013244:	f008 fb26 	bl	801b894 <RegionGetPhyParam>
 8013248:	4603      	mov	r3, r0
 801324a:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 801324c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013250:	3b0d      	subs	r3, #13
 8013252:	b29b      	uxth	r3, r3
 8013254:	b21b      	sxth	r3, r3
 8013256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801325a:	b21a      	sxth	r2, r3
 801325c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801325e:	b21b      	sxth	r3, r3
 8013260:	429a      	cmp	r2, r3
 8013262:	dc03      	bgt.n	801326c <ProcessRadioRxDone+0x434>
 8013264:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013268:	2b0b      	cmp	r3, #11
 801326a:	d806      	bhi.n	801327a <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801326c:	4b3d      	ldr	r3, [pc, #244]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8013274:	f7ff fdba 	bl	8012dec <PrepareRxDoneAbort>
                return;
 8013278:	e2e6      	b.n	8013848 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 801327a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801327e:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 8013280:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013284:	b2db      	uxtb	r3, r3
 8013286:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801328a:	4b37      	ldr	r3, [pc, #220]	@ (8013368 <ProcessRadioRxDone+0x530>)
 801328c:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801328e:	23ff      	movs	r3, #255	@ 0xff
 8013290:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8013294:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013298:	4618      	mov	r0, r3
 801329a:	f008 f87d 	bl	801b398 <LoRaMacParserData>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d006      	beq.n	80132b2 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80132a4:	4b2f      	ldr	r3, [pc, #188]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 80132a6:	2201      	movs	r2, #1
 80132a8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 80132ac:	f7ff fd9e 	bl	8012dec <PrepareRxDoneAbort>
                return;
 80132b0:	e2ca      	b.n	8013848 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80132b2:	4b2b      	ldr	r3, [pc, #172]	@ (8013360 <ProcessRadioRxDone+0x528>)
 80132b4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d132      	bne.n	8013322 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80132bc:	f006 f852 	bl	8019364 <LoRaMacClassBIsPingExpected>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d014      	beq.n	80132f0 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80132c6:	2000      	movs	r0, #0
 80132c8:	f005 f980 	bl	80185cc <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80132cc:	2000      	movs	r0, #0
 80132ce:	f005 fbc5 	bl	8018a5c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80132d2:	4b24      	ldr	r3, [pc, #144]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 80132d4:	2204      	movs	r2, #4
 80132d6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80132da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80132dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80132e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	4619      	mov	r1, r3
 80132e8:	4610      	mov	r0, r2
 80132ea:	f006 fb85 	bl	80199f8 <LoRaMacClassBSetFPendingBit>
 80132ee:	e018      	b.n	8013322 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80132f0:	f006 f848 	bl	8019384 <LoRaMacClassBIsMulticastExpected>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d013      	beq.n	8013322 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80132fa:	2000      	movs	r0, #0
 80132fc:	f005 f976 	bl	80185ec <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8013300:	2000      	movs	r0, #0
 8013302:	f005 fcf3 	bl	8018cec <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8013306:	4b17      	ldr	r3, [pc, #92]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 8013308:	2205      	movs	r2, #5
 801330a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 801330e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013310:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8013314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8013318:	b2db      	uxtb	r3, r3
 801331a:	4619      	mov	r1, r3
 801331c:	4610      	mov	r0, r2
 801331e:	f006 fb6b 	bl	80199f8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8013322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013324:	4a0f      	ldr	r2, [pc, #60]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 8013326:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801332a:	f107 0212 	add.w	r2, r7, #18
 801332e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013332:	4611      	mov	r1, r2
 8013334:	4618      	mov	r0, r3
 8013336:	f002 fd8d 	bl	8015e54 <DetermineFrameType>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d006      	beq.n	801334e <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013340:	4b08      	ldr	r3, [pc, #32]	@ (8013364 <ProcessRadioRxDone+0x52c>)
 8013342:	2201      	movs	r2, #1
 8013344:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8013348:	f7ff fd50 	bl	8012dec <PrepareRxDoneAbort>
                return;
 801334c:	e27c      	b.n	8013848 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 801334e:	2300      	movs	r3, #0
 8013350:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 8013354:	2300      	movs	r3, #0
 8013356:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013358:	2300      	movs	r3, #0
 801335a:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 801335e:	e055      	b.n	801340c <ProcessRadioRxDone+0x5d4>
 8013360:	200010a8 	.word	0x200010a8
 8013364:	20000b8c 	.word	0x20000b8c
 8013368:	20000dc4 	.word	0x20000dc4
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801336c:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 8013370:	499f      	ldr	r1, [pc, #636]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 8013372:	4613      	mov	r3, r2
 8013374:	005b      	lsls	r3, r3, #1
 8013376:	4413      	add	r3, r2
 8013378:	011b      	lsls	r3, r3, #4
 801337a:	440b      	add	r3, r1
 801337c:	33ec      	adds	r3, #236	@ 0xec
 801337e:	681a      	ldr	r2, [r3, #0]
 8013380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013382:	429a      	cmp	r2, r3
 8013384:	d13d      	bne.n	8013402 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8013386:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 801338a:	4999      	ldr	r1, [pc, #612]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 801338c:	4613      	mov	r3, r2
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	011b      	lsls	r3, r3, #4
 8013394:	440b      	add	r3, r1
 8013396:	33e9      	adds	r3, #233	@ 0xe9
 8013398:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801339a:	2b00      	cmp	r3, #0
 801339c:	d031      	beq.n	8013402 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 801339e:	2301      	movs	r3, #1
 80133a0:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80133a4:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 80133a8:	4991      	ldr	r1, [pc, #580]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80133aa:	4613      	mov	r3, r2
 80133ac:	005b      	lsls	r3, r3, #1
 80133ae:	4413      	add	r3, r2
 80133b0:	011b      	lsls	r3, r3, #4
 80133b2:	440b      	add	r3, r1
 80133b4:	33ea      	adds	r3, #234	@ 0xea
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80133bc:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 80133c0:	498b      	ldr	r1, [pc, #556]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80133c2:	4613      	mov	r3, r2
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	4413      	add	r3, r2
 80133c8:	011b      	lsls	r3, r3, #4
 80133ca:	440b      	add	r3, r1
 80133cc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80133d6:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 80133da:	4985      	ldr	r1, [pc, #532]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80133dc:	4613      	mov	r3, r2
 80133de:	005b      	lsls	r3, r3, #1
 80133e0:	4413      	add	r3, r2
 80133e2:	011b      	lsls	r3, r3, #4
 80133e4:	440b      	add	r3, r1
 80133e6:	33ec      	adds	r3, #236	@ 0xec
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80133ee:	4b80      	ldr	r3, [pc, #512]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80133f0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80133f4:	2b02      	cmp	r3, #2
 80133f6:	d10e      	bne.n	8013416 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80133f8:	4b7e      	ldr	r3, [pc, #504]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80133fa:	2203      	movs	r2, #3
 80133fc:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 8013400:	e009      	b.n	8013416 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013402:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8013406:	3301      	adds	r3, #1
 8013408:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 801340c:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8013410:	2b00      	cmp	r3, #0
 8013412:	d0ab      	beq.n	801336c <ProcessRadioRxDone+0x534>
 8013414:	e000      	b.n	8013418 <ProcessRadioRxDone+0x5e0>
                    break;
 8013416:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8013418:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 801341c:	2b01      	cmp	r3, #1
 801341e:	d117      	bne.n	8013450 <ProcessRadioRxDone+0x618>
 8013420:	7cbb      	ldrb	r3, [r7, #18]
 8013422:	2b03      	cmp	r3, #3
 8013424:	d10d      	bne.n	8013442 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8013426:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801342a:	f003 0320 	and.w	r3, r3, #32
 801342e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8013430:	2b00      	cmp	r3, #0
 8013432:	d106      	bne.n	8013442 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8013434:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8013438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801343c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801343e:	2b00      	cmp	r3, #0
 8013440:	d006      	beq.n	8013450 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013442:	4b6c      	ldr	r3, [pc, #432]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013444:	2201      	movs	r2, #1
 8013446:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801344a:	f7ff fccf 	bl	8012dec <PrepareRxDoneAbort>
                return;
 801344e:	e1fb      	b.n	8013848 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8013450:	7cb9      	ldrb	r1, [r7, #18]
 8013452:	4c67      	ldr	r4, [pc, #412]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 8013454:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013458:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 801345c:	f107 0314 	add.w	r3, r7, #20
 8013460:	9301      	str	r3, [sp, #4]
 8013462:	f107 0313 	add.w	r3, r7, #19
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 801346c:	f000 fee4 	bl	8014238 <GetFCntDown>
 8013470:	4603      	mov	r3, r0
 8013472:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013476:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801347a:	2b00      	cmp	r3, #0
 801347c:	d017      	beq.n	80134ae <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801347e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8013482:	2b07      	cmp	r3, #7
 8013484:	d104      	bne.n	8013490 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8013486:	4b5b      	ldr	r3, [pc, #364]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013488:	2208      	movs	r2, #8
 801348a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 801348e:	e003      	b.n	8013498 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013490:	4b58      	ldr	r3, [pc, #352]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013492:	2201      	movs	r2, #1
 8013494:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	4a56      	ldr	r2, [pc, #344]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801349c:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	4a54      	ldr	r2, [pc, #336]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80134a4:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 80134a8:	f7ff fca0 	bl	8012dec <PrepareRxDoneAbort>
                return;
 80134ac:	e1cc      	b.n	8013848 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80134ae:	7cfa      	ldrb	r2, [r7, #19]
 80134b0:	6979      	ldr	r1, [r7, #20]
 80134b2:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 80134b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	460b      	mov	r3, r1
 80134be:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80134c2:	f007 fdcb 	bl	801b05c <LoRaMacCryptoUnsecureMessage>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80134cc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00f      	beq.n	80134f4 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80134d4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80134d8:	2b02      	cmp	r3, #2
 80134da:	d104      	bne.n	80134e6 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80134dc:	4b45      	ldr	r3, [pc, #276]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80134de:	220a      	movs	r2, #10
 80134e0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 80134e4:	e003      	b.n	80134ee <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80134e6:	4b43      	ldr	r3, [pc, #268]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80134e8:	220b      	movs	r2, #11
 80134ea:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 80134ee:	f7ff fc7d 	bl	8012dec <PrepareRxDoneAbort>
                return;
 80134f2:	e1a9      	b.n	8013848 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80134f4:	4b3f      	ldr	r3, [pc, #252]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80134f6:	2200      	movs	r2, #0
 80134f8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80134fc:	4a3d      	ldr	r2, [pc, #244]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80134fe:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8013502:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8013506:	4b3b      	ldr	r3, [pc, #236]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013508:	2200      	movs	r2, #0
 801350a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 801350e:	4b39      	ldr	r3, [pc, #228]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013510:	2200      	movs	r2, #0
 8013512:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	4a36      	ldr	r2, [pc, #216]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801351a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	4a34      	ldr	r2, [pc, #208]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013522:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8013526:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801352a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801352e:	b2db      	uxtb	r3, r3
 8013530:	2b00      	cmp	r3, #0
 8013532:	bf14      	ite	ne
 8013534:	2301      	movne	r3, #1
 8013536:	2300      	moveq	r3, #0
 8013538:	b2da      	uxtb	r2, r3
 801353a:	4b2e      	ldr	r3, [pc, #184]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801353c:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013540:	4b2c      	ldr	r3, [pc, #176]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013542:	2200      	movs	r2, #0
 8013544:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8013548:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801354c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013550:	b2db      	uxtb	r3, r3
 8013552:	2b00      	cmp	r3, #0
 8013554:	bf14      	ite	ne
 8013556:	2301      	movne	r3, #1
 8013558:	2300      	moveq	r3, #0
 801355a:	b2da      	uxtb	r2, r3
 801355c:	4b25      	ldr	r3, [pc, #148]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801355e:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013562:	4b24      	ldr	r3, [pc, #144]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 8013564:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8013568:	2b00      	cmp	r3, #0
 801356a:	d004      	beq.n	8013576 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801356c:	4b21      	ldr	r3, [pc, #132]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801356e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013572:	2b01      	cmp	r3, #1
 8013574:	d106      	bne.n	8013584 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8013576:	4b1e      	ldr	r3, [pc, #120]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 8013578:	2200      	movs	r2, #0
 801357a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 801357c:	4b1c      	ldr	r3, [pc, #112]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 801357e:	2201      	movs	r2, #1
 8013580:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8013584:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8013588:	2b01      	cmp	r3, #1
 801358a:	d104      	bne.n	8013596 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801358c:	4b19      	ldr	r3, [pc, #100]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 801358e:	2202      	movs	r2, #2
 8013590:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 8013594:	e03a      	b.n	801360c <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8013596:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 801359a:	f023 031f 	bic.w	r3, r3, #31
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80135a2:	d12b      	bne.n	80135fc <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80135a4:	4b12      	ldr	r3, [pc, #72]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80135a6:	2201      	movs	r2, #1
 80135a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80135ac:	4b10      	ldr	r3, [pc, #64]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80135ae:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d102      	bne.n	80135bc <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80135b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135b8:	4a0d      	ldr	r2, [pc, #52]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80135ba:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80135bc:	4b0d      	ldr	r3, [pc, #52]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80135be:	2201      	movs	r2, #1
 80135c0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80135c4:	4b0b      	ldr	r3, [pc, #44]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80135c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d01e      	beq.n	801360c <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 80135ce:	4b09      	ldr	r3, [pc, #36]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80135d0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d019      	beq.n	801360c <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80135d8:	4b05      	ldr	r3, [pc, #20]	@ (80135f0 <ProcessRadioRxDone+0x7b8>)
 80135da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80135de:	4a05      	ldr	r2, [pc, #20]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80135e0:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80135e4:	4b04      	ldr	r3, [pc, #16]	@ (80135f8 <ProcessRadioRxDone+0x7c0>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	4a02      	ldr	r2, [pc, #8]	@ (80135f4 <ProcessRadioRxDone+0x7bc>)
 80135ea:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 80135ee:	e00d      	b.n	801360c <ProcessRadioRxDone+0x7d4>
 80135f0:	200010a8 	.word	0x200010a8
 80135f4:	20000b8c 	.word	0x20000b8c
 80135f8:	20001cd8 	.word	0x20001cd8
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80135fc:	4b94      	ldr	r3, [pc, #592]	@ (8013850 <ProcessRadioRxDone+0xa18>)
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8013604:	4b93      	ldr	r3, [pc, #588]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013606:	2200      	movs	r2, #0
 8013608:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 801360c:	4b90      	ldr	r3, [pc, #576]	@ (8013850 <ProcessRadioRxDone+0xa18>)
 801360e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <ProcessRadioRxDone+0x7ec>
 8013616:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801361a:	f003 0310 	and.w	r3, r3, #16
 801361e:	b2db      	uxtb	r3, r3
 8013620:	2b00      	cmp	r3, #0
 8013622:	d008      	beq.n	8013636 <ProcessRadioRxDone+0x7fe>
 8013624:	4b8a      	ldr	r3, [pc, #552]	@ (8013850 <ProcessRadioRxDone+0xa18>)
 8013626:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801362a:	2b00      	cmp	r3, #0
 801362c:	d103      	bne.n	8013636 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801362e:	4b89      	ldr	r3, [pc, #548]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013630:	2201      	movs	r2, #1
 8013632:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8013636:	4b87      	ldr	r3, [pc, #540]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013638:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801363c:	4a85      	ldr	r2, [pc, #532]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801363e:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 8013642:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8013646:	4618      	mov	r0, r3
 8013648:	f001 ff98 	bl	801557c <RemoveMacCommands>

            switch( fType )
 801364c:	7cbb      	ldrb	r3, [r7, #18]
 801364e:	2b03      	cmp	r3, #3
 8013650:	d873      	bhi.n	801373a <ProcessRadioRxDone+0x902>
 8013652:	a201      	add	r2, pc, #4	@ (adr r2, 8013658 <ProcessRadioRxDone+0x820>)
 8013654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013658:	08013669 	.word	0x08013669
 801365c:	080136b9 	.word	0x080136b9
 8013660:	080136ef 	.word	0x080136ef
 8013664:	08013715 	.word	0x08013715
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8013668:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801366c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013670:	b2db      	uxtb	r3, r3
 8013672:	461c      	mov	r4, r3
 8013674:	4b77      	ldr	r3, [pc, #476]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013676:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801367a:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 801367e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013682:	f102 0010 	add.w	r0, r2, #16
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	460b      	mov	r3, r1
 801368a:	4622      	mov	r2, r4
 801368c:	2100      	movs	r1, #0
 801368e:	f000 ff4f 	bl	8014530 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8013692:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8013696:	4b6f      	ldr	r3, [pc, #444]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013698:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801369c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801369e:	4a6d      	ldr	r2, [pc, #436]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136a0:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80136a4:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80136a8:	4b6a      	ldr	r3, [pc, #424]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136aa:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80136ae:	4b69      	ldr	r3, [pc, #420]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136b0:	2201      	movs	r2, #1
 80136b2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80136b6:	e047      	b.n	8013748 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80136b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80136bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	461c      	mov	r4, r3
 80136c4:	4b63      	ldr	r3, [pc, #396]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80136ca:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 80136ce:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80136d2:	f102 0010 	add.w	r0, r2, #16
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	460b      	mov	r3, r1
 80136da:	4622      	mov	r2, r4
 80136dc:	2100      	movs	r1, #0
 80136de:	f000 ff27 	bl	8014530 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80136e2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80136e6:	4b5b      	ldr	r3, [pc, #364]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136e8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 80136ec:	e02c      	b.n	8013748 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80136ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80136f0:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80136f4:	4b57      	ldr	r3, [pc, #348]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80136f6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80136fa:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	460b      	mov	r3, r1
 8013702:	2100      	movs	r1, #0
 8013704:	f000 ff14 	bl	8014530 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8013708:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 801370c:	4b51      	ldr	r3, [pc, #324]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801370e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 8013712:	e019      	b.n	8013748 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8013714:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8013718:	4b4e      	ldr	r3, [pc, #312]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801371a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801371e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013720:	4a4c      	ldr	r2, [pc, #304]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013722:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8013726:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 801372a:	4b4a      	ldr	r3, [pc, #296]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801372c:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8013730:	4b48      	ldr	r3, [pc, #288]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013732:	2201      	movs	r2, #1
 8013734:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8013738:	e006      	b.n	8013748 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801373a:	4b46      	ldr	r3, [pc, #280]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801373c:	2201      	movs	r2, #1
 801373e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8013742:	f7ff fb53 	bl	8012dec <PrepareRxDoneAbort>
                    break;
 8013746:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8013748:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 801374c:	2be0      	cmp	r3, #224	@ 0xe0
 801374e:	d118      	bne.n	8013782 <ProcessRadioRxDone+0x94a>
 8013750:	4b3f      	ldr	r3, [pc, #252]	@ (8013850 <ProcessRadioRxDone+0xa18>)
 8013752:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8013756:	f083 0301 	eor.w	r3, r3, #1
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	d010      	beq.n	8013782 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8013760:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8013764:	4b3b      	ldr	r3, [pc, #236]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013766:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801376a:	4b3a      	ldr	r3, [pc, #232]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801376c:	2200      	movs	r2, #0
 801376e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8013772:	4b38      	ldr	r3, [pc, #224]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013774:	2200      	movs	r2, #0
 8013776:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 801377a:	4b36      	ldr	r3, [pc, #216]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801377c:	2200      	movs	r2, #0
 801377e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8013782:	4a34      	ldr	r2, [pc, #208]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013784:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013788:	f043 0302 	orr.w	r3, r3, #2
 801378c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 8013790:	e035      	b.n	80137fe <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8013792:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8013796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801379a:	18d1      	adds	r1, r2, r3
 801379c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	461a      	mov	r2, r3
 80137ac:	482a      	ldr	r0, [pc, #168]	@ (8013858 <ProcessRadioRxDone+0xa20>)
 80137ae:	f00b ff32 	bl	801f616 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80137b2:	4b28      	ldr	r3, [pc, #160]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137b4:	2203      	movs	r2, #3
 80137b6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80137ba:	4b26      	ldr	r3, [pc, #152]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137bc:	2200      	movs	r2, #0
 80137be:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80137c2:	4b24      	ldr	r3, [pc, #144]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137c4:	4a24      	ldr	r2, [pc, #144]	@ (8013858 <ProcessRadioRxDone+0xa20>)
 80137c6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80137ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	4b1e      	ldr	r3, [pc, #120]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137da:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80137de:	4a1d      	ldr	r2, [pc, #116]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137e0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80137e4:	f043 0302 	orr.w	r3, r3, #2
 80137e8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 80137ec:	e007      	b.n	80137fe <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80137ee:	4b19      	ldr	r3, [pc, #100]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80137f6:	f7ff faf9 	bl	8012dec <PrepareRxDoneAbort>
            break;
 80137fa:	e000      	b.n	80137fe <ProcessRadioRxDone+0x9c6>
            break;
 80137fc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80137fe:	4b15      	ldr	r3, [pc, #84]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013800:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8013804:	2b00      	cmp	r3, #0
 8013806:	d004      	beq.n	8013812 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8013808:	4b12      	ldr	r3, [pc, #72]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801380a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801380e:	2b01      	cmp	r3, #1
 8013810:	d10c      	bne.n	801382c <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8013812:	4b10      	ldr	r3, [pc, #64]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013814:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8013818:	2b00      	cmp	r3, #0
 801381a:	d007      	beq.n	801382c <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 801381c:	4b0d      	ldr	r3, [pc, #52]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801381e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8013822:	2b00      	cmp	r3, #0
 8013824:	d002      	beq.n	801382c <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8013826:	2000      	movs	r0, #0
 8013828:	f000 fcec 	bl	8014204 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 801382c:	4b09      	ldr	r3, [pc, #36]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 801382e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8013832:	2b02      	cmp	r3, #2
 8013834:	d006      	beq.n	8013844 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8013836:	4a07      	ldr	r2, [pc, #28]	@ (8013854 <ProcessRadioRxDone+0xa1c>)
 8013838:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801383c:	f043 0310 	orr.w	r3, r3, #16
 8013840:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8013844:	f7ff fa14 	bl	8012c70 <UpdateRxSlotIdleState>
}
 8013848:	37a4      	adds	r7, #164	@ 0xa4
 801384a:	46bd      	mov	sp, r7
 801384c:	bd90      	pop	{r4, r7, pc}
 801384e:	bf00      	nop
 8013850:	200010a8 	.word	0x200010a8
 8013854:	20000b8c 	.word	0x20000b8c
 8013858:	20000dc4 	.word	0x20000dc4

0801385c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 801385c:	b580      	push	{r7, lr}
 801385e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8013860:	4b11      	ldr	r3, [pc, #68]	@ (80138a8 <ProcessRadioTxTimeout+0x4c>)
 8013862:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013866:	2b02      	cmp	r3, #2
 8013868:	d002      	beq.n	8013870 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801386a:	4b10      	ldr	r3, [pc, #64]	@ (80138ac <ProcessRadioTxTimeout+0x50>)
 801386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801386e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8013870:	f7ff f9fe 	bl	8012c70 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8013874:	4b0e      	ldr	r3, [pc, #56]	@ (80138b0 <ProcessRadioTxTimeout+0x54>)
 8013876:	2202      	movs	r2, #2
 8013878:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801387c:	2002      	movs	r0, #2
 801387e:	f006 fd61 	bl	801a344 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8013882:	4b0b      	ldr	r3, [pc, #44]	@ (80138b0 <ProcessRadioTxTimeout+0x54>)
 8013884:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8013888:	2b00      	cmp	r3, #0
 801388a:	d003      	beq.n	8013894 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 801388c:	4b08      	ldr	r3, [pc, #32]	@ (80138b0 <ProcessRadioTxTimeout+0x54>)
 801388e:	2201      	movs	r2, #1
 8013890:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8013894:	4a06      	ldr	r2, [pc, #24]	@ (80138b0 <ProcessRadioTxTimeout+0x54>)
 8013896:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801389a:	f043 0310 	orr.w	r3, r3, #16
 801389e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 80138a2:	bf00      	nop
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	200010a8 	.word	0x200010a8
 80138ac:	08029818 	.word	0x08029818
 80138b0:	20000b8c 	.word	0x20000b8c

080138b4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	4603      	mov	r3, r0
 80138bc:	460a      	mov	r2, r1
 80138be:	71fb      	strb	r3, [r7, #7]
 80138c0:	4613      	mov	r3, r2
 80138c2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80138c4:	2300      	movs	r3, #0
 80138c6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80138c8:	4b3d      	ldr	r3, [pc, #244]	@ (80139c0 <HandleRadioRxErrorTimeout+0x10c>)
 80138ca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	d002      	beq.n	80138d8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80138d2:	4b3c      	ldr	r3, [pc, #240]	@ (80139c4 <HandleRadioRxErrorTimeout+0x110>)
 80138d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138d6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80138d8:	f005 fd2c 	bl	8019334 <LoRaMacClassBIsBeaconExpected>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d007      	beq.n	80138f2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80138e2:	2002      	movs	r0, #2
 80138e4:	f004 fe3c 	bl	8018560 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80138e8:	2000      	movs	r0, #0
 80138ea:	f004 fea5 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80138ee:	2301      	movs	r3, #1
 80138f0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80138f2:	4b33      	ldr	r3, [pc, #204]	@ (80139c0 <HandleRadioRxErrorTimeout+0x10c>)
 80138f4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d119      	bne.n	8013930 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80138fc:	f005 fd32 	bl	8019364 <LoRaMacClassBIsPingExpected>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d007      	beq.n	8013916 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8013906:	2000      	movs	r0, #0
 8013908:	f004 fe60 	bl	80185cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801390c:	2000      	movs	r0, #0
 801390e:	f005 f8a5 	bl	8018a5c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8013912:	2301      	movs	r3, #1
 8013914:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013916:	f005 fd35 	bl	8019384 <LoRaMacClassBIsMulticastExpected>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d007      	beq.n	8013930 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8013920:	2000      	movs	r0, #0
 8013922:	f004 fe63 	bl	80185ec <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8013926:	2000      	movs	r0, #0
 8013928:	f005 f9e0 	bl	8018cec <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 801392c:	2301      	movs	r3, #1
 801392e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8013930:	7bfb      	ldrb	r3, [r7, #15]
 8013932:	f083 0301 	eor.w	r3, r3, #1
 8013936:	b2db      	uxtb	r3, r3
 8013938:	2b00      	cmp	r3, #0
 801393a:	d03b      	beq.n	80139b4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801393c:	4b22      	ldr	r3, [pc, #136]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 801393e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8013942:	2b00      	cmp	r3, #0
 8013944:	d122      	bne.n	801398c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8013946:	4b20      	ldr	r3, [pc, #128]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 8013948:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 801394c:	2b00      	cmp	r3, #0
 801394e:	d003      	beq.n	8013958 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8013950:	4a1d      	ldr	r2, [pc, #116]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 8013952:	79fb      	ldrb	r3, [r7, #7]
 8013954:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8013958:	79fb      	ldrb	r3, [r7, #7]
 801395a:	4618      	mov	r0, r3
 801395c:	f006 fcf2 	bl	801a344 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8013960:	4b17      	ldr	r3, [pc, #92]	@ (80139c0 <HandleRadioRxErrorTimeout+0x10c>)
 8013962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013964:	4618      	mov	r0, r3
 8013966:	f010 ff2d 	bl	80247c4 <UTIL_TIMER_GetElapsedTime>
 801396a:	4602      	mov	r2, r0
 801396c:	4b16      	ldr	r3, [pc, #88]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 801396e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8013972:	429a      	cmp	r2, r3
 8013974:	d31e      	bcc.n	80139b4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8013976:	4815      	ldr	r0, [pc, #84]	@ (80139cc <HandleRadioRxErrorTimeout+0x118>)
 8013978:	f010 fdf8 	bl	802456c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801397c:	4a12      	ldr	r2, [pc, #72]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 801397e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013982:	f043 0310 	orr.w	r3, r3, #16
 8013986:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801398a:	e013      	b.n	80139b4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801398c:	4b0e      	ldr	r3, [pc, #56]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 801398e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8013992:	2b00      	cmp	r3, #0
 8013994:	d003      	beq.n	801399e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8013996:	4a0c      	ldr	r2, [pc, #48]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 8013998:	79bb      	ldrb	r3, [r7, #6]
 801399a:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801399e:	79bb      	ldrb	r3, [r7, #6]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f006 fccf 	bl	801a344 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 80139a6:	4a08      	ldr	r2, [pc, #32]	@ (80139c8 <HandleRadioRxErrorTimeout+0x114>)
 80139a8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80139ac:	f043 0310 	orr.w	r3, r3, #16
 80139b0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80139b4:	f7ff f95c 	bl	8012c70 <UpdateRxSlotIdleState>
}
 80139b8:	bf00      	nop
 80139ba:	3710      	adds	r7, #16
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	200010a8 	.word	0x200010a8
 80139c4:	08029818 	.word	0x08029818
 80139c8:	20000b8c 	.word	0x20000b8c
 80139cc:	20000f24 	.word	0x20000f24

080139d0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80139d4:	2106      	movs	r1, #6
 80139d6:	2005      	movs	r0, #5
 80139d8:	f7ff ff6c 	bl	80138b4 <HandleRadioRxErrorTimeout>
}
 80139dc:	bf00      	nop
 80139de:	bd80      	pop	{r7, pc}

080139e0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80139e4:	2104      	movs	r1, #4
 80139e6:	2003      	movs	r0, #3
 80139e8:	f7ff ff64 	bl	80138b4 <HandleRadioRxErrorTimeout>
}
 80139ec:	bf00      	nop
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139f6:	f3ef 8310 	mrs	r3, PRIMASK
 80139fa:	607b      	str	r3, [r7, #4]
  return(result);
 80139fc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80139fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a00:	b672      	cpsid	i
}
 8013a02:	bf00      	nop
    events = LoRaMacRadioEvents;
 8013a04:	4b1d      	ldr	r3, [pc, #116]	@ (8013a7c <LoRaMacHandleIrqEvents+0x8c>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8013a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8013a7c <LoRaMacHandleIrqEvents+0x8c>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	601a      	str	r2, [r3, #0]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	f383 8810 	msr	PRIMASK, r3
}
 8013a1a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d027      	beq.n	8013a72 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8013a22:	783b      	ldrb	r3, [r7, #0]
 8013a24:	f003 0320 	and.w	r3, r3, #32
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8013a2e:	f7ff f937 	bl	8012ca0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8013a32:	783b      	ldrb	r3, [r7, #0]
 8013a34:	f003 0310 	and.w	r3, r3, #16
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d001      	beq.n	8013a42 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8013a3e:	f7ff f9fb 	bl	8012e38 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8013a42:	783b      	ldrb	r3, [r7, #0]
 8013a44:	f003 0308 	and.w	r3, r3, #8
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8013a4e:	f7ff ff05 	bl	801385c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8013a52:	783b      	ldrb	r3, [r7, #0]
 8013a54:	f003 0304 	and.w	r3, r3, #4
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8013a5e:	f7ff ffb7 	bl	80139d0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8013a62:	783b      	ldrb	r3, [r7, #0]
 8013a64:	f003 0302 	and.w	r3, r3, #2
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8013a6e:	f7ff ffb7 	bl	80139e0 <ProcessRadioRxTimeout>
        }
    }
}
 8013a72:	bf00      	nop
 8013a74:	3710      	adds	r7, #16
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	20001cd0 	.word	0x20001cd0

08013a80 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8013a80:	b480      	push	{r7}
 8013a82:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8013a84:	4b10      	ldr	r3, [pc, #64]	@ (8013ac8 <LoRaMacIsBusy+0x48>)
 8013a86:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d101      	bne.n	8013a92 <LoRaMacIsBusy+0x12>
    {
        return false;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e015      	b.n	8013abe <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8013a92:	4b0e      	ldr	r3, [pc, #56]	@ (8013acc <LoRaMacIsBusy+0x4c>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	f003 0301 	and.w	r3, r3, #1
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <LoRaMacIsBusy+0x24>
    {
        return true;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e00c      	b.n	8013abe <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8013aa4:	4b08      	ldr	r3, [pc, #32]	@ (8013ac8 <LoRaMacIsBusy+0x48>)
 8013aa6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d106      	bne.n	8013abc <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8013aae:	4b06      	ldr	r3, [pc, #24]	@ (8013ac8 <LoRaMacIsBusy+0x48>)
 8013ab0:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d101      	bne.n	8013abc <LoRaMacIsBusy+0x3c>
    {
        return false;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	e000      	b.n	8013abe <LoRaMacIsBusy+0x3e>
    }
    return true;
 8013abc:	2301      	movs	r3, #1
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bc80      	pop	{r7}
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop
 8013ac8:	20000b8c 	.word	0x20000b8c
 8013acc:	20001cd0 	.word	0x20001cd0

08013ad0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8013ad4:	4b05      	ldr	r3, [pc, #20]	@ (8013aec <LoRaMacIsStopped+0x1c>)
 8013ad6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d101      	bne.n	8013ae2 <LoRaMacIsStopped+0x12>
    {
        return true;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e000      	b.n	8013ae4 <LoRaMacIsStopped+0x14>
    }
    return false;
 8013ae2:	2300      	movs	r3, #0
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bc80      	pop	{r7}
 8013aea:	4770      	bx	lr
 8013aec:	20000b8c 	.word	0x20000b8c

08013af0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	4603      	mov	r3, r0
 8013af8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8013afa:	4a04      	ldr	r2, [pc, #16]	@ (8013b0c <LoRaMacEnableRequests+0x1c>)
 8013afc:	79fb      	ldrb	r3, [r7, #7]
 8013afe:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 8013b02:	bf00      	nop
 8013b04:	370c      	adds	r7, #12
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bc80      	pop	{r7}
 8013b0a:	4770      	bx	lr
 8013b0c:	20000b8c 	.word	0x20000b8c

08013b10 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8013b16:	4b2c      	ldr	r3, [pc, #176]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b18:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013b1c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8013b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b20:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d14a      	bne.n	8013bbe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013b28:	4b27      	ldr	r3, [pc, #156]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b2a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013b2e:	f003 0301 	and.w	r3, r3, #1
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d006      	beq.n	8013b46 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8013b38:	4a23      	ldr	r2, [pc, #140]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b3a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013b3e:	f36f 0300 	bfc	r3, #0, #1
 8013b42:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013b46:	4b20      	ldr	r3, [pc, #128]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b48:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013b4c:	f003 0304 	and.w	r3, r3, #4
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d006      	beq.n	8013b64 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013b56:	4a1c      	ldr	r2, [pc, #112]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b58:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013b5c:	f36f 0382 	bfc	r3, #2, #1
 8013b60:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013b64:	2001      	movs	r0, #1
 8013b66:	f7ff ffc3 	bl	8013af0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8013b6a:	793b      	ldrb	r3, [r7, #4]
 8013b6c:	f003 0301 	and.w	r3, r3, #1
 8013b70:	b2db      	uxtb	r3, r3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d005      	beq.n	8013b82 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8013b76:	4b14      	ldr	r3, [pc, #80]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013b78:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4813      	ldr	r0, [pc, #76]	@ (8013bcc <LoRaMacHandleRequestEvents+0xbc>)
 8013b80:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8013b82:	793b      	ldrb	r3, [r7, #4]
 8013b84:	f003 0304 	and.w	r3, r3, #4
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00e      	beq.n	8013bac <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8013b8e:	4810      	ldr	r0, [pc, #64]	@ (8013bd0 <LoRaMacHandleRequestEvents+0xc0>)
 8013b90:	f006 fc26 	bl	801a3e0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8013b94:	f006 fc76 	bl	801a484 <LoRaMacConfirmQueueGetCnt>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d006      	beq.n	8013bac <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013ba0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013ba4:	f043 0304 	orr.w	r3, r3, #4
 8013ba8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8013bac:	f005 fc7e 	bl	80194ac <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8013bb0:	4a05      	ldr	r2, [pc, #20]	@ (8013bc8 <LoRaMacHandleRequestEvents+0xb8>)
 8013bb2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013bb6:	f36f 1304 	bfc	r3, #4, #1
 8013bba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8013bbe:	bf00      	nop
 8013bc0:	3708      	adds	r7, #8
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	20000b8c 	.word	0x20000b8c
 8013bcc:	20000fcc 	.word	0x20000fcc
 8013bd0:	20000fe0 	.word	0x20000fe0

08013bd4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8013bd8:	4b16      	ldr	r3, [pc, #88]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013bda:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013bde:	f003 0308 	and.w	r3, r3, #8
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00d      	beq.n	8013c04 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8013be8:	4a12      	ldr	r2, [pc, #72]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013bea:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013bee:	f36f 03c3 	bfc	r3, #3, #1
 8013bf2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8013bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013bf8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8013bfc:	68db      	ldr	r3, [r3, #12]
 8013bfe:	490e      	ldr	r1, [pc, #56]	@ (8013c38 <LoRaMacHandleIndicationEvents+0x64>)
 8013c00:	480e      	ldr	r0, [pc, #56]	@ (8013c3c <LoRaMacHandleIndicationEvents+0x68>)
 8013c02:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013c04:	4b0b      	ldr	r3, [pc, #44]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013c06:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013c0a:	f003 0302 	and.w	r3, r3, #2
 8013c0e:	b2db      	uxtb	r3, r3
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00d      	beq.n	8013c30 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8013c14:	4a07      	ldr	r2, [pc, #28]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013c16:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013c1a:	f36f 0341 	bfc	r3, #1, #1
 8013c1e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8013c22:	4b04      	ldr	r3, [pc, #16]	@ (8013c34 <LoRaMacHandleIndicationEvents+0x60>)
 8013c24:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	4903      	ldr	r1, [pc, #12]	@ (8013c38 <LoRaMacHandleIndicationEvents+0x64>)
 8013c2c:	4804      	ldr	r0, [pc, #16]	@ (8013c40 <LoRaMacHandleIndicationEvents+0x6c>)
 8013c2e:	4798      	blx	r3
    }
}
 8013c30:	bf00      	nop
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	20000b8c 	.word	0x20000b8c
 8013c38:	20001018 	.word	0x20001018
 8013c3c:	20000ff4 	.word	0x20000ff4
 8013c40:	20000fac 	.word	0x20000fac

08013c44 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b082      	sub	sp, #8
 8013c48:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013c4c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d048      	beq.n	8013cec <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013c62:	4b24      	ldr	r3, [pc, #144]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013c64:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d004      	beq.n	8013c76 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8013c6c:	4b21      	ldr	r3, [pc, #132]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013c6e:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013c72:	2b03      	cmp	r3, #3
 8013c74:	d104      	bne.n	8013c80 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8013c76:	f002 f94f 	bl	8015f18 <CheckRetransUnconfirmedUplink>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	71fb      	strb	r3, [r7, #7]
 8013c7e:	e010      	b.n	8013ca2 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8013c80:	4b1c      	ldr	r3, [pc, #112]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013c82:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d10b      	bne.n	8013ca2 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8013c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013c8c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d004      	beq.n	8013c9e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8013c94:	f002 f96c 	bl	8015f70 <CheckRetransConfirmedUplink>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	71fb      	strb	r3, [r7, #7]
 8013c9c:	e001      	b.n	8013ca2 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8013ca2:	79fb      	ldrb	r3, [r7, #7]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00d      	beq.n	8013cc4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8013ca8:	4813      	ldr	r0, [pc, #76]	@ (8013cf8 <LoRaMacHandleMcpsRequest+0xb4>)
 8013caa:	f010 fc5f 	bl	802456c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8013cae:	4b11      	ldr	r3, [pc, #68]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013cb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013cb4:	f023 0320 	bic.w	r3, r3, #32
 8013cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013cba:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 8013cbe:	f002 f991 	bl	8015fe4 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8013cc2:	e013      	b.n	8013cec <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8013cc4:	79bb      	ldrb	r3, [r7, #6]
 8013cc6:	f083 0301 	eor.w	r3, r3, #1
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00d      	beq.n	8013cec <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8013cd0:	4a08      	ldr	r2, [pc, #32]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013cd2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013cd6:	f36f 1304 	bfc	r3, #4, #1
 8013cda:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	f000 f9c8 	bl	801407c <OnTxDelayedTimerEvent>
}
 8013cec:	bf00      	nop
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	20000b8c 	.word	0x20000b8c
 8013cf8:	20000ef4 	.word	0x20000ef4

08013cfc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013d00:	4b18      	ldr	r3, [pc, #96]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d02:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013d06:	f003 0304 	and.w	r3, r3, #4
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d026      	beq.n	8013d5e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8013d10:	2001      	movs	r0, #1
 8013d12:	f006 fb4b 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d012      	beq.n	8013d42 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	f006 fae7 	bl	801a2f0 <LoRaMacConfirmQueueGetStatus>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d103      	bne.n	8013d30 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8013d28:	4b0e      	ldr	r3, [pc, #56]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013d30:	4b0c      	ldr	r3, [pc, #48]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013d36:	f023 0302 	bic.w	r3, r3, #2
 8013d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d3c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8013d40:	e00d      	b.n	8013d5e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8013d42:	2006      	movs	r0, #6
 8013d44:	f006 fb32 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d007      	beq.n	8013d5e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013d4e:	4b05      	ldr	r3, [pc, #20]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d50:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013d54:	f023 0302 	bic.w	r3, r3, #2
 8013d58:	4a02      	ldr	r2, [pc, #8]	@ (8013d64 <LoRaMacHandleMlmeRequest+0x68>)
 8013d5a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8013d5e:	bf00      	nop
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	20000b8c 	.word	0x20000b8c

08013d68 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8013d6c:	200b      	movs	r0, #11
 8013d6e:	f006 fb1d 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d019      	beq.n	8013dac <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8013d78:	4b0e      	ldr	r3, [pc, #56]	@ (8013db4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013d7a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013d7e:	f003 0301 	and.w	r3, r3, #1
 8013d82:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d111      	bne.n	8013dac <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013d88:	4b0a      	ldr	r3, [pc, #40]	@ (8013db4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013d8a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013d8e:	f003 0304 	and.w	r3, r3, #4
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d009      	beq.n	8013dac <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013d98:	4b06      	ldr	r3, [pc, #24]	@ (8013db4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013d9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013d9e:	f023 0302 	bic.w	r3, r3, #2
 8013da2:	4a04      	ldr	r2, [pc, #16]	@ (8013db4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013da4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8013da8:	2301      	movs	r3, #1
 8013daa:	e000      	b.n	8013dae <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	20000b8c 	.word	0x20000b8c

08013db8 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	71fb      	strb	r3, [r7, #7]
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	71bb      	strb	r3, [r7, #6]
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00a      	beq.n	8013de6 <CheckForMinimumAbpDatarate+0x2e>
 8013dd0:	79bb      	ldrb	r3, [r7, #6]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d107      	bne.n	8013de6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8013dd6:	797b      	ldrb	r3, [r7, #5]
 8013dd8:	f083 0301 	eor.w	r3, r3, #1
 8013ddc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d001      	beq.n	8013de6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8013de2:	2301      	movs	r3, #1
 8013de4:	e000      	b.n	8013de8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bc80      	pop	{r7}
 8013df0:	4770      	bx	lr
	...

08013df4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8013df4:	b480      	push	{r7}
 8013df6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8013df8:	4b0d      	ldr	r3, [pc, #52]	@ (8013e30 <LoRaMacCheckForRxAbort+0x3c>)
 8013dfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00f      	beq.n	8013e26 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8013e06:	4b0a      	ldr	r3, [pc, #40]	@ (8013e30 <LoRaMacCheckForRxAbort+0x3c>)
 8013e08:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e10:	4a07      	ldr	r2, [pc, #28]	@ (8013e30 <LoRaMacCheckForRxAbort+0x3c>)
 8013e12:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013e16:	4b06      	ldr	r3, [pc, #24]	@ (8013e30 <LoRaMacCheckForRxAbort+0x3c>)
 8013e18:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013e1c:	f023 0302 	bic.w	r3, r3, #2
 8013e20:	4a03      	ldr	r2, [pc, #12]	@ (8013e30 <LoRaMacCheckForRxAbort+0x3c>)
 8013e22:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8013e26:	bf00      	nop
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bc80      	pop	{r7}
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop
 8013e30:	20000b8c 	.word	0x20000b8c

08013e34 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8013e40:	2300      	movs	r3, #0
 8013e42:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8013e44:	4b51      	ldr	r3, [pc, #324]	@ (8013f8c <LoRaMacHandleNvm+0x158>)
 8013e46:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f040 8099 	bne.w	8013f82 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2124      	movs	r1, #36	@ 0x24
 8013e54:	4618      	mov	r0, r3
 8013e56:	f00b fc33 	bl	801f6c0 <Crc32>
 8013e5a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e60:	68ba      	ldr	r2, [r7, #8]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d006      	beq.n	8013e74 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	68ba      	ldr	r2, [r7, #8]
 8013e6a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8013e6c:	89fb      	ldrh	r3, [r7, #14]
 8013e6e:	f043 0301 	orr.w	r3, r3, #1
 8013e72:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	3328      	adds	r3, #40	@ 0x28
 8013e78:	211c      	movs	r1, #28
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f00b fc20 	bl	801f6c0 <Crc32>
 8013e80:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d006      	beq.n	8013e9a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	68ba      	ldr	r2, [r7, #8]
 8013e90:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8013e92:	89fb      	ldrh	r3, [r7, #14]
 8013e94:	f043 0302 	orr.w	r3, r3, #2
 8013e98:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	3348      	adds	r3, #72	@ 0x48
 8013e9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f00b fc0c 	bl	801f6c0 <Crc32>
 8013ea8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8013eb0:	68ba      	ldr	r2, [r7, #8]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d007      	beq.n	8013ec6 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	68ba      	ldr	r2, [r7, #8]
 8013eba:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8013ebe:	89fb      	ldrh	r3, [r7, #14]
 8013ec0:	f043 0304 	orr.w	r3, r3, #4
 8013ec4:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8013ecc:	21d4      	movs	r1, #212	@ 0xd4
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f00b fbf6 	bl	801f6c0 <Crc32>
 8013ed4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d007      	beq.n	8013ef2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	68ba      	ldr	r2, [r7, #8]
 8013ee6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8013eea:	89fb      	ldrh	r3, [r7, #14]
 8013eec:	f043 0308 	orr.w	r3, r3, #8
 8013ef0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8013ef8:	2110      	movs	r1, #16
 8013efa:	4618      	mov	r0, r3
 8013efc:	f00b fbe0 	bl	801f6c0 <Crc32>
 8013f00:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d007      	beq.n	8013f1e <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	68ba      	ldr	r2, [r7, #8]
 8013f12:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8013f16:	89fb      	ldrh	r3, [r7, #14]
 8013f18:	f043 0310 	orr.w	r3, r3, #16
 8013f1c:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8013f24:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f00b fbc9 	bl	801f6c0 <Crc32>
 8013f2e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 8013f36:	68ba      	ldr	r2, [r7, #8]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d007      	beq.n	8013f4c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8013f44:	89fb      	ldrh	r3, [r7, #14]
 8013f46:	f043 0320 	orr.w	r3, r3, #32
 8013f4a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 8013f52:	2114      	movs	r1, #20
 8013f54:	4618      	mov	r0, r3
 8013f56:	f00b fbb3 	bl	801f6c0 <Crc32>
 8013f5a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 8013f62:	68ba      	ldr	r2, [r7, #8]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d007      	beq.n	8013f78 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68ba      	ldr	r2, [r7, #8]
 8013f6c:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8013f70:	89fb      	ldrh	r3, [r7, #14]
 8013f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f76:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8013f78:	89fb      	ldrh	r3, [r7, #14]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f002 f884 	bl	8016088 <CallNvmDataChangeCallback>
 8013f80:	e000      	b.n	8013f84 <LoRaMacHandleNvm+0x150>
        return;
 8013f82:	bf00      	nop
}
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20000b8c 	.word	0x20000b8c

08013f90 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00d      	beq.n	8013fbc <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8013fa0:	6838      	ldr	r0, [r7, #0]
 8013fa2:	f010 fc0f 	bl	80247c4 <UTIL_TIMER_GetElapsedTime>
 8013fa6:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d905      	bls.n	8013fbc <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8013fb0:	4b05      	ldr	r3, [pc, #20]	@ (8013fc8 <LoRaMacHandleResponseTimeout+0x38>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8013fb8:	2301      	movs	r3, #1
 8013fba:	e000      	b.n	8013fbe <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	200010a8 	.word	0x200010a8

08013fcc <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8013fd6:	f7ff fd0b 	bl	80139f0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8013fda:	f005 fd45 	bl	8019a68 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8013fde:	4b25      	ldr	r3, [pc, #148]	@ (8014074 <LoRaMacProcess+0xa8>)
 8013fe0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8013fe4:	f003 0310 	and.w	r3, r3, #16
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d023      	beq.n	8014036 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8013fee:	2000      	movs	r0, #0
 8013ff0:	f7ff fd7e 	bl	8013af0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8013ff4:	f7ff fefe 	bl	8013df4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8013ff8:	f002 f864 	bl	80160c4 <IsRequestPending>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d006      	beq.n	8014010 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8014002:	f7ff feb1 	bl	8013d68 <LoRaMacCheckForBeaconAcquisition>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
 801400a:	79fb      	ldrb	r3, [r7, #7]
 801400c:	4313      	orrs	r3, r2
 801400e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8014010:	79fb      	ldrb	r3, [r7, #7]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d103      	bne.n	801401e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8014016:	f7ff fe71 	bl	8013cfc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801401a:	f7ff fe13 	bl	8013c44 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801401e:	f7ff fd77 	bl	8013b10 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014022:	2001      	movs	r0, #1
 8014024:	f7ff fd64 	bl	8013af0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014028:	4a12      	ldr	r2, [pc, #72]	@ (8014074 <LoRaMacProcess+0xa8>)
 801402a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801402e:	f043 0320 	orr.w	r3, r3, #32
 8014032:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8014036:	f7ff fdcd 	bl	8013bd4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801403a:	4b0e      	ldr	r3, [pc, #56]	@ (8014074 <LoRaMacProcess+0xa8>)
 801403c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8014040:	2b02      	cmp	r3, #2
 8014042:	d101      	bne.n	8014048 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8014044:	f001 fc28 	bl	8015898 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8014048:	4b0a      	ldr	r3, [pc, #40]	@ (8014074 <LoRaMacProcess+0xa8>)
 801404a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801404e:	f003 0320 	and.w	r3, r3, #32
 8014052:	b2db      	uxtb	r3, r3
 8014054:	2b00      	cmp	r3, #0
 8014056:	d009      	beq.n	801406c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8014058:	4a06      	ldr	r2, [pc, #24]	@ (8014074 <LoRaMacProcess+0xa8>)
 801405a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801405e:	f36f 1345 	bfc	r3, #5, #1
 8014062:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 8014066:	4804      	ldr	r0, [pc, #16]	@ (8014078 <LoRaMacProcess+0xac>)
 8014068:	f7ff fee4 	bl	8013e34 <LoRaMacHandleNvm>
    }
}
 801406c:	bf00      	nop
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	20000b8c 	.word	0x20000b8c
 8014078:	200010a8 	.word	0x200010a8

0801407c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8014084:	481e      	ldr	r0, [pc, #120]	@ (8014100 <OnTxDelayedTimerEvent+0x84>)
 8014086:	f010 fa71 	bl	802456c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801408a:	4b1e      	ldr	r3, [pc, #120]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 801408c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8014090:	f023 0320 	bic.w	r3, r3, #32
 8014094:	4a1b      	ldr	r2, [pc, #108]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 8014096:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801409a:	4b1b      	ldr	r3, [pc, #108]	@ (8014108 <OnTxDelayedTimerEvent+0x8c>)
 801409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140a0:	4a18      	ldr	r2, [pc, #96]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 80140a2:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 80140a6:	4611      	mov	r1, r2
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7ff ff71 	bl	8013f90 <LoRaMacHandleResponseTimeout>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d11e      	bne.n	80140f2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80140b4:	2001      	movs	r0, #1
 80140b6:	f001 f939 	bl	801532c <ScheduleTx>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d01a      	beq.n	80140f6 <OnTxDelayedTimerEvent+0x7a>
 80140c0:	2b0b      	cmp	r3, #11
 80140c2:	d018      	beq.n	80140f6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80140c4:	4b10      	ldr	r3, [pc, #64]	@ (8014108 <OnTxDelayedTimerEvent+0x8c>)
 80140c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80140ca:	b2da      	uxtb	r2, r3
 80140cc:	4b0d      	ldr	r3, [pc, #52]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 80140ce:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80140d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 80140d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80140d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 80140da:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80140de:	4b09      	ldr	r3, [pc, #36]	@ (8014104 <OnTxDelayedTimerEvent+0x88>)
 80140e0:	2209      	movs	r2, #9
 80140e2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80140e6:	2009      	movs	r0, #9
 80140e8:	f006 f92c 	bl	801a344 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80140ec:	f001 ff7a 	bl	8015fe4 <StopRetransmission>
            break;
 80140f0:	e002      	b.n	80140f8 <OnTxDelayedTimerEvent+0x7c>
        return;
 80140f2:	bf00      	nop
 80140f4:	e000      	b.n	80140f8 <OnTxDelayedTimerEvent+0x7c>
            break;
 80140f6:	bf00      	nop
        }
    }
}
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20000ef4 	.word	0x20000ef4
 8014104:	20000b8c 	.word	0x20000b8c
 8014108:	200010a8 	.word	0x200010a8

0801410c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8014114:	4b17      	ldr	r3, [pc, #92]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 8014116:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801411a:	4b16      	ldr	r3, [pc, #88]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 801411c:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8014120:	4b15      	ldr	r3, [pc, #84]	@ (8014178 <OnRxWindow1TimerEvent+0x6c>)
 8014122:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014126:	b25a      	sxtb	r2, r3
 8014128:	4b12      	ldr	r3, [pc, #72]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 801412a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801412e:	4b12      	ldr	r3, [pc, #72]	@ (8014178 <OnRxWindow1TimerEvent+0x6c>)
 8014130:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8014134:	4b0f      	ldr	r3, [pc, #60]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 8014136:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801413a:	4b0f      	ldr	r3, [pc, #60]	@ (8014178 <OnRxWindow1TimerEvent+0x6c>)
 801413c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8014140:	4b0c      	ldr	r3, [pc, #48]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 8014142:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8014146:	4b0b      	ldr	r3, [pc, #44]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 8014148:	2200      	movs	r2, #0
 801414a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801414e:	4b09      	ldr	r3, [pc, #36]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 8014150:	2200      	movs	r2, #0
 8014152:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014156:	4b08      	ldr	r3, [pc, #32]	@ (8014178 <OnRxWindow1TimerEvent+0x6c>)
 8014158:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801415c:	4b05      	ldr	r3, [pc, #20]	@ (8014174 <OnRxWindow1TimerEvent+0x68>)
 801415e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8014162:	4906      	ldr	r1, [pc, #24]	@ (801417c <OnRxWindow1TimerEvent+0x70>)
 8014164:	4806      	ldr	r0, [pc, #24]	@ (8014180 <OnRxWindow1TimerEvent+0x74>)
 8014166:	f001 fb63 	bl	8015830 <RxWindowSetup>
}
 801416a:	bf00      	nop
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	20000b8c 	.word	0x20000b8c
 8014178:	200010a8 	.word	0x200010a8
 801417c:	20000f44 	.word	0x20000f44
 8014180:	20000f0c 	.word	0x20000f0c

08014184 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801418c:	4b19      	ldr	r3, [pc, #100]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 801418e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8014192:	2b00      	cmp	r3, #0
 8014194:	d029      	beq.n	80141ea <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8014196:	4b17      	ldr	r3, [pc, #92]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 8014198:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801419c:	4b15      	ldr	r3, [pc, #84]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 801419e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80141a2:	4b15      	ldr	r3, [pc, #84]	@ (80141f8 <OnRxWindow2TimerEvent+0x74>)
 80141a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141a6:	4a13      	ldr	r2, [pc, #76]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141a8:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80141ac:	4b12      	ldr	r3, [pc, #72]	@ (80141f8 <OnRxWindow2TimerEvent+0x74>)
 80141ae:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80141b2:	4b10      	ldr	r3, [pc, #64]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141b4:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80141b8:	4b0f      	ldr	r3, [pc, #60]	@ (80141f8 <OnRxWindow2TimerEvent+0x74>)
 80141ba:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80141be:	4b0d      	ldr	r3, [pc, #52]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141c0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80141c4:	4b0b      	ldr	r3, [pc, #44]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141c6:	2200      	movs	r2, #0
 80141c8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80141cc:	4b09      	ldr	r3, [pc, #36]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80141d4:	4b08      	ldr	r3, [pc, #32]	@ (80141f8 <OnRxWindow2TimerEvent+0x74>)
 80141d6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80141da:	4b06      	ldr	r3, [pc, #24]	@ (80141f4 <OnRxWindow2TimerEvent+0x70>)
 80141dc:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80141e0:	4906      	ldr	r1, [pc, #24]	@ (80141fc <OnRxWindow2TimerEvent+0x78>)
 80141e2:	4807      	ldr	r0, [pc, #28]	@ (8014200 <OnRxWindow2TimerEvent+0x7c>)
 80141e4:	f001 fb24 	bl	8015830 <RxWindowSetup>
 80141e8:	e000      	b.n	80141ec <OnRxWindow2TimerEvent+0x68>
        return;
 80141ea:	bf00      	nop
}
 80141ec:	3708      	adds	r7, #8
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	20000b8c 	.word	0x20000b8c
 80141f8:	200010a8 	.word	0x200010a8
 80141fc:	20000f5c 	.word	0x20000f5c
 8014200:	20000f24 	.word	0x20000f24

08014204 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801420c:	4808      	ldr	r0, [pc, #32]	@ (8014230 <OnRetransmitTimeoutTimerEvent+0x2c>)
 801420e:	f010 f9ad 	bl	802456c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8014212:	4b08      	ldr	r3, [pc, #32]	@ (8014234 <OnRetransmitTimeoutTimerEvent+0x30>)
 8014214:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 801421c:	4b05      	ldr	r3, [pc, #20]	@ (8014234 <OnRetransmitTimeoutTimerEvent+0x30>)
 801421e:	2201      	movs	r2, #1
 8014220:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8014224:	f001 ff1a 	bl	801605c <OnMacProcessNotify>
}
 8014228:	bf00      	nop
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	20000f8c 	.word	0x20000f8c
 8014234:	20000b8c 	.word	0x20000b8c

08014238 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	60ba      	str	r2, [r7, #8]
 8014240:	607b      	str	r3, [r7, #4]
 8014242:	4603      	mov	r3, r0
 8014244:	73fb      	strb	r3, [r7, #15]
 8014246:	460b      	mov	r3, r1
 8014248:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d005      	beq.n	801425c <GetFCntDown+0x24>
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d002      	beq.n	801425c <GetFCntDown+0x24>
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801425c:	2309      	movs	r3, #9
 801425e:	e028      	b.n	80142b2 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8014260:	7bfb      	ldrb	r3, [r7, #15]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d016      	beq.n	8014294 <GetFCntDown+0x5c>
 8014266:	2b01      	cmp	r3, #1
 8014268:	d118      	bne.n	801429c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801426a:	79bb      	ldrb	r3, [r7, #6]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d10d      	bne.n	801428c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8014270:	7bbb      	ldrb	r3, [r7, #14]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d002      	beq.n	801427c <GetFCntDown+0x44>
 8014276:	7bbb      	ldrb	r3, [r7, #14]
 8014278:	2b03      	cmp	r3, #3
 801427a:	d103      	bne.n	8014284 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	2202      	movs	r2, #2
 8014280:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8014282:	e00d      	b.n	80142a0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	2201      	movs	r2, #1
 8014288:	701a      	strb	r2, [r3, #0]
            break;
 801428a:	e009      	b.n	80142a0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801428c:	69bb      	ldr	r3, [r7, #24]
 801428e:	2203      	movs	r2, #3
 8014290:	701a      	strb	r2, [r3, #0]
            break;
 8014292:	e005      	b.n	80142a0 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	2204      	movs	r2, #4
 8014298:	701a      	strb	r2, [r3, #0]
            break;
 801429a:	e001      	b.n	80142a0 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801429c:	2305      	movs	r3, #5
 801429e:	e008      	b.n	80142b2 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	7818      	ldrb	r0, [r3, #0]
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	89db      	ldrh	r3, [r3, #14]
 80142a8:	69fa      	ldr	r2, [r7, #28]
 80142aa:	4619      	mov	r1, r3
 80142ac:	f006 fc88 	bl	801abc0 <LoRaMacCryptoGetFCntDown>
 80142b0:	4603      	mov	r3, r0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
	...

080142bc <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80142bc:	b5b0      	push	{r4, r5, r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	4603      	mov	r3, r0
 80142c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142c6:	2303      	movs	r3, #3
 80142c8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80142ca:	4b6e      	ldr	r3, [pc, #440]	@ (8014484 <SwitchClass+0x1c8>)
 80142cc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80142d0:	2b02      	cmp	r3, #2
 80142d2:	f000 80bb 	beq.w	801444c <SwitchClass+0x190>
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	f300 80ce 	bgt.w	8014478 <SwitchClass+0x1bc>
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d003      	beq.n	80142e8 <SwitchClass+0x2c>
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	f000 80a5 	beq.w	8014430 <SwitchClass+0x174>
 80142e6:	e0c7      	b.n	8014478 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d109      	bne.n	8014302 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80142ee:	4b65      	ldr	r3, [pc, #404]	@ (8014484 <SwitchClass+0x1c8>)
 80142f0:	4a64      	ldr	r2, [pc, #400]	@ (8014484 <SwitchClass+0x1c8>)
 80142f2:	3374      	adds	r3, #116	@ 0x74
 80142f4:	326c      	adds	r2, #108	@ 0x6c
 80142f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142fa:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80142fe:	2300      	movs	r3, #0
 8014300:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8014302:	79fb      	ldrb	r3, [r7, #7]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d10c      	bne.n	8014322 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8014308:	79fb      	ldrb	r3, [r7, #7]
 801430a:	4618      	mov	r0, r3
 801430c:	f005 f8f0 	bl	80194f0 <LoRaMacClassBSwitchClass>
 8014310:	4603      	mov	r3, r0
 8014312:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8014314:	7bfb      	ldrb	r3, [r7, #15]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d103      	bne.n	8014322 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801431a:	4a5a      	ldr	r2, [pc, #360]	@ (8014484 <SwitchClass+0x1c8>)
 801431c:	79fb      	ldrb	r3, [r7, #7]
 801431e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8014322:	79fb      	ldrb	r3, [r7, #7]
 8014324:	2b02      	cmp	r3, #2
 8014326:	f040 80a2 	bne.w	801446e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801432a:	4a56      	ldr	r2, [pc, #344]	@ (8014484 <SwitchClass+0x1c8>)
 801432c:	79fb      	ldrb	r3, [r7, #7]
 801432e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8014332:	4a55      	ldr	r2, [pc, #340]	@ (8014488 <SwitchClass+0x1cc>)
 8014334:	4b54      	ldr	r3, [pc, #336]	@ (8014488 <SwitchClass+0x1cc>)
 8014336:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801433a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 801433e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014342:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014346:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801434a:	4b4f      	ldr	r3, [pc, #316]	@ (8014488 <SwitchClass+0x1cc>)
 801434c:	2202      	movs	r2, #2
 801434e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014352:	2300      	movs	r3, #0
 8014354:	73bb      	strb	r3, [r7, #14]
 8014356:	e05b      	b.n	8014410 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8014358:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801435c:	4949      	ldr	r1, [pc, #292]	@ (8014484 <SwitchClass+0x1c8>)
 801435e:	4613      	mov	r3, r2
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	4413      	add	r3, r2
 8014364:	011b      	lsls	r3, r3, #4
 8014366:	440b      	add	r3, r1
 8014368:	33e9      	adds	r3, #233	@ 0xe9
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d049      	beq.n	8014404 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8014370:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8014374:	4943      	ldr	r1, [pc, #268]	@ (8014484 <SwitchClass+0x1c8>)
 8014376:	4613      	mov	r3, r2
 8014378:	005b      	lsls	r3, r3, #1
 801437a:	4413      	add	r3, r2
 801437c:	011b      	lsls	r3, r3, #4
 801437e:	440b      	add	r3, r1
 8014380:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8014384:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8014386:	2b02      	cmp	r3, #2
 8014388:	d13c      	bne.n	8014404 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801438a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801438e:	493d      	ldr	r1, [pc, #244]	@ (8014484 <SwitchClass+0x1c8>)
 8014390:	4613      	mov	r3, r2
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	4413      	add	r3, r2
 8014396:	011b      	lsls	r3, r3, #4
 8014398:	440b      	add	r3, r1
 801439a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4a38      	ldr	r2, [pc, #224]	@ (8014484 <SwitchClass+0x1c8>)
 80143a2:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80143a4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80143a8:	4936      	ldr	r1, [pc, #216]	@ (8014484 <SwitchClass+0x1c8>)
 80143aa:	4613      	mov	r3, r2
 80143ac:	005b      	lsls	r3, r3, #1
 80143ae:	4413      	add	r3, r2
 80143b0:	011b      	lsls	r3, r3, #4
 80143b2:	440b      	add	r3, r1
 80143b4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80143b8:	f993 3000 	ldrsb.w	r3, [r3]
 80143bc:	b2da      	uxtb	r2, r3
 80143be:	4b31      	ldr	r3, [pc, #196]	@ (8014484 <SwitchClass+0x1c8>)
 80143c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80143c4:	4b30      	ldr	r3, [pc, #192]	@ (8014488 <SwitchClass+0x1cc>)
 80143c6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80143ca:	4b2f      	ldr	r3, [pc, #188]	@ (8014488 <SwitchClass+0x1cc>)
 80143cc:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80143d0:	4b2c      	ldr	r3, [pc, #176]	@ (8014484 <SwitchClass+0x1c8>)
 80143d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143d4:	4a2c      	ldr	r2, [pc, #176]	@ (8014488 <SwitchClass+0x1cc>)
 80143d6:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80143da:	4b2a      	ldr	r3, [pc, #168]	@ (8014484 <SwitchClass+0x1c8>)
 80143dc:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80143e0:	4b29      	ldr	r3, [pc, #164]	@ (8014488 <SwitchClass+0x1cc>)
 80143e2:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80143e6:	4b27      	ldr	r3, [pc, #156]	@ (8014484 <SwitchClass+0x1c8>)
 80143e8:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80143ec:	4b26      	ldr	r3, [pc, #152]	@ (8014488 <SwitchClass+0x1cc>)
 80143ee:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80143f2:	4b25      	ldr	r3, [pc, #148]	@ (8014488 <SwitchClass+0x1cc>)
 80143f4:	2203      	movs	r2, #3
 80143f6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80143fa:	4b23      	ldr	r3, [pc, #140]	@ (8014488 <SwitchClass+0x1cc>)
 80143fc:	2201      	movs	r2, #1
 80143fe:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8014402:	e009      	b.n	8014418 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014408:	b2db      	uxtb	r3, r3
 801440a:	3301      	adds	r3, #1
 801440c:	b2db      	uxtb	r3, r3
 801440e:	73bb      	strb	r3, [r7, #14]
 8014410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014414:	2b00      	cmp	r3, #0
 8014416:	dd9f      	ble.n	8014358 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8014418:	4b1b      	ldr	r3, [pc, #108]	@ (8014488 <SwitchClass+0x1cc>)
 801441a:	2200      	movs	r2, #0
 801441c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8014420:	4b1a      	ldr	r3, [pc, #104]	@ (801448c <SwitchClass+0x1d0>)
 8014422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014424:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8014426:	f001 fa37 	bl	8015898 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 801442a:	2300      	movs	r3, #0
 801442c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801442e:	e01e      	b.n	801446e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8014430:	79fb      	ldrb	r3, [r7, #7]
 8014432:	4618      	mov	r0, r3
 8014434:	f005 f85c 	bl	80194f0 <LoRaMacClassBSwitchClass>
 8014438:	4603      	mov	r3, r0
 801443a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 801443c:	7bfb      	ldrb	r3, [r7, #15]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d117      	bne.n	8014472 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8014442:	4a10      	ldr	r2, [pc, #64]	@ (8014484 <SwitchClass+0x1c8>)
 8014444:	79fb      	ldrb	r3, [r7, #7]
 8014446:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 801444a:	e012      	b.n	8014472 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 801444c:	79fb      	ldrb	r3, [r7, #7]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d111      	bne.n	8014476 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8014452:	4b0d      	ldr	r3, [pc, #52]	@ (8014488 <SwitchClass+0x1cc>)
 8014454:	2206      	movs	r2, #6
 8014456:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801445a:	4a0a      	ldr	r2, [pc, #40]	@ (8014484 <SwitchClass+0x1c8>)
 801445c:	79fb      	ldrb	r3, [r7, #7]
 801445e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8014462:	4b0a      	ldr	r3, [pc, #40]	@ (801448c <SwitchClass+0x1d0>)
 8014464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014466:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8014468:	2300      	movs	r3, #0
 801446a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 801446c:	e003      	b.n	8014476 <SwitchClass+0x1ba>
            break;
 801446e:	bf00      	nop
 8014470:	e002      	b.n	8014478 <SwitchClass+0x1bc>
            break;
 8014472:	bf00      	nop
 8014474:	e000      	b.n	8014478 <SwitchClass+0x1bc>
            break;
 8014476:	bf00      	nop
        }
    }

    return status;
 8014478:	7bfb      	ldrb	r3, [r7, #15]
}
 801447a:	4618      	mov	r0, r3
 801447c:	3710      	adds	r7, #16
 801447e:	46bd      	mov	sp, r7
 8014480:	bdb0      	pop	{r4, r5, r7, pc}
 8014482:	bf00      	nop
 8014484:	200010a8 	.word	0x200010a8
 8014488:	20000b8c 	.word	0x20000b8c
 801448c:	08029818 	.word	0x08029818

08014490 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b086      	sub	sp, #24
 8014494:	af00      	add	r7, sp, #0
 8014496:	4603      	mov	r3, r0
 8014498:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801449a:	4b10      	ldr	r3, [pc, #64]	@ (80144dc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801449c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80144a0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80144a2:	79fb      	ldrb	r3, [r7, #7]
 80144a4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80144a6:	230d      	movs	r3, #13
 80144a8:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80144aa:	4b0c      	ldr	r3, [pc, #48]	@ (80144dc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80144ac:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d001      	beq.n	80144b8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80144b4:	230e      	movs	r3, #14
 80144b6:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144b8:	4b08      	ldr	r3, [pc, #32]	@ (80144dc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80144ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80144be:	f107 0210 	add.w	r2, r7, #16
 80144c2:	4611      	mov	r1, r2
 80144c4:	4618      	mov	r0, r3
 80144c6:	f007 f9e5 	bl	801b894 <RegionGetPhyParam>
 80144ca:	4603      	mov	r3, r0
 80144cc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	b2db      	uxtb	r3, r3
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3718      	adds	r7, #24
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
 80144da:	bf00      	nop
 80144dc:	200010a8 	.word	0x200010a8

080144e0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	4603      	mov	r3, r0
 80144e8:	71fb      	strb	r3, [r7, #7]
 80144ea:	460b      	mov	r3, r1
 80144ec:	71bb      	strb	r3, [r7, #6]
 80144ee:	4613      	mov	r3, r2
 80144f0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80144f2:	2300      	movs	r3, #0
 80144f4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80144f6:	2300      	movs	r3, #0
 80144f8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80144fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7ff ffc6 	bl	8014490 <GetMaxAppPayloadWithoutFOptsLength>
 8014504:	4603      	mov	r3, r0
 8014506:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	b29a      	uxth	r2, r3
 801450c:	797b      	ldrb	r3, [r7, #5]
 801450e:	b29b      	uxth	r3, r3
 8014510:	4413      	add	r3, r2
 8014512:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8014514:	89ba      	ldrh	r2, [r7, #12]
 8014516:	89fb      	ldrh	r3, [r7, #14]
 8014518:	429a      	cmp	r2, r3
 801451a:	d804      	bhi.n	8014526 <ValidatePayloadLength+0x46>
 801451c:	89bb      	ldrh	r3, [r7, #12]
 801451e:	2bff      	cmp	r3, #255	@ 0xff
 8014520:	d801      	bhi.n	8014526 <ValidatePayloadLength+0x46>
    {
        return true;
 8014522:	2301      	movs	r3, #1
 8014524:	e000      	b.n	8014528 <ValidatePayloadLength+0x48>
    }
    return false;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8014530:	b590      	push	{r4, r7, lr}
 8014532:	b0a5      	sub	sp, #148	@ 0x94
 8014534:	af02      	add	r7, sp, #8
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	4608      	mov	r0, r1
 801453a:	4611      	mov	r1, r2
 801453c:	461a      	mov	r2, r3
 801453e:	4603      	mov	r3, r0
 8014540:	70fb      	strb	r3, [r7, #3]
 8014542:	460b      	mov	r3, r1
 8014544:	70bb      	strb	r3, [r7, #2]
 8014546:	4613      	mov	r3, r2
 8014548:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801454a:	2300      	movs	r3, #0
 801454c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8014550:	2300      	movs	r3, #0
 8014552:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014556:	2300      	movs	r3, #0
 8014558:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 801455c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8014560:	2b00      	cmp	r3, #0
 8014562:	f000 84b9 	beq.w	8014ed8 <ProcessMacCommands+0x9a8>
 8014566:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801456a:	2b01      	cmp	r3, #1
 801456c:	f040 84ba 	bne.w	8014ee4 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8014570:	f000 bcb2 	b.w	8014ed8 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8014574:	78fb      	ldrb	r3, [r7, #3]
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	4413      	add	r3, r2
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	4618      	mov	r0, r3
 801457e:	f005 fd3d 	bl	8019ffc <LoRaMacCommandsGetCmdSize>
 8014582:	4603      	mov	r3, r0
 8014584:	461a      	mov	r2, r3
 8014586:	78fb      	ldrb	r3, [r7, #3]
 8014588:	441a      	add	r2, r3
 801458a:	78bb      	ldrb	r3, [r7, #2]
 801458c:	429a      	cmp	r2, r3
 801458e:	f300 84ab 	bgt.w	8014ee8 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8014592:	78fb      	ldrb	r3, [r7, #3]
 8014594:	1c5a      	adds	r2, r3, #1
 8014596:	70fa      	strb	r2, [r7, #3]
 8014598:	461a      	mov	r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4413      	add	r3, r2
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	3b02      	subs	r3, #2
 80145a2:	2b11      	cmp	r3, #17
 80145a4:	f200 84a2 	bhi.w	8014eec <ProcessMacCommands+0x9bc>
 80145a8:	a201      	add	r2, pc, #4	@ (adr r2, 80145b0 <ProcessMacCommands+0x80>)
 80145aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145ae:	bf00      	nop
 80145b0:	080145f9 	.word	0x080145f9
 80145b4:	0801463b 	.word	0x0801463b
 80145b8:	080147b7 	.word	0x080147b7
 80145bc:	080147f5 	.word	0x080147f5
 80145c0:	080148ed 	.word	0x080148ed
 80145c4:	0801493d 	.word	0x0801493d
 80145c8:	080149f9 	.word	0x080149f9
 80145cc:	08014a4f 	.word	0x08014a4f
 80145d0:	08014b35 	.word	0x08014b35
 80145d4:	08014eed 	.word	0x08014eed
 80145d8:	08014eed 	.word	0x08014eed
 80145dc:	08014bdd 	.word	0x08014bdd
 80145e0:	08014eed 	.word	0x08014eed
 80145e4:	08014eed 	.word	0x08014eed
 80145e8:	08014cfd 	.word	0x08014cfd
 80145ec:	08014d31 	.word	0x08014d31
 80145f0:	08014dc1 	.word	0x08014dc1
 80145f4:	08014e39 	.word	0x08014e39
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80145f8:	2005      	movs	r0, #5
 80145fa:	f005 fed7 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	f000 845c 	beq.w	8014ebe <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8014606:	2105      	movs	r1, #5
 8014608:	2000      	movs	r0, #0
 801460a:	f005 fe43 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801460e:	78fb      	ldrb	r3, [r7, #3]
 8014610:	1c5a      	adds	r2, r3, #1
 8014612:	70fa      	strb	r2, [r7, #3]
 8014614:	461a      	mov	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	4413      	add	r3, r2
 801461a:	781a      	ldrb	r2, [r3, #0]
 801461c:	4bb0      	ldr	r3, [pc, #704]	@ (80148e0 <ProcessMacCommands+0x3b0>)
 801461e:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8014622:	78fb      	ldrb	r3, [r7, #3]
 8014624:	1c5a      	adds	r2, r3, #1
 8014626:	70fa      	strb	r2, [r7, #3]
 8014628:	461a      	mov	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4413      	add	r3, r2
 801462e:	781a      	ldrb	r2, [r3, #0]
 8014630:	4bab      	ldr	r3, [pc, #684]	@ (80148e0 <ProcessMacCommands+0x3b0>)
 8014632:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 8014636:	f000 bc42 	b.w	8014ebe <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801463a:	2300      	movs	r3, #0
 801463c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8014640:	2300      	movs	r3, #0
 8014642:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8014646:	2300      	movs	r3, #0
 8014648:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801464c:	2300      	movs	r3, #0
 801464e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8014652:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8014656:	f083 0301 	eor.w	r3, r3, #1
 801465a:	b2db      	uxtb	r3, r3
 801465c:	2b00      	cmp	r3, #0
 801465e:	f000 80a6 	beq.w	80147ae <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8014662:	2301      	movs	r3, #1
 8014664:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8014668:	78fb      	ldrb	r3, [r7, #3]
 801466a:	3b01      	subs	r3, #1
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	4413      	add	r3, r2
 8014670:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014672:	4b9c      	ldr	r3, [pc, #624]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014674:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014678:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801467c:	4b99      	ldr	r3, [pc, #612]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 801467e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014682:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014686:	4b97      	ldr	r3, [pc, #604]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014688:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801468c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014690:	4b94      	ldr	r3, [pc, #592]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014692:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8014696:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801469a:	4b92      	ldr	r3, [pc, #584]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 801469c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80146a0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80146a4:	4b8f      	ldr	r3, [pc, #572]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80146a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80146aa:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80146ac:	4b8d      	ldr	r3, [pc, #564]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80146ae:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d008      	beq.n	80146c8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80146b6:	78ba      	ldrb	r2, [r7, #2]
 80146b8:	78fb      	ldrb	r3, [r7, #3]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	3301      	adds	r3, #1
 80146c0:	b2db      	uxtb	r3, r3
 80146c2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80146c6:	e002      	b.n	80146ce <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80146c8:	2305      	movs	r3, #5
 80146ca:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80146ce:	4b85      	ldr	r3, [pc, #532]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80146d0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80146d4:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80146d8:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80146dc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80146e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	4623      	mov	r3, r4
 80146ee:	f007 f9d4 	bl	801ba9a <RegionLinkAdrReq>
 80146f2:	4603      	mov	r3, r0
 80146f4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80146f8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80146fc:	f003 0307 	and.w	r3, r3, #7
 8014700:	2b07      	cmp	r3, #7
 8014702:	d119      	bne.n	8014738 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8014704:	4b77      	ldr	r3, [pc, #476]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014706:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801470a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801470e:	429a      	cmp	r2, r3
 8014710:	da03      	bge.n	801471a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8014712:	4b74      	ldr	r3, [pc, #464]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014714:	2201      	movs	r2, #1
 8014716:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801471a:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801471e:	4b71      	ldr	r3, [pc, #452]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014720:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8014724:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8014728:	4b6e      	ldr	r3, [pc, #440]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 801472a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801472e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8014732:	4b6c      	ldr	r3, [pc, #432]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014734:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8014738:	2300      	movs	r3, #0
 801473a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 801473e:	e00b      	b.n	8014758 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8014740:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8014744:	2201      	movs	r2, #1
 8014746:	4619      	mov	r1, r3
 8014748:	2003      	movs	r0, #3
 801474a:	f005 faf7 	bl	8019d3c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801474e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8014752:	3301      	adds	r3, #1
 8014754:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8014758:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801475c:	4a62      	ldr	r2, [pc, #392]	@ (80148e8 <ProcessMacCommands+0x3b8>)
 801475e:	fba2 2303 	umull	r2, r3, r2, r3
 8014762:	089b      	lsrs	r3, r3, #2
 8014764:	b2db      	uxtb	r3, r3
 8014766:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 801476a:	429a      	cmp	r2, r3
 801476c:	d3e8      	bcc.n	8014740 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801476e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8014772:	78fb      	ldrb	r3, [r7, #3]
 8014774:	4413      	add	r3, r2
 8014776:	b2db      	uxtb	r3, r3
 8014778:	3b01      	subs	r3, #1
 801477a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 801477c:	78fa      	ldrb	r2, [r7, #3]
 801477e:	78bb      	ldrb	r3, [r7, #2]
 8014780:	429a      	cmp	r2, r3
 8014782:	d20a      	bcs.n	801479a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8014784:	78fb      	ldrb	r3, [r7, #3]
 8014786:	1c5a      	adds	r2, r3, #1
 8014788:	70fa      	strb	r2, [r7, #3]
 801478a:	461a      	mov	r2, r3
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	4413      	add	r3, r2
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b03      	cmp	r3, #3
 8014794:	f43f af68 	beq.w	8014668 <ProcessMacCommands+0x138>
 8014798:	e000      	b.n	801479c <ProcessMacCommands+0x26c>
                            break;
 801479a:	bf00      	nop

                    if( macIndex < commandsSize )
 801479c:	78fa      	ldrb	r2, [r7, #3]
 801479e:	78bb      	ldrb	r3, [r7, #2]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	f080 838e 	bcs.w	8014ec2 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80147a6:	78fb      	ldrb	r3, [r7, #3]
 80147a8:	3b01      	subs	r3, #1
 80147aa:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80147ac:	e389      	b.n	8014ec2 <ProcessMacCommands+0x992>
                    macIndex += 4;
 80147ae:	78fb      	ldrb	r3, [r7, #3]
 80147b0:	3304      	adds	r3, #4
 80147b2:	70fb      	strb	r3, [r7, #3]
                break;
 80147b4:	e385      	b.n	8014ec2 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80147b6:	78fb      	ldrb	r3, [r7, #3]
 80147b8:	1c5a      	adds	r2, r3, #1
 80147ba:	70fa      	strb	r2, [r7, #3]
 80147bc:	461a      	mov	r2, r3
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	4413      	add	r3, r2
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	f003 030f 	and.w	r3, r3, #15
 80147c8:	b2da      	uxtb	r2, r3
 80147ca:	4b46      	ldr	r3, [pc, #280]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80147cc:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80147d0:	4b44      	ldr	r3, [pc, #272]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80147d2:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80147d6:	461a      	mov	r2, r3
 80147d8:	2301      	movs	r3, #1
 80147da:	4093      	lsls	r3, r2
 80147dc:	b29a      	uxth	r2, r3
 80147de:	4b41      	ldr	r3, [pc, #260]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80147e0:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80147e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80147e8:	2200      	movs	r2, #0
 80147ea:	4619      	mov	r1, r3
 80147ec:	2004      	movs	r0, #4
 80147ee:	f005 faa5 	bl	8019d3c <LoRaMacCommandsAddCmd>
                break;
 80147f2:	e371      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80147f4:	2307      	movs	r3, #7
 80147f6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80147fa:	78fb      	ldrb	r3, [r7, #3]
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	4413      	add	r3, r2
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	091b      	lsrs	r3, r3, #4
 8014804:	b2db      	uxtb	r3, r3
 8014806:	b25b      	sxtb	r3, r3
 8014808:	f003 0307 	and.w	r3, r3, #7
 801480c:	b25b      	sxtb	r3, r3
 801480e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8014812:	78fb      	ldrb	r3, [r7, #3]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	4413      	add	r3, r2
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	b25b      	sxtb	r3, r3
 801481c:	f003 030f 	and.w	r3, r3, #15
 8014820:	b25b      	sxtb	r3, r3
 8014822:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8014826:	78fb      	ldrb	r3, [r7, #3]
 8014828:	3301      	adds	r3, #1
 801482a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801482c:	78fb      	ldrb	r3, [r7, #3]
 801482e:	1c5a      	adds	r2, r3, #1
 8014830:	70fa      	strb	r2, [r7, #3]
 8014832:	461a      	mov	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	4413      	add	r3, r2
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801483c:	78fb      	ldrb	r3, [r7, #3]
 801483e:	1c5a      	adds	r2, r3, #1
 8014840:	70fa      	strb	r2, [r7, #3]
 8014842:	461a      	mov	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	4413      	add	r3, r2
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	021a      	lsls	r2, r3, #8
 801484c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801484e:	4313      	orrs	r3, r2
 8014850:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014852:	78fb      	ldrb	r3, [r7, #3]
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	70fa      	strb	r2, [r7, #3]
 8014858:	461a      	mov	r2, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4413      	add	r3, r2
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	041a      	lsls	r2, r3, #16
 8014862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014864:	4313      	orrs	r3, r2
 8014866:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8014868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801486a:	2264      	movs	r2, #100	@ 0x64
 801486c:	fb02 f303 	mul.w	r3, r2, r3
 8014870:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8014872:	4b1c      	ldr	r3, [pc, #112]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 8014874:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014878:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801487c:	4611      	mov	r1, r2
 801487e:	4618      	mov	r0, r3
 8014880:	f007 f932 	bl	801bae8 <RegionRxParamSetupReq>
 8014884:	4603      	mov	r3, r0
 8014886:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801488a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801488e:	f003 0307 	and.w	r3, r3, #7
 8014892:	2b07      	cmp	r3, #7
 8014894:	d117      	bne.n	80148c6 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8014896:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801489a:	b2da      	uxtb	r2, r3
 801489c:	4b11      	ldr	r3, [pc, #68]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 801489e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80148a2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80148a6:	b2da      	uxtb	r2, r3
 80148a8:	4b0e      	ldr	r3, [pc, #56]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80148aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80148ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148b0:	4a0c      	ldr	r2, [pc, #48]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80148b2:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80148b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148b6:	4a0b      	ldr	r2, [pc, #44]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80148b8:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80148ba:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	4b08      	ldr	r3, [pc, #32]	@ (80148e4 <ProcessMacCommands+0x3b4>)
 80148c2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 80148c6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80148ca:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80148ce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80148d2:	2201      	movs	r2, #1
 80148d4:	4619      	mov	r1, r3
 80148d6:	2005      	movs	r0, #5
 80148d8:	f005 fa30 	bl	8019d3c <LoRaMacCommandsAddCmd>
                break;
 80148dc:	e2fc      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
 80148de:	bf00      	nop
 80148e0:	20000b8c 	.word	0x20000b8c
 80148e4:	200010a8 	.word	0x200010a8
 80148e8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80148ec:	23ff      	movs	r3, #255	@ 0xff
 80148ee:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80148f2:	4bb7      	ldr	r3, [pc, #732]	@ (8014bd0 <ProcessMacCommands+0x6a0>)
 80148f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d00d      	beq.n	8014918 <ProcessMacCommands+0x3e8>
 80148fc:	4bb4      	ldr	r3, [pc, #720]	@ (8014bd0 <ProcessMacCommands+0x6a0>)
 80148fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d007      	beq.n	8014918 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8014908:	4bb1      	ldr	r3, [pc, #708]	@ (8014bd0 <ProcessMacCommands+0x6a0>)
 801490a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4798      	blx	r3
 8014912:	4603      	mov	r3, r0
 8014914:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8014918:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 801491c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8014920:	787b      	ldrb	r3, [r7, #1]
 8014922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014926:	b2db      	uxtb	r3, r3
 8014928:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801492c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014930:	2202      	movs	r2, #2
 8014932:	4619      	mov	r1, r3
 8014934:	2006      	movs	r0, #6
 8014936:	f005 fa01 	bl	8019d3c <LoRaMacCommandsAddCmd>
                break;
 801493a:	e2cd      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801493c:	2303      	movs	r3, #3
 801493e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8014942:	78fb      	ldrb	r3, [r7, #3]
 8014944:	1c5a      	adds	r2, r3, #1
 8014946:	70fa      	strb	r2, [r7, #3]
 8014948:	461a      	mov	r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	4413      	add	r3, r2
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	b25b      	sxtb	r3, r3
 8014952:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8014956:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801495a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801495c:	78fb      	ldrb	r3, [r7, #3]
 801495e:	1c5a      	adds	r2, r3, #1
 8014960:	70fa      	strb	r2, [r7, #3]
 8014962:	461a      	mov	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	4413      	add	r3, r2
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801496c:	78fb      	ldrb	r3, [r7, #3]
 801496e:	1c5a      	adds	r2, r3, #1
 8014970:	70fa      	strb	r2, [r7, #3]
 8014972:	461a      	mov	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	4413      	add	r3, r2
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	021a      	lsls	r2, r3, #8
 801497c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801497e:	4313      	orrs	r3, r2
 8014980:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014982:	78fb      	ldrb	r3, [r7, #3]
 8014984:	1c5a      	adds	r2, r3, #1
 8014986:	70fa      	strb	r2, [r7, #3]
 8014988:	461a      	mov	r2, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	4413      	add	r3, r2
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	041a      	lsls	r2, r3, #16
 8014992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014994:	4313      	orrs	r3, r2
 8014996:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8014998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801499a:	2264      	movs	r2, #100	@ 0x64
 801499c:	fb02 f303 	mul.w	r3, r2, r3
 80149a0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 80149a2:	2300      	movs	r3, #0
 80149a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80149a6:	78fb      	ldrb	r3, [r7, #3]
 80149a8:	1c5a      	adds	r2, r3, #1
 80149aa:	70fa      	strb	r2, [r7, #3]
 80149ac:	461a      	mov	r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	4413      	add	r3, r2
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	b25b      	sxtb	r3, r3
 80149b6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80149ba:	4b86      	ldr	r3, [pc, #536]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 80149bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80149c0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80149c4:	4611      	mov	r1, r2
 80149c6:	4618      	mov	r0, r3
 80149c8:	f007 f8a9 	bl	801bb1e <RegionNewChannelReq>
 80149cc:	4603      	mov	r3, r0
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80149d4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80149d8:	b25b      	sxtb	r3, r3
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f2c0 8273 	blt.w	8014ec6 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 80149e0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80149e4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80149e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80149ec:	2201      	movs	r2, #1
 80149ee:	4619      	mov	r1, r3
 80149f0:	2007      	movs	r0, #7
 80149f2:	f005 f9a3 	bl	8019d3c <LoRaMacCommandsAddCmd>
                }
                break;
 80149f6:	e266      	b.n	8014ec6 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80149f8:	78fb      	ldrb	r3, [r7, #3]
 80149fa:	1c5a      	adds	r2, r3, #1
 80149fc:	70fa      	strb	r2, [r7, #3]
 80149fe:	461a      	mov	r2, r3
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	4413      	add	r3, r2
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	f003 030f 	and.w	r3, r3, #15
 8014a0a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8014a0e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d104      	bne.n	8014a20 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8014a16:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8014a20:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8014a24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014a28:	fb02 f303 	mul.w	r3, r2, r3
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	4b69      	ldr	r3, [pc, #420]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014a30:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8014a32:	4b68      	ldr	r3, [pc, #416]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a36:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8014a3a:	4a66      	ldr	r2, [pc, #408]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014a3c:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8014a3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014a42:	2200      	movs	r2, #0
 8014a44:	4619      	mov	r1, r3
 8014a46:	2008      	movs	r0, #8
 8014a48:	f005 f978 	bl	8019d3c <LoRaMacCommandsAddCmd>
                break;
 8014a4c:	e244      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8014a4e:	78fb      	ldrb	r3, [r7, #3]
 8014a50:	1c5a      	adds	r2, r3, #1
 8014a52:	70fa      	strb	r2, [r7, #3]
 8014a54:	461a      	mov	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	4413      	add	r3, r2
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8014a60:	2300      	movs	r3, #0
 8014a62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8014a66:	2300      	movs	r3, #0
 8014a68:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8014a6c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8014a70:	f003 0320 	and.w	r3, r3, #32
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8014a7e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8014a82:	f003 0310 	and.w	r3, r3, #16
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d002      	beq.n	8014a90 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8014a90:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8014a94:	f003 030f 	and.w	r3, r3, #15
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8014a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014aa0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014aa4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8014aa8:	4611      	mov	r1, r2
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f007 f852 	bl	801bb54 <RegionTxParamSetupReq>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014ab6:	f000 8208 	beq.w	8014eca <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8014aba:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8014abe:	4b45      	ldr	r3, [pc, #276]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014ac0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8014ac4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8014ac8:	4b42      	ldr	r3, [pc, #264]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014aca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8014ace:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	4b40      	ldr	r3, [pc, #256]	@ (8014bd8 <ProcessMacCommands+0x6a8>)
 8014ad6:	5c9b      	ldrb	r3, [r3, r2]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7eb ff1b 	bl	8000914 <__aeabi_ui2f>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014ae2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014aec:	4b39      	ldr	r3, [pc, #228]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014aee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014af2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014af6:	4b37      	ldr	r3, [pc, #220]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014af8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014afc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8014b00:	4611      	mov	r1, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	f006 fec6 	bl	801b894 <RegionGetPhyParam>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8014b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b0e:	b25a      	sxtb	r2, r3
 8014b10:	4b30      	ldr	r3, [pc, #192]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014b12:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8014b16:	4293      	cmp	r3, r2
 8014b18:	bfb8      	it	lt
 8014b1a:	4613      	movlt	r3, r2
 8014b1c:	b25a      	sxtb	r2, r3
 8014b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014b20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8014b24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014b28:	2200      	movs	r2, #0
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	2009      	movs	r0, #9
 8014b2e:	f005 f905 	bl	8019d3c <LoRaMacCommandsAddCmd>
                }
                break;
 8014b32:	e1ca      	b.n	8014eca <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8014b34:	2303      	movs	r3, #3
 8014b36:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8014b3a:	78fb      	ldrb	r3, [r7, #3]
 8014b3c:	1c5a      	adds	r2, r3, #1
 8014b3e:	70fa      	strb	r2, [r7, #3]
 8014b40:	461a      	mov	r2, r3
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	4413      	add	r3, r2
 8014b46:	781b      	ldrb	r3, [r3, #0]
 8014b48:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8014b4c:	78fb      	ldrb	r3, [r7, #3]
 8014b4e:	1c5a      	adds	r2, r3, #1
 8014b50:	70fa      	strb	r2, [r7, #3]
 8014b52:	461a      	mov	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	4413      	add	r3, r2
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8014b5c:	78fb      	ldrb	r3, [r7, #3]
 8014b5e:	1c5a      	adds	r2, r3, #1
 8014b60:	70fa      	strb	r2, [r7, #3]
 8014b62:	461a      	mov	r2, r3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	4413      	add	r3, r2
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	021a      	lsls	r2, r3, #8
 8014b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014b72:	78fb      	ldrb	r3, [r7, #3]
 8014b74:	1c5a      	adds	r2, r3, #1
 8014b76:	70fa      	strb	r2, [r7, #3]
 8014b78:	461a      	mov	r2, r3
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	041a      	lsls	r2, r3, #16
 8014b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b84:	4313      	orrs	r3, r2
 8014b86:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8014b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b8a:	2264      	movs	r2, #100	@ 0x64
 8014b8c:	fb02 f303 	mul.w	r3, r2, r3
 8014b90:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8014b92:	4b10      	ldr	r3, [pc, #64]	@ (8014bd4 <ProcessMacCommands+0x6a4>)
 8014b94:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014b98:	f107 0220 	add.w	r2, r7, #32
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f006 fff3 	bl	801bb8a <RegionDlChannelReq>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8014bac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8014bb0:	b25b      	sxtb	r3, r3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f2c0 818b 	blt.w	8014ece <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 8014bb8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8014bbc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8014bc0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	200a      	movs	r0, #10
 8014bca:	f005 f8b7 	bl	8019d3c <LoRaMacCommandsAddCmd>
                }
                break;
 8014bce:	e17e      	b.n	8014ece <ProcessMacCommands+0x99e>
 8014bd0:	20000b8c 	.word	0x20000b8c
 8014bd4:	200010a8 	.word	0x200010a8
 8014bd8:	08029748 	.word	0x08029748
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8014bdc:	2009      	movs	r0, #9
 8014bde:	f005 fbe5 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f000 8084 	beq.w	8014cf2 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8014bea:	2109      	movs	r1, #9
 8014bec:	2000      	movs	r0, #0
 8014bee:	f005 fb51 	bl	801a294 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8014bf2:	f107 0318 	add.w	r3, r7, #24
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	601a      	str	r2, [r3, #0]
 8014bfa:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8014bfc:	f107 0310 	add.w	r3, r7, #16
 8014c00:	2200      	movs	r2, #0
 8014c02:	601a      	str	r2, [r3, #0]
 8014c04:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8014c06:	f107 0308 	add.w	r3, r7, #8
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	601a      	str	r2, [r3, #0]
 8014c0e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8014c10:	78fb      	ldrb	r3, [r7, #3]
 8014c12:	1c5a      	adds	r2, r3, #1
 8014c14:	70fa      	strb	r2, [r7, #3]
 8014c16:	461a      	mov	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8014c20:	78fb      	ldrb	r3, [r7, #3]
 8014c22:	1c5a      	adds	r2, r3, #1
 8014c24:	70fa      	strb	r2, [r7, #3]
 8014c26:	461a      	mov	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	781b      	ldrb	r3, [r3, #0]
 8014c2e:	021a      	lsls	r2, r3, #8
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	4313      	orrs	r3, r2
 8014c34:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8014c36:	78fb      	ldrb	r3, [r7, #3]
 8014c38:	1c5a      	adds	r2, r3, #1
 8014c3a:	70fa      	strb	r2, [r7, #3]
 8014c3c:	461a      	mov	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4413      	add	r3, r2
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	041a      	lsls	r2, r3, #16
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	4313      	orrs	r3, r2
 8014c4a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8014c4c:	78fb      	ldrb	r3, [r7, #3]
 8014c4e:	1c5a      	adds	r2, r3, #1
 8014c50:	70fa      	strb	r2, [r7, #3]
 8014c52:	461a      	mov	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	4413      	add	r3, r2
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	061a      	lsls	r2, r3, #24
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8014c62:	78fb      	ldrb	r3, [r7, #3]
 8014c64:	1c5a      	adds	r2, r3, #1
 8014c66:	70fa      	strb	r2, [r7, #3]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	b21b      	sxth	r3, r3
 8014c72:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8014c74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014c78:	461a      	mov	r2, r3
 8014c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014c7e:	fb02 f303 	mul.w	r3, r2, r3
 8014c82:	121b      	asrs	r3, r3, #8
 8014c84:	b21b      	sxth	r3, r3
 8014c86:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8014c88:	f107 0310 	add.w	r3, r7, #16
 8014c8c:	f107 0218 	add.w	r2, r7, #24
 8014c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c94:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8014c98:	693a      	ldr	r2, [r7, #16]
 8014c9a:	4b96      	ldr	r3, [pc, #600]	@ (8014ef4 <ProcessMacCommands+0x9c4>)
 8014c9c:	4413      	add	r3, r2
 8014c9e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8014ca0:	f107 0308 	add.w	r3, r7, #8
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f00e f8e7 	bl	8022e78 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8014caa:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8014cae:	4b92      	ldr	r3, [pc, #584]	@ (8014ef8 <ProcessMacCommands+0x9c8>)
 8014cb0:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8014cb4:	9200      	str	r2, [sp, #0]
 8014cb6:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8014cba:	f107 0210 	add.w	r2, r7, #16
 8014cbe:	ca06      	ldmia	r2, {r1, r2}
 8014cc0:	f00e f873 	bl	8022daa <SysTimeSub>
 8014cc4:	f107 0010 	add.w	r0, r7, #16
 8014cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014cca:	9300      	str	r3, [sp, #0]
 8014ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014cce:	f107 0208 	add.w	r2, r7, #8
 8014cd2:	ca06      	ldmia	r2, {r1, r2}
 8014cd4:	f00e f830 	bl	8022d38 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8014cd8:	f107 0310 	add.w	r3, r7, #16
 8014cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ce0:	f00e f89c 	bl	8022e1c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8014ce4:	f004 fd54 	bl	8019790 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8014ce8:	4b83      	ldr	r3, [pc, #524]	@ (8014ef8 <ProcessMacCommands+0x9c8>)
 8014cea:	2201      	movs	r2, #1
 8014cec:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8014cf0:	e0f2      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8014cf2:	4b81      	ldr	r3, [pc, #516]	@ (8014ef8 <ProcessMacCommands+0x9c8>)
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8014cfa:	e0ed      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8014cfc:	200c      	movs	r0, #12
 8014cfe:	f005 fb55 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f000 80e4 	beq.w	8014ed2 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8014d0a:	210c      	movs	r1, #12
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	f005 fac1 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8014d12:	4b79      	ldr	r3, [pc, #484]	@ (8014ef8 <ProcessMacCommands+0x9c8>)
 8014d14:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8014d18:	2b04      	cmp	r3, #4
 8014d1a:	f000 80da 	beq.w	8014ed2 <ProcessMacCommands+0x9a2>
 8014d1e:	4b76      	ldr	r3, [pc, #472]	@ (8014ef8 <ProcessMacCommands+0x9c8>)
 8014d20:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8014d24:	2b05      	cmp	r3, #5
 8014d26:	f000 80d4 	beq.w	8014ed2 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8014d2a:	f004 fc51 	bl	80195d0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8014d2e:	e0d0      	b.n	8014ed2 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8014d30:	2303      	movs	r3, #3
 8014d32:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8014d36:	2300      	movs	r3, #0
 8014d38:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8014d3a:	78fb      	ldrb	r3, [r7, #3]
 8014d3c:	1c5a      	adds	r2, r3, #1
 8014d3e:	70fa      	strb	r2, [r7, #3]
 8014d40:	461a      	mov	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4413      	add	r3, r2
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014d4a:	78fb      	ldrb	r3, [r7, #3]
 8014d4c:	1c5a      	adds	r2, r3, #1
 8014d4e:	70fa      	strb	r2, [r7, #3]
 8014d50:	461a      	mov	r2, r3
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	4413      	add	r3, r2
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	021b      	lsls	r3, r3, #8
 8014d5a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014d5c:	4313      	orrs	r3, r2
 8014d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014d60:	78fb      	ldrb	r3, [r7, #3]
 8014d62:	1c5a      	adds	r2, r3, #1
 8014d64:	70fa      	strb	r2, [r7, #3]
 8014d66:	461a      	mov	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	041b      	lsls	r3, r3, #16
 8014d70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014d72:	4313      	orrs	r3, r2
 8014d74:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8014d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d78:	2264      	movs	r2, #100	@ 0x64
 8014d7a:	fb02 f303 	mul.w	r3, r2, r3
 8014d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8014d80:	78fb      	ldrb	r3, [r7, #3]
 8014d82:	1c5a      	adds	r2, r3, #1
 8014d84:	70fa      	strb	r2, [r7, #3]
 8014d86:	461a      	mov	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	f003 030f 	and.w	r3, r3, #15
 8014d92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8014d96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014d9a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f004 fc2d 	bl	80195fc <LoRaMacClassBPingSlotChannelReq>
 8014da2:	4603      	mov	r3, r0
 8014da4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8014da8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8014dac:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8014db0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014db4:	2201      	movs	r2, #1
 8014db6:	4619      	mov	r1, r3
 8014db8:	2011      	movs	r0, #17
 8014dba:	f004 ffbf 	bl	8019d3c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8014dbe:	e08b      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8014dc0:	200d      	movs	r0, #13
 8014dc2:	f005 faf3 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 8084 	beq.w	8014ed6 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8014dce:	210d      	movs	r1, #13
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	f005 fa5f 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8014de2:	78fb      	ldrb	r3, [r7, #3]
 8014de4:	1c5a      	adds	r2, r3, #1
 8014de6:	70fa      	strb	r2, [r7, #3]
 8014de8:	461a      	mov	r2, r3
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4413      	add	r3, r2
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8014df4:	78fb      	ldrb	r3, [r7, #3]
 8014df6:	1c5a      	adds	r2, r3, #1
 8014df8:	70fa      	strb	r2, [r7, #3]
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	4413      	add	r3, r2
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	021b      	lsls	r3, r3, #8
 8014e04:	b21a      	sxth	r2, r3
 8014e06:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	b21b      	sxth	r3, r3
 8014e0e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8014e12:	78fb      	ldrb	r3, [r7, #3]
 8014e14:	1c5a      	adds	r2, r3, #1
 8014e16:	70fa      	strb	r2, [r7, #3]
 8014e18:	461a      	mov	r2, r3
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4413      	add	r3, r2
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8014e24:	4b35      	ldr	r3, [pc, #212]	@ (8014efc <ProcessMacCommands+0x9cc>)
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8014e2c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8014e30:	4618      	mov	r0, r3
 8014e32:	f004 fc4f 	bl	80196d4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8014e36:	e04e      	b.n	8014ed6 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8014e3e:	78fb      	ldrb	r3, [r7, #3]
 8014e40:	1c5a      	adds	r2, r3, #1
 8014e42:	70fa      	strb	r2, [r7, #3]
 8014e44:	461a      	mov	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4413      	add	r3, r2
 8014e4a:	781b      	ldrb	r3, [r3, #0]
 8014e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014e50:	78fb      	ldrb	r3, [r7, #3]
 8014e52:	1c5a      	adds	r2, r3, #1
 8014e54:	70fa      	strb	r2, [r7, #3]
 8014e56:	461a      	mov	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	021b      	lsls	r3, r3, #8
 8014e60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014e64:	4313      	orrs	r3, r2
 8014e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014e6a:	78fb      	ldrb	r3, [r7, #3]
 8014e6c:	1c5a      	adds	r2, r3, #1
 8014e6e:	70fa      	strb	r2, [r7, #3]
 8014e70:	461a      	mov	r2, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	4413      	add	r3, r2
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	041b      	lsls	r3, r3, #16
 8014e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8014e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e88:	2264      	movs	r2, #100	@ 0x64
 8014e8a:	fb02 f303 	mul.w	r3, r2, r3
 8014e8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8014e92:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8014e96:	f004 fcf3 	bl	8019880 <LoRaMacClassBBeaconFreqReq>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d003      	beq.n	8014ea8 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8014ea6:	e002      	b.n	8014eae <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8014eae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	2013      	movs	r0, #19
 8014eb8:	f004 ff40 	bl	8019d3c <LoRaMacCommandsAddCmd>
                }
                break;
 8014ebc:	e00c      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ebe:	bf00      	nop
 8014ec0:	e00a      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ec2:	bf00      	nop
 8014ec4:	e008      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ec6:	bf00      	nop
 8014ec8:	e006      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014eca:	bf00      	nop
 8014ecc:	e004      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ece:	bf00      	nop
 8014ed0:	e002      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ed2:	bf00      	nop
 8014ed4:	e000      	b.n	8014ed8 <ProcessMacCommands+0x9a8>
                break;
 8014ed6:	bf00      	nop
    while( macIndex < commandsSize )
 8014ed8:	78fa      	ldrb	r2, [r7, #3]
 8014eda:	78bb      	ldrb	r3, [r7, #2]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	f4ff ab49 	bcc.w	8014574 <ProcessMacCommands+0x44>
 8014ee2:	e004      	b.n	8014eee <ProcessMacCommands+0x9be>
        return;
 8014ee4:	bf00      	nop
 8014ee6:	e002      	b.n	8014eee <ProcessMacCommands+0x9be>
            return;
 8014ee8:	bf00      	nop
 8014eea:	e000      	b.n	8014eee <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8014eec:	bf00      	nop
        }
    }
}
 8014eee:	378c      	adds	r7, #140	@ 0x8c
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd90      	pop	{r4, r7, pc}
 8014ef4:	12d53d80 	.word	0x12d53d80
 8014ef8:	20000b8c 	.word	0x20000b8c
 8014efc:	20001cd8 	.word	0x20001cd8

08014f00 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b08e      	sub	sp, #56	@ 0x38
 8014f04:	af02      	add	r7, sp, #8
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	607a      	str	r2, [r7, #4]
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	72fb      	strb	r3, [r7, #11]
 8014f10:	4613      	mov	r3, r2
 8014f12:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f14:	2303      	movs	r3, #3
 8014f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014f1a:	4b66      	ldr	r3, [pc, #408]	@ (80150b4 <Send+0x1b4>)
 8014f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8014f20:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8014f24:	4b63      	ldr	r3, [pc, #396]	@ (80150b4 <Send+0x1b4>)
 8014f26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014f2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014f2e:	4b61      	ldr	r3, [pc, #388]	@ (80150b4 <Send+0x1b4>)
 8014f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014f34:	4b5f      	ldr	r3, [pc, #380]	@ (80150b4 <Send+0x1b4>)
 8014f36:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8014f3e:	2307      	movs	r3, #7
 8014f40:	e0b4      	b.n	80150ac <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8014f42:	4b5c      	ldr	r3, [pc, #368]	@ (80150b4 <Send+0x1b4>)
 8014f44:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d102      	bne.n	8014f52 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014f4c:	4b59      	ldr	r3, [pc, #356]	@ (80150b4 <Send+0x1b4>)
 8014f4e:	2200      	movs	r2, #0
 8014f50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8014f52:	2300      	movs	r3, #0
 8014f54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8014f58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014f5c:	f36f 0303 	bfc	r3, #0, #4
 8014f60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8014f64:	4b53      	ldr	r3, [pc, #332]	@ (80150b4 <Send+0x1b4>)
 8014f66:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8014f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014f6e:	f362 13c7 	bfi	r3, r2, #7, #1
 8014f72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014f76:	4b4f      	ldr	r3, [pc, #316]	@ (80150b4 <Send+0x1b4>)
 8014f78:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d106      	bne.n	8014f8e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8014f80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014f84:	f043 0310 	orr.w	r3, r3, #16
 8014f88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8014f8c:	e005      	b.n	8014f9a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8014f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014f92:	f36f 1304 	bfc	r3, #4, #1
 8014f96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8014f9a:	4b46      	ldr	r3, [pc, #280]	@ (80150b4 <Send+0x1b4>)
 8014f9c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d005      	beq.n	8014fb0 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8014fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014fa8:	f043 0320 	orr.w	r3, r3, #32
 8014fac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8014fb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014fb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	bf14      	ite	ne
 8014fc2:	2301      	movne	r3, #1
 8014fc4:	2300      	moveq	r3, #0
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014fca:	4b3a      	ldr	r3, [pc, #232]	@ (80150b4 <Send+0x1b4>)
 8014fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fce:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014fd0:	4b38      	ldr	r3, [pc, #224]	@ (80150b4 <Send+0x1b4>)
 8014fd2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8014fd6:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014fd8:	4b36      	ldr	r3, [pc, #216]	@ (80150b4 <Send+0x1b4>)
 8014fda:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8014fde:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014fe0:	4b34      	ldr	r3, [pc, #208]	@ (80150b4 <Send+0x1b4>)
 8014fe2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8014fe6:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014fea:	4b32      	ldr	r3, [pc, #200]	@ (80150b4 <Send+0x1b4>)
 8014fec:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8014ff0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80150b4 <Send+0x1b4>)
 8014ff6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8014ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80150b4 <Send+0x1b4>)
 8015000:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8015004:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8015008:	4b2a      	ldr	r3, [pc, #168]	@ (80150b4 <Send+0x1b4>)
 801500a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801500e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8015012:	f107 0014 	add.w	r0, r7, #20
 8015016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801501a:	9300      	str	r3, [sp, #0]
 801501c:	4b26      	ldr	r3, [pc, #152]	@ (80150b8 <Send+0x1b8>)
 801501e:	4a27      	ldr	r2, [pc, #156]	@ (80150bc <Send+0x1bc>)
 8015020:	4927      	ldr	r1, [pc, #156]	@ (80150c0 <Send+0x1c0>)
 8015022:	f002 fcbd 	bl	80179a0 <LoRaMacAdrCalcNext>
 8015026:	4603      	mov	r3, r0
 8015028:	461a      	mov	r2, r3
 801502a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801502e:	f362 1386 	bfi	r3, r2, #6, #1
 8015032:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8015036:	7afa      	ldrb	r2, [r7, #11]
 8015038:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801503c:	893b      	ldrh	r3, [r7, #8]
 801503e:	9300      	str	r3, [sp, #0]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f000 fc72 	bl	801592c <PrepareFrame>
 8015048:	4603      	mov	r3, r0
 801504a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801504e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015052:	2b00      	cmp	r3, #0
 8015054:	d003      	beq.n	801505e <Send+0x15e>
 8015056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801505a:	2b0a      	cmp	r3, #10
 801505c:	d107      	bne.n	801506e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801505e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015062:	4618      	mov	r0, r3
 8015064:	f000 f962 	bl	801532c <ScheduleTx>
 8015068:	4603      	mov	r3, r0
 801506a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801506e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015072:	2b00      	cmp	r3, #0
 8015074:	d00a      	beq.n	801508c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8015076:	4a0f      	ldr	r2, [pc, #60]	@ (80150b4 <Send+0x1b4>)
 8015078:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801507c:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8015080:	4a0c      	ldr	r2, [pc, #48]	@ (80150b4 <Send+0x1b4>)
 8015082:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015086:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 801508a:	e00d      	b.n	80150a8 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 801508c:	4b09      	ldr	r3, [pc, #36]	@ (80150b4 <Send+0x1b4>)
 801508e:	2200      	movs	r2, #0
 8015090:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8015094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015096:	4a07      	ldr	r2, [pc, #28]	@ (80150b4 <Send+0x1b4>)
 8015098:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801509a:	f004 fef5 	bl	8019e88 <LoRaMacCommandsRemoveNoneStickyCmds>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80150a4:	2313      	movs	r3, #19
 80150a6:	e001      	b.n	80150ac <Send+0x1ac>
        }
    }
    return status;
 80150a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3730      	adds	r7, #48	@ 0x30
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	200010a8 	.word	0x200010a8
 80150b8:	20001110 	.word	0x20001110
 80150bc:	200010e0 	.word	0x200010e0
 80150c0:	200010e1 	.word	0x200010e1

080150c4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	4603      	mov	r3, r0
 80150cc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80150d6:	2301      	movs	r3, #1
 80150d8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80150da:	79fb      	ldrb	r3, [r7, #7]
 80150dc:	2bff      	cmp	r3, #255	@ 0xff
 80150de:	d11f      	bne.n	8015120 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80150e0:	2000      	movs	r0, #0
 80150e2:	f7ff f8eb 	bl	80142bc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80150e6:	4b15      	ldr	r3, [pc, #84]	@ (801513c <SendReJoinReq+0x78>)
 80150e8:	2200      	movs	r2, #0
 80150ea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80150ee:	4b13      	ldr	r3, [pc, #76]	@ (801513c <SendReJoinReq+0x78>)
 80150f0:	4a13      	ldr	r2, [pc, #76]	@ (8015140 <SendReJoinReq+0x7c>)
 80150f2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80150f6:	4b11      	ldr	r3, [pc, #68]	@ (801513c <SendReJoinReq+0x78>)
 80150f8:	22ff      	movs	r2, #255	@ 0xff
 80150fa:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80150fe:	7b3b      	ldrb	r3, [r7, #12]
 8015100:	f36f 1347 	bfc	r3, #5, #3
 8015104:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8015106:	7b3a      	ldrb	r2, [r7, #12]
 8015108:	4b0c      	ldr	r3, [pc, #48]	@ (801513c <SendReJoinReq+0x78>)
 801510a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801510e:	480d      	ldr	r0, [pc, #52]	@ (8015144 <SendReJoinReq+0x80>)
 8015110:	f7fb fa88 	bl	8010624 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8015114:	480c      	ldr	r0, [pc, #48]	@ (8015148 <SendReJoinReq+0x84>)
 8015116:	f7fb fa55 	bl	80105c4 <SecureElementGetDevEui>

            allowDelayedTx = false;
 801511a:	2300      	movs	r3, #0
 801511c:	73fb      	strb	r3, [r7, #15]

            break;
 801511e:	e002      	b.n	8015126 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015120:	2302      	movs	r3, #2
 8015122:	73bb      	strb	r3, [r7, #14]
            break;
 8015124:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8015126:	7bfb      	ldrb	r3, [r7, #15]
 8015128:	4618      	mov	r0, r3
 801512a:	f000 f8ff 	bl	801532c <ScheduleTx>
 801512e:	4603      	mov	r3, r0
 8015130:	73bb      	strb	r3, [r7, #14]
    return status;
 8015132:	7bbb      	ldrb	r3, [r7, #14]
}
 8015134:	4618      	mov	r0, r3
 8015136:	3710      	adds	r7, #16
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	20000b8c 	.word	0x20000b8c
 8015140:	20000b8e 	.word	0x20000b8e
 8015144:	20000c9a 	.word	0x20000c9a
 8015148:	20000ca2 	.word	0x20000ca2

0801514c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801514c:	b580      	push	{r7, lr}
 801514e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8015150:	f004 f8f0 	bl	8019334 <LoRaMacClassBIsBeaconExpected>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d001      	beq.n	801515e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801515a:	230e      	movs	r3, #14
 801515c:	e013      	b.n	8015186 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801515e:	4b0b      	ldr	r3, [pc, #44]	@ (801518c <CheckForClassBCollision+0x40>)
 8015160:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8015164:	2b01      	cmp	r3, #1
 8015166:	d10d      	bne.n	8015184 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8015168:	f004 f8fc 	bl	8019364 <LoRaMacClassBIsPingExpected>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8015172:	230f      	movs	r3, #15
 8015174:	e007      	b.n	8015186 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8015176:	f004 f905 	bl	8019384 <LoRaMacClassBIsMulticastExpected>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d001      	beq.n	8015184 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8015180:	230f      	movs	r3, #15
 8015182:	e000      	b.n	8015186 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8015184:	2300      	movs	r3, #0
}
 8015186:	4618      	mov	r0, r3
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	200010a8 	.word	0x200010a8

08015190 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8015190:	b590      	push	{r4, r7, lr}
 8015192:	b083      	sub	sp, #12
 8015194:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8015196:	4b2d      	ldr	r3, [pc, #180]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 8015198:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801519c:	4b2b      	ldr	r3, [pc, #172]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 801519e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80151a2:	4b2a      	ldr	r3, [pc, #168]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151a4:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 80151a8:	4b28      	ldr	r3, [pc, #160]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151aa:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80151ae:	4b27      	ldr	r3, [pc, #156]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151b0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80151b4:	b25b      	sxtb	r3, r3
 80151b6:	f006 fd4c 	bl	801bc52 <RegionApplyDrOffset>
 80151ba:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80151bc:	b259      	sxtb	r1, r3
 80151be:	4b23      	ldr	r3, [pc, #140]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151c0:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80151c4:	4b21      	ldr	r3, [pc, #132]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151c8:	4821      	ldr	r0, [pc, #132]	@ (8015250 <ComputeRxWindowParameters+0xc0>)
 80151ca:	9000      	str	r0, [sp, #0]
 80151cc:	4620      	mov	r0, r4
 80151ce:	f006 fc02 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80151d2:	4b1e      	ldr	r3, [pc, #120]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151d4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80151d8:	4b1c      	ldr	r3, [pc, #112]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151da:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80151de:	b259      	sxtb	r1, r3
 80151e0:	4b1a      	ldr	r3, [pc, #104]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151e2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80151e6:	4b19      	ldr	r3, [pc, #100]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151ea:	4c1a      	ldr	r4, [pc, #104]	@ (8015254 <ComputeRxWindowParameters+0xc4>)
 80151ec:	9400      	str	r4, [sp, #0]
 80151ee:	f006 fbf2 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80151f2:	4b16      	ldr	r3, [pc, #88]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 80151f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151f6:	4a18      	ldr	r2, [pc, #96]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 80151f8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80151fc:	4413      	add	r3, r2
 80151fe:	4a16      	ldr	r2, [pc, #88]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015200:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8015204:	4b11      	ldr	r3, [pc, #68]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 8015206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015208:	4a13      	ldr	r2, [pc, #76]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 801520a:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801520e:	4413      	add	r3, r2
 8015210:	4a11      	ldr	r2, [pc, #68]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015212:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8015216:	4b10      	ldr	r3, [pc, #64]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015218:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801521c:	2b04      	cmp	r3, #4
 801521e:	d011      	beq.n	8015244 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8015220:	4b0a      	ldr	r3, [pc, #40]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 8015222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015224:	4a0c      	ldr	r2, [pc, #48]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015226:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 801522a:	4413      	add	r3, r2
 801522c:	4a0a      	ldr	r2, [pc, #40]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 801522e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8015232:	4b06      	ldr	r3, [pc, #24]	@ (801524c <ComputeRxWindowParameters+0xbc>)
 8015234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015236:	4a08      	ldr	r2, [pc, #32]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015238:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801523c:	4413      	add	r3, r2
 801523e:	4a06      	ldr	r2, [pc, #24]	@ (8015258 <ComputeRxWindowParameters+0xc8>)
 8015240:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8015244:	bf00      	nop
 8015246:	3704      	adds	r7, #4
 8015248:	46bd      	mov	sp, r7
 801524a:	bd90      	pop	{r4, r7, pc}
 801524c:	200010a8 	.word	0x200010a8
 8015250:	20000f44 	.word	0x20000f44
 8015254:	20000f5c 	.word	0x20000f5c
 8015258:	20000b8c 	.word	0x20000b8c

0801525c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8015262:	2300      	movs	r3, #0
 8015264:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8015266:	4b13      	ldr	r3, [pc, #76]	@ (80152b4 <VerifyTxFrame+0x58>)
 8015268:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801526c:	2b00      	cmp	r3, #0
 801526e:	d01b      	beq.n	80152a8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015270:	1d3b      	adds	r3, r7, #4
 8015272:	4618      	mov	r0, r3
 8015274:	f004 fe58 	bl	8019f28 <LoRaMacCommandsGetSizeSerializedCmds>
 8015278:	4603      	mov	r3, r0
 801527a:	2b00      	cmp	r3, #0
 801527c:	d001      	beq.n	8015282 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801527e:	2313      	movs	r3, #19
 8015280:	e013      	b.n	80152aa <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8015282:	4b0d      	ldr	r3, [pc, #52]	@ (80152b8 <VerifyTxFrame+0x5c>)
 8015284:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015288:	4a0a      	ldr	r2, [pc, #40]	@ (80152b4 <VerifyTxFrame+0x58>)
 801528a:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	b2d2      	uxtb	r2, r2
 8015292:	4618      	mov	r0, r3
 8015294:	f7ff f924 	bl	80144e0 <ValidatePayloadLength>
 8015298:	4603      	mov	r3, r0
 801529a:	f083 0301 	eor.w	r3, r3, #1
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d001      	beq.n	80152a8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80152a4:	2308      	movs	r3, #8
 80152a6:	e000      	b.n	80152aa <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80152a8:	2300      	movs	r3, #0
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	200010a8 	.word	0x200010a8
 80152b8:	20000b8c 	.word	0x20000b8c

080152bc <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80152c2:	4b18      	ldr	r3, [pc, #96]	@ (8015324 <SerializeTxFrame+0x68>)
 80152c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d002      	beq.n	80152d2 <SerializeTxFrame+0x16>
 80152cc:	2b04      	cmp	r3, #4
 80152ce:	d011      	beq.n	80152f4 <SerializeTxFrame+0x38>
 80152d0:	e021      	b.n	8015316 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80152d2:	4815      	ldr	r0, [pc, #84]	@ (8015328 <SerializeTxFrame+0x6c>)
 80152d4:	f006 f952 	bl	801b57c <LoRaMacSerializerJoinRequest>
 80152d8:	4603      	mov	r3, r0
 80152da:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d001      	beq.n	80152e6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80152e2:	2311      	movs	r3, #17
 80152e4:	e01a      	b.n	801531c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80152e6:	4b0f      	ldr	r3, [pc, #60]	@ (8015324 <SerializeTxFrame+0x68>)
 80152e8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80152ec:	461a      	mov	r2, r3
 80152ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015324 <SerializeTxFrame+0x68>)
 80152f0:	801a      	strh	r2, [r3, #0]
            break;
 80152f2:	e012      	b.n	801531a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80152f4:	480c      	ldr	r0, [pc, #48]	@ (8015328 <SerializeTxFrame+0x6c>)
 80152f6:	f006 f9c3 	bl	801b680 <LoRaMacSerializerData>
 80152fa:	4603      	mov	r3, r0
 80152fc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80152fe:	79fb      	ldrb	r3, [r7, #7]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8015304:	2311      	movs	r3, #17
 8015306:	e009      	b.n	801531c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8015308:	4b06      	ldr	r3, [pc, #24]	@ (8015324 <SerializeTxFrame+0x68>)
 801530a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801530e:	461a      	mov	r2, r3
 8015310:	4b04      	ldr	r3, [pc, #16]	@ (8015324 <SerializeTxFrame+0x68>)
 8015312:	801a      	strh	r2, [r3, #0]
            break;
 8015314:	e001      	b.n	801531a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015316:	2303      	movs	r3, #3
 8015318:	e000      	b.n	801531c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801531a:	2300      	movs	r3, #0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	20000b8c 	.word	0x20000b8c
 8015328:	20000c94 	.word	0x20000c94

0801532c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b090      	sub	sp, #64	@ 0x40
 8015330:	af02      	add	r7, sp, #8
 8015332:	4603      	mov	r3, r0
 8015334:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015336:	2303      	movs	r3, #3
 8015338:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801533c:	f7ff ff06 	bl	801514c <CheckForClassBCollision>
 8015340:	4603      	mov	r3, r0
 8015342:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8015346:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801534a:	2b00      	cmp	r3, #0
 801534c:	d002      	beq.n	8015354 <ScheduleTx+0x28>
    {
        return status;
 801534e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015352:	e092      	b.n	801547a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8015354:	f000 f8f8 	bl	8015548 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8015358:	f7ff ffb0 	bl	80152bc <SerializeTxFrame>
 801535c:	4603      	mov	r3, r0
 801535e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8015362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015366:	2b00      	cmp	r3, #0
 8015368:	d002      	beq.n	8015370 <ScheduleTx+0x44>
    {
        return status;
 801536a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801536e:	e084      	b.n	801547a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8015370:	4b44      	ldr	r3, [pc, #272]	@ (8015484 <ScheduleTx+0x158>)
 8015372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015374:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015376:	4b43      	ldr	r3, [pc, #268]	@ (8015484 <ScheduleTx+0x158>)
 8015378:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801537c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801537e:	4b41      	ldr	r3, [pc, #260]	@ (8015484 <ScheduleTx+0x158>)
 8015380:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8015384:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8015386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801538a:	4618      	mov	r0, r3
 801538c:	f00d fdac 	bl	8022ee8 <SysTimeGetMcuTime>
 8015390:	4638      	mov	r0, r7
 8015392:	4b3c      	ldr	r3, [pc, #240]	@ (8015484 <ScheduleTx+0x158>)
 8015394:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8015398:	9200      	str	r2, [sp, #0]
 801539a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801539e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80153a2:	ca06      	ldmia	r2, {r1, r2}
 80153a4:	f00d fd01 	bl	8022daa <SysTimeSub>
 80153a8:	f107 0320 	add.w	r3, r7, #32
 80153ac:	463a      	mov	r2, r7
 80153ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80153b2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80153b6:	4b33      	ldr	r3, [pc, #204]	@ (8015484 <ScheduleTx+0x158>)
 80153b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ba:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80153bc:	2300      	movs	r3, #0
 80153be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80153c2:	2301      	movs	r3, #1
 80153c4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80153c6:	4b30      	ldr	r3, [pc, #192]	@ (8015488 <ScheduleTx+0x15c>)
 80153c8:	881b      	ldrh	r3, [r3, #0]
 80153ca:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80153cc:	4b2d      	ldr	r3, [pc, #180]	@ (8015484 <ScheduleTx+0x158>)
 80153ce:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d104      	bne.n	80153e0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80153d6:	2301      	movs	r3, #1
 80153d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80153dc:	2300      	movs	r3, #0
 80153de:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80153e0:	4b28      	ldr	r3, [pc, #160]	@ (8015484 <ScheduleTx+0x158>)
 80153e2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80153e6:	f107 0114 	add.w	r1, r7, #20
 80153ea:	4b28      	ldr	r3, [pc, #160]	@ (801548c <ScheduleTx+0x160>)
 80153ec:	9300      	str	r3, [sp, #0]
 80153ee:	4b28      	ldr	r3, [pc, #160]	@ (8015490 <ScheduleTx+0x164>)
 80153f0:	4a28      	ldr	r2, [pc, #160]	@ (8015494 <ScheduleTx+0x168>)
 80153f2:	f006 fc0b 	bl	801bc0c <RegionNextChannel>
 80153f6:	4603      	mov	r3, r0
 80153f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80153fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015400:	2b00      	cmp	r3, #0
 8015402:	d025      	beq.n	8015450 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8015404:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015408:	2b0b      	cmp	r3, #11
 801540a:	d11e      	bne.n	801544a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 801540c:	4b1e      	ldr	r3, [pc, #120]	@ (8015488 <ScheduleTx+0x15c>)
 801540e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8015412:	2b00      	cmp	r3, #0
 8015414:	d01c      	beq.n	8015450 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8015416:	7bfb      	ldrb	r3, [r7, #15]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d013      	beq.n	8015444 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801541c:	4b1a      	ldr	r3, [pc, #104]	@ (8015488 <ScheduleTx+0x15c>)
 801541e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8015422:	f043 0320 	orr.w	r3, r3, #32
 8015426:	4a18      	ldr	r2, [pc, #96]	@ (8015488 <ScheduleTx+0x15c>)
 8015428:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801542c:	4b16      	ldr	r3, [pc, #88]	@ (8015488 <ScheduleTx+0x15c>)
 801542e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8015432:	4619      	mov	r1, r3
 8015434:	4818      	ldr	r0, [pc, #96]	@ (8015498 <ScheduleTx+0x16c>)
 8015436:	f00f f909 	bl	802464c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801543a:	4817      	ldr	r0, [pc, #92]	@ (8015498 <ScheduleTx+0x16c>)
 801543c:	f00f f828 	bl	8024490 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8015440:	2300      	movs	r3, #0
 8015442:	e01a      	b.n	801547a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8015444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015448:	e017      	b.n	801547a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801544a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801544e:	e014      	b.n	801547a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8015450:	f7ff fe9e 	bl	8015190 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8015454:	f7ff ff02 	bl	801525c <VerifyTxFrame>
 8015458:	4603      	mov	r3, r0
 801545a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801545e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015462:	2b00      	cmp	r3, #0
 8015464:	d002      	beq.n	801546c <ScheduleTx+0x140>
    {
        return status;
 8015466:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801546a:	e006      	b.n	801547a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801546c:	4b06      	ldr	r3, [pc, #24]	@ (8015488 <ScheduleTx+0x15c>)
 801546e:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8015472:	4618      	mov	r0, r3
 8015474:	f000 fb74 	bl	8015b60 <SendFrameOnChannel>
 8015478:	4603      	mov	r3, r0
}
 801547a:	4618      	mov	r0, r3
 801547c:	3738      	adds	r7, #56	@ 0x38
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	200010a8 	.word	0x200010a8
 8015488:	20000b8c 	.word	0x20000b8c
 801548c:	200010d8 	.word	0x200010d8
 8015490:	20001020 	.word	0x20001020
 8015494:	20000fa7 	.word	0x20000fa7
 8015498:	20000ef4 	.word	0x20000ef4

0801549c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b084      	sub	sp, #16
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4603      	mov	r3, r0
 80154a4:	460a      	mov	r2, r1
 80154a6:	71fb      	strb	r3, [r7, #7]
 80154a8:	4613      	mov	r3, r2
 80154aa:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80154ac:	2312      	movs	r3, #18
 80154ae:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80154b0:	2300      	movs	r3, #0
 80154b2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80154b4:	4b22      	ldr	r3, [pc, #136]	@ (8015540 <SecureFrame+0xa4>)
 80154b6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d002      	beq.n	80154c4 <SecureFrame+0x28>
 80154be:	2b04      	cmp	r3, #4
 80154c0:	d011      	beq.n	80154e6 <SecureFrame+0x4a>
 80154c2:	e036      	b.n	8015532 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80154c4:	481f      	ldr	r0, [pc, #124]	@ (8015544 <SecureFrame+0xa8>)
 80154c6:	f005 fc29 	bl	801ad1c <LoRaMacCryptoPrepareJoinRequest>
 80154ca:	4603      	mov	r3, r0
 80154cc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80154ce:	7bfb      	ldrb	r3, [r7, #15]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d001      	beq.n	80154d8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80154d4:	2311      	movs	r3, #17
 80154d6:	e02f      	b.n	8015538 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80154d8:	4b19      	ldr	r3, [pc, #100]	@ (8015540 <SecureFrame+0xa4>)
 80154da:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80154de:	461a      	mov	r2, r3
 80154e0:	4b17      	ldr	r3, [pc, #92]	@ (8015540 <SecureFrame+0xa4>)
 80154e2:	801a      	strh	r2, [r3, #0]
            break;
 80154e4:	e027      	b.n	8015536 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80154e6:	f107 0308 	add.w	r3, r7, #8
 80154ea:	4618      	mov	r0, r3
 80154ec:	f005 fb50 	bl	801ab90 <LoRaMacCryptoGetFCntUp>
 80154f0:	4603      	mov	r3, r0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d001      	beq.n	80154fa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80154f6:	2312      	movs	r3, #18
 80154f8:	e01e      	b.n	8015538 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80154fa:	4b11      	ldr	r3, [pc, #68]	@ (8015540 <SecureFrame+0xa4>)
 80154fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8015500:	2b00      	cmp	r3, #0
 8015502:	d002      	beq.n	801550a <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	3b01      	subs	r3, #1
 8015508:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801550a:	68b8      	ldr	r0, [r7, #8]
 801550c:	79ba      	ldrb	r2, [r7, #6]
 801550e:	79f9      	ldrb	r1, [r7, #7]
 8015510:	4b0c      	ldr	r3, [pc, #48]	@ (8015544 <SecureFrame+0xa8>)
 8015512:	f005 fd2b 	bl	801af6c <LoRaMacCryptoSecureMessage>
 8015516:	4603      	mov	r3, r0
 8015518:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801551a:	7bfb      	ldrb	r3, [r7, #15]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d001      	beq.n	8015524 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8015520:	2311      	movs	r3, #17
 8015522:	e009      	b.n	8015538 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8015524:	4b06      	ldr	r3, [pc, #24]	@ (8015540 <SecureFrame+0xa4>)
 8015526:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801552a:	461a      	mov	r2, r3
 801552c:	4b04      	ldr	r3, [pc, #16]	@ (8015540 <SecureFrame+0xa4>)
 801552e:	801a      	strh	r2, [r3, #0]
            break;
 8015530:	e001      	b.n	8015536 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015532:	2303      	movs	r3, #3
 8015534:	e000      	b.n	8015538 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8015536:	2300      	movs	r3, #0
}
 8015538:	4618      	mov	r0, r3
 801553a:	3710      	adds	r7, #16
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	20000b8c 	.word	0x20000b8c
 8015544:	20000c94 	.word	0x20000c94

08015548 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8015548:	b480      	push	{r7}
 801554a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801554c:	4b09      	ldr	r3, [pc, #36]	@ (8015574 <CalculateBackOff+0x2c>)
 801554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015550:	2b00      	cmp	r3, #0
 8015552:	d10a      	bne.n	801556a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8015554:	4b07      	ldr	r3, [pc, #28]	@ (8015574 <CalculateBackOff+0x2c>)
 8015556:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 801555a:	3b01      	subs	r3, #1
 801555c:	4a06      	ldr	r2, [pc, #24]	@ (8015578 <CalculateBackOff+0x30>)
 801555e:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8015562:	fb02 f303 	mul.w	r3, r2, r3
 8015566:	4a03      	ldr	r2, [pc, #12]	@ (8015574 <CalculateBackOff+0x2c>)
 8015568:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801556a:	bf00      	nop
 801556c:	46bd      	mov	sp, r7
 801556e:	bc80      	pop	{r7}
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	200010a8 	.word	0x200010a8
 8015578:	20000b8c 	.word	0x20000b8c

0801557c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	4603      	mov	r3, r0
 8015584:	7139      	strb	r1, [r7, #4]
 8015586:	71fb      	strb	r3, [r7, #7]
 8015588:	4613      	mov	r3, r2
 801558a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801558c:	79fb      	ldrb	r3, [r7, #7]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d002      	beq.n	8015598 <RemoveMacCommands+0x1c>
 8015592:	79fb      	ldrb	r3, [r7, #7]
 8015594:	2b01      	cmp	r3, #1
 8015596:	d10d      	bne.n	80155b4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8015598:	79bb      	ldrb	r3, [r7, #6]
 801559a:	2b01      	cmp	r3, #1
 801559c:	d108      	bne.n	80155b0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801559e:	793b      	ldrb	r3, [r7, #4]
 80155a0:	f003 0320 	and.w	r3, r3, #32
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d004      	beq.n	80155b4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80155aa:	f004 fc91 	bl	8019ed0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80155ae:	e001      	b.n	80155b4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80155b0:	f004 fc8e 	bl	8019ed0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80155bc:	b5b0      	push	{r4, r5, r7, lr}
 80155be:	b092      	sub	sp, #72	@ 0x48
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	4603      	mov	r3, r0
 80155c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80155c6:	79fb      	ldrb	r3, [r7, #7]
 80155c8:	f083 0301 	eor.w	r3, r3, #1
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d003      	beq.n	80155da <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80155d2:	4b88      	ldr	r3, [pc, #544]	@ (80157f4 <ResetMacParameters+0x238>)
 80155d4:	2200      	movs	r2, #0
 80155d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80155da:	4b86      	ldr	r3, [pc, #536]	@ (80157f4 <ResetMacParameters+0x238>)
 80155dc:	2200      	movs	r2, #0
 80155de:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80155e0:	4b85      	ldr	r3, [pc, #532]	@ (80157f8 <ResetMacParameters+0x23c>)
 80155e2:	2200      	movs	r2, #0
 80155e4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80155e8:	4b83      	ldr	r3, [pc, #524]	@ (80157f8 <ResetMacParameters+0x23c>)
 80155ea:	2200      	movs	r2, #0
 80155ec:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80155f0:	4b81      	ldr	r3, [pc, #516]	@ (80157f8 <ResetMacParameters+0x23c>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80155f8:	4b7e      	ldr	r3, [pc, #504]	@ (80157f4 <ResetMacParameters+0x238>)
 80155fa:	2200      	movs	r2, #0
 80155fc:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8015600:	4b7c      	ldr	r3, [pc, #496]	@ (80157f4 <ResetMacParameters+0x238>)
 8015602:	2201      	movs	r2, #1
 8015604:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015608:	4b7a      	ldr	r3, [pc, #488]	@ (80157f4 <ResetMacParameters+0x238>)
 801560a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801560e:	4b79      	ldr	r3, [pc, #484]	@ (80157f4 <ResetMacParameters+0x238>)
 8015610:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015614:	4b77      	ldr	r3, [pc, #476]	@ (80157f4 <ResetMacParameters+0x238>)
 8015616:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801561a:	4b76      	ldr	r3, [pc, #472]	@ (80157f4 <ResetMacParameters+0x238>)
 801561c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8015620:	4b74      	ldr	r3, [pc, #464]	@ (80157f4 <ResetMacParameters+0x238>)
 8015622:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8015626:	4b73      	ldr	r3, [pc, #460]	@ (80157f4 <ResetMacParameters+0x238>)
 8015628:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801562c:	4b71      	ldr	r3, [pc, #452]	@ (80157f4 <ResetMacParameters+0x238>)
 801562e:	4a71      	ldr	r2, [pc, #452]	@ (80157f4 <ResetMacParameters+0x238>)
 8015630:	336c      	adds	r3, #108	@ 0x6c
 8015632:	32b4      	adds	r2, #180	@ 0xb4
 8015634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015638:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801563c:	4b6d      	ldr	r3, [pc, #436]	@ (80157f4 <ResetMacParameters+0x238>)
 801563e:	4a6d      	ldr	r2, [pc, #436]	@ (80157f4 <ResetMacParameters+0x238>)
 8015640:	3374      	adds	r3, #116	@ 0x74
 8015642:	32bc      	adds	r2, #188	@ 0xbc
 8015644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015648:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801564c:	4b69      	ldr	r3, [pc, #420]	@ (80157f4 <ResetMacParameters+0x238>)
 801564e:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8015652:	4b68      	ldr	r3, [pc, #416]	@ (80157f4 <ResetMacParameters+0x238>)
 8015654:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8015658:	4b66      	ldr	r3, [pc, #408]	@ (80157f4 <ResetMacParameters+0x238>)
 801565a:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 801565e:	4b65      	ldr	r3, [pc, #404]	@ (80157f4 <ResetMacParameters+0x238>)
 8015660:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8015664:	4b63      	ldr	r3, [pc, #396]	@ (80157f4 <ResetMacParameters+0x238>)
 8015666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801566a:	4a62      	ldr	r2, [pc, #392]	@ (80157f4 <ResetMacParameters+0x238>)
 801566c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8015670:	4b60      	ldr	r3, [pc, #384]	@ (80157f4 <ResetMacParameters+0x238>)
 8015672:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015676:	4a5f      	ldr	r2, [pc, #380]	@ (80157f4 <ResetMacParameters+0x238>)
 8015678:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801567c:	4b5d      	ldr	r3, [pc, #372]	@ (80157f4 <ResetMacParameters+0x238>)
 801567e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8015682:	4b5c      	ldr	r3, [pc, #368]	@ (80157f4 <ResetMacParameters+0x238>)
 8015684:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8015688:	4b5a      	ldr	r3, [pc, #360]	@ (80157f4 <ResetMacParameters+0x238>)
 801568a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801568e:	4b59      	ldr	r3, [pc, #356]	@ (80157f4 <ResetMacParameters+0x238>)
 8015690:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8015694:	4b58      	ldr	r3, [pc, #352]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015696:	2200      	movs	r2, #0
 8015698:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 801569c:	4b55      	ldr	r3, [pc, #340]	@ (80157f4 <ResetMacParameters+0x238>)
 801569e:	2200      	movs	r2, #0
 80156a0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80156a4:	4b53      	ldr	r3, [pc, #332]	@ (80157f4 <ResetMacParameters+0x238>)
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80156ac:	4b51      	ldr	r3, [pc, #324]	@ (80157f4 <ResetMacParameters+0x238>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80156b4:	4b4f      	ldr	r3, [pc, #316]	@ (80157f4 <ResetMacParameters+0x238>)
 80156b6:	2200      	movs	r2, #0
 80156b8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80156bc:	4b4d      	ldr	r3, [pc, #308]	@ (80157f4 <ResetMacParameters+0x238>)
 80156be:	2200      	movs	r2, #0
 80156c0:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80156c4:	4b4b      	ldr	r3, [pc, #300]	@ (80157f4 <ResetMacParameters+0x238>)
 80156c6:	2200      	movs	r2, #0
 80156c8:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80156cc:	4b49      	ldr	r3, [pc, #292]	@ (80157f4 <ResetMacParameters+0x238>)
 80156ce:	2200      	movs	r2, #0
 80156d0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80156d4:	4b47      	ldr	r3, [pc, #284]	@ (80157f4 <ResetMacParameters+0x238>)
 80156d6:	2200      	movs	r2, #0
 80156d8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80156dc:	4b45      	ldr	r3, [pc, #276]	@ (80157f4 <ResetMacParameters+0x238>)
 80156de:	2200      	movs	r2, #0
 80156e0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80156e4:	4b43      	ldr	r3, [pc, #268]	@ (80157f4 <ResetMacParameters+0x238>)
 80156e6:	2200      	movs	r2, #0
 80156e8:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80156ec:	4b41      	ldr	r3, [pc, #260]	@ (80157f4 <ResetMacParameters+0x238>)
 80156ee:	2200      	movs	r2, #0
 80156f0:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80156f4:	2301      	movs	r3, #1
 80156f6:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80156f8:	4b40      	ldr	r3, [pc, #256]	@ (80157fc <ResetMacParameters+0x240>)
 80156fa:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80156fc:	4b40      	ldr	r3, [pc, #256]	@ (8015800 <ResetMacParameters+0x244>)
 80156fe:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8015700:	4b40      	ldr	r3, [pc, #256]	@ (8015804 <ResetMacParameters+0x248>)
 8015702:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015704:	4b3b      	ldr	r3, [pc, #236]	@ (80157f4 <ResetMacParameters+0x238>)
 8015706:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801570a:	f107 020c 	add.w	r2, r7, #12
 801570e:	4611      	mov	r1, r2
 8015710:	4618      	mov	r0, r3
 8015712:	f006 f8f6 	bl	801b902 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8015716:	4b38      	ldr	r3, [pc, #224]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015718:	2200      	movs	r2, #0
 801571a:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801571e:	4b36      	ldr	r3, [pc, #216]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015720:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8015724:	4b34      	ldr	r3, [pc, #208]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015726:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801572a:	4b32      	ldr	r3, [pc, #200]	@ (80157f4 <ResetMacParameters+0x238>)
 801572c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801572e:	4a32      	ldr	r2, [pc, #200]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015730:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015734:	4b2f      	ldr	r3, [pc, #188]	@ (80157f4 <ResetMacParameters+0x238>)
 8015736:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801573a:	4b2f      	ldr	r3, [pc, #188]	@ (80157f8 <ResetMacParameters+0x23c>)
 801573c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8015740:	4b2c      	ldr	r3, [pc, #176]	@ (80157f4 <ResetMacParameters+0x238>)
 8015742:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8015746:	4b2c      	ldr	r3, [pc, #176]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015748:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801574c:	4b2a      	ldr	r3, [pc, #168]	@ (80157f8 <ResetMacParameters+0x23c>)
 801574e:	2200      	movs	r2, #0
 8015750:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8015754:	4b28      	ldr	r3, [pc, #160]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015756:	2201      	movs	r2, #1
 8015758:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801575c:	4b25      	ldr	r3, [pc, #148]	@ (80157f4 <ResetMacParameters+0x238>)
 801575e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8015762:	4b25      	ldr	r3, [pc, #148]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015764:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8015768:	4a23      	ldr	r2, [pc, #140]	@ (80157f8 <ResetMacParameters+0x23c>)
 801576a:	4b23      	ldr	r3, [pc, #140]	@ (80157f8 <ResetMacParameters+0x23c>)
 801576c:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8015770:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8015774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015778:	e895 0003 	ldmia.w	r5, {r0, r1}
 801577c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8015780:	4b1d      	ldr	r3, [pc, #116]	@ (80157f8 <ResetMacParameters+0x23c>)
 8015782:	2201      	movs	r2, #1
 8015784:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015788:	4b1b      	ldr	r3, [pc, #108]	@ (80157f8 <ResetMacParameters+0x23c>)
 801578a:	2202      	movs	r2, #2
 801578c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8015790:	2300      	movs	r3, #0
 8015792:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8015794:	2300      	movs	r3, #0
 8015796:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 8015798:	4b17      	ldr	r3, [pc, #92]	@ (80157f8 <ResetMacParameters+0x23c>)
 801579a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d009      	beq.n	80157b6 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80157a2:	4b15      	ldr	r3, [pc, #84]	@ (80157f8 <ResetMacParameters+0x23c>)
 80157a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80157ac:	4b12      	ldr	r3, [pc, #72]	@ (80157f8 <ResetMacParameters+0x23c>)
 80157ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80157b2:	695b      	ldr	r3, [r3, #20]
 80157b4:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80157b6:	4b14      	ldr	r3, [pc, #80]	@ (8015808 <ResetMacParameters+0x24c>)
 80157b8:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80157ba:	4b14      	ldr	r3, [pc, #80]	@ (801580c <ResetMacParameters+0x250>)
 80157bc:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80157be:	4b14      	ldr	r3, [pc, #80]	@ (8015810 <ResetMacParameters+0x254>)
 80157c0:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80157c2:	4b14      	ldr	r3, [pc, #80]	@ (8015814 <ResetMacParameters+0x258>)
 80157c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80157c6:	4b14      	ldr	r3, [pc, #80]	@ (8015818 <ResetMacParameters+0x25c>)
 80157c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80157ca:	4b14      	ldr	r3, [pc, #80]	@ (801581c <ResetMacParameters+0x260>)
 80157cc:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80157ce:	4b14      	ldr	r3, [pc, #80]	@ (8015820 <ResetMacParameters+0x264>)
 80157d0:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80157d2:	4b14      	ldr	r3, [pc, #80]	@ (8015824 <ResetMacParameters+0x268>)
 80157d4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80157d6:	4b14      	ldr	r3, [pc, #80]	@ (8015828 <ResetMacParameters+0x26c>)
 80157d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80157da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80157de:	f107 031c 	add.w	r3, r7, #28
 80157e2:	4a12      	ldr	r2, [pc, #72]	@ (801582c <ResetMacParameters+0x270>)
 80157e4:	4618      	mov	r0, r3
 80157e6:	f002 fe6b 	bl	80184c0 <LoRaMacClassBInit>
}
 80157ea:	bf00      	nop
 80157ec:	3748      	adds	r7, #72	@ 0x48
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bdb0      	pop	{r4, r5, r7, pc}
 80157f2:	bf00      	nop
 80157f4:	200010a8 	.word	0x200010a8
 80157f8:	20000b8c 	.word	0x20000b8c
 80157fc:	200012cc 	.word	0x200012cc
 8015800:	200012e0 	.word	0x200012e0
 8015804:	20001c40 	.word	0x20001c40
 8015808:	20000ff4 	.word	0x20000ff4
 801580c:	20000fac 	.word	0x20000fac
 8015810:	20000fe0 	.word	0x20000fe0
 8015814:	2000101d 	.word	0x2000101d
 8015818:	2000118c 	.word	0x2000118c
 801581c:	200010f0 	.word	0x200010f0
 8015820:	200010f4 	.word	0x200010f4
 8015824:	20001190 	.word	0x20001190
 8015828:	200011d8 	.word	0x200011d8
 801582c:	2000165c 	.word	0x2000165c

08015830 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f00e fe96 	bl	802456c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8015840:	4b11      	ldr	r3, [pc, #68]	@ (8015888 <RxWindowSetup+0x58>)
 8015842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015844:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8015846:	4b11      	ldr	r3, [pc, #68]	@ (801588c <RxWindowSetup+0x5c>)
 8015848:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801584c:	4a10      	ldr	r2, [pc, #64]	@ (8015890 <RxWindowSetup+0x60>)
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	4618      	mov	r0, r3
 8015852:	f006 f8e3 	bl	801ba1c <RegionRxConfig>
 8015856:	4603      	mov	r3, r0
 8015858:	2b00      	cmp	r3, #0
 801585a:	d010      	beq.n	801587e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801585c:	4b0d      	ldr	r3, [pc, #52]	@ (8015894 <RxWindowSetup+0x64>)
 801585e:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8015862:	4b0c      	ldr	r3, [pc, #48]	@ (8015894 <RxWindowSetup+0x64>)
 8015864:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8015868:	4b07      	ldr	r3, [pc, #28]	@ (8015888 <RxWindowSetup+0x58>)
 801586a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801586c:	4a07      	ldr	r2, [pc, #28]	@ (801588c <RxWindowSetup+0x5c>)
 801586e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8015870:	4610      	mov	r0, r2
 8015872:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	7cda      	ldrb	r2, [r3, #19]
 8015878:	4b06      	ldr	r3, [pc, #24]	@ (8015894 <RxWindowSetup+0x64>)
 801587a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 801587e:	bf00      	nop
 8015880:	3708      	adds	r7, #8
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	08029818 	.word	0x08029818
 801588c:	200010a8 	.word	0x200010a8
 8015890:	20000fb0 	.word	0x20000fb0
 8015894:	20000b8c 	.word	0x20000b8c

08015898 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8015898:	b590      	push	{r4, r7, lr}
 801589a:	b083      	sub	sp, #12
 801589c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801589e:	4b1e      	ldr	r3, [pc, #120]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158a0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80158a4:	4b1c      	ldr	r3, [pc, #112]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158a6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80158aa:	b259      	sxtb	r1, r3
 80158ac:	4b1a      	ldr	r3, [pc, #104]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158ae:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80158b2:	4b19      	ldr	r3, [pc, #100]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158b6:	4c19      	ldr	r4, [pc, #100]	@ (801591c <OpenContinuousRxCWindow+0x84>)
 80158b8:	9400      	str	r4, [sp, #0]
 80158ba:	f006 f88c 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80158be:	4b18      	ldr	r3, [pc, #96]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 80158c0:	2202      	movs	r2, #2
 80158c2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80158c6:	4b14      	ldr	r3, [pc, #80]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158c8:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80158cc:	4b14      	ldr	r3, [pc, #80]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 80158ce:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80158d2:	4b13      	ldr	r3, [pc, #76]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 80158d4:	2201      	movs	r2, #1
 80158d6:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80158da:	4b0f      	ldr	r3, [pc, #60]	@ (8015918 <OpenContinuousRxCWindow+0x80>)
 80158dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80158e0:	4a10      	ldr	r2, [pc, #64]	@ (8015924 <OpenContinuousRxCWindow+0x8c>)
 80158e2:	490e      	ldr	r1, [pc, #56]	@ (801591c <OpenContinuousRxCWindow+0x84>)
 80158e4:	4618      	mov	r0, r3
 80158e6:	f006 f899 	bl	801ba1c <RegionRxConfig>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d00f      	beq.n	8015910 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80158f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 80158f2:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 80158f6:	4b0a      	ldr	r3, [pc, #40]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 80158f8:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80158fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015928 <OpenContinuousRxCWindow+0x90>)
 80158fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015900:	2000      	movs	r0, #0
 8015902:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8015904:	4b06      	ldr	r3, [pc, #24]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 8015906:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 801590a:	4b05      	ldr	r3, [pc, #20]	@ (8015920 <OpenContinuousRxCWindow+0x88>)
 801590c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8015910:	bf00      	nop
 8015912:	3704      	adds	r7, #4
 8015914:	46bd      	mov	sp, r7
 8015916:	bd90      	pop	{r4, r7, pc}
 8015918:	200010a8 	.word	0x200010a8
 801591c:	20000f74 	.word	0x20000f74
 8015920:	20000b8c 	.word	0x20000b8c
 8015924:	20000fb0 	.word	0x20000fb0
 8015928:	08029818 	.word	0x08029818

0801592c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b088      	sub	sp, #32
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	603b      	str	r3, [r7, #0]
 8015938:	4613      	mov	r3, r2
 801593a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801593c:	4b81      	ldr	r3, [pc, #516]	@ (8015b44 <PrepareFrame+0x218>)
 801593e:	2200      	movs	r2, #0
 8015940:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8015942:	4b80      	ldr	r3, [pc, #512]	@ (8015b44 <PrepareFrame+0x218>)
 8015944:	2200      	movs	r2, #0
 8015946:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 801594a:	2300      	movs	r3, #0
 801594c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801594e:	2300      	movs	r3, #0
 8015950:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8015952:	2300      	movs	r3, #0
 8015954:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d101      	bne.n	8015960 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801595c:	2300      	movs	r3, #0
 801595e:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8015960:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015962:	461a      	mov	r2, r3
 8015964:	6839      	ldr	r1, [r7, #0]
 8015966:	4878      	ldr	r0, [pc, #480]	@ (8015b48 <PrepareFrame+0x21c>)
 8015968:	f009 fe55 	bl	801f616 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801596c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801596e:	b2da      	uxtb	r2, r3
 8015970:	4b74      	ldr	r3, [pc, #464]	@ (8015b44 <PrepareFrame+0x218>)
 8015972:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	781a      	ldrb	r2, [r3, #0]
 801597a:	4b72      	ldr	r3, [pc, #456]	@ (8015b44 <PrepareFrame+0x218>)
 801597c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015986:	b2db      	uxtb	r3, r3
 8015988:	2b07      	cmp	r3, #7
 801598a:	f000 80b9 	beq.w	8015b00 <PrepareFrame+0x1d4>
 801598e:	2b07      	cmp	r3, #7
 8015990:	f300 80ce 	bgt.w	8015b30 <PrepareFrame+0x204>
 8015994:	2b02      	cmp	r3, #2
 8015996:	d006      	beq.n	80159a6 <PrepareFrame+0x7a>
 8015998:	2b04      	cmp	r3, #4
 801599a:	f040 80c9 	bne.w	8015b30 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801599e:	4b69      	ldr	r3, [pc, #420]	@ (8015b44 <PrepareFrame+0x218>)
 80159a0:	2201      	movs	r2, #1
 80159a2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80159a6:	4b67      	ldr	r3, [pc, #412]	@ (8015b44 <PrepareFrame+0x218>)
 80159a8:	2204      	movs	r2, #4
 80159aa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80159ae:	4b65      	ldr	r3, [pc, #404]	@ (8015b44 <PrepareFrame+0x218>)
 80159b0:	4a66      	ldr	r2, [pc, #408]	@ (8015b4c <PrepareFrame+0x220>)
 80159b2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80159b6:	4b63      	ldr	r3, [pc, #396]	@ (8015b44 <PrepareFrame+0x218>)
 80159b8:	22ff      	movs	r2, #255	@ 0xff
 80159ba:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	781a      	ldrb	r2, [r3, #0]
 80159c2:	4b60      	ldr	r3, [pc, #384]	@ (8015b44 <PrepareFrame+0x218>)
 80159c4:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80159c8:	4a5e      	ldr	r2, [pc, #376]	@ (8015b44 <PrepareFrame+0x218>)
 80159ca:	79fb      	ldrb	r3, [r7, #7]
 80159cc:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80159d0:	4b5f      	ldr	r3, [pc, #380]	@ (8015b50 <PrepareFrame+0x224>)
 80159d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80159d6:	4a5b      	ldr	r2, [pc, #364]	@ (8015b44 <PrepareFrame+0x218>)
 80159d8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	781a      	ldrb	r2, [r3, #0]
 80159e0:	4b58      	ldr	r3, [pc, #352]	@ (8015b44 <PrepareFrame+0x218>)
 80159e2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80159e6:	4b57      	ldr	r3, [pc, #348]	@ (8015b44 <PrepareFrame+0x218>)
 80159e8:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 80159ec:	4b55      	ldr	r3, [pc, #340]	@ (8015b44 <PrepareFrame+0x218>)
 80159ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80159f2:	4b54      	ldr	r3, [pc, #336]	@ (8015b44 <PrepareFrame+0x218>)
 80159f4:	4a54      	ldr	r2, [pc, #336]	@ (8015b48 <PrepareFrame+0x21c>)
 80159f6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80159fa:	f107 0318 	add.w	r3, r7, #24
 80159fe:	4618      	mov	r0, r3
 8015a00:	f005 f8c6 	bl	801ab90 <LoRaMacCryptoGetFCntUp>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d001      	beq.n	8015a0e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8015a0a:	2312      	movs	r3, #18
 8015a0c:	e096      	b.n	8015b3c <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	4b4c      	ldr	r3, [pc, #304]	@ (8015b44 <PrepareFrame+0x218>)
 8015a14:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8015a18:	4b4a      	ldr	r3, [pc, #296]	@ (8015b44 <PrepareFrame+0x218>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8015a20:	4b48      	ldr	r3, [pc, #288]	@ (8015b44 <PrepareFrame+0x218>)
 8015a22:	2200      	movs	r2, #0
 8015a24:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	4a46      	ldr	r2, [pc, #280]	@ (8015b44 <PrepareFrame+0x218>)
 8015a2c:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015a30:	f107 0314 	add.w	r3, r7, #20
 8015a34:	4618      	mov	r0, r3
 8015a36:	f004 fa77 	bl	8019f28 <LoRaMacCommandsGetSizeSerializedCmds>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d001      	beq.n	8015a44 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a40:	2313      	movs	r3, #19
 8015a42:	e07b      	b.n	8015b3c <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d074      	beq.n	8015b34 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8015a4a:	4b41      	ldr	r3, [pc, #260]	@ (8015b50 <PrepareFrame+0x224>)
 8015a4c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fe fd1d 	bl	8014490 <GetMaxAppPayloadWithoutFOptsLength>
 8015a56:	4603      	mov	r3, r0
 8015a58:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8015a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8015b44 <PrepareFrame+0x218>)
 8015a5c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d01d      	beq.n	8015aa0 <PrepareFrame+0x174>
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	2b0f      	cmp	r3, #15
 8015a68:	d81a      	bhi.n	8015aa0 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8015a6a:	f107 0314 	add.w	r3, r7, #20
 8015a6e:	4a39      	ldr	r2, [pc, #228]	@ (8015b54 <PrepareFrame+0x228>)
 8015a70:	4619      	mov	r1, r3
 8015a72:	200f      	movs	r0, #15
 8015a74:	f004 fa6e 	bl	8019f54 <LoRaMacCommandsSerializeCmds>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d001      	beq.n	8015a82 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015a7e:	2313      	movs	r3, #19
 8015a80:	e05c      	b.n	8015b3c <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	f003 030f 	and.w	r3, r3, #15
 8015a88:	b2d9      	uxtb	r1, r3
 8015a8a:	68ba      	ldr	r2, [r7, #8]
 8015a8c:	7813      	ldrb	r3, [r2, #0]
 8015a8e:	f361 0303 	bfi	r3, r1, #0, #4
 8015a92:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	781a      	ldrb	r2, [r3, #0]
 8015a98:	4b2a      	ldr	r3, [pc, #168]	@ (8015b44 <PrepareFrame+0x218>)
 8015a9a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8015a9e:	e049      	b.n	8015b34 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8015aa0:	4b28      	ldr	r3, [pc, #160]	@ (8015b44 <PrepareFrame+0x218>)
 8015aa2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d010      	beq.n	8015acc <PrepareFrame+0x1a0>
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	2b0f      	cmp	r3, #15
 8015aae:	d90d      	bls.n	8015acc <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8015ab0:	7ffb      	ldrb	r3, [r7, #31]
 8015ab2:	f107 0114 	add.w	r1, r7, #20
 8015ab6:	4a28      	ldr	r2, [pc, #160]	@ (8015b58 <PrepareFrame+0x22c>)
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f004 fa4b 	bl	8019f54 <LoRaMacCommandsSerializeCmds>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d001      	beq.n	8015ac8 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015ac4:	2313      	movs	r3, #19
 8015ac6:	e039      	b.n	8015b3c <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8015ac8:	230a      	movs	r3, #10
 8015aca:	e037      	b.n	8015b3c <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8015acc:	7ffb      	ldrb	r3, [r7, #31]
 8015ace:	f107 0114 	add.w	r1, r7, #20
 8015ad2:	4a21      	ldr	r2, [pc, #132]	@ (8015b58 <PrepareFrame+0x22c>)
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f004 fa3d 	bl	8019f54 <LoRaMacCommandsSerializeCmds>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d001      	beq.n	8015ae4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015ae0:	2313      	movs	r3, #19
 8015ae2:	e02b      	b.n	8015b3c <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8015ae4:	4b17      	ldr	r3, [pc, #92]	@ (8015b44 <PrepareFrame+0x218>)
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8015aec:	4b15      	ldr	r3, [pc, #84]	@ (8015b44 <PrepareFrame+0x218>)
 8015aee:	4a1a      	ldr	r2, [pc, #104]	@ (8015b58 <PrepareFrame+0x22c>)
 8015af0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	4b12      	ldr	r3, [pc, #72]	@ (8015b44 <PrepareFrame+0x218>)
 8015afa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8015afe:	e019      	b.n	8015b34 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d018      	beq.n	8015b38 <PrepareFrame+0x20c>
 8015b06:	4b0f      	ldr	r3, [pc, #60]	@ (8015b44 <PrepareFrame+0x218>)
 8015b08:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d013      	beq.n	8015b38 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8015b10:	4812      	ldr	r0, [pc, #72]	@ (8015b5c <PrepareFrame+0x230>)
 8015b12:	4b0c      	ldr	r3, [pc, #48]	@ (8015b44 <PrepareFrame+0x218>)
 8015b14:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015b18:	461a      	mov	r2, r3
 8015b1a:	6839      	ldr	r1, [r7, #0]
 8015b1c:	f009 fd7b 	bl	801f616 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8015b20:	4b08      	ldr	r3, [pc, #32]	@ (8015b44 <PrepareFrame+0x218>)
 8015b22:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8015b26:	3301      	adds	r3, #1
 8015b28:	b29a      	uxth	r2, r3
 8015b2a:	4b06      	ldr	r3, [pc, #24]	@ (8015b44 <PrepareFrame+0x218>)
 8015b2c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8015b2e:	e003      	b.n	8015b38 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015b30:	2302      	movs	r3, #2
 8015b32:	e003      	b.n	8015b3c <PrepareFrame+0x210>
            break;
 8015b34:	bf00      	nop
 8015b36:	e000      	b.n	8015b3a <PrepareFrame+0x20e>
            break;
 8015b38:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8015b3a:	2300      	movs	r3, #0
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3720      	adds	r7, #32
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	20000b8c 	.word	0x20000b8c
 8015b48:	20000cc4 	.word	0x20000cc4
 8015b4c:	20000b8e 	.word	0x20000b8e
 8015b50:	200010a8 	.word	0x200010a8
 8015b54:	20000ca4 	.word	0x20000ca4
 8015b58:	20001028 	.word	0x20001028
 8015b5c:	20000b8f 	.word	0x20000b8f

08015b60 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b08a      	sub	sp, #40	@ 0x28
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015b6a:	2303      	movs	r3, #3
 8015b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8015b70:	2300      	movs	r3, #0
 8015b72:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8015b74:	79fb      	ldrb	r3, [r7, #7]
 8015b76:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015b78:	4b4b      	ldr	r3, [pc, #300]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015b7a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8015b7e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015b80:	4b49      	ldr	r3, [pc, #292]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015b82:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8015b86:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015b88:	4b47      	ldr	r3, [pc, #284]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015b8e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015b90:	4b45      	ldr	r3, [pc, #276]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b96:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8015b98:	4b44      	ldr	r3, [pc, #272]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8015b9e:	4b42      	ldr	r3, [pc, #264]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015ba0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8015ba4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8015ba6:	4b40      	ldr	r3, [pc, #256]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015ba8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8015bac:	f107 020f 	add.w	r2, r7, #15
 8015bb0:	f107 0110 	add.w	r1, r7, #16
 8015bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8015cb0 <SendFrameOnChannel+0x150>)
 8015bb6:	f005 ff4f 	bl	801ba58 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015bba:	4b3c      	ldr	r3, [pc, #240]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bbc:	2201      	movs	r2, #1
 8015bbe:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015bc2:	4b39      	ldr	r3, [pc, #228]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015bc4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8015bc8:	b2da      	uxtb	r2, r3
 8015bca:	4b38      	ldr	r3, [pc, #224]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bcc:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8015bd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015bd4:	4b35      	ldr	r3, [pc, #212]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bd6:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8015bda:	79fb      	ldrb	r3, [r7, #7]
 8015bdc:	4a33      	ldr	r2, [pc, #204]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bde:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8015be2:	4b32      	ldr	r3, [pc, #200]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015be4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8015be8:	4a30      	ldr	r2, [pc, #192]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bea:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8015bee:	4b2f      	ldr	r3, [pc, #188]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bf0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8015bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015bf6:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8015bfa:	f003 fbe5 	bl	80193c8 <LoRaMacClassBIsBeaconModeActive>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d00b      	beq.n	8015c1c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8015c04:	4b29      	ldr	r3, [pc, #164]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c06:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f003 fe6c 	bl	80198e8 <LoRaMacClassBIsUplinkCollision>
 8015c10:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8015c12:	6a3b      	ldr	r3, [r7, #32]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d001      	beq.n	8015c1c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8015c18:	2310      	movs	r3, #16
 8015c1a:	e040      	b.n	8015c9e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015c1c:	4b22      	ldr	r3, [pc, #136]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015c1e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d101      	bne.n	8015c2a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8015c26:	f003 fe93 	bl	8019950 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8015c2a:	f003 fc03 	bl	8019434 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8015c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ca8 <SendFrameOnChannel+0x148>)
 8015c30:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	4a1d      	ldr	r2, [pc, #116]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c38:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7ff fc2c 	bl	801549c <SecureFrame>
 8015c44:	4603      	mov	r3, r0
 8015c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8015c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d002      	beq.n	8015c58 <SendFrameOnChannel+0xf8>
    {
        return status;
 8015c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c56:	e022      	b.n	8015c9e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015c58:	4b14      	ldr	r3, [pc, #80]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8015c5e:	f043 0302 	orr.w	r3, r3, #2
 8015c62:	4a12      	ldr	r2, [pc, #72]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c64:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8015c68:	4b10      	ldr	r3, [pc, #64]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8015c6e:	3301      	adds	r3, #1
 8015c70:	b2da      	uxtb	r2, r3
 8015c72:	4b0e      	ldr	r3, [pc, #56]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c74:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015c78:	4b0c      	ldr	r3, [pc, #48]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8015c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c80:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8015c84:	4b09      	ldr	r3, [pc, #36]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c86:	2200      	movs	r2, #0
 8015c88:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8015c8c:	4b09      	ldr	r3, [pc, #36]	@ (8015cb4 <SendFrameOnChannel+0x154>)
 8015c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c90:	4a06      	ldr	r2, [pc, #24]	@ (8015cac <SendFrameOnChannel+0x14c>)
 8015c92:	8812      	ldrh	r2, [r2, #0]
 8015c94:	b2d2      	uxtb	r2, r2
 8015c96:	4611      	mov	r1, r2
 8015c98:	4807      	ldr	r0, [pc, #28]	@ (8015cb8 <SendFrameOnChannel+0x158>)
 8015c9a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8015c9c:	2300      	movs	r3, #0
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3728      	adds	r7, #40	@ 0x28
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	200010a8 	.word	0x200010a8
 8015cac:	20000b8c 	.word	0x20000b8c
 8015cb0:	20000fa8 	.word	0x20000fa8
 8015cb4:	08029818 	.word	0x08029818
 8015cb8:	20000b8e 	.word	0x20000b8e

08015cbc <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	6039      	str	r1, [r7, #0]
 8015cc6:	80fb      	strh	r3, [r7, #6]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8015ccc:	4b09      	ldr	r3, [pc, #36]	@ (8015cf4 <SetTxContinuousWave+0x38>)
 8015cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015cd0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015cd4:	88fa      	ldrh	r2, [r7, #6]
 8015cd6:	6838      	ldr	r0, [r7, #0]
 8015cd8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015cda:	4b07      	ldr	r3, [pc, #28]	@ (8015cf8 <SetTxContinuousWave+0x3c>)
 8015cdc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8015ce0:	f043 0302 	orr.w	r3, r3, #2
 8015ce4:	4a04      	ldr	r2, [pc, #16]	@ (8015cf8 <SetTxContinuousWave+0x3c>)
 8015ce6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8015cea:	2300      	movs	r3, #0
}
 8015cec:	4618      	mov	r0, r3
 8015cee:	3708      	adds	r7, #8
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}
 8015cf4:	08029818 	.word	0x08029818
 8015cf8:	20000b8c 	.word	0x20000b8c

08015cfc <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8015d02:	2300      	movs	r3, #0
 8015d04:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8015d06:	4b49      	ldr	r3, [pc, #292]	@ (8015e2c <RestoreNvmData+0x130>)
 8015d08:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8015d0c:	2b01      	cmp	r3, #1
 8015d0e:	d001      	beq.n	8015d14 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e087      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8015d14:	2124      	movs	r1, #36	@ 0x24
 8015d16:	4846      	ldr	r0, [pc, #280]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d18:	f009 fcd2 	bl	801f6c0 <Crc32>
 8015d1c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8015d1e:	4b44      	ldr	r3, [pc, #272]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d001      	beq.n	8015d2c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015d28:	2317      	movs	r3, #23
 8015d2a:	e07b      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8015d2c:	211c      	movs	r1, #28
 8015d2e:	4841      	ldr	r0, [pc, #260]	@ (8015e34 <RestoreNvmData+0x138>)
 8015d30:	f009 fcc6 	bl	801f6c0 <Crc32>
 8015d34:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8015d36:	4b3e      	ldr	r3, [pc, #248]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d3a:	687a      	ldr	r2, [r7, #4]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d001      	beq.n	8015d44 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015d40:	2317      	movs	r3, #23
 8015d42:	e06f      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8015d44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015d48:	483b      	ldr	r0, [pc, #236]	@ (8015e38 <RestoreNvmData+0x13c>)
 8015d4a:	f009 fcb9 	bl	801f6c0 <Crc32>
 8015d4e:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8015d50:	4b37      	ldr	r3, [pc, #220]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d52:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8015d56:	687a      	ldr	r2, [r7, #4]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d001      	beq.n	8015d60 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015d5c:	2317      	movs	r3, #23
 8015d5e:	e061      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8015d60:	21d4      	movs	r1, #212	@ 0xd4
 8015d62:	4836      	ldr	r0, [pc, #216]	@ (8015e3c <RestoreNvmData+0x140>)
 8015d64:	f009 fcac 	bl	801f6c0 <Crc32>
 8015d68:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8015d6a:	4b31      	ldr	r3, [pc, #196]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d001      	beq.n	8015d7a <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015d76:	2317      	movs	r3, #23
 8015d78:	e054      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8015d7a:	2110      	movs	r1, #16
 8015d7c:	4830      	ldr	r0, [pc, #192]	@ (8015e40 <RestoreNvmData+0x144>)
 8015d7e:	f009 fc9f 	bl	801f6c0 <Crc32>
 8015d82:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8015d84:	4b2a      	ldr	r3, [pc, #168]	@ (8015e30 <RestoreNvmData+0x134>)
 8015d86:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d001      	beq.n	8015d94 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015d90:	2317      	movs	r3, #23
 8015d92:	e047      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8015d94:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8015d98:	482a      	ldr	r0, [pc, #168]	@ (8015e44 <RestoreNvmData+0x148>)
 8015d9a:	f009 fc91 	bl	801f6c0 <Crc32>
 8015d9e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8015da0:	4b23      	ldr	r3, [pc, #140]	@ (8015e30 <RestoreNvmData+0x134>)
 8015da2:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 8015da6:	687a      	ldr	r2, [r7, #4]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d001      	beq.n	8015db0 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015dac:	2317      	movs	r3, #23
 8015dae:	e039      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8015db0:	2114      	movs	r1, #20
 8015db2:	4825      	ldr	r0, [pc, #148]	@ (8015e48 <RestoreNvmData+0x14c>)
 8015db4:	f009 fc84 	bl	801f6c0 <Crc32>
 8015db8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8015dba:	4b1d      	ldr	r3, [pc, #116]	@ (8015e30 <RestoreNvmData+0x134>)
 8015dbc:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 8015dc0:	687a      	ldr	r2, [r7, #4]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d001      	beq.n	8015dca <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015dc6:	2317      	movs	r3, #23
 8015dc8:	e02c      	b.n	8015e24 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8015dca:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8015dce:	4918      	ldr	r1, [pc, #96]	@ (8015e30 <RestoreNvmData+0x134>)
 8015dd0:	481e      	ldr	r0, [pc, #120]	@ (8015e4c <RestoreNvmData+0x150>)
 8015dd2:	f009 fc20 	bl	801f616 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8015dd6:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8015dda:	2100      	movs	r1, #0
 8015ddc:	4814      	ldr	r0, [pc, #80]	@ (8015e30 <RestoreNvmData+0x134>)
 8015dde:	f009 fc55 	bl	801f68c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8015de2:	4b12      	ldr	r3, [pc, #72]	@ (8015e2c <RestoreNvmData+0x130>)
 8015de4:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8015de8:	4b10      	ldr	r3, [pc, #64]	@ (8015e2c <RestoreNvmData+0x130>)
 8015dea:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8015dee:	4b17      	ldr	r3, [pc, #92]	@ (8015e4c <RestoreNvmData+0x150>)
 8015df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015df2:	4a0e      	ldr	r2, [pc, #56]	@ (8015e2c <RestoreNvmData+0x130>)
 8015df4:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015df8:	4b14      	ldr	r3, [pc, #80]	@ (8015e4c <RestoreNvmData+0x150>)
 8015dfa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8015dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8015e2c <RestoreNvmData+0x130>)
 8015e00:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8015e04:	4b09      	ldr	r3, [pc, #36]	@ (8015e2c <RestoreNvmData+0x130>)
 8015e06:	2201      	movs	r2, #1
 8015e08:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015e0c:	4b07      	ldr	r3, [pc, #28]	@ (8015e2c <RestoreNvmData+0x130>)
 8015e0e:	2202      	movs	r2, #2
 8015e10:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8015e14:	4b0e      	ldr	r3, [pc, #56]	@ (8015e50 <RestoreNvmData+0x154>)
 8015e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e18:	4a0c      	ldr	r2, [pc, #48]	@ (8015e4c <RestoreNvmData+0x150>)
 8015e1a:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8015e1e:	4610      	mov	r0, r2
 8015e20:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8015e22:	2300      	movs	r3, #0
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	20000b8c 	.word	0x20000b8c
 8015e30:	20001674 	.word	0x20001674
 8015e34:	2000169c 	.word	0x2000169c
 8015e38:	200016bc 	.word	0x200016bc
 8015e3c:	200017c0 	.word	0x200017c0
 8015e40:	20001898 	.word	0x20001898
 8015e44:	200018ac 	.word	0x200018ac
 8015e48:	20001c28 	.word	0x20001c28
 8015e4c:	200010a8 	.word	0x200010a8
 8015e50:	08029818 	.word	0x08029818

08015e54 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d002      	beq.n	8015e6a <DetermineFrameType+0x16>
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d101      	bne.n	8015e6e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e6a:	2303      	movs	r3, #3
 8015e6c:	e03b      	b.n	8015ee6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	7b1b      	ldrb	r3, [r3, #12]
 8015e72:	f003 030f 	and.w	r3, r3, #15
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d008      	beq.n	8015e8e <DetermineFrameType+0x3a>
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d003      	beq.n	8015e8e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	701a      	strb	r2, [r3, #0]
 8015e8c:	e02a      	b.n	8015ee4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d103      	bne.n	8015ea0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	701a      	strb	r2, [r3, #0]
 8015e9e:	e021      	b.n	8015ee4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	7b1b      	ldrb	r3, [r3, #12]
 8015ea4:	f003 030f 	and.w	r3, r3, #15
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d108      	bne.n	8015ec0 <DetermineFrameType+0x6c>
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d103      	bne.n	8015ec0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	2202      	movs	r2, #2
 8015ebc:	701a      	strb	r2, [r3, #0]
 8015ebe:	e011      	b.n	8015ee4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	7b1b      	ldrb	r3, [r3, #12]
 8015ec4:	f003 030f 	and.w	r3, r3, #15
 8015ec8:	b2db      	uxtb	r3, r3
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d108      	bne.n	8015ee0 <DetermineFrameType+0x8c>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d003      	beq.n	8015ee0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	2203      	movs	r2, #3
 8015edc:	701a      	strb	r2, [r3, #0]
 8015ede:	e001      	b.n	8015ee4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8015ee0:	2318      	movs	r3, #24
 8015ee2:	e000      	b.n	8015ee6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8015ee4:	2300      	movs	r3, #0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	370c      	adds	r7, #12
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bc80      	pop	{r7}
 8015eee:	4770      	bx	lr

08015ef0 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8015ef0:	b480      	push	{r7}
 8015ef2:	b083      	sub	sp, #12
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	460a      	mov	r2, r1
 8015efa:	71fb      	strb	r3, [r7, #7]
 8015efc:	4613      	mov	r3, r2
 8015efe:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8015f00:	79fa      	ldrb	r2, [r7, #7]
 8015f02:	79bb      	ldrb	r3, [r7, #6]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d301      	bcc.n	8015f0c <CheckRetrans+0x1c>
    {
        return true;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	e000      	b.n	8015f0e <CheckRetrans+0x1e>
    }
    return false;
 8015f0c:	2300      	movs	r3, #0
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	370c      	adds	r7, #12
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bc80      	pop	{r7}
 8015f16:	4770      	bx	lr

08015f18 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8015f1c:	4b12      	ldr	r3, [pc, #72]	@ (8015f68 <CheckRetransUnconfirmedUplink+0x50>)
 8015f1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8015f22:	4a12      	ldr	r2, [pc, #72]	@ (8015f6c <CheckRetransUnconfirmedUplink+0x54>)
 8015f24:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8015f28:	4611      	mov	r1, r2
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7ff ffe0 	bl	8015ef0 <CheckRetrans>
 8015f30:	4603      	mov	r3, r0
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d001      	beq.n	8015f3a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8015f36:	2301      	movs	r3, #1
 8015f38:	e014      	b.n	8015f64 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8015f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8015f68 <CheckRetransUnconfirmedUplink+0x50>)
 8015f3c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8015f40:	f003 0302 	and.w	r3, r3, #2
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d00b      	beq.n	8015f62 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015f4a:	4b07      	ldr	r3, [pc, #28]	@ (8015f68 <CheckRetransUnconfirmedUplink+0x50>)
 8015f4c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d004      	beq.n	8015f5e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8015f54:	4b04      	ldr	r3, [pc, #16]	@ (8015f68 <CheckRetransUnconfirmedUplink+0x50>)
 8015f56:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015f5a:	2b01      	cmp	r3, #1
 8015f5c:	d101      	bne.n	8015f62 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8015f5e:	2301      	movs	r3, #1
 8015f60:	e000      	b.n	8015f64 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8015f62:	2300      	movs	r3, #0
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	20000b8c 	.word	0x20000b8c
 8015f6c:	200010a8 	.word	0x200010a8

08015f70 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8015f74:	4b10      	ldr	r3, [pc, #64]	@ (8015fb8 <CheckRetransConfirmedUplink+0x48>)
 8015f76:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8015f7a:	4a10      	ldr	r2, [pc, #64]	@ (8015fbc <CheckRetransConfirmedUplink+0x4c>)
 8015f7c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8015f80:	4611      	mov	r1, r2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7ff ffb4 	bl	8015ef0 <CheckRetrans>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d001      	beq.n	8015f92 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	e00f      	b.n	8015fb2 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8015f92:	4b09      	ldr	r3, [pc, #36]	@ (8015fb8 <CheckRetransConfirmedUplink+0x48>)
 8015f94:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d006      	beq.n	8015fb0 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8015fa2:	4b05      	ldr	r3, [pc, #20]	@ (8015fb8 <CheckRetransConfirmedUplink+0x48>)
 8015fa4:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d001      	beq.n	8015fb0 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8015fac:	2301      	movs	r3, #1
 8015fae:	e000      	b.n	8015fb2 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8015fb0:	2300      	movs	r3, #0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	20000b8c 	.word	0x20000b8c
 8015fbc:	200010a8 	.word	0x200010a8

08015fc0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015fce:	d002      	beq.n	8015fd6 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8015fd6:	687b      	ldr	r3, [r7, #4]
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	370c      	adds	r7, #12
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bc80      	pop	{r7}
 8015fe0:	4770      	bx	lr
	...

08015fe4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8015fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8016054 <StopRetransmission+0x70>)
 8015fea:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8015fee:	f003 0302 	and.w	r3, r3, #2
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d009      	beq.n	801600c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8015ff8:	4b16      	ldr	r3, [pc, #88]	@ (8016054 <StopRetransmission+0x70>)
 8015ffa:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d011      	beq.n	8016026 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8016002:	4b14      	ldr	r3, [pc, #80]	@ (8016054 <StopRetransmission+0x70>)
 8016004:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8016008:	2b01      	cmp	r3, #1
 801600a:	d00c      	beq.n	8016026 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801600c:	4b12      	ldr	r3, [pc, #72]	@ (8016058 <StopRetransmission+0x74>)
 801600e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8016012:	2b00      	cmp	r3, #0
 8016014:	d007      	beq.n	8016026 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8016016:	4b10      	ldr	r3, [pc, #64]	@ (8016058 <StopRetransmission+0x74>)
 8016018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801601a:	4618      	mov	r0, r3
 801601c:	f7ff ffd0 	bl	8015fc0 <IncreaseAdrAckCounter>
 8016020:	4603      	mov	r3, r0
 8016022:	4a0d      	ldr	r2, [pc, #52]	@ (8016058 <StopRetransmission+0x74>)
 8016024:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8016026:	4b0b      	ldr	r3, [pc, #44]	@ (8016054 <StopRetransmission+0x70>)
 8016028:	2200      	movs	r2, #0
 801602a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 801602e:	4b09      	ldr	r3, [pc, #36]	@ (8016054 <StopRetransmission+0x70>)
 8016030:	2200      	movs	r2, #0
 8016032:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8016036:	4b07      	ldr	r3, [pc, #28]	@ (8016054 <StopRetransmission+0x70>)
 8016038:	2200      	movs	r2, #0
 801603a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801603e:	4b05      	ldr	r3, [pc, #20]	@ (8016054 <StopRetransmission+0x70>)
 8016040:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8016044:	f023 0302 	bic.w	r3, r3, #2
 8016048:	4a02      	ldr	r2, [pc, #8]	@ (8016054 <StopRetransmission+0x70>)
 801604a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801604e:	2301      	movs	r3, #1
}
 8016050:	4618      	mov	r0, r3
 8016052:	bd80      	pop	{r7, pc}
 8016054:	20000b8c 	.word	0x20000b8c
 8016058:	200010a8 	.word	0x200010a8

0801605c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801605c:	b580      	push	{r7, lr}
 801605e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8016060:	4b08      	ldr	r3, [pc, #32]	@ (8016084 <OnMacProcessNotify+0x28>)
 8016062:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8016066:	2b00      	cmp	r3, #0
 8016068:	d00a      	beq.n	8016080 <OnMacProcessNotify+0x24>
 801606a:	4b06      	ldr	r3, [pc, #24]	@ (8016084 <OnMacProcessNotify+0x28>)
 801606c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8016070:	695b      	ldr	r3, [r3, #20]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d004      	beq.n	8016080 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8016076:	4b03      	ldr	r3, [pc, #12]	@ (8016084 <OnMacProcessNotify+0x28>)
 8016078:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801607c:	695b      	ldr	r3, [r3, #20]
 801607e:	4798      	blx	r3
    }
}
 8016080:	bf00      	nop
 8016082:	bd80      	pop	{r7, pc}
 8016084:	20000b8c 	.word	0x20000b8c

08016088 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	4603      	mov	r3, r0
 8016090:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8016092:	4b0b      	ldr	r3, [pc, #44]	@ (80160c0 <CallNvmDataChangeCallback+0x38>)
 8016094:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00c      	beq.n	80160b6 <CallNvmDataChangeCallback+0x2e>
 801609c:	4b08      	ldr	r3, [pc, #32]	@ (80160c0 <CallNvmDataChangeCallback+0x38>)
 801609e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80160a2:	691b      	ldr	r3, [r3, #16]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d006      	beq.n	80160b6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80160a8:	4b05      	ldr	r3, [pc, #20]	@ (80160c0 <CallNvmDataChangeCallback+0x38>)
 80160aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80160ae:	691b      	ldr	r3, [r3, #16]
 80160b0:	88fa      	ldrh	r2, [r7, #6]
 80160b2:	4610      	mov	r0, r2
 80160b4:	4798      	blx	r3
    }
}
 80160b6:	bf00      	nop
 80160b8:	3708      	adds	r7, #8
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}
 80160be:	bf00      	nop
 80160c0:	20000b8c 	.word	0x20000b8c

080160c4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80160c4:	b480      	push	{r7}
 80160c6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80160c8:	4b0b      	ldr	r3, [pc, #44]	@ (80160f8 <IsRequestPending+0x34>)
 80160ca:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80160ce:	f003 0304 	and.w	r3, r3, #4
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d107      	bne.n	80160e8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80160d8:	4b07      	ldr	r3, [pc, #28]	@ (80160f8 <IsRequestPending+0x34>)
 80160da:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80160de:	f003 0301 	and.w	r3, r3, #1
 80160e2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d001      	beq.n	80160ec <IsRequestPending+0x28>
    {
        return 1;
 80160e8:	2301      	movs	r3, #1
 80160ea:	e000      	b.n	80160ee <IsRequestPending+0x2a>
    }
    return 0;
 80160ec:	2300      	movs	r3, #0
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bc80      	pop	{r7}
 80160f4:	4770      	bx	lr
 80160f6:	bf00      	nop
 80160f8:	20000b8c 	.word	0x20000b8c

080160fc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80160fc:	b590      	push	{r4, r7, lr}
 80160fe:	b091      	sub	sp, #68	@ 0x44
 8016100:	af02      	add	r7, sp, #8
 8016102:	6178      	str	r0, [r7, #20]
 8016104:	6139      	str	r1, [r7, #16]
 8016106:	4613      	mov	r3, r2
 8016108:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d002      	beq.n	8016116 <LoRaMacInitialization+0x1a>
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d101      	bne.n	801611a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016116:	2303      	movs	r3, #3
 8016118:	e27a      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d00b      	beq.n	801613a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8016126:	2b00      	cmp	r3, #0
 8016128:	d007      	beq.n	801613a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801612a:	697b      	ldr	r3, [r7, #20]
 801612c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801612e:	2b00      	cmp	r3, #0
 8016130:	d003      	beq.n	801613a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8016136:	2b00      	cmp	r3, #0
 8016138:	d101      	bne.n	801613e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801613a:	2303      	movs	r3, #3
 801613c:	e268      	b.n	8016610 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801613e:	7bfb      	ldrb	r3, [r7, #15]
 8016140:	4618      	mov	r0, r3
 8016142:	f005 fb92 	bl	801b86a <RegionIsActive>
 8016146:	4603      	mov	r3, r0
 8016148:	f083 0301 	eor.w	r3, r3, #1
 801614c:	b2db      	uxtb	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016152:	2309      	movs	r3, #9
 8016154:	e25c      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8016156:	6978      	ldr	r0, [r7, #20]
 8016158:	f004 f81e 	bl	801a198 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801615c:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8016160:	2100      	movs	r1, #0
 8016162:	48c7      	ldr	r0, [pc, #796]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016164:	f009 fa92 	bl	801f68c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8016168:	f240 521c 	movw	r2, #1308	@ 0x51c
 801616c:	2100      	movs	r1, #0
 801616e:	48c5      	ldr	r0, [pc, #788]	@ (8016484 <LoRaMacInitialization+0x388>)
 8016170:	f009 fa8c 	bl	801f68c <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8016174:	4ac2      	ldr	r2, [pc, #776]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016176:	7bfb      	ldrb	r3, [r7, #15]
 8016178:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801617c:	4bc0      	ldr	r3, [pc, #768]	@ (8016480 <LoRaMacInitialization+0x384>)
 801617e:	2200      	movs	r2, #0
 8016180:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8016184:	4bbe      	ldr	r3, [pc, #760]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016186:	2200      	movs	r2, #0
 8016188:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801618c:	4bbc      	ldr	r3, [pc, #752]	@ (8016480 <LoRaMacInitialization+0x384>)
 801618e:	4abe      	ldr	r2, [pc, #760]	@ (8016488 <LoRaMacInitialization+0x38c>)
 8016190:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8016194:	2300      	movs	r3, #0
 8016196:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801619a:	4bbc      	ldr	r3, [pc, #752]	@ (801648c <LoRaMacInitialization+0x390>)
 801619c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801619e:	4bbc      	ldr	r3, [pc, #752]	@ (8016490 <LoRaMacInitialization+0x394>)
 80161a0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80161a2:	4bbc      	ldr	r3, [pc, #752]	@ (8016494 <LoRaMacInitialization+0x398>)
 80161a4:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80161a6:	4bb6      	ldr	r3, [pc, #728]	@ (8016480 <LoRaMacInitialization+0x384>)
 80161a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80161ac:	f107 021c 	add.w	r2, r7, #28
 80161b0:	4611      	mov	r1, r2
 80161b2:	4618      	mov	r0, r3
 80161b4:	f005 fba5 	bl	801b902 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80161b8:	230f      	movs	r3, #15
 80161ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80161be:	4bb0      	ldr	r3, [pc, #704]	@ (8016480 <LoRaMacInitialization+0x384>)
 80161c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80161c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80161c8:	4611      	mov	r1, r2
 80161ca:	4618      	mov	r0, r3
 80161cc:	f005 fb62 	bl	801b894 <RegionGetPhyParam>
 80161d0:	4603      	mov	r3, r0
 80161d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80161d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	bf14      	ite	ne
 80161da:	2301      	movne	r3, #1
 80161dc:	2300      	moveq	r3, #0
 80161de:	b2da      	uxtb	r2, r3
 80161e0:	4ba7      	ldr	r3, [pc, #668]	@ (8016480 <LoRaMacInitialization+0x384>)
 80161e2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80161e6:	230a      	movs	r3, #10
 80161e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80161ec:	4ba4      	ldr	r3, [pc, #656]	@ (8016480 <LoRaMacInitialization+0x384>)
 80161ee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80161f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80161f6:	4611      	mov	r1, r2
 80161f8:	4618      	mov	r0, r3
 80161fa:	f005 fb4b 	bl	801b894 <RegionGetPhyParam>
 80161fe:	4603      	mov	r3, r0
 8016200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8016202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016204:	b25a      	sxtb	r2, r3
 8016206:	4b9e      	ldr	r3, [pc, #632]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016208:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801620c:	2306      	movs	r3, #6
 801620e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016212:	4b9b      	ldr	r3, [pc, #620]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016214:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016218:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801621c:	4611      	mov	r1, r2
 801621e:	4618      	mov	r0, r3
 8016220:	f005 fb38 	bl	801b894 <RegionGetPhyParam>
 8016224:	4603      	mov	r3, r0
 8016226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8016228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801622a:	b25a      	sxtb	r2, r3
 801622c:	4b94      	ldr	r3, [pc, #592]	@ (8016480 <LoRaMacInitialization+0x384>)
 801622e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8016232:	2310      	movs	r3, #16
 8016234:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016238:	4b91      	ldr	r3, [pc, #580]	@ (8016480 <LoRaMacInitialization+0x384>)
 801623a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801623e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016242:	4611      	mov	r1, r2
 8016244:	4618      	mov	r0, r3
 8016246:	f005 fb25 	bl	801b894 <RegionGetPhyParam>
 801624a:	4603      	mov	r3, r0
 801624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016250:	4a8b      	ldr	r2, [pc, #556]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016252:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8016256:	2311      	movs	r3, #17
 8016258:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801625c:	4b88      	ldr	r3, [pc, #544]	@ (8016480 <LoRaMacInitialization+0x384>)
 801625e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016262:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016266:	4611      	mov	r1, r2
 8016268:	4618      	mov	r0, r3
 801626a:	f005 fb13 	bl	801b894 <RegionGetPhyParam>
 801626e:	4603      	mov	r3, r0
 8016270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8016272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016274:	4a82      	ldr	r2, [pc, #520]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016276:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801627a:	2312      	movs	r3, #18
 801627c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016280:	4b7f      	ldr	r3, [pc, #508]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016282:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016286:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801628a:	4611      	mov	r1, r2
 801628c:	4618      	mov	r0, r3
 801628e:	f005 fb01 	bl	801b894 <RegionGetPhyParam>
 8016292:	4603      	mov	r3, r0
 8016294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8016296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016298:	4a79      	ldr	r2, [pc, #484]	@ (8016480 <LoRaMacInitialization+0x384>)
 801629a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801629e:	2313      	movs	r3, #19
 80162a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80162a4:	4b76      	ldr	r3, [pc, #472]	@ (8016480 <LoRaMacInitialization+0x384>)
 80162a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80162aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80162ae:	4611      	mov	r1, r2
 80162b0:	4618      	mov	r0, r3
 80162b2:	f005 faef 	bl	801b894 <RegionGetPhyParam>
 80162b6:	4603      	mov	r3, r0
 80162b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80162ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162bc:	4a70      	ldr	r2, [pc, #448]	@ (8016480 <LoRaMacInitialization+0x384>)
 80162be:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80162c2:	2314      	movs	r3, #20
 80162c4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80162c8:	4b6d      	ldr	r3, [pc, #436]	@ (8016480 <LoRaMacInitialization+0x384>)
 80162ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80162ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80162d2:	4611      	mov	r1, r2
 80162d4:	4618      	mov	r0, r3
 80162d6:	f005 fadd 	bl	801b894 <RegionGetPhyParam>
 80162da:	4603      	mov	r3, r0
 80162dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80162de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e0:	4a67      	ldr	r2, [pc, #412]	@ (8016480 <LoRaMacInitialization+0x384>)
 80162e2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80162e6:	2316      	movs	r3, #22
 80162e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80162ec:	4b64      	ldr	r3, [pc, #400]	@ (8016480 <LoRaMacInitialization+0x384>)
 80162ee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80162f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80162f6:	4611      	mov	r1, r2
 80162f8:	4618      	mov	r0, r3
 80162fa:	f005 facb 	bl	801b894 <RegionGetPhyParam>
 80162fe:	4603      	mov	r3, r0
 8016300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8016302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016304:	b2da      	uxtb	r2, r3
 8016306:	4b5e      	ldr	r3, [pc, #376]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016308:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801630c:	2317      	movs	r3, #23
 801630e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016312:	4b5b      	ldr	r3, [pc, #364]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016314:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016318:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801631c:	4611      	mov	r1, r2
 801631e:	4618      	mov	r0, r3
 8016320:	f005 fab8 	bl	801b894 <RegionGetPhyParam>
 8016324:	4603      	mov	r3, r0
 8016326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8016328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801632a:	4a55      	ldr	r2, [pc, #340]	@ (8016480 <LoRaMacInitialization+0x384>)
 801632c:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8016330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016332:	4a53      	ldr	r2, [pc, #332]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016334:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8016338:	2318      	movs	r3, #24
 801633a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801633e:	4b50      	ldr	r3, [pc, #320]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016340:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016344:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016348:	4611      	mov	r1, r2
 801634a:	4618      	mov	r0, r3
 801634c:	f005 faa2 	bl	801b894 <RegionGetPhyParam>
 8016350:	4603      	mov	r3, r0
 8016352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8016354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016356:	b2da      	uxtb	r2, r3
 8016358:	4b49      	ldr	r3, [pc, #292]	@ (8016480 <LoRaMacInitialization+0x384>)
 801635a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016360:	b2da      	uxtb	r2, r3
 8016362:	4b47      	ldr	r3, [pc, #284]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016364:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8016368:	231d      	movs	r3, #29
 801636a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801636e:	4b44      	ldr	r3, [pc, #272]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016370:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016374:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016378:	4611      	mov	r1, r2
 801637a:	4618      	mov	r0, r3
 801637c:	f005 fa8a 	bl	801b894 <RegionGetPhyParam>
 8016380:	4603      	mov	r3, r0
 8016382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8016384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016386:	b2da      	uxtb	r2, r3
 8016388:	4b3d      	ldr	r3, [pc, #244]	@ (8016480 <LoRaMacInitialization+0x384>)
 801638a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801638e:	231e      	movs	r3, #30
 8016390:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016394:	4b3a      	ldr	r3, [pc, #232]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016396:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801639a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801639e:	4611      	mov	r1, r2
 80163a0:	4618      	mov	r0, r3
 80163a2:	f005 fa77 	bl	801b894 <RegionGetPhyParam>
 80163a6:	4603      	mov	r3, r0
 80163a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80163aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ac:	b2da      	uxtb	r2, r3
 80163ae:	4b34      	ldr	r3, [pc, #208]	@ (8016480 <LoRaMacInitialization+0x384>)
 80163b0:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80163b4:	231f      	movs	r3, #31
 80163b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163ba:	4b31      	ldr	r3, [pc, #196]	@ (8016480 <LoRaMacInitialization+0x384>)
 80163bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80163c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80163c4:	4611      	mov	r1, r2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f005 fa64 	bl	801b894 <RegionGetPhyParam>
 80163cc:	4603      	mov	r3, r0
 80163ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80163d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163d2:	4a2b      	ldr	r2, [pc, #172]	@ (8016480 <LoRaMacInitialization+0x384>)
 80163d4:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80163d8:	2320      	movs	r3, #32
 80163da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163de:	4b28      	ldr	r3, [pc, #160]	@ (8016480 <LoRaMacInitialization+0x384>)
 80163e0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80163e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80163e8:	4611      	mov	r1, r2
 80163ea:	4618      	mov	r0, r3
 80163ec:	f005 fa52 	bl	801b894 <RegionGetPhyParam>
 80163f0:	4603      	mov	r3, r0
 80163f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80163f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163f6:	4a22      	ldr	r2, [pc, #136]	@ (8016480 <LoRaMacInitialization+0x384>)
 80163f8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80163fc:	230b      	movs	r3, #11
 80163fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016402:	4b1f      	ldr	r3, [pc, #124]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016404:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016408:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801640c:	4611      	mov	r1, r2
 801640e:	4618      	mov	r0, r3
 8016410:	f005 fa40 	bl	801b894 <RegionGetPhyParam>
 8016414:	4603      	mov	r3, r0
 8016416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8016418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641a:	b29a      	uxth	r2, r3
 801641c:	4b18      	ldr	r3, [pc, #96]	@ (8016480 <LoRaMacInitialization+0x384>)
 801641e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8016422:	230c      	movs	r3, #12
 8016424:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016428:	4b15      	ldr	r3, [pc, #84]	@ (8016480 <LoRaMacInitialization+0x384>)
 801642a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801642e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016432:	4611      	mov	r1, r2
 8016434:	4618      	mov	r0, r3
 8016436:	f005 fa2d 	bl	801b894 <RegionGetPhyParam>
 801643a:	4603      	mov	r3, r0
 801643c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016440:	b29a      	uxth	r2, r3
 8016442:	4b0f      	ldr	r3, [pc, #60]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016444:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8016448:	4b0d      	ldr	r3, [pc, #52]	@ (8016480 <LoRaMacInitialization+0x384>)
 801644a:	2201      	movs	r2, #1
 801644c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8016450:	4b0b      	ldr	r3, [pc, #44]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016452:	220a      	movs	r2, #10
 8016454:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8016458:	4b09      	ldr	r3, [pc, #36]	@ (8016480 <LoRaMacInitialization+0x384>)
 801645a:	2206      	movs	r2, #6
 801645c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8016460:	4b07      	ldr	r3, [pc, #28]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016466:	4a06      	ldr	r2, [pc, #24]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016468:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801646a:	4b05      	ldr	r3, [pc, #20]	@ (8016480 <LoRaMacInitialization+0x384>)
 801646c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8016470:	4b03      	ldr	r3, [pc, #12]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8016476:	4b02      	ldr	r3, [pc, #8]	@ (8016480 <LoRaMacInitialization+0x384>)
 8016478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801647c:	e00c      	b.n	8016498 <LoRaMacInitialization+0x39c>
 801647e:	bf00      	nop
 8016480:	200010a8 	.word	0x200010a8
 8016484:	20000b8c 	.word	0x20000b8c
 8016488:	01000400 	.word	0x01000400
 801648c:	200012cc 	.word	0x200012cc
 8016490:	200012e0 	.word	0x200012e0
 8016494:	20001c40 	.word	0x20001c40
 8016498:	4a5f      	ldr	r2, [pc, #380]	@ (8016618 <LoRaMacInitialization+0x51c>)
 801649a:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801649c:	4b5e      	ldr	r3, [pc, #376]	@ (8016618 <LoRaMacInitialization+0x51c>)
 801649e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80164a2:	4a5d      	ldr	r2, [pc, #372]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164a4:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80164a6:	4b5c      	ldr	r3, [pc, #368]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80164ac:	4a5a      	ldr	r2, [pc, #360]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80164b0:	4b59      	ldr	r3, [pc, #356]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80164b6:	4a58      	ldr	r2, [pc, #352]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164b8:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80164ba:	4b57      	ldr	r3, [pc, #348]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80164c0:	4a55      	ldr	r2, [pc, #340]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164c2:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80164c4:	4b54      	ldr	r3, [pc, #336]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164c6:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80164ca:	4b53      	ldr	r3, [pc, #332]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80164d0:	4b51      	ldr	r3, [pc, #324]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164d2:	2201      	movs	r2, #1
 80164d4:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80164d8:	4a50      	ldr	r2, [pc, #320]	@ (801661c <LoRaMacInitialization+0x520>)
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80164e0:	2000      	movs	r0, #0
 80164e2:	f7ff f86b 	bl	80155bc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80164e6:	4b4c      	ldr	r3, [pc, #304]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80164e8:	2201      	movs	r2, #1
 80164ea:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80164ee:	4a4b      	ldr	r2, [pc, #300]	@ (801661c <LoRaMacInitialization+0x520>)
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80164f6:	4b49      	ldr	r3, [pc, #292]	@ (801661c <LoRaMacInitialization+0x520>)
 80164f8:	2200      	movs	r2, #0
 80164fa:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 80164fe:	4b47      	ldr	r3, [pc, #284]	@ (801661c <LoRaMacInitialization+0x520>)
 8016500:	2201      	movs	r2, #1
 8016502:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8016506:	4b44      	ldr	r3, [pc, #272]	@ (8016618 <LoRaMacInitialization+0x51c>)
 8016508:	2200      	movs	r2, #0
 801650a:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801650c:	4b42      	ldr	r3, [pc, #264]	@ (8016618 <LoRaMacInitialization+0x51c>)
 801650e:	2200      	movs	r2, #0
 8016510:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8016512:	2300      	movs	r3, #0
 8016514:	9300      	str	r3, [sp, #0]
 8016516:	4b42      	ldr	r3, [pc, #264]	@ (8016620 <LoRaMacInitialization+0x524>)
 8016518:	2200      	movs	r2, #0
 801651a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801651e:	4841      	ldr	r0, [pc, #260]	@ (8016624 <LoRaMacInitialization+0x528>)
 8016520:	f00d ff80 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8016524:	2300      	movs	r3, #0
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	4b3f      	ldr	r3, [pc, #252]	@ (8016628 <LoRaMacInitialization+0x52c>)
 801652a:	2200      	movs	r2, #0
 801652c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016530:	483e      	ldr	r0, [pc, #248]	@ (801662c <LoRaMacInitialization+0x530>)
 8016532:	f00d ff77 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8016536:	2300      	movs	r3, #0
 8016538:	9300      	str	r3, [sp, #0]
 801653a:	4b3d      	ldr	r3, [pc, #244]	@ (8016630 <LoRaMacInitialization+0x534>)
 801653c:	2200      	movs	r2, #0
 801653e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016542:	483c      	ldr	r0, [pc, #240]	@ (8016634 <LoRaMacInitialization+0x538>)
 8016544:	f00d ff6e 	bl	8024424 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8016548:	2300      	movs	r3, #0
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	4b3a      	ldr	r3, [pc, #232]	@ (8016638 <LoRaMacInitialization+0x53c>)
 801654e:	2200      	movs	r2, #0
 8016550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016554:	4839      	ldr	r0, [pc, #228]	@ (801663c <LoRaMacInitialization+0x540>)
 8016556:	f00d ff65 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801655a:	4c2f      	ldr	r4, [pc, #188]	@ (8016618 <LoRaMacInitialization+0x51c>)
 801655c:	463b      	mov	r3, r7
 801655e:	4618      	mov	r0, r3
 8016560:	f00c fcc2 	bl	8022ee8 <SysTimeGetMcuTime>
 8016564:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8016568:	463a      	mov	r2, r7
 801656a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801656e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8016572:	4b33      	ldr	r3, [pc, #204]	@ (8016640 <LoRaMacInitialization+0x544>)
 8016574:	2200      	movs	r2, #0
 8016576:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8016578:	4b28      	ldr	r3, [pc, #160]	@ (801661c <LoRaMacInitialization+0x520>)
 801657a:	4a32      	ldr	r2, [pc, #200]	@ (8016644 <LoRaMacInitialization+0x548>)
 801657c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8016580:	4b26      	ldr	r3, [pc, #152]	@ (801661c <LoRaMacInitialization+0x520>)
 8016582:	4a31      	ldr	r2, [pc, #196]	@ (8016648 <LoRaMacInitialization+0x54c>)
 8016584:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8016588:	4b24      	ldr	r3, [pc, #144]	@ (801661c <LoRaMacInitialization+0x520>)
 801658a:	4a30      	ldr	r2, [pc, #192]	@ (801664c <LoRaMacInitialization+0x550>)
 801658c:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8016590:	4b22      	ldr	r3, [pc, #136]	@ (801661c <LoRaMacInitialization+0x520>)
 8016592:	4a2f      	ldr	r2, [pc, #188]	@ (8016650 <LoRaMacInitialization+0x554>)
 8016594:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8016598:	4b20      	ldr	r3, [pc, #128]	@ (801661c <LoRaMacInitialization+0x520>)
 801659a:	4a2e      	ldr	r2, [pc, #184]	@ (8016654 <LoRaMacInitialization+0x558>)
 801659c:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80165a0:	4b2d      	ldr	r3, [pc, #180]	@ (8016658 <LoRaMacInitialization+0x55c>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	482d      	ldr	r0, [pc, #180]	@ (801665c <LoRaMacInitialization+0x560>)
 80165a6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80165a8:	482d      	ldr	r0, [pc, #180]	@ (8016660 <LoRaMacInitialization+0x564>)
 80165aa:	f7f9 fd4b 	bl	8010044 <SecureElementInit>
 80165ae:	4603      	mov	r3, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d001      	beq.n	80165b8 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80165b4:	2311      	movs	r3, #17
 80165b6:	e02b      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80165b8:	4817      	ldr	r0, [pc, #92]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80165ba:	f004 faad 	bl	801ab18 <LoRaMacCryptoInit>
 80165be:	4603      	mov	r3, r0
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d001      	beq.n	80165c8 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80165c4:	2311      	movs	r3, #17
 80165c6:	e023      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80165c8:	f003 fba8 	bl	8019d1c <LoRaMacCommandsInit>
 80165cc:	4603      	mov	r3, r0
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d001      	beq.n	80165d6 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80165d2:	2313      	movs	r3, #19
 80165d4:	e01c      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80165d6:	4823      	ldr	r0, [pc, #140]	@ (8016664 <LoRaMacInitialization+0x568>)
 80165d8:	f004 fb3e 	bl	801ac58 <LoRaMacCryptoSetMulticastReference>
 80165dc:	4603      	mov	r3, r0
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d001      	beq.n	80165e6 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80165e2:	2311      	movs	r3, #17
 80165e4:	e014      	b.n	8016610 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80165e6:	4b1c      	ldr	r3, [pc, #112]	@ (8016658 <LoRaMacInitialization+0x55c>)
 80165e8:	695b      	ldr	r3, [r3, #20]
 80165ea:	4798      	blx	r3
 80165ec:	4603      	mov	r3, r0
 80165ee:	4618      	mov	r0, r3
 80165f0:	f008 ffec 	bl	801f5cc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80165f4:	4b18      	ldr	r3, [pc, #96]	@ (8016658 <LoRaMacInitialization+0x55c>)
 80165f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80165f8:	4a07      	ldr	r2, [pc, #28]	@ (8016618 <LoRaMacInitialization+0x51c>)
 80165fa:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80165fe:	4610      	mov	r0, r2
 8016600:	4798      	blx	r3
    Radio.Sleep( );
 8016602:	4b15      	ldr	r3, [pc, #84]	@ (8016658 <LoRaMacInitialization+0x55c>)
 8016604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016606:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8016608:	2001      	movs	r0, #1
 801660a:	f7fd fa71 	bl	8013af0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	373c      	adds	r7, #60	@ 0x3c
 8016614:	46bd      	mov	sp, r7
 8016616:	bd90      	pop	{r4, r7, pc}
 8016618:	200010a8 	.word	0x200010a8
 801661c:	20000b8c 	.word	0x20000b8c
 8016620:	0801407d 	.word	0x0801407d
 8016624:	20000ef4 	.word	0x20000ef4
 8016628:	0801410d 	.word	0x0801410d
 801662c:	20000f0c 	.word	0x20000f0c
 8016630:	08014185 	.word	0x08014185
 8016634:	20000f24 	.word	0x20000f24
 8016638:	08014205 	.word	0x08014205
 801663c:	20000f8c 	.word	0x20000f8c
 8016640:	20001cd0 	.word	0x20001cd0
 8016644:	08012b2d 	.word	0x08012b2d
 8016648:	08012b89 	.word	0x08012b89
 801664c:	08012c29 	.word	0x08012c29
 8016650:	08012bfd 	.word	0x08012bfd
 8016654:	08012c45 	.word	0x08012c45
 8016658:	08029818 	.word	0x08029818
 801665c:	20000ed8 	.word	0x20000ed8
 8016660:	200011f4 	.word	0x200011f4
 8016664:	20001190 	.word	0x20001190

08016668 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801666c:	4b04      	ldr	r3, [pc, #16]	@ (8016680 <LoRaMacStart+0x18>)
 801666e:	2200      	movs	r2, #0
 8016670:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8016674:	f7fc fafc 	bl	8012c70 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8016678:	2300      	movs	r3, #0
}
 801667a:	4618      	mov	r0, r3
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	20000b8c 	.word	0x20000b8c

08016684 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8016688:	f7fd f9fa 	bl	8013a80 <LoRaMacIsBusy>
 801668c:	4603      	mov	r3, r0
 801668e:	f083 0301 	eor.w	r3, r3, #1
 8016692:	b2db      	uxtb	r3, r3
 8016694:	2b00      	cmp	r3, #0
 8016696:	d00d      	beq.n	80166b4 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8016698:	4b0b      	ldr	r3, [pc, #44]	@ (80166c8 <LoRaMacStop+0x44>)
 801669a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801669e:	2b02      	cmp	r3, #2
 80166a0:	d102      	bne.n	80166a8 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80166a2:	4b0a      	ldr	r3, [pc, #40]	@ (80166cc <LoRaMacStop+0x48>)
 80166a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a6:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80166a8:	4b09      	ldr	r3, [pc, #36]	@ (80166d0 <LoRaMacStop+0x4c>)
 80166aa:	2201      	movs	r2, #1
 80166ac:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80166b0:	2300      	movs	r3, #0
 80166b2:	e007      	b.n	80166c4 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80166b4:	4b06      	ldr	r3, [pc, #24]	@ (80166d0 <LoRaMacStop+0x4c>)
 80166b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80166ba:	2b01      	cmp	r3, #1
 80166bc:	d101      	bne.n	80166c2 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80166be:	2300      	movs	r3, #0
 80166c0:	e000      	b.n	80166c4 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80166c2:	2301      	movs	r3, #1
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	200010a8 	.word	0x200010a8
 80166cc:	08029818 	.word	0x08029818
 80166d0:	20000b8c 	.word	0x20000b8c

080166d4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80166d8:	4812      	ldr	r0, [pc, #72]	@ (8016724 <LoRaMacHalt+0x50>)
 80166da:	f00d ff47 	bl	802456c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80166de:	4812      	ldr	r0, [pc, #72]	@ (8016728 <LoRaMacHalt+0x54>)
 80166e0:	f00d ff44 	bl	802456c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80166e4:	4811      	ldr	r0, [pc, #68]	@ (801672c <LoRaMacHalt+0x58>)
 80166e6:	f00d ff41 	bl	802456c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80166ea:	4811      	ldr	r0, [pc, #68]	@ (8016730 <LoRaMacHalt+0x5c>)
 80166ec:	f00d ff3e 	bl	802456c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80166f0:	f002 fea0 	bl	8019434 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80166f4:	4b0f      	ldr	r3, [pc, #60]	@ (8016734 <LoRaMacHalt+0x60>)
 80166f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166f8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80166fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016738 <LoRaMacHalt+0x64>)
 80166fc:	2200      	movs	r2, #0
 80166fe:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8016702:	480e      	ldr	r0, [pc, #56]	@ (801673c <LoRaMacHalt+0x68>)
 8016704:	f7fd fb96 	bl	8013e34 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8016708:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 801670c:	490b      	ldr	r1, [pc, #44]	@ (801673c <LoRaMacHalt+0x68>)
 801670e:	480c      	ldr	r0, [pc, #48]	@ (8016740 <LoRaMacHalt+0x6c>)
 8016710:	f008 ff81 	bl	801f616 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8016714:	4b08      	ldr	r3, [pc, #32]	@ (8016738 <LoRaMacHalt+0x64>)
 8016716:	2201      	movs	r2, #1
 8016718:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801671c:	2300      	movs	r3, #0
}
 801671e:	4618      	mov	r0, r3
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	20000ef4 	.word	0x20000ef4
 8016728:	20000f0c 	.word	0x20000f0c
 801672c:	20000f24 	.word	0x20000f24
 8016730:	20000f8c 	.word	0x20000f8c
 8016734:	08029818 	.word	0x08029818
 8016738:	20000b8c 	.word	0x20000b8c
 801673c:	200010a8 	.word	0x200010a8
 8016740:	20001674 	.word	0x20001674

08016744 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8016744:	b590      	push	{r4, r7, lr}
 8016746:	b08d      	sub	sp, #52	@ 0x34
 8016748:	af02      	add	r7, sp, #8
 801674a:	4603      	mov	r3, r0
 801674c:	6039      	str	r1, [r7, #0]
 801674e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8016750:	4b42      	ldr	r3, [pc, #264]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016754:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8016756:	4b41      	ldr	r3, [pc, #260]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016758:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 801675c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801675e:	4b3f      	ldr	r3, [pc, #252]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016760:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8016764:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8016766:	4b3e      	ldr	r3, [pc, #248]	@ (8016860 <LoRaMacQueryTxPossible+0x11c>)
 8016768:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801676c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801676e:	2300      	movs	r3, #0
 8016770:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d101      	bne.n	801677c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016778:	2303      	movs	r3, #3
 801677a:	e06b      	b.n	8016854 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801677c:	2300      	movs	r3, #0
 801677e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8016780:	4b36      	ldr	r3, [pc, #216]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016782:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8016786:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8016788:	4b34      	ldr	r3, [pc, #208]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 801678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801678c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801678e:	4b33      	ldr	r3, [pc, #204]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016790:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8016794:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8016796:	4b31      	ldr	r3, [pc, #196]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 8016798:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 801679c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801679e:	4b2f      	ldr	r3, [pc, #188]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 80167a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80167a4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80167a8:	4b2c      	ldr	r3, [pc, #176]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 80167aa:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80167ae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80167b2:	4b2b      	ldr	r3, [pc, #172]	@ (8016860 <LoRaMacQueryTxPossible+0x11c>)
 80167b4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80167b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80167bc:	4b27      	ldr	r3, [pc, #156]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 80167be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80167c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80167c6:	4b25      	ldr	r3, [pc, #148]	@ (801685c <LoRaMacQueryTxPossible+0x118>)
 80167c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80167cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80167d0:	f107 040d 	add.w	r4, r7, #13
 80167d4:	f107 020e 	add.w	r2, r7, #14
 80167d8:	f107 010f 	add.w	r1, r7, #15
 80167dc:	f107 0014 	add.w	r0, r7, #20
 80167e0:	f107 0310 	add.w	r3, r7, #16
 80167e4:	9300      	str	r3, [sp, #0]
 80167e6:	4623      	mov	r3, r4
 80167e8:	f001 f8da 	bl	80179a0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80167ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7fd fe4d 	bl	8014490 <GetMaxAppPayloadWithoutFOptsLength>
 80167f6:	4603      	mov	r3, r0
 80167f8:	461a      	mov	r2, r3
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80167fe:	f107 0308 	add.w	r3, r7, #8
 8016802:	4618      	mov	r0, r3
 8016804:	f003 fb90 	bl	8019f28 <LoRaMacCommandsGetSizeSerializedCmds>
 8016808:	4603      	mov	r3, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d001      	beq.n	8016812 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801680e:	2313      	movs	r3, #19
 8016810:	e020      	b.n	8016854 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	2b0f      	cmp	r3, #15
 8016816:	d819      	bhi.n	801684c <LoRaMacQueryTxPossible+0x108>
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	785b      	ldrb	r3, [r3, #1]
 801681c:	461a      	mov	r2, r3
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	429a      	cmp	r2, r3
 8016822:	d313      	bcc.n	801684c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	785a      	ldrb	r2, [r3, #1]
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	b2db      	uxtb	r3, r3
 801682c:	1ad3      	subs	r3, r2, r3
 801682e:	b2da      	uxtb	r2, r3
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	785b      	ldrb	r3, [r3, #1]
 8016838:	4619      	mov	r1, r3
 801683a:	79fa      	ldrb	r2, [r7, #7]
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	4413      	add	r3, r2
 8016840:	4299      	cmp	r1, r3
 8016842:	d301      	bcc.n	8016848 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8016844:	2300      	movs	r3, #0
 8016846:	e005      	b.n	8016854 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8016848:	2308      	movs	r3, #8
 801684a:	e003      	b.n	8016854 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	2200      	movs	r2, #0
 8016850:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8016852:	2308      	movs	r3, #8
    }
}
 8016854:	4618      	mov	r0, r3
 8016856:	372c      	adds	r7, #44	@ 0x2c
 8016858:	46bd      	mov	sp, r7
 801685a:	bd90      	pop	{r4, r7, pc}
 801685c:	200010a8 	.word	0x200010a8
 8016860:	20000b8c 	.word	0x20000b8c

08016864 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8016864:	b590      	push	{r4, r7, lr}
 8016866:	b087      	sub	sp, #28
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801686c:	2300      	movs	r3, #0
 801686e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d101      	bne.n	801687a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016876:	2303      	movs	r3, #3
 8016878:	e1c4      	b.n	8016c04 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	2b41      	cmp	r3, #65	@ 0x41
 8016880:	f200 81b9 	bhi.w	8016bf6 <LoRaMacMibGetRequestConfirm+0x392>
 8016884:	a201      	add	r2, pc, #4	@ (adr r2, 801688c <LoRaMacMibGetRequestConfirm+0x28>)
 8016886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801688a:	bf00      	nop
 801688c:	08016995 	.word	0x08016995
 8016890:	080169a1 	.word	0x080169a1
 8016894:	080169ad 	.word	0x080169ad
 8016898:	080169b9 	.word	0x080169b9
 801689c:	080169c5 	.word	0x080169c5
 80168a0:	080169d1 	.word	0x080169d1
 80168a4:	080169dd 	.word	0x080169dd
 80168a8:	08016bf7 	.word	0x08016bf7
 80168ac:	08016bf7 	.word	0x08016bf7
 80168b0:	08016bf7 	.word	0x08016bf7
 80168b4:	08016bf7 	.word	0x08016bf7
 80168b8:	08016bf7 	.word	0x08016bf7
 80168bc:	08016bf7 	.word	0x08016bf7
 80168c0:	08016bf7 	.word	0x08016bf7
 80168c4:	08016bf7 	.word	0x08016bf7
 80168c8:	080169f1 	.word	0x080169f1
 80168cc:	080169fd 	.word	0x080169fd
 80168d0:	08016a09 	.word	0x08016a09
 80168d4:	08016a2b 	.word	0x08016a2b
 80168d8:	08016a3d 	.word	0x08016a3d
 80168dc:	08016a4f 	.word	0x08016a4f
 80168e0:	08016a61 	.word	0x08016a61
 80168e4:	08016a95 	.word	0x08016a95
 80168e8:	08016a73 	.word	0x08016a73
 80168ec:	08016ab7 	.word	0x08016ab7
 80168f0:	08016ac3 	.word	0x08016ac3
 80168f4:	08016acd 	.word	0x08016acd
 80168f8:	08016ad7 	.word	0x08016ad7
 80168fc:	08016ae1 	.word	0x08016ae1
 8016900:	08016aeb 	.word	0x08016aeb
 8016904:	08016af5 	.word	0x08016af5
 8016908:	08016b21 	.word	0x08016b21
 801690c:	08016b2d 	.word	0x08016b2d
 8016910:	08016b45 	.word	0x08016b45
 8016914:	08016b39 	.word	0x08016b39
 8016918:	08016b51 	.word	0x08016b51
 801691c:	08016b5b 	.word	0x08016b5b
 8016920:	08016b67 	.word	0x08016b67
 8016924:	08016b83 	.word	0x08016b83
 8016928:	08016b73 	.word	0x08016b73
 801692c:	08016b7b 	.word	0x08016b7b
 8016930:	08016bf7 	.word	0x08016bf7
 8016934:	08016b8f 	.word	0x08016b8f
 8016938:	08016bf7 	.word	0x08016bf7
 801693c:	08016bf7 	.word	0x08016bf7
 8016940:	08016bf7 	.word	0x08016bf7
 8016944:	08016bf7 	.word	0x08016bf7
 8016948:	08016bf7 	.word	0x08016bf7
 801694c:	08016bf7 	.word	0x08016bf7
 8016950:	08016bf7 	.word	0x08016bf7
 8016954:	08016bf7 	.word	0x08016bf7
 8016958:	08016bf7 	.word	0x08016bf7
 801695c:	08016bf7 	.word	0x08016bf7
 8016960:	08016bf7 	.word	0x08016bf7
 8016964:	08016bf7 	.word	0x08016bf7
 8016968:	08016bf7 	.word	0x08016bf7
 801696c:	08016bf7 	.word	0x08016bf7
 8016970:	08016bf7 	.word	0x08016bf7
 8016974:	08016ba3 	.word	0x08016ba3
 8016978:	08016baf 	.word	0x08016baf
 801697c:	08016bbb 	.word	0x08016bbb
 8016980:	08016bc7 	.word	0x08016bc7
 8016984:	08016bd3 	.word	0x08016bd3
 8016988:	08016bdf 	.word	0x08016bdf
 801698c:	08016beb 	.word	0x08016beb
 8016990:	08016bf1 	.word	0x08016bf1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8016994:	4b9d      	ldr	r3, [pc, #628]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016996:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	711a      	strb	r2, [r3, #4]
            break;
 801699e:	e130      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80169a0:	4b9a      	ldr	r3, [pc, #616]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169a2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	711a      	strb	r2, [r3, #4]
            break;
 80169aa:	e12a      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7f9 fe07 	bl	80105c4 <SecureElementGetDevEui>
            break;
 80169b6:	e124      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	4618      	mov	r0, r3
 80169be:	f7f9 fe31 	bl	8010624 <SecureElementGetJoinEui>
            break;
 80169c2:	e11e      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80169c4:	4b91      	ldr	r3, [pc, #580]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169c6:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	711a      	strb	r2, [r3, #4]
            break;
 80169ce:	e118      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80169d0:	4b8e      	ldr	r3, [pc, #568]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	605a      	str	r2, [r3, #4]
            break;
 80169da:	e112      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80169dc:	4b8b      	ldr	r3, [pc, #556]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169de:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	3304      	adds	r3, #4
 80169e6:	4619      	mov	r1, r3
 80169e8:	4610      	mov	r0, r2
 80169ea:	f7f9 fe4d 	bl	8010688 <SecureElementGetDevAddr>
            break;
 80169ee:	e108      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80169f0:	4b86      	ldr	r3, [pc, #536]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169f2:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	711a      	strb	r2, [r3, #4]
            break;
 80169fa:	e102      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80169fc:	4b83      	ldr	r3, [pc, #524]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80169fe:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	711a      	strb	r2, [r3, #4]
            break;
 8016a06:	e0fc      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8016a08:	231c      	movs	r3, #28
 8016a0a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016a12:	f107 0210 	add.w	r2, r7, #16
 8016a16:	4611      	mov	r1, r2
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f004 ff3b 	bl	801b894 <RegionGetPhyParam>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8016a22:	68fa      	ldr	r2, [r7, #12]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	605a      	str	r2, [r3, #4]
            break;
 8016a28:	e0eb      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	4a77      	ldr	r2, [pc, #476]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a2e:	3304      	adds	r3, #4
 8016a30:	326c      	adds	r2, #108	@ 0x6c
 8016a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a36:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016a3a:	e0e2      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	4a73      	ldr	r2, [pc, #460]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a40:	3304      	adds	r3, #4
 8016a42:	32b4      	adds	r2, #180	@ 0xb4
 8016a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a48:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016a4c:	e0d9      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	4a6e      	ldr	r2, [pc, #440]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a52:	3304      	adds	r3, #4
 8016a54:	3274      	adds	r2, #116	@ 0x74
 8016a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a5a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016a5e:	e0d0      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4a6a      	ldr	r2, [pc, #424]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a64:	3304      	adds	r3, #4
 8016a66:	32bc      	adds	r2, #188	@ 0xbc
 8016a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a6c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016a70:	e0c7      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8016a72:	231a      	movs	r3, #26
 8016a74:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016a76:	4b65      	ldr	r3, [pc, #404]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016a7c:	f107 0210 	add.w	r2, r7, #16
 8016a80:	4611      	mov	r1, r2
 8016a82:	4618      	mov	r0, r3
 8016a84:	f004 ff06 	bl	801b894 <RegionGetPhyParam>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8016a8c:	68fa      	ldr	r2, [r7, #12]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	605a      	str	r2, [r3, #4]
            break;
 8016a92:	e0b6      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8016a94:	2319      	movs	r3, #25
 8016a96:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016a98:	4b5c      	ldr	r3, [pc, #368]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016a9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016a9e:	f107 0210 	add.w	r2, r7, #16
 8016aa2:	4611      	mov	r1, r2
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f004 fef5 	bl	801b894 <RegionGetPhyParam>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	605a      	str	r2, [r3, #4]
            break;
 8016ab4:	e0a5      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8016ab6:	4b55      	ldr	r3, [pc, #340]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ab8:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	711a      	strb	r2, [r3, #4]
            break;
 8016ac0:	e09f      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8016ac2:	4b52      	ldr	r3, [pc, #328]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	605a      	str	r2, [r3, #4]
            break;
 8016aca:	e09a      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8016acc:	4b4f      	ldr	r3, [pc, #316]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ace:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	605a      	str	r2, [r3, #4]
            break;
 8016ad4:	e095      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8016ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	605a      	str	r2, [r3, #4]
            break;
 8016ade:	e090      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8016ae0:	4b4a      	ldr	r3, [pc, #296]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ae2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	605a      	str	r2, [r3, #4]
            break;
 8016ae8:	e08b      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8016aea:	4b48      	ldr	r3, [pc, #288]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016aec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	605a      	str	r2, [r3, #4]
            break;
 8016af2:	e086      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8016af4:	2302      	movs	r3, #2
 8016af6:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016af8:	4b44      	ldr	r3, [pc, #272]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016afa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8016afe:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016b00:	4b42      	ldr	r3, [pc, #264]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016b06:	f107 0210 	add.w	r2, r7, #16
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f004 fec1 	bl	801b894 <RegionGetPhyParam>
 8016b12:	4603      	mov	r3, r0
 8016b14:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	b25a      	sxtb	r2, r3
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	711a      	strb	r2, [r3, #4]
            break;
 8016b1e:	e070      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8016b20:	4b3a      	ldr	r3, [pc, #232]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b22:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	711a      	strb	r2, [r3, #4]
            break;
 8016b2a:	e06a      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8016b2c:	4b37      	ldr	r3, [pc, #220]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b2e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	711a      	strb	r2, [r3, #4]
            break;
 8016b36:	e064      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8016b38:	4b34      	ldr	r3, [pc, #208]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b3a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	711a      	strb	r2, [r3, #4]
            break;
 8016b42:	e05e      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8016b44:	4b31      	ldr	r3, [pc, #196]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b46:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	711a      	strb	r2, [r3, #4]
            break;
 8016b4e:	e058      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8016b50:	4b2e      	ldr	r3, [pc, #184]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	605a      	str	r2, [r3, #4]
            break;
 8016b58:	e053      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8016b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b5c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	711a      	strb	r2, [r3, #4]
            break;
 8016b64:	e04d      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8016b66:	4b29      	ldr	r3, [pc, #164]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b68:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	605a      	str	r2, [r3, #4]
            break;
 8016b70:	e047      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	4a25      	ldr	r2, [pc, #148]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b76:	605a      	str	r2, [r3, #4]
            break;
 8016b78:	e043      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	4a24      	ldr	r2, [pc, #144]	@ (8016c10 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8016b7e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8016b80:	e03f      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8016b82:	4b22      	ldr	r3, [pc, #136]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b84:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	605a      	str	r2, [r3, #4]
            break;
 8016b8c:	e039      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	4a1e      	ldr	r2, [pc, #120]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016b92:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8016b96:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8016b98:	687c      	ldr	r4, [r7, #4]
 8016b9a:	f005 f8a3 	bl	801bce4 <RegionGetVersion>
 8016b9e:	60a0      	str	r0, [r4, #8]
            break;
 8016ba0:	e02f      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8016ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016ba4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	605a      	str	r2, [r3, #4]
            break;
 8016bac:	e029      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8016bae:	4b17      	ldr	r3, [pc, #92]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016bb0:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	711a      	strb	r2, [r3, #4]
            break;
 8016bb8:	e023      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8016bba:	4b14      	ldr	r3, [pc, #80]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016bbc:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	809a      	strh	r2, [r3, #4]
            break;
 8016bc4:	e01d      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8016bc6:	4b11      	ldr	r3, [pc, #68]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016bc8:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	809a      	strh	r2, [r3, #4]
            break;
 8016bd0:	e017      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8016bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016bd4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	809a      	strh	r2, [r3, #4]
            break;
 8016bdc:	e011      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8016bde:	4b0b      	ldr	r3, [pc, #44]	@ (8016c0c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016be0:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	809a      	strh	r2, [r3, #4]
            break;
 8016be8:	e00b      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8016bea:	2318      	movs	r3, #24
 8016bec:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8016bee:	e008      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8016bf0:	2318      	movs	r3, #24
 8016bf2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8016bf4:	e005      	b.n	8016c02 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f002 fca6 	bl	8019548 <LoRaMacClassBMibGetRequestConfirm>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	75fb      	strb	r3, [r7, #23]
            break;
 8016c00:	bf00      	nop
        }
    }
    return status;
 8016c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c04:	4618      	mov	r0, r3
 8016c06:	371c      	adds	r7, #28
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd90      	pop	{r4, r7, pc}
 8016c0c:	200010a8 	.word	0x200010a8
 8016c10:	20001674 	.word	0x20001674

08016c14 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b086      	sub	sp, #24
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016c26:	2303      	movs	r3, #3
 8016c28:	e396      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8016c2a:	4bbd      	ldr	r3, [pc, #756]	@ (8016f20 <LoRaMacMibSetRequestConfirm+0x30c>)
 8016c2c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8016c30:	f003 0302 	and.w	r3, r3, #2
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d001      	beq.n	8016c3c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	e38d      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	2b41      	cmp	r3, #65	@ 0x41
 8016c42:	f200 835d 	bhi.w	8017300 <LoRaMacMibSetRequestConfirm+0x6ec>
 8016c46:	a201      	add	r2, pc, #4	@ (adr r2, 8016c4c <LoRaMacMibSetRequestConfirm+0x38>)
 8016c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c4c:	08016d55 	.word	0x08016d55
 8016c50:	08016d65 	.word	0x08016d65
 8016c54:	08016d7f 	.word	0x08016d7f
 8016c58:	08016d97 	.word	0x08016d97
 8016c5c:	08016daf 	.word	0x08016daf
 8016c60:	08016dbb 	.word	0x08016dbb
 8016c64:	08016dc7 	.word	0x08016dc7
 8016c68:	08016df1 	.word	0x08016df1
 8016c6c:	08016e17 	.word	0x08016e17
 8016c70:	08016e3d 	.word	0x08016e3d
 8016c74:	08016e63 	.word	0x08016e63
 8016c78:	08016e89 	.word	0x08016e89
 8016c7c:	08016eaf 	.word	0x08016eaf
 8016c80:	08016ed5 	.word	0x08016ed5
 8016c84:	08016efb 	.word	0x08016efb
 8016c88:	08016f29 	.word	0x08016f29
 8016c8c:	08016f49 	.word	0x08016f49
 8016c90:	08017301 	.word	0x08017301
 8016c94:	08016f55 	.word	0x08016f55
 8016c98:	08016fc5 	.word	0x08016fc5
 8016c9c:	08017005 	.word	0x08017005
 8016ca0:	08017067 	.word	0x08017067
 8016ca4:	080170d7 	.word	0x080170d7
 8016ca8:	080170a7 	.word	0x080170a7
 8016cac:	08017107 	.word	0x08017107
 8016cb0:	08017129 	.word	0x08017129
 8016cb4:	08017133 	.word	0x08017133
 8016cb8:	0801713d 	.word	0x0801713d
 8016cbc:	08017147 	.word	0x08017147
 8016cc0:	08017151 	.word	0x08017151
 8016cc4:	08017301 	.word	0x08017301
 8016cc8:	0801715b 	.word	0x0801715b
 8016ccc:	0801718d 	.word	0x0801718d
 8016cd0:	08017201 	.word	0x08017201
 8016cd4:	080171c7 	.word	0x080171c7
 8016cd8:	08017233 	.word	0x08017233
 8016cdc:	08017249 	.word	0x08017249
 8016ce0:	08017261 	.word	0x08017261
 8016ce4:	0801726d 	.word	0x0801726d
 8016ce8:	08017279 	.word	0x08017279
 8016cec:	08017301 	.word	0x08017301
 8016cf0:	08017283 	.word	0x08017283
 8016cf4:	08017301 	.word	0x08017301
 8016cf8:	08017301 	.word	0x08017301
 8016cfc:	08017301 	.word	0x08017301
 8016d00:	08017301 	.word	0x08017301
 8016d04:	08017301 	.word	0x08017301
 8016d08:	08017301 	.word	0x08017301
 8016d0c:	08017301 	.word	0x08017301
 8016d10:	08017301 	.word	0x08017301
 8016d14:	08017301 	.word	0x08017301
 8016d18:	08017301 	.word	0x08017301
 8016d1c:	08017301 	.word	0x08017301
 8016d20:	08017301 	.word	0x08017301
 8016d24:	08017301 	.word	0x08017301
 8016d28:	08017301 	.word	0x08017301
 8016d2c:	08017301 	.word	0x08017301
 8016d30:	08017301 	.word	0x08017301
 8016d34:	080172ad 	.word	0x080172ad
 8016d38:	080172b9 	.word	0x080172b9
 8016d3c:	080172c5 	.word	0x080172c5
 8016d40:	080172d1 	.word	0x080172d1
 8016d44:	080172dd 	.word	0x080172dd
 8016d48:	080172e9 	.word	0x080172e9
 8016d4c:	080172f5 	.word	0x080172f5
 8016d50:	080172fb 	.word	0x080172fb
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	791b      	ldrb	r3, [r3, #4]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7fd faaf 	bl	80142bc <SwitchClass>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	75fb      	strb	r3, [r7, #23]
            break;
 8016d62:	e2ee      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	791b      	ldrb	r3, [r3, #4]
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d005      	beq.n	8016d78 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	791a      	ldrb	r2, [r3, #4]
 8016d70:	4b6c      	ldr	r3, [pc, #432]	@ (8016f24 <LoRaMacMibSetRequestConfirm+0x310>)
 8016d72:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016d76:	e2e4      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016d78:	2303      	movs	r3, #3
 8016d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8016d7c:	e2e1      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	685b      	ldr	r3, [r3, #4]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7f9 fc06 	bl	8010594 <SecureElementSetDevEui>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 82be 	beq.w	801730c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016d90:	2303      	movs	r3, #3
 8016d92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016d94:	e2ba      	b.n	801730c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7f9 fc2a 	bl	80105f4 <SecureElementSetJoinEui>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	f000 82b4 	beq.w	8017310 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016da8:	2303      	movs	r3, #3
 8016daa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016dac:	e2b0      	b.n	8017310 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	791a      	ldrb	r2, [r3, #4]
 8016db2:	4b5c      	ldr	r3, [pc, #368]	@ (8016f24 <LoRaMacMibSetRequestConfirm+0x310>)
 8016db4:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8016db8:	e2c3      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	4a59      	ldr	r2, [pc, #356]	@ (8016f24 <LoRaMacMibSetRequestConfirm+0x310>)
 8016dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8016dc4:	e2bd      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8016dc6:	4b57      	ldr	r3, [pc, #348]	@ (8016f24 <LoRaMacMibSetRequestConfirm+0x310>)
 8016dc8:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	4610      	mov	r0, r2
 8016dd4:	f7f9 fc3e 	bl	8010654 <SecureElementSetDevAddr>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d002      	beq.n	8016de4 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016dde:	2303      	movs	r3, #3
 8016de0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8016de2:	e2ae      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	4a4e      	ldr	r2, [pc, #312]	@ (8016f24 <LoRaMacMibSetRequestConfirm+0x310>)
 8016dea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8016dee:	e2a8      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00b      	beq.n	8016e10 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	2000      	movs	r0, #0
 8016e00:	f003 ff54 	bl	801acac <LoRaMacCryptoSetKey>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	f000 8284 	beq.w	8017314 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016e0c:	2311      	movs	r3, #17
 8016e0e:	e2a3      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e10:	2303      	movs	r3, #3
 8016e12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016e14:	e27e      	b.n	8017314 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	685b      	ldr	r3, [r3, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d00b      	beq.n	8016e36 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	4619      	mov	r1, r3
 8016e24:	2001      	movs	r0, #1
 8016e26:	f003 ff41 	bl	801acac <LoRaMacCryptoSetKey>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f000 8273 	beq.w	8017318 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016e32:	2311      	movs	r3, #17
 8016e34:	e290      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e36:	2303      	movs	r3, #3
 8016e38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016e3a:	e26d      	b.n	8017318 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00b      	beq.n	8016e5c <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	4619      	mov	r1, r3
 8016e4a:	2008      	movs	r0, #8
 8016e4c:	f003 ff2e 	bl	801acac <LoRaMacCryptoSetKey>
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f000 8262 	beq.w	801731c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016e58:	2311      	movs	r3, #17
 8016e5a:	e27d      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e5c:	2303      	movs	r3, #3
 8016e5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016e60:	e25c      	b.n	801731c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00b      	beq.n	8016e82 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	2009      	movs	r0, #9
 8016e72:	f003 ff1b 	bl	801acac <LoRaMacCryptoSetKey>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f000 8251 	beq.w	8017320 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016e7e:	2311      	movs	r3, #17
 8016e80:	e26a      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e82:	2303      	movs	r3, #3
 8016e84:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016e86:	e24b      	b.n	8017320 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d00b      	beq.n	8016ea8 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	4619      	mov	r1, r3
 8016e96:	200c      	movs	r0, #12
 8016e98:	f003 ff08 	bl	801acac <LoRaMacCryptoSetKey>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	f000 8240 	beq.w	8017324 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016ea4:	2311      	movs	r3, #17
 8016ea6:	e257      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ea8:	2303      	movs	r3, #3
 8016eaa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016eac:	e23a      	b.n	8017324 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d00b      	beq.n	8016ece <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	4619      	mov	r1, r3
 8016ebc:	200d      	movs	r0, #13
 8016ebe:	f003 fef5 	bl	801acac <LoRaMacCryptoSetKey>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	f000 822f 	beq.w	8017328 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016eca:	2311      	movs	r3, #17
 8016ecc:	e244      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ece:	2303      	movs	r3, #3
 8016ed0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016ed2:	e229      	b.n	8017328 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d00b      	beq.n	8016ef4 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	200e      	movs	r0, #14
 8016ee4:	f003 fee2 	bl	801acac <LoRaMacCryptoSetKey>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f000 821e 	beq.w	801732c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016ef0:	2311      	movs	r3, #17
 8016ef2:	e231      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ef4:	2303      	movs	r3, #3
 8016ef6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016ef8:	e218      	b.n	801732c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d00b      	beq.n	8016f1a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	4619      	mov	r1, r3
 8016f08:	200f      	movs	r0, #15
 8016f0a:	f003 fecf 	bl	801acac <LoRaMacCryptoSetKey>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f000 820d 	beq.w	8017330 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016f16:	2311      	movs	r3, #17
 8016f18:	e21e      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016f1a:	2303      	movs	r3, #3
 8016f1c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016f1e:	e207      	b.n	8017330 <LoRaMacMibSetRequestConfirm+0x71c>
 8016f20:	20000b8c 	.word	0x20000b8c
 8016f24:	200010a8 	.word	0x200010a8
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	791a      	ldrb	r2, [r3, #4]
 8016f2c:	4bb2      	ldr	r3, [pc, #712]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f2e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8016f32:	4bb2      	ldr	r3, [pc, #712]	@ (80171fc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8016f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016f36:	4ab0      	ldr	r2, [pc, #704]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f38:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	4798      	blx	r3
            Radio.Sleep( );
 8016f40:	4bae      	ldr	r3, [pc, #696]	@ (80171fc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8016f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f44:	4798      	blx	r3
            break;
 8016f46:	e1fc      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	791a      	ldrb	r2, [r3, #4]
 8016f4c:	4baa      	ldr	r3, [pc, #680]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f4e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8016f52:	e1f6      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	7a1b      	ldrb	r3, [r3, #8]
 8016f58:	b25b      	sxtb	r3, r3
 8016f5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016f5c:	4ba6      	ldr	r3, [pc, #664]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f5e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8016f62:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8016f64:	4ba4      	ldr	r3, [pc, #656]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016f6a:	f107 0108 	add.w	r1, r7, #8
 8016f6e:	2207      	movs	r2, #7
 8016f70:	4618      	mov	r0, r3
 8016f72:	f004 fcdd 	bl	801b930 <RegionVerify>
 8016f76:	4603      	mov	r3, r0
 8016f78:	f083 0301 	eor.w	r3, r3, #1
 8016f7c:	b2db      	uxtb	r3, r3
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d002      	beq.n	8016f88 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016f82:	2303      	movs	r3, #3
 8016f84:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8016f86:	e1dc      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8016f8e:	4b9a      	ldr	r3, [pc, #616]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016f90:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016f94:	f107 0108 	add.w	r1, r7, #8
 8016f98:	2200      	movs	r2, #0
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f004 fcc8 	bl	801b930 <RegionVerify>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	f083 0301 	eor.w	r3, r3, #1
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d002      	beq.n	8016fb2 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016fac:	2303      	movs	r3, #3
 8016fae:	75fb      	strb	r3, [r7, #23]
            break;
 8016fb0:	e1c7      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8016fb2:	4b91      	ldr	r3, [pc, #580]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016fb4:	687a      	ldr	r2, [r7, #4]
 8016fb6:	336c      	adds	r3, #108	@ 0x6c
 8016fb8:	3204      	adds	r2, #4
 8016fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fbe:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016fc2:	e1be      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	7a1b      	ldrb	r3, [r3, #8]
 8016fc8:	b25b      	sxtb	r3, r3
 8016fca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016fce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8016fd2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8016fd4:	4b88      	ldr	r3, [pc, #544]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016fd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016fda:	f107 0108 	add.w	r1, r7, #8
 8016fde:	2207      	movs	r2, #7
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f004 fca5 	bl	801b930 <RegionVerify>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d008      	beq.n	8016ffe <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8016fec:	4b82      	ldr	r3, [pc, #520]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	33b4      	adds	r3, #180	@ 0xb4
 8016ff2:	3204      	adds	r2, #4
 8016ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ff8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016ffc:	e1a1      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ffe:	2303      	movs	r3, #3
 8017000:	75fb      	strb	r3, [r7, #23]
            break;
 8017002:	e19e      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	7a1b      	ldrb	r3, [r3, #8]
 8017008:	b25b      	sxtb	r3, r3
 801700a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801700c:	4b7a      	ldr	r3, [pc, #488]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801700e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017012:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8017014:	4b78      	ldr	r3, [pc, #480]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017016:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801701a:	f107 0108 	add.w	r1, r7, #8
 801701e:	2207      	movs	r2, #7
 8017020:	4618      	mov	r0, r3
 8017022:	f004 fc85 	bl	801b930 <RegionVerify>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d019      	beq.n	8017060 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801702c:	4b72      	ldr	r3, [pc, #456]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	3374      	adds	r3, #116	@ 0x74
 8017032:	3204      	adds	r2, #4
 8017034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017038:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801703c:	4b6e      	ldr	r3, [pc, #440]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801703e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8017042:	2b02      	cmp	r3, #2
 8017044:	f040 8176 	bne.w	8017334 <LoRaMacMibSetRequestConfirm+0x720>
 8017048:	4b6b      	ldr	r3, [pc, #428]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801704a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801704e:	2b00      	cmp	r3, #0
 8017050:	f000 8170 	beq.w	8017334 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8017054:	4b69      	ldr	r3, [pc, #420]	@ (80171fc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8017056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017058:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801705a:	f7fe fc1d 	bl	8015898 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801705e:	e169      	b.n	8017334 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8017060:	2303      	movs	r3, #3
 8017062:	75fb      	strb	r3, [r7, #23]
            break;
 8017064:	e166      	b.n	8017334 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7a1b      	ldrb	r3, [r3, #8]
 801706a:	b25b      	sxtb	r3, r3
 801706c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801706e:	4b62      	ldr	r3, [pc, #392]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017070:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017074:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8017076:	4b60      	ldr	r3, [pc, #384]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017078:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801707c:	f107 0108 	add.w	r1, r7, #8
 8017080:	2207      	movs	r2, #7
 8017082:	4618      	mov	r0, r3
 8017084:	f004 fc54 	bl	801b930 <RegionVerify>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d008      	beq.n	80170a0 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801708e:	4b5a      	ldr	r3, [pc, #360]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017090:	687a      	ldr	r2, [r7, #4]
 8017092:	33bc      	adds	r3, #188	@ 0xbc
 8017094:	3204      	adds	r2, #4
 8017096:	e892 0003 	ldmia.w	r2, {r0, r1}
 801709a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801709e:	e150      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80170a0:	2303      	movs	r3, #3
 80170a2:	75fb      	strb	r3, [r7, #23]
            break;
 80170a4:	e14d      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	685b      	ldr	r3, [r3, #4]
 80170aa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80170ac:	2301      	movs	r3, #1
 80170ae:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80170b0:	4b51      	ldr	r3, [pc, #324]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80170b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80170b6:	f107 020c 	add.w	r2, r7, #12
 80170ba:	4611      	mov	r1, r2
 80170bc:	4618      	mov	r0, r3
 80170be:	f004 fc6f 	bl	801b9a0 <RegionChanMaskSet>
 80170c2:	4603      	mov	r3, r0
 80170c4:	f083 0301 	eor.w	r3, r3, #1
 80170c8:	b2db      	uxtb	r3, r3
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f000 8134 	beq.w	8017338 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80170d0:	2303      	movs	r3, #3
 80170d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80170d4:	e130      	b.n	8017338 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80170dc:	2300      	movs	r3, #0
 80170de:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80170e0:	4b45      	ldr	r3, [pc, #276]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80170e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80170e6:	f107 020c 	add.w	r2, r7, #12
 80170ea:	4611      	mov	r1, r2
 80170ec:	4618      	mov	r0, r3
 80170ee:	f004 fc57 	bl	801b9a0 <RegionChanMaskSet>
 80170f2:	4603      	mov	r3, r0
 80170f4:	f083 0301 	eor.w	r3, r3, #1
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f000 811e 	beq.w	801733c <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8017100:	2303      	movs	r3, #3
 8017102:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8017104:	e11a      	b.n	801733c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	791b      	ldrb	r3, [r3, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d009      	beq.n	8017122 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8017112:	2b0f      	cmp	r3, #15
 8017114:	d805      	bhi.n	8017122 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	791a      	ldrb	r2, [r3, #4]
 801711a:	4b37      	ldr	r3, [pc, #220]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801711c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8017120:	e10f      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8017122:	2303      	movs	r3, #3
 8017124:	75fb      	strb	r3, [r7, #23]
            break;
 8017126:	e10c      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	4a32      	ldr	r2, [pc, #200]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801712e:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8017130:	e107      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	4a30      	ldr	r2, [pc, #192]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017138:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801713a:	e102      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	4a2d      	ldr	r2, [pc, #180]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017142:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8017144:	e0fd      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	4a2b      	ldr	r2, [pc, #172]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801714c:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 801714e:	e0f8      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	685b      	ldr	r3, [r3, #4]
 8017154:	4a28      	ldr	r2, [pc, #160]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017156:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8017158:	e0f3      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017160:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8017162:	4b25      	ldr	r3, [pc, #148]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017164:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8017168:	f107 0108 	add.w	r1, r7, #8
 801716c:	2206      	movs	r2, #6
 801716e:	4618      	mov	r0, r3
 8017170:	f004 fbde 	bl	801b930 <RegionVerify>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d005      	beq.n	8017186 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801717a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801717e:	4b1e      	ldr	r3, [pc, #120]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017180:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8017184:	e0dd      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8017186:	2303      	movs	r3, #3
 8017188:	75fb      	strb	r3, [r7, #23]
            break;
 801718a:	e0da      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017192:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8017194:	4b18      	ldr	r3, [pc, #96]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8017196:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801719a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801719c:	4b16      	ldr	r3, [pc, #88]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801719e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80171a2:	f107 0108 	add.w	r1, r7, #8
 80171a6:	2205      	movs	r2, #5
 80171a8:	4618      	mov	r0, r3
 80171aa:	f004 fbc1 	bl	801b930 <RegionVerify>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d005      	beq.n	80171c0 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80171b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80171b8:	4b0f      	ldr	r3, [pc, #60]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80171ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80171be:	e0c0      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80171c0:	2303      	movs	r3, #3
 80171c2:	75fb      	strb	r3, [r7, #23]
            break;
 80171c4:	e0bd      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80171cc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80171ce:	4b0a      	ldr	r3, [pc, #40]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80171d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80171d4:	f107 0108 	add.w	r1, r7, #8
 80171d8:	220a      	movs	r2, #10
 80171da:	4618      	mov	r0, r3
 80171dc:	f004 fba8 	bl	801b930 <RegionVerify>
 80171e0:	4603      	mov	r3, r0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d005      	beq.n	80171f2 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80171e6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80171ea:	4b03      	ldr	r3, [pc, #12]	@ (80171f8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80171ec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80171f0:	e0a7      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80171f2:	2303      	movs	r3, #3
 80171f4:	75fb      	strb	r3, [r7, #23]
            break;
 80171f6:	e0a4      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
 80171f8:	200010a8 	.word	0x200010a8
 80171fc:	08029818 	.word	0x08029818
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017206:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8017208:	4b55      	ldr	r3, [pc, #340]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 801720a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801720e:	f107 0108 	add.w	r1, r7, #8
 8017212:	2209      	movs	r2, #9
 8017214:	4618      	mov	r0, r3
 8017216:	f004 fb8b 	bl	801b930 <RegionVerify>
 801721a:	4603      	mov	r3, r0
 801721c:	2b00      	cmp	r3, #0
 801721e:	d005      	beq.n	801722c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8017220:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8017224:	4b4e      	ldr	r3, [pc, #312]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017226:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801722a:	e08a      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801722c:	2303      	movs	r3, #3
 801722e:	75fb      	strb	r3, [r7, #23]
            break;
 8017230:	e087      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	685b      	ldr	r3, [r3, #4]
 8017236:	4a4a      	ldr	r2, [pc, #296]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801723c:	4b48      	ldr	r3, [pc, #288]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 801723e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017242:	4a47      	ldr	r2, [pc, #284]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017244:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8017246:	e07c      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	791a      	ldrb	r2, [r3, #4]
 801724c:	4b44      	ldr	r3, [pc, #272]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 801724e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8017252:	4b43      	ldr	r3, [pc, #268]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017254:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8017258:	4b41      	ldr	r3, [pc, #260]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 801725a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 801725e:	e070      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	4a3e      	ldr	r2, [pc, #248]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017266:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 801726a:	e06a      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	4a3b      	ldr	r2, [pc, #236]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 8017272:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8017276:	e064      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8017278:	f7fe fd40 	bl	8015cfc <RestoreNvmData>
 801727c:	4603      	mov	r3, r0
 801727e:	75fb      	strb	r3, [r7, #23]
            break;
 8017280:	e05f      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	799b      	ldrb	r3, [r3, #6]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d80d      	bhi.n	80172a6 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801728a:	4a35      	ldr	r2, [pc, #212]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6858      	ldr	r0, [r3, #4]
 8017298:	f003 fc6a 	bl	801ab70 <LoRaMacCryptoSetLrWanVersion>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d04e      	beq.n	8017340 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80172a2:	2311      	movs	r3, #17
 80172a4:	e058      	b.n	8017358 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80172a6:	2303      	movs	r3, #3
 80172a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80172aa:	e049      	b.n	8017340 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	4a2b      	ldr	r2, [pc, #172]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80172b6:	e044      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	791a      	ldrb	r2, [r3, #4]
 80172bc:	4b28      	ldr	r3, [pc, #160]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172be:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 80172c2:	e03e      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	889a      	ldrh	r2, [r3, #4]
 80172c8:	4b25      	ldr	r3, [pc, #148]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172ca:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 80172ce:	e038      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	889a      	ldrh	r2, [r3, #4]
 80172d4:	4b22      	ldr	r3, [pc, #136]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172d6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 80172da:	e032      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	889a      	ldrh	r2, [r3, #4]
 80172e0:	4b1f      	ldr	r3, [pc, #124]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172e2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 80172e6:	e02c      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	889a      	ldrh	r2, [r3, #4]
 80172ec:	4b1c      	ldr	r3, [pc, #112]	@ (8017360 <LoRaMacMibSetRequestConfirm+0x74c>)
 80172ee:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80172f2:	e026      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80172f4:	2318      	movs	r3, #24
 80172f6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80172f8:	e023      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80172fa:	2318      	movs	r3, #24
 80172fc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80172fe:	e020      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f002 f949 	bl	8019598 <LoRaMacMibClassBSetRequestConfirm>
 8017306:	4603      	mov	r3, r0
 8017308:	75fb      	strb	r3, [r7, #23]
            break;
 801730a:	e01a      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801730c:	bf00      	nop
 801730e:	e018      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017310:	bf00      	nop
 8017312:	e016      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017314:	bf00      	nop
 8017316:	e014      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017318:	bf00      	nop
 801731a:	e012      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801731c:	bf00      	nop
 801731e:	e010      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017320:	bf00      	nop
 8017322:	e00e      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017324:	bf00      	nop
 8017326:	e00c      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017328:	bf00      	nop
 801732a:	e00a      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801732c:	bf00      	nop
 801732e:	e008      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017330:	bf00      	nop
 8017332:	e006      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017334:	bf00      	nop
 8017336:	e004      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017338:	bf00      	nop
 801733a:	e002      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801733c:	bf00      	nop
 801733e:	e000      	b.n	8017342 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8017340:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8017342:	7dfb      	ldrb	r3, [r7, #23]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d106      	bne.n	8017356 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8017348:	4a06      	ldr	r2, [pc, #24]	@ (8017364 <LoRaMacMibSetRequestConfirm+0x750>)
 801734a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801734e:	f043 0320 	orr.w	r3, r3, #32
 8017352:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8017356:	7dfb      	ldrb	r3, [r7, #23]
}
 8017358:	4618      	mov	r0, r3
 801735a:	3718      	adds	r7, #24
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}
 8017360:	200010a8 	.word	0x200010a8
 8017364:	20000b8c 	.word	0x20000b8c

08017368 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b08a      	sub	sp, #40	@ 0x28
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017370:	2302      	movs	r3, #2
 8017372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8017376:	2300      	movs	r3, #0
 8017378:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d101      	bne.n	8017384 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017380:	2303      	movs	r3, #3
 8017382:	e17e      	b.n	8017682 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801738a:	f7fc fb79 	bl	8013a80 <LoRaMacIsBusy>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d001      	beq.n	8017398 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8017394:	2301      	movs	r3, #1
 8017396:	e174      	b.n	8017682 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8017398:	f003 f880 	bl	801a49c <LoRaMacConfirmQueueIsFull>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80173a2:	2301      	movs	r3, #1
 80173a4:	e16d      	b.n	8017682 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80173a6:	f003 f86d 	bl	801a484 <LoRaMacConfirmQueueGetCnt>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d104      	bne.n	80173ba <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80173b0:	2214      	movs	r2, #20
 80173b2:	2100      	movs	r1, #0
 80173b4:	48b5      	ldr	r0, [pc, #724]	@ (801768c <LoRaMacMlmeRequest+0x324>)
 80173b6:	f008 f969 	bl	801f68c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80173ba:	4bb5      	ldr	r3, [pc, #724]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 80173bc:	2201      	movs	r2, #1
 80173be:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80173c2:	4ab3      	ldr	r2, [pc, #716]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 80173c4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80173c8:	f043 0304 	orr.w	r3, r3, #4
 80173cc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80173d8:	2301      	movs	r3, #1
 80173da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80173de:	2300      	movs	r3, #0
 80173e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80173e4:	2300      	movs	r3, #0
 80173e6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	3b01      	subs	r3, #1
 80173f0:	2b0c      	cmp	r3, #12
 80173f2:	f200 811a 	bhi.w	801762a <LoRaMacMlmeRequest+0x2c2>
 80173f6:	a201      	add	r2, pc, #4	@ (adr r2, 80173fc <LoRaMacMlmeRequest+0x94>)
 80173f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173fc:	08017431 	.word	0x08017431
 8017400:	0801762b 	.word	0x0801762b
 8017404:	0801762b 	.word	0x0801762b
 8017408:	0801762b 	.word	0x0801762b
 801740c:	0801750f 	.word	0x0801750f
 8017410:	08017533 	.word	0x08017533
 8017414:	0801762b 	.word	0x0801762b
 8017418:	0801762b 	.word	0x0801762b
 801741c:	08017551 	.word	0x08017551
 8017420:	0801762b 	.word	0x0801762b
 8017424:	080175f9 	.word	0x080175f9
 8017428:	0801758d 	.word	0x0801758d
 801742c:	080175d7 	.word	0x080175d7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8017430:	4b97      	ldr	r3, [pc, #604]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 8017432:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8017436:	f003 0320 	and.w	r3, r3, #32
 801743a:	2b00      	cmp	r3, #0
 801743c:	d001      	beq.n	8017442 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801743e:	2301      	movs	r3, #1
 8017440:	e11f      	b.n	8017682 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	791b      	ldrb	r3, [r3, #4]
 8017446:	2b02      	cmp	r3, #2
 8017448:	d135      	bne.n	80174b6 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 801744a:	2000      	movs	r0, #0
 801744c:	f7fe f8b6 	bl	80155bc <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8017450:	4b90      	ldr	r3, [pc, #576]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 8017452:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	795b      	ldrb	r3, [r3, #5]
 801745a:	b25b      	sxtb	r3, r3
 801745c:	2200      	movs	r2, #0
 801745e:	4619      	mov	r1, r3
 8017460:	f004 fbae 	bl	801bbc0 <RegionAlternateDr>
 8017464:	4603      	mov	r3, r0
 8017466:	461a      	mov	r2, r3
 8017468:	4b8a      	ldr	r3, [pc, #552]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 801746a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8017474:	4b87      	ldr	r3, [pc, #540]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 8017476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801747a:	2307      	movs	r3, #7
 801747c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8017480:	20ff      	movs	r0, #255	@ 0xff
 8017482:	f7fd fe1f 	bl	80150c4 <SendReJoinReq>
 8017486:	4603      	mov	r3, r0
 8017488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 801748c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017490:	2b00      	cmp	r3, #0
 8017492:	f000 80cc 	beq.w	801762e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8017496:	4b7f      	ldr	r3, [pc, #508]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 8017498:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	795b      	ldrb	r3, [r3, #5]
 80174a0:	b25b      	sxtb	r3, r3
 80174a2:	2201      	movs	r2, #1
 80174a4:	4619      	mov	r1, r3
 80174a6:	f004 fb8b 	bl	801bbc0 <RegionAlternateDr>
 80174aa:	4603      	mov	r3, r0
 80174ac:	461a      	mov	r2, r3
 80174ae:	4b79      	ldr	r3, [pc, #484]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 80174b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80174b4:	e0bb      	b.n	801762e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	791b      	ldrb	r3, [r3, #4]
 80174ba:	2b01      	cmp	r3, #1
 80174bc:	f040 80b7 	bne.w	801762e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80174c0:	4b74      	ldr	r3, [pc, #464]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 80174c2:	2200      	movs	r2, #0
 80174c4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80174c8:	2302      	movs	r3, #2
 80174ca:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80174cc:	4b71      	ldr	r3, [pc, #452]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 80174ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80174d2:	f107 020c 	add.w	r2, r7, #12
 80174d6:	4611      	mov	r1, r2
 80174d8:	4618      	mov	r0, r3
 80174da:	f004 fa12 	bl	801b902 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	791a      	ldrb	r2, [r3, #4]
 80174e2:	4b6c      	ldr	r3, [pc, #432]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 80174e4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80174e8:	2300      	movs	r3, #0
 80174ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80174ee:	2301      	movs	r3, #1
 80174f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80174f4:	f7fe fdb2 	bl	801605c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80174f8:	4a65      	ldr	r2, [pc, #404]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 80174fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80174fe:	f043 0310 	orr.w	r3, r3, #16
 8017502:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 8017506:	2300      	movs	r3, #0
 8017508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801750c:	e08f      	b.n	801762e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801750e:	2300      	movs	r3, #0
 8017510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8017514:	f107 031c 	add.w	r3, r7, #28
 8017518:	2200      	movs	r2, #0
 801751a:	4619      	mov	r1, r3
 801751c:	2002      	movs	r0, #2
 801751e:	f002 fc0d 	bl	8019d3c <LoRaMacCommandsAddCmd>
 8017522:	4603      	mov	r3, r0
 8017524:	2b00      	cmp	r3, #0
 8017526:	f000 8084 	beq.w	8017632 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801752a:	2313      	movs	r3, #19
 801752c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8017530:	e07f      	b.n	8017632 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	8898      	ldrh	r0, [r3, #4]
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6899      	ldr	r1, [r3, #8]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017540:	b2db      	uxtb	r3, r3
 8017542:	461a      	mov	r2, r3
 8017544:	f7fe fbba 	bl	8015cbc <SetTxContinuousWave>
 8017548:	4603      	mov	r3, r0
 801754a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801754e:	e077      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8017550:	2300      	movs	r3, #0
 8017552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8017556:	f107 0308 	add.w	r3, r7, #8
 801755a:	4619      	mov	r1, r3
 801755c:	200d      	movs	r0, #13
 801755e:	f002 fc6d 	bl	8019e3c <LoRaMacCommandsGetCmd>
 8017562:	4603      	mov	r3, r0
 8017564:	2b00      	cmp	r3, #0
 8017566:	d103      	bne.n	8017570 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8017568:	2300      	movs	r3, #0
 801756a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801756e:	e062      	b.n	8017636 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8017570:	f107 031c 	add.w	r3, r7, #28
 8017574:	2200      	movs	r2, #0
 8017576:	4619      	mov	r1, r3
 8017578:	200d      	movs	r0, #13
 801757a:	f002 fbdf 	bl	8019d3c <LoRaMacCommandsAddCmd>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d058      	beq.n	8017636 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8017584:	2313      	movs	r3, #19
 8017586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801758a:	e054      	b.n	8017636 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801758c:	4b41      	ldr	r3, [pc, #260]	@ (8017694 <LoRaMacMlmeRequest+0x32c>)
 801758e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8017592:	2b00      	cmp	r3, #0
 8017594:	d151      	bne.n	801763a <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	791b      	ldrb	r3, [r3, #4]
 801759a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	791b      	ldrb	r3, [r3, #4]
 80175a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	4618      	mov	r0, r3
 80175aa:	f001 ff25 	bl	80193f8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80175ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80175b2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80175b4:	2300      	movs	r3, #0
 80175b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80175ba:	f107 031c 	add.w	r3, r7, #28
 80175be:	2201      	movs	r2, #1
 80175c0:	4619      	mov	r1, r3
 80175c2:	2010      	movs	r0, #16
 80175c4:	f002 fbba 	bl	8019d3c <LoRaMacCommandsAddCmd>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d035      	beq.n	801763a <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80175ce:	2313      	movs	r3, #19
 80175d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80175d4:	e031      	b.n	801763a <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80175d6:	2300      	movs	r3, #0
 80175d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80175dc:	f107 031c 	add.w	r3, r7, #28
 80175e0:	2200      	movs	r2, #0
 80175e2:	4619      	mov	r1, r3
 80175e4:	2012      	movs	r0, #18
 80175e6:	f002 fba9 	bl	8019d3c <LoRaMacCommandsAddCmd>
 80175ea:	4603      	mov	r3, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d026      	beq.n	801763e <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80175f0:	2313      	movs	r3, #19
 80175f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80175f6:	e022      	b.n	801763e <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80175f8:	2301      	movs	r3, #1
 80175fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80175fe:	f001 f805 	bl	801860c <LoRaMacClassBIsAcquisitionInProgress>
 8017602:	4603      	mov	r3, r0
 8017604:	f083 0301 	eor.w	r3, r3, #1
 8017608:	b2db      	uxtb	r3, r3
 801760a:	2b00      	cmp	r3, #0
 801760c:	d009      	beq.n	8017622 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801760e:	2000      	movs	r0, #0
 8017610:	f000 ffa6 	bl	8018560 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8017614:	2000      	movs	r0, #0
 8017616:	f001 f80f 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801761a:	2300      	movs	r3, #0
 801761c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8017620:	e00e      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8017622:	2301      	movs	r3, #1
 8017624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8017628:	e00a      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 801762a:	bf00      	nop
 801762c:	e008      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
            break;
 801762e:	bf00      	nop
 8017630:	e006      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
            break;
 8017632:	bf00      	nop
 8017634:	e004      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
            break;
 8017636:	bf00      	nop
 8017638:	e002      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
            break;
 801763a:	bf00      	nop
 801763c:	e000      	b.n	8017640 <LoRaMacMlmeRequest+0x2d8>
            break;
 801763e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8017640:	4b13      	ldr	r3, [pc, #76]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 8017642:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801764a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801764e:	2b00      	cmp	r3, #0
 8017650:	d010      	beq.n	8017674 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8017652:	f002 ff17 	bl	801a484 <LoRaMacConfirmQueueGetCnt>
 8017656:	4603      	mov	r3, r0
 8017658:	2b00      	cmp	r3, #0
 801765a:	d110      	bne.n	801767e <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 801765c:	4b0c      	ldr	r3, [pc, #48]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 801765e:	2200      	movs	r2, #0
 8017660:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8017664:	4a0a      	ldr	r2, [pc, #40]	@ (8017690 <LoRaMacMlmeRequest+0x328>)
 8017666:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801766a:	f36f 0382 	bfc	r3, #2, #1
 801766e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8017672:	e004      	b.n	801767e <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8017674:	f107 0320 	add.w	r3, r7, #32
 8017678:	4618      	mov	r0, r3
 801767a:	f002 fdaf 	bl	801a1dc <LoRaMacConfirmQueueAdd>
    }
    return status;
 801767e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017682:	4618      	mov	r0, r3
 8017684:	3728      	adds	r7, #40	@ 0x28
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	20000fe0 	.word	0x20000fe0
 8017690:	20000b8c 	.word	0x20000b8c
 8017694:	200010a8 	.word	0x200010a8

08017698 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8017698:	b5b0      	push	{r4, r5, r7, lr}
 801769a:	b092      	sub	sp, #72	@ 0x48
 801769c:	af02      	add	r7, sp, #8
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	460b      	mov	r3, r1
 80176a2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80176a4:	2302      	movs	r3, #2
 80176a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 80176b0:	2300      	movs	r3, #0
 80176b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80176b4:	2300      	movs	r3, #0
 80176b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80176ba:	2300      	movs	r3, #0
 80176bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d101      	bne.n	80176ca <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80176c6:	2303      	movs	r3, #3
 80176c8:	e113      	b.n	80178f2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2200      	movs	r2, #0
 80176ce:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80176d0:	f7fc f9d6 	bl	8013a80 <LoRaMacIsBusy>
 80176d4:	4603      	mov	r3, r0
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d001      	beq.n	80176de <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80176da:	2301      	movs	r3, #1
 80176dc:	e109      	b.n	80178f2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f107 040c 	add.w	r4, r7, #12
 80176e4:	461d      	mov	r5, r3
 80176e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80176e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80176ea:	682b      	ldr	r3, [r5, #0]
 80176ec:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80176ee:	2300      	movs	r3, #0
 80176f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80176f4:	2214      	movs	r2, #20
 80176f6:	2100      	movs	r1, #0
 80176f8:	4880      	ldr	r0, [pc, #512]	@ (80178fc <LoRaMacMcpsRequest+0x264>)
 80176fa:	f007 ffc7 	bl	801f68c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80176fe:	4b80      	ldr	r3, [pc, #512]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 8017700:	2201      	movs	r2, #1
 8017702:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8017706:	4b7f      	ldr	r3, [pc, #508]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017708:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801770c:	2b02      	cmp	r3, #2
 801770e:	d111      	bne.n	8017734 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8017710:	4b7c      	ldr	r3, [pc, #496]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017712:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8017716:	2b02      	cmp	r3, #2
 8017718:	d10c      	bne.n	8017734 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801771a:	4b7a      	ldr	r3, [pc, #488]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 801771c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8017720:	f083 0301 	eor.w	r3, r3, #1
 8017724:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8017726:	2b00      	cmp	r3, #0
 8017728:	d004      	beq.n	8017734 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801772a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801772c:	2b00      	cmp	r3, #0
 801772e:	d101      	bne.n	8017734 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8017730:	2301      	movs	r3, #1
 8017732:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8017734:	7b3b      	ldrb	r3, [r7, #12]
 8017736:	2b03      	cmp	r3, #3
 8017738:	d030      	beq.n	801779c <LoRaMacMcpsRequest+0x104>
 801773a:	2b03      	cmp	r3, #3
 801773c:	dc3f      	bgt.n	80177be <LoRaMacMcpsRequest+0x126>
 801773e:	2b00      	cmp	r3, #0
 8017740:	d002      	beq.n	8017748 <LoRaMacMcpsRequest+0xb0>
 8017742:	2b01      	cmp	r3, #1
 8017744:	d015      	beq.n	8017772 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8017746:	e03a      	b.n	80177be <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8017748:	2301      	movs	r3, #1
 801774a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801774e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017752:	2202      	movs	r2, #2
 8017754:	f362 1347 	bfi	r3, r2, #5, #3
 8017758:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801775c:	7c3b      	ldrb	r3, [r7, #16]
 801775e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8017766:	8b3b      	ldrh	r3, [r7, #24]
 8017768:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801776a:	7ebb      	ldrb	r3, [r7, #26]
 801776c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8017770:	e026      	b.n	80177c0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8017772:	2301      	movs	r3, #1
 8017774:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8017778:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801777c:	2204      	movs	r2, #4
 801777e:	f362 1347 	bfi	r3, r2, #5, #3
 8017782:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8017786:	7c3b      	ldrb	r3, [r7, #16]
 8017788:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8017790:	8b3b      	ldrh	r3, [r7, #24]
 8017792:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8017794:	7ebb      	ldrb	r3, [r7, #26]
 8017796:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801779a:	e011      	b.n	80177c0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801779c:	2301      	movs	r3, #1
 801779e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80177a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80177a6:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80177aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80177b2:	8abb      	ldrh	r3, [r7, #20]
 80177b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80177b6:	7dbb      	ldrb	r3, [r7, #22]
 80177b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80177bc:	e000      	b.n	80177c0 <LoRaMacMcpsRequest+0x128>
            break;
 80177be:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80177c0:	2302      	movs	r3, #2
 80177c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80177c6:	4b4f      	ldr	r3, [pc, #316]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 80177c8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80177cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80177d0:	4b4c      	ldr	r3, [pc, #304]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 80177d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80177d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80177da:	4611      	mov	r1, r2
 80177dc:	4618      	mov	r0, r3
 80177de:	f004 f859 	bl	801b894 <RegionGetPhyParam>
 80177e2:	4603      	mov	r3, r0
 80177e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80177e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177e8:	b25b      	sxtb	r3, r3
 80177ea:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80177ee:	4293      	cmp	r3, r2
 80177f0:	bfb8      	it	lt
 80177f2:	4613      	movlt	r3, r2
 80177f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80177f8:	4b42      	ldr	r3, [pc, #264]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 80177fa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80177fe:	4a41      	ldr	r2, [pc, #260]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017800:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8017804:	4a3f      	ldr	r2, [pc, #252]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017806:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801780a:	4618      	mov	r0, r3
 801780c:	f7fc fad4 	bl	8013db8 <CheckForMinimumAbpDatarate>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d002      	beq.n	801781c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8017816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017818:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 801781c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017820:	2b00      	cmp	r3, #0
 8017822:	d05f      	beq.n	80178e4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8017824:	4b37      	ldr	r3, [pc, #220]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017826:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801782a:	f083 0301 	eor.w	r3, r3, #1
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b00      	cmp	r3, #0
 8017832:	d10e      	bne.n	8017852 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8017834:	4b33      	ldr	r3, [pc, #204]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017836:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801783a:	4a32      	ldr	r2, [pc, #200]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 801783c:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8017840:	4a30      	ldr	r2, [pc, #192]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017842:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8017846:	4618      	mov	r0, r3
 8017848:	f7fc fab6 	bl	8013db8 <CheckForMinimumAbpDatarate>
 801784c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801784e:	2b00      	cmp	r3, #0
 8017850:	d01c      	beq.n	801788c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8017852:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8017856:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801785a:	4b2a      	ldr	r3, [pc, #168]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 801785c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8017864:	4b27      	ldr	r3, [pc, #156]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017866:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801786a:	f107 0120 	add.w	r1, r7, #32
 801786e:	2205      	movs	r2, #5
 8017870:	4618      	mov	r0, r3
 8017872:	f004 f85d 	bl	801b930 <RegionVerify>
 8017876:	4603      	mov	r3, r0
 8017878:	2b00      	cmp	r3, #0
 801787a:	d005      	beq.n	8017888 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801787c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8017880:	4b20      	ldr	r3, [pc, #128]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 8017882:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8017886:	e001      	b.n	801788c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8017888:	2303      	movs	r3, #3
 801788a:	e032      	b.n	80178f2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801788c:	4b1d      	ldr	r3, [pc, #116]	@ (8017904 <LoRaMacMcpsRequest+0x26c>)
 801788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017892:	4a1b      	ldr	r2, [pc, #108]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 8017894:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8017898:	4611      	mov	r1, r2
 801789a:	4618      	mov	r0, r3
 801789c:	f7fc fb78 	bl	8013f90 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80178a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80178a2:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80178a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80178aa:	78fb      	ldrb	r3, [r7, #3]
 80178ac:	9300      	str	r3, [sp, #0]
 80178ae:	4613      	mov	r3, r2
 80178b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80178b2:	f7fd fb25 	bl	8014f00 <Send>
 80178b6:	4603      	mov	r3, r0
 80178b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80178bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d10b      	bne.n	80178dc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80178c4:	7b3a      	ldrb	r2, [r7, #12]
 80178c6:	4b0e      	ldr	r3, [pc, #56]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 80178c8:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80178cc:	4a0c      	ldr	r2, [pc, #48]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 80178ce:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80178d2:	f043 0301 	orr.w	r3, r3, #1
 80178d6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80178da:	e003      	b.n	80178e4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80178dc:	4b08      	ldr	r3, [pc, #32]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 80178de:	2200      	movs	r2, #0
 80178e0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80178e4:	4b06      	ldr	r3, [pc, #24]	@ (8017900 <LoRaMacMcpsRequest+0x268>)
 80178e6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	611a      	str	r2, [r3, #16]

    return status;
 80178ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3740      	adds	r7, #64	@ 0x40
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bdb0      	pop	{r4, r5, r7, pc}
 80178fa:	bf00      	nop
 80178fc:	20000fcc 	.word	0x20000fcc
 8017900:	20000b8c 	.word	0x20000b8c
 8017904:	200010a8 	.word	0x200010a8

08017908 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b084      	sub	sp, #16
 801790c:	af00      	add	r7, sp, #0
 801790e:	4603      	mov	r3, r0
 8017910:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8017912:	79fb      	ldrb	r3, [r7, #7]
 8017914:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8017916:	4b0d      	ldr	r3, [pc, #52]	@ (801794c <LoRaMacTestSetDutyCycleOn+0x44>)
 8017918:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801791c:	f107 010c 	add.w	r1, r7, #12
 8017920:	220f      	movs	r2, #15
 8017922:	4618      	mov	r0, r3
 8017924:	f004 f804 	bl	801b930 <RegionVerify>
 8017928:	4603      	mov	r3, r0
 801792a:	2b00      	cmp	r3, #0
 801792c:	d00a      	beq.n	8017944 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801792e:	4a07      	ldr	r2, [pc, #28]	@ (801794c <LoRaMacTestSetDutyCycleOn+0x44>)
 8017930:	79fb      	ldrb	r3, [r7, #7]
 8017932:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8017936:	4a06      	ldr	r2, [pc, #24]	@ (8017950 <LoRaMacTestSetDutyCycleOn+0x48>)
 8017938:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801793c:	f043 0320 	orr.w	r3, r3, #32
 8017940:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8017944:	bf00      	nop
 8017946:	3710      	adds	r7, #16
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	200010a8 	.word	0x200010a8
 8017950:	20000b8c 	.word	0x20000b8c

08017954 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8017954:	b580      	push	{r7, lr}
 8017956:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8017958:	f7fe fe94 	bl	8016684 <LoRaMacStop>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d112      	bne.n	8017988 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8017962:	480b      	ldr	r0, [pc, #44]	@ (8017990 <LoRaMacDeInitialization+0x3c>)
 8017964:	f00c fe02 	bl	802456c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8017968:	480a      	ldr	r0, [pc, #40]	@ (8017994 <LoRaMacDeInitialization+0x40>)
 801796a:	f00c fdff 	bl	802456c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801796e:	480a      	ldr	r0, [pc, #40]	@ (8017998 <LoRaMacDeInitialization+0x44>)
 8017970:	f00c fdfc 	bl	802456c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8017974:	f001 fd5e 	bl	8019434 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8017978:	2000      	movs	r0, #0
 801797a:	f7fd fe1f 	bl	80155bc <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801797e:	4b07      	ldr	r3, [pc, #28]	@ (801799c <LoRaMacDeInitialization+0x48>)
 8017980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017982:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8017984:	2300      	movs	r3, #0
 8017986:	e000      	b.n	801798a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8017988:	2301      	movs	r3, #1
    }
}
 801798a:	4618      	mov	r0, r3
 801798c:	bd80      	pop	{r7, pc}
 801798e:	bf00      	nop
 8017990:	20000ef4 	.word	0x20000ef4
 8017994:	20000f0c 	.word	0x20000f0c
 8017998:	20000f24 	.word	0x20000f24
 801799c:	08029818 	.word	0x08029818

080179a0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b08c      	sub	sp, #48	@ 0x30
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	60f8      	str	r0, [r7, #12]
 80179a8:	60b9      	str	r1, [r7, #8]
 80179aa:	607a      	str	r2, [r7, #4]
 80179ac:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80179ae:	2300      	movs	r3, #0
 80179b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	7b1b      	ldrb	r3, [r3, #12]
 80179b8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	7b5b      	ldrb	r3, [r3, #13]
 80179c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	7b9b      	ldrb	r3, [r3, #14]
 80179c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	685a      	ldr	r2, [r3, #4]
 80179d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179d2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	785b      	ldrb	r3, [r3, #1]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	f000 8088 	beq.w	8017aee <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80179de:	2302      	movs	r3, #2
 80179e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	7bdb      	ldrb	r3, [r3, #15]
 80179e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	7c1b      	ldrb	r3, [r3, #16]
 80179f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80179f4:	4611      	mov	r1, r2
 80179f6:	4618      	mov	r0, r3
 80179f8:	f003 ff4c 	bl	801b894 <RegionGetPhyParam>
 80179fc:	4603      	mov	r3, r0
 80179fe:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8017a00:	6a3b      	ldr	r3, [r7, #32]
 8017a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8017a06:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8017a0a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	bfb8      	it	lt
 8017a12:	4613      	movlt	r3, r2
 8017a14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	685b      	ldr	r3, [r3, #4]
 8017a1c:	68fa      	ldr	r2, [r7, #12]
 8017a1e:	8912      	ldrh	r2, [r2, #8]
 8017a20:	4293      	cmp	r3, r2
 8017a22:	d302      	bcc.n	8017a2a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8017a24:	2301      	movs	r3, #1
 8017a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	68fa      	ldr	r2, [r7, #12]
 8017a30:	8912      	ldrh	r2, [r2, #8]
 8017a32:	4611      	mov	r1, r2
 8017a34:	68fa      	ldr	r2, [r7, #12]
 8017a36:	8952      	ldrh	r2, [r2, #10]
 8017a38:	440a      	add	r2, r1
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d30f      	bcc.n	8017a5e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8017a3e:	230a      	movs	r3, #10
 8017a40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	7c1b      	ldrb	r3, [r3, #16]
 8017a48:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017a4c:	4611      	mov	r1, r2
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f003 ff20 	bl	801b894 <RegionGetPhyParam>
 8017a54:	4603      	mov	r3, r0
 8017a56:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8017a58:	6a3b      	ldr	r3, [r7, #32]
 8017a5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	68fa      	ldr	r2, [r7, #12]
 8017a64:	8912      	ldrh	r2, [r2, #8]
 8017a66:	4611      	mov	r1, r2
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	8952      	ldrh	r2, [r2, #10]
 8017a6c:	0052      	lsls	r2, r2, #1
 8017a6e:	440a      	add	r2, r1
 8017a70:	4293      	cmp	r3, r2
 8017a72:	d33c      	bcc.n	8017aee <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	68fa      	ldr	r2, [r7, #12]
 8017a7a:	8912      	ldrh	r2, [r2, #8]
 8017a7c:	1a9b      	subs	r3, r3, r2
 8017a7e:	68fa      	ldr	r2, [r7, #12]
 8017a80:	8952      	ldrh	r2, [r2, #10]
 8017a82:	fbb3 f1f2 	udiv	r1, r3, r2
 8017a86:	fb01 f202 	mul.w	r2, r1, r2
 8017a8a:	1a9b      	subs	r3, r3, r2
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d12e      	bne.n	8017aee <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8017a90:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8017a94:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d110      	bne.n	8017abe <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d009      	beq.n	8017ab8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8017aa4:	2302      	movs	r3, #2
 8017aa6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	7c1b      	ldrb	r3, [r3, #16]
 8017aac:	f107 0210 	add.w	r2, r7, #16
 8017ab0:	4611      	mov	r1, r2
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f003 ff25 	bl	801b902 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8017abe:	2321      	movs	r3, #33	@ 0x21
 8017ac0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8017ac4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017ac8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	7bdb      	ldrb	r3, [r3, #15]
 8017ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	7c1b      	ldrb	r3, [r3, #16]
 8017ad8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017adc:	4611      	mov	r1, r2
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f003 fed8 	bl	801b894 <RegionGetPhyParam>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8017ae8:	6a3b      	ldr	r3, [r7, #32]
 8017aea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8017af4:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8017afc:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017b04:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8017b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	3730      	adds	r7, #48	@ 0x30
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}
	...

08017b14 <TimerTempCompensation>:
 * \retval Compensated time period
 */
static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature );

static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature )
{
 8017b14:	b590      	push	{r4, r7, lr}
 8017b16:	b089      	sub	sp, #36	@ 0x24
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
 8017b1c:	460b      	mov	r3, r1
 8017b1e:	807b      	strh	r3, [r7, #2]
  float k = RTC_TEMP_COEFFICIENT;
 8017b20:	4b3e      	ldr	r3, [pc, #248]	@ (8017c1c <TimerTempCompensation+0x108>)
 8017b22:	617b      	str	r3, [r7, #20]
  float kDev = RTC_TEMP_DEV_COEFFICIENT;
 8017b24:	4b3e      	ldr	r3, [pc, #248]	@ (8017c20 <TimerTempCompensation+0x10c>)
 8017b26:	613b      	str	r3, [r7, #16]
  float t = RTC_TEMP_TURNOVER;
 8017b28:	4b3e      	ldr	r3, [pc, #248]	@ (8017c24 <TimerTempCompensation+0x110>)
 8017b2a:	60fb      	str	r3, [r7, #12]
  float tDev = RTC_TEMP_DEV_TURNOVER;
 8017b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8017c28 <TimerTempCompensation+0x114>)
 8017b2e:	60bb      	str	r3, [r7, #8]
  float interim = 0.0f;
 8017b30:	f04f 0300 	mov.w	r3, #0
 8017b34:	61fb      	str	r3, [r7, #28]
  float ppm = 0.0f;
 8017b36:	f04f 0300 	mov.w	r3, #0
 8017b3a:	61bb      	str	r3, [r7, #24]

  if (k < 0.0f)
 8017b3c:	f04f 0100 	mov.w	r1, #0
 8017b40:	6978      	ldr	r0, [r7, #20]
 8017b42:	f7e9 f8dd 	bl	8000d00 <__aeabi_fcmplt>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d006      	beq.n	8017b5a <TimerTempCompensation+0x46>
  {
    ppm = (k - kDev);
 8017b4c:	6939      	ldr	r1, [r7, #16]
 8017b4e:	6978      	ldr	r0, [r7, #20]
 8017b50:	f7e8 fe2e 	bl	80007b0 <__aeabi_fsub>
 8017b54:	4603      	mov	r3, r0
 8017b56:	61bb      	str	r3, [r7, #24]
 8017b58:	e005      	b.n	8017b66 <TimerTempCompensation+0x52>
  }
  else
  {
    ppm = (k + kDev);
 8017b5a:	6939      	ldr	r1, [r7, #16]
 8017b5c:	6978      	ldr	r0, [r7, #20]
 8017b5e:	f7e8 fe29 	bl	80007b4 <__addsf3>
 8017b62:	4603      	mov	r3, r0
 8017b64:	61bb      	str	r3, [r7, #24]
  }
  interim = (float)temperature - (t - tDev);
 8017b66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7e8 fed6 	bl	800091c <__aeabi_i2f>
 8017b70:	4604      	mov	r4, r0
 8017b72:	68b9      	ldr	r1, [r7, #8]
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f7e8 fe1b 	bl	80007b0 <__aeabi_fsub>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	4619      	mov	r1, r3
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7e8 fe16 	bl	80007b0 <__aeabi_fsub>
 8017b84:	4603      	mov	r3, r0
 8017b86:	61fb      	str	r3, [r7, #28]
  ppm *=  interim * interim;
 8017b88:	69f9      	ldr	r1, [r7, #28]
 8017b8a:	69f8      	ldr	r0, [r7, #28]
 8017b8c:	f7e8 ff1a 	bl	80009c4 <__aeabi_fmul>
 8017b90:	4603      	mov	r3, r0
 8017b92:	4619      	mov	r1, r3
 8017b94:	69b8      	ldr	r0, [r7, #24]
 8017b96:	f7e8 ff15 	bl	80009c4 <__aeabi_fmul>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	61bb      	str	r3, [r7, #24]

  // Calculate the drift in time
  interim = ((float) period * ppm) / 1000000.0f;
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7e8 feb8 	bl	8000914 <__aeabi_ui2f>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	69b9      	ldr	r1, [r7, #24]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7e8 ff0b 	bl	80009c4 <__aeabi_fmul>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	491e      	ldr	r1, [pc, #120]	@ (8017c2c <TimerTempCompensation+0x118>)
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7e8 ffba 	bl	8000b2c <__aeabi_fdiv>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	61fb      	str	r3, [r7, #28]
  // Calculate the resulting time period
  interim += period;
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f7e8 fea9 	bl	8000914 <__aeabi_ui2f>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	69f8      	ldr	r0, [r7, #28]
 8017bc8:	f7e8 fdf4 	bl	80007b4 <__addsf3>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	61fb      	str	r3, [r7, #28]
  interim = floor(interim);
 8017bd0:	69f8      	ldr	r0, [r7, #28]
 8017bd2:	f7e8 fc91 	bl	80004f8 <__aeabi_f2d>
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	460b      	mov	r3, r1
 8017bda:	4610      	mov	r0, r2
 8017bdc:	4619      	mov	r1, r3
 8017bde:	f00e fc0b 	bl	80263f8 <floor>
 8017be2:	4602      	mov	r2, r0
 8017be4:	460b      	mov	r3, r1
 8017be6:	4610      	mov	r0, r2
 8017be8:	4619      	mov	r1, r3
 8017bea:	f7e8 fd8d 	bl	8000708 <__aeabi_d2f>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	61fb      	str	r3, [r7, #28]

  if (interim < 0.0f)
 8017bf2:	f04f 0100 	mov.w	r1, #0
 8017bf6:	69f8      	ldr	r0, [r7, #28]
 8017bf8:	f7e9 f882 	bl	8000d00 <__aeabi_fcmplt>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d004      	beq.n	8017c0c <TimerTempCompensation+0xf8>
  {
    interim = (float)period;
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f7e8 fe86 	bl	8000914 <__aeabi_ui2f>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	61fb      	str	r3, [r7, #28]
  }

  // Calculate the resulting period
  return ( TimerTime_t ) interim;
 8017c0c:	69f8      	ldr	r0, [r7, #28]
 8017c0e:	f7e9 f89f 	bl	8000d50 <__aeabi_f2uiz>
 8017c12:	4603      	mov	r3, r0
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	3724      	adds	r7, #36	@ 0x24
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd90      	pop	{r4, r7, pc}
 8017c1c:	bd0f5c29 	.word	0xbd0f5c29
 8017c20:	3b656042 	.word	0x3b656042
 8017c24:	41c80000 	.word	0x41c80000
 8017c28:	40a00000 	.word	0x40a00000
 8017c2c:	49742400 	.word	0x49742400

08017c30 <ComputePingOffset>:
 * \param [in]  address         - Frame address
 * \param [in]  pingPeriod      - Ping period of the node
 * \param [out] pingOffset      - Pseudo random ping offset
 */
static void ComputePingOffset( uint64_t beaconTime, uint32_t address, uint16_t pingPeriod, uint16_t *pingOffset )
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b08e      	sub	sp, #56	@ 0x38
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8017c3a:	607a      	str	r2, [r7, #4]
 8017c3c:	807b      	strh	r3, [r7, #2]
    uint8_t buffer[16];
    uint8_t cipher[16];
    uint32_t result = 0;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Refer to chapter 15.2 of the LoRaWAN specification v1.1. The beacon time
     * GPS time in seconds modulo 2^32
     */
    uint32_t time = ( beaconTime % ( ( ( uint64_t ) 1 ) << 32 ) );
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	633b      	str	r3, [r7, #48]	@ 0x30

    memset1( buffer, 0, 16 );
 8017c46:	f107 0320 	add.w	r3, r7, #32
 8017c4a:	2210      	movs	r2, #16
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f007 fd1c 	bl	801f68c <memset1>
    memset1( cipher, 0, 16 );
 8017c54:	f107 0310 	add.w	r3, r7, #16
 8017c58:	2210      	movs	r2, #16
 8017c5a:	2100      	movs	r1, #0
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f007 fd15 	bl	801f68c <memset1>

    buffer[0] = ( time ) & 0xFF;
 8017c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[1] = ( time >> 8 ) & 0xFF;
 8017c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c6c:	0a1b      	lsrs	r3, r3, #8
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    buffer[2] = ( time >> 16 ) & 0xFF;
 8017c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c76:	0c1b      	lsrs	r3, r3, #16
 8017c78:	b2db      	uxtb	r3, r3
 8017c7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    buffer[3] = ( time >> 24 ) & 0xFF;
 8017c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c80:	0e1b      	lsrs	r3, r3, #24
 8017c82:	b2db      	uxtb	r3, r3
 8017c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    buffer[4] = ( address ) & 0xFF;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    buffer[5] = ( address >> 8 ) & 0xFF;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	0a1b      	lsrs	r3, r3, #8
 8017c94:	b2db      	uxtb	r3, r3
 8017c96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    buffer[6] = ( address >> 16 ) & 0xFF;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	0c1b      	lsrs	r3, r3, #16
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    buffer[7] = ( address >> 24 ) & 0xFF;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	0e1b      	lsrs	r3, r3, #24
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 8017cae:	f107 0310 	add.w	r3, r7, #16
 8017cb2:	f107 0020 	add.w	r0, r7, #32
 8017cb6:	2210      	movs	r2, #16
 8017cb8:	2110      	movs	r1, #16
 8017cba:	f7f8 fb35 	bl	8010328 <SecureElementAesEncrypt>

    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 8017cbe:	7c3b      	ldrb	r3, [r7, #16]
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	7c7b      	ldrb	r3, [r7, #17]
 8017cc4:	021b      	lsls	r3, r3, #8
 8017cc6:	4413      	add	r3, r2
 8017cc8:	637b      	str	r3, [r7, #52]	@ 0x34

    *pingOffset = ( uint16_t )( result % pingPeriod );
 8017cca:	887a      	ldrh	r2, [r7, #2]
 8017ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8017cd2:	fb01 f202 	mul.w	r2, r1, r2
 8017cd6:	1a9b      	subs	r3, r3, r2
 8017cd8:	b29a      	uxth	r2, r3
 8017cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017cdc:	801a      	strh	r2, [r3, #0]
}
 8017cde:	bf00      	nop
 8017ce0:	3738      	adds	r7, #56	@ 0x38
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
	...

08017ce8 <CalcDownlinkFrequency>:
 *                      calculate the frequency for a beacon.
 *
 * \retval The downlink frequency
 */
static uint32_t CalcDownlinkFrequency( uint8_t channel, bool isBeacon )
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b086      	sub	sp, #24
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	4603      	mov	r3, r0
 8017cf0:	460a      	mov	r2, r1
 8017cf2:	71fb      	strb	r3, [r7, #7]
 8017cf4:	4613      	mov	r3, r2
 8017cf6:	71bb      	strb	r3, [r7, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 8017cf8:	2334      	movs	r3, #52	@ 0x34
 8017cfa:	743b      	strb	r3, [r7, #16]

    if( isBeacon == true )
 8017cfc:	79bb      	ldrb	r3, [r7, #6]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d001      	beq.n	8017d06 <CalcDownlinkFrequency+0x1e>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 8017d02:	232f      	movs	r3, #47	@ 0x2f
 8017d04:	743b      	strb	r3, [r7, #16]
    }
    getPhy.Channel = channel;
 8017d06:	79fb      	ldrb	r3, [r7, #7]
 8017d08:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017d0a:	4b08      	ldr	r3, [pc, #32]	@ (8017d2c <CalcDownlinkFrequency+0x44>)
 8017d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	f107 0210 	add.w	r2, r7, #16
 8017d16:	4611      	mov	r1, r2
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f003 fdbb 	bl	801b894 <RegionGetPhyParam>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8017d22:	68fb      	ldr	r3, [r7, #12]
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	3718      	adds	r7, #24
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	20001cec 	.word	0x20001cec

08017d30 <CalcDownlinkChannelAndFrequency>:
 *
 * \retval The downlink channel
 */
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
                                                 TimerTime_t beaconInterval, bool isBeacon )
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b088      	sub	sp, #32
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	607a      	str	r2, [r7, #4]
 8017d3c:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint32_t channel = 0;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	61fb      	str	r3, [r7, #28]
    uint8_t nbChannels = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	76fb      	strb	r3, [r7, #27]
    uint8_t offset = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	76bb      	strb	r3, [r7, #26]

    // Default initialization - ping slot channels
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 8017d4a:	2336      	movs	r3, #54	@ 0x36
 8017d4c:	753b      	strb	r3, [r7, #20]

    if( isBeacon == true )
 8017d4e:	78fb      	ldrb	r3, [r7, #3]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d001      	beq.n	8017d58 <CalcDownlinkChannelAndFrequency+0x28>
    {
        // Beacon channels
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 8017d54:	2332      	movs	r3, #50	@ 0x32
 8017d56:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017d58:	4b21      	ldr	r3, [pc, #132]	@ (8017de0 <CalcDownlinkChannelAndFrequency+0xb0>)
 8017d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	f107 0214 	add.w	r2, r7, #20
 8017d64:	4611      	mov	r1, r2
 8017d66:	4618      	mov	r0, r3
 8017d68:	f003 fd94 	bl	801b894 <RegionGetPhyParam>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	613b      	str	r3, [r7, #16]
    nbChannels = ( uint8_t ) phyParam.Value;
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	76fb      	strb	r3, [r7, #27]

    // nbChannels is > 1, when the channel plan requires more than one possible channel
    // defined by the calculation below.
    if( nbChannels > 1 )
 8017d74:	7efb      	ldrb	r3, [r7, #27]
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d926      	bls.n	8017dc8 <CalcDownlinkChannelAndFrequency+0x98>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 8017d7a:	2333      	movs	r3, #51	@ 0x33
 8017d7c:	753b      	strb	r3, [r7, #20]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017d7e:	4b18      	ldr	r3, [pc, #96]	@ (8017de0 <CalcDownlinkChannelAndFrequency+0xb0>)
 8017d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017d84:	781b      	ldrb	r3, [r3, #0]
 8017d86:	f107 0214 	add.w	r2, r7, #20
 8017d8a:	4611      	mov	r1, r2
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f003 fd81 	bl	801b894 <RegionGetPhyParam>
 8017d92:	4603      	mov	r3, r0
 8017d94:	613b      	str	r3, [r7, #16]
        offset = ( uint8_t ) phyParam.Value;
 8017d96:	693b      	ldr	r3, [r7, #16]
 8017d98:	76bb      	strb	r3, [r7, #26]

        // Calculate the channel for the next downlink
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	4a11      	ldr	r2, [pc, #68]	@ (8017de4 <CalcDownlinkChannelAndFrequency+0xb4>)
 8017d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8017da2:	099b      	lsrs	r3, r3, #6
 8017da4:	68ba      	ldr	r2, [r7, #8]
 8017da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8017daa:	68fa      	ldr	r2, [r7, #12]
 8017dac:	4413      	add	r3, r2
 8017dae:	61fb      	str	r3, [r7, #28]
        channel = channel % nbChannels;
 8017db0:	7efa      	ldrb	r2, [r7, #27]
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8017db8:	fb01 f202 	mul.w	r2, r1, r2
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	61fb      	str	r3, [r7, #28]
        channel += offset;
 8017dc0:	7ebb      	ldrb	r3, [r7, #26]
 8017dc2:	69fa      	ldr	r2, [r7, #28]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	61fb      	str	r3, [r7, #28]
    }

    // Calculate the frequency for the next downlink. This holds
    // for beacons and ping slots.
    return CalcDownlinkFrequency( channel, isBeacon );
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	b2db      	uxtb	r3, r3
 8017dcc:	78fa      	ldrb	r2, [r7, #3]
 8017dce:	4611      	mov	r1, r2
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7ff ff89 	bl	8017ce8 <CalcDownlinkFrequency>
 8017dd6:	4603      	mov	r3, r0
}
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3720      	adds	r7, #32
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}
 8017de0:	20001cec 	.word	0x20001cec
 8017de4:	10624dd3 	.word	0x10624dd3

08017de8 <CalculateBeaconRxWindowConfig>:
 * \param [in] rxConfig Reception parameters for the beacon window.
 *
 * \param [in] currentSymbolTimeout Current symbol timeout.
 */
static void CalculateBeaconRxWindowConfig( RxConfigParams_t* rxConfig, uint16_t currentSymbolTimeout )
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b088      	sub	sp, #32
 8017dec:	af02      	add	r7, sp, #8
 8017dee:	6078      	str	r0, [r7, #4]
 8017df0:	460b      	mov	r3, r1
 8017df2:	807b      	strh	r3, [r7, #2]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint32_t maxRxError = 0;
 8017df4:	2300      	movs	r3, #0
 8017df6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */

    rxConfig->WindowTimeout = currentSymbolTimeout;
 8017df8:	887a      	ldrh	r2, [r7, #2]
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	609a      	str	r2, [r3, #8]
    rxConfig->WindowOffset = 0;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2200      	movs	r2, #0
 8017e02:	60da      	str	r2, [r3, #12]

    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 8017e04:	4b1d      	ldr	r3, [pc, #116]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e06:	7b1b      	ldrb	r3, [r3, #12]
 8017e08:	f003 0302 	and.w	r3, r3, #2
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d106      	bne.n	8017e20 <CalculateBeaconRxWindowConfig+0x38>
 8017e12:	4b1a      	ldr	r3, [pc, #104]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e14:	7b1b      	ldrb	r3, [r3, #12]
 8017e16:	f003 0310 	and.w	r3, r3, #16
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d028      	beq.n	8017e72 <CalculateBeaconRxWindowConfig+0x8a>
    {
        // Apply the symbol timeout only if we have acquired the beacon
        // Otherwise, take the window enlargement into account
        // Read beacon datarate
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8017e20:	2331      	movs	r3, #49	@ 0x31
 8017e22:	733b      	strb	r3, [r7, #12]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8017e24:	4b15      	ldr	r3, [pc, #84]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017e2a:	781b      	ldrb	r3, [r3, #0]
 8017e2c:	f107 020c 	add.w	r2, r7, #12
 8017e30:	4611      	mov	r1, r2
 8017e32:	4618      	mov	r0, r3
 8017e34:	f003 fd2e 	bl	801b894 <RegionGetPhyParam>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	60bb      	str	r3, [r7, #8]
                                        rxConfig );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        // Compare and assign the maximum between the region specific rx error window time
        // and time precision received from beacon frame format.
        maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8017e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e3e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8017e42:	461a      	mov	r2, r3
 8017e44:	4b0d      	ldr	r3, [pc, #52]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	4293      	cmp	r3, r2
 8017e4e:	bf38      	it	cc
 8017e50:	4613      	movcc	r3, r2
 8017e52:	617b      	str	r3, [r7, #20]
                          ( uint32_t ) Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds );

        // Calculate downlink symbols
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017e54:	4b09      	ldr	r3, [pc, #36]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017e5a:	7818      	ldrb	r0, [r3, #0]
                                        ( int8_t )phyParam.Value, // datarate
 8017e5c:	68bb      	ldr	r3, [r7, #8]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017e5e:	b259      	sxtb	r1, r3
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8017e60:	4b06      	ldr	r3, [pc, #24]	@ (8017e7c <CalculateBeaconRxWindowConfig+0x94>)
 8017e62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8017e66:	791a      	ldrb	r2, [r3, #4]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	9300      	str	r3, [sp, #0]
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	f003 fdb2 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                        maxRxError,
                                        rxConfig );
    }
#endif /* LORAMAC_VERSION */
}
 8017e72:	bf00      	nop
 8017e74:	3718      	adds	r7, #24
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20001cec 	.word	0x20001cec

08017e80 <RxBeaconSetup>:
 * \param [in] activateDefaultChannel Set to true, if the function shall setup the default channel
 *
 * \param [in] symbolTimeout Symbol timeout
 */
static void RxBeaconSetup( TimerTime_t rxTime, bool activateDefaultChannel, uint16_t symbolTimeout )
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b086      	sub	sp, #24
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
 8017e88:	460b      	mov	r3, r1
 8017e8a:	70fb      	strb	r3, [r7, #3]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	803b      	strh	r3, [r7, #0]
    RxBeaconSetup_t rxBeaconSetup;
    uint32_t frequency = 0;
 8017e90:	2300      	movs	r3, #0
 8017e92:	617b      	str	r3, [r7, #20]

    if( activateDefaultChannel == true )
 8017e94:	78fb      	ldrb	r3, [r7, #3]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d005      	beq.n	8017ea6 <RxBeaconSetup+0x26>
    {
        // This is the default frequency in case we don't know when the next
        // beacon will be transmitted. We select channel 0 as default.
        frequency = CalcDownlinkFrequency( 0, true );
 8017e9a:	2101      	movs	r1, #1
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	f7ff ff23 	bl	8017ce8 <CalcDownlinkFrequency>
 8017ea2:	6178      	str	r0, [r7, #20]
 8017ea4:	e00a      	b.n	8017ebc <RxBeaconSetup+0x3c>
    }
    else
    {
        // This is the frequency according to the channel plan
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 8017ea6:	4b27      	ldr	r3, [pc, #156]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017ea8:	691b      	ldr	r3, [r3, #16]
 8017eaa:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8017eae:	2301      	movs	r3, #1
 8017eb0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8017eb4:	2000      	movs	r0, #0
 8017eb6:	f7ff ff3b 	bl	8017d30 <CalcDownlinkChannelAndFrequency>
 8017eba:	6178      	str	r0, [r7, #20]
                                                     CLASSB_BEACON_INTERVAL, true );
    }

    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 8017ebc:	4b22      	ldr	r3, [pc, #136]	@ (8017f48 <RxBeaconSetup+0xc8>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	7b1b      	ldrb	r3, [r3, #12]
 8017ec2:	f003 0301 	and.w	r3, r3, #1
 8017ec6:	b2db      	uxtb	r3, r3
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d003      	beq.n	8017ed4 <RxBeaconSetup+0x54>
    {
        // Set the frequency from the BeaconFreqReq
        frequency = ClassBNvm->BeaconCtx.Frequency;
 8017ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8017f48 <RxBeaconSetup+0xc8>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	691b      	ldr	r3, [r3, #16]
 8017ed2:	617b      	str	r3, [r7, #20]
    }

    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 8017ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017ed6:	7b1b      	ldrb	r3, [r3, #12]
 8017ed8:	f003 0308 	and.w	r3, r3, #8
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d00c      	beq.n	8017efc <RxBeaconSetup+0x7c>
    {
        // Set the frequency which was provided by BeaconTimingAns MAC command
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8017ee2:	4a18      	ldr	r2, [pc, #96]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017ee4:	7b13      	ldrb	r3, [r2, #12]
 8017ee6:	f36f 03c3 	bfc	r3, #3, #1
 8017eea:	7313      	strb	r3, [r2, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 8017eec:	4b15      	ldr	r3, [pc, #84]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017eee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017ef2:	2101      	movs	r1, #1
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7ff fef7 	bl	8017ce8 <CalcDownlinkFrequency>
 8017efa:	6178      	str	r0, [r7, #20]
    }

    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 8017efc:	883b      	ldrh	r3, [r7, #0]
 8017efe:	813b      	strh	r3, [r7, #8]
    rxBeaconSetup.RxTime = rxTime;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	60fb      	str	r3, [r7, #12]
    rxBeaconSetup.Frequency = frequency;
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	613b      	str	r3, [r7, #16]

    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8017f08:	4b0e      	ldr	r3, [pc, #56]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017f0e:	7818      	ldrb	r0, [r3, #0]
 8017f10:	4b0c      	ldr	r3, [pc, #48]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017f16:	1d1a      	adds	r2, r3, #4
 8017f18:	f107 0308 	add.w	r3, r7, #8
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	f003 fec6 	bl	801bcae <RegionRxBeaconSetup>

    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 8017f22:	4b08      	ldr	r3, [pc, #32]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017f28:	697a      	ldr	r2, [r7, #20]
 8017f2a:	611a      	str	r2, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 8017f2c:	4b05      	ldr	r3, [pc, #20]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017f2e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8017f32:	4b04      	ldr	r3, [pc, #16]	@ (8017f44 <RxBeaconSetup+0xc4>)
 8017f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017f38:	7912      	ldrb	r2, [r2, #4]
 8017f3a:	751a      	strb	r2, [r3, #20]
}
 8017f3c:	bf00      	nop
 8017f3e:	3718      	adds	r7, #24
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	20001cec 	.word	0x20001cec
 8017f48:	20001dac 	.word	0x20001dac

08017f4c <CalcNextSlotTime>:
 * \param [out] timeOffset Time offset of the next slot, based on current time
 *
 * \retval [true: ping slot found, false: no ping slot found]
 */
static bool CalcNextSlotTime( uint16_t slotOffset, uint16_t pingPeriod, uint16_t pingNb, TimerTime_t* timeOffset )
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b088      	sub	sp, #32
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	607b      	str	r3, [r7, #4]
 8017f54:	4603      	mov	r3, r0
 8017f56:	81fb      	strh	r3, [r7, #14]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	81bb      	strh	r3, [r7, #12]
 8017f5c:	4613      	mov	r3, r2
 8017f5e:	817b      	strh	r3, [r7, #10]
    uint8_t currentPingSlot = 0;
 8017f60:	2300      	movs	r3, #0
 8017f62:	77fb      	strb	r3, [r7, #31]
    TimerTime_t slotTime = 0;
 8017f64:	2300      	movs	r3, #0
 8017f66:	61bb      	str	r3, [r7, #24]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017f68:	f00c fc1a 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 8017f6c:	6178      	str	r0, [r7, #20]

    // Calculate the point in time of the last beacon even if we missed it
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 8017f6e:	4b38      	ldr	r3, [pc, #224]	@ (8018050 <CalcNextSlotTime+0x104>)
 8017f70:	3318      	adds	r3, #24
 8017f72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f76:	f00a ffd7 	bl	8022f28 <SysTimeToMs>
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	1a9b      	subs	r3, r3, r2
 8017f80:	4a34      	ldr	r2, [pc, #208]	@ (8018054 <CalcNextSlotTime+0x108>)
 8017f82:	fba2 1203 	umull	r1, r2, r2, r3
 8017f86:	0b52      	lsrs	r2, r2, #13
 8017f88:	f44f 31fa 	mov.w	r1, #128000	@ 0x1f400
 8017f8c:	fb01 f202 	mul.w	r2, r1, r2
 8017f90:	1a9b      	subs	r3, r3, r2
 8017f92:	61bb      	str	r3, [r7, #24]
    slotTime = currentTime - slotTime;
 8017f94:	697a      	ldr	r2, [r7, #20]
 8017f96:	69bb      	ldr	r3, [r7, #24]
 8017f98:	1ad3      	subs	r3, r2, r3
 8017f9a:	61bb      	str	r3, [r7, #24]

    // Add the reserved time and the ping offset
    slotTime += CLASSB_BEACON_RESERVED;
 8017f9c:	69bb      	ldr	r3, [r7, #24]
 8017f9e:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 8017fa2:	61bb      	str	r3, [r7, #24]
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 8017fa4:	89fa      	ldrh	r2, [r7, #14]
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	011b      	lsls	r3, r3, #4
 8017faa:	1a9b      	subs	r3, r3, r2
 8017fac:	005b      	lsls	r3, r3, #1
 8017fae:	461a      	mov	r2, r3
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	4413      	add	r3, r2
 8017fb4:	61bb      	str	r3, [r7, #24]

    if( slotTime < currentTime )
 8017fb6:	69ba      	ldr	r2, [r7, #24]
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d219      	bcs.n	8017ff2 <CalcNextSlotTime+0xa6>
    {
        currentPingSlot = ( ( currentTime - slotTime ) /
 8017fbe:	697a      	ldr	r2, [r7, #20]
 8017fc0:	69bb      	ldr	r3, [r7, #24]
 8017fc2:	1ad1      	subs	r1, r2, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 8017fc4:	89ba      	ldrh	r2, [r7, #12]
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	011b      	lsls	r3, r3, #4
 8017fca:	1a9b      	subs	r3, r3, r2
 8017fcc:	005b      	lsls	r3, r3, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 8017fce:	fbb1 f3f3 	udiv	r3, r1, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 8017fd2:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	77fb      	strb	r3, [r7, #31]
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 8017fd8:	7ffb      	ldrb	r3, [r7, #31]
 8017fda:	89ba      	ldrh	r2, [r7, #12]
 8017fdc:	fb02 f303 	mul.w	r3, r2, r3
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	011b      	lsls	r3, r3, #4
 8017fe6:	1a9b      	subs	r3, r3, r2
 8017fe8:	005b      	lsls	r3, r3, #1
 8017fea:	461a      	mov	r2, r3
 8017fec:	69bb      	ldr	r3, [r7, #24]
 8017fee:	4413      	add	r3, r2
 8017ff0:	61bb      	str	r3, [r7, #24]
                    CLASSB_PING_SLOT_WINDOW );
    }

    if( currentPingSlot < pingNb )
 8017ff2:	7ffb      	ldrb	r3, [r7, #31]
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	897a      	ldrh	r2, [r7, #10]
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d923      	bls.n	8018044 <CalcNextSlotTime+0xf8>
    {
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 8017ffc:	4b14      	ldr	r3, [pc, #80]	@ (8018050 <CalcNextSlotTime+0x104>)
 8017ffe:	3320      	adds	r3, #32
 8018000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018004:	f00a ff90 	bl	8022f28 <SysTimeToMs>
 8018008:	4603      	mov	r3, r0
 801800a:	f6a3 33d6 	subw	r3, r3, #3030	@ 0xbd6
 801800e:	69ba      	ldr	r2, [r7, #24]
 8018010:	429a      	cmp	r2, r3
 8018012:	d817      	bhi.n	8018044 <CalcNextSlotTime+0xf8>
        {
            // Calculate the relative ping slot time
            slotTime -= currentTime;
 8018014:	69ba      	ldr	r2, [r7, #24]
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	1ad3      	subs	r3, r2, r3
 801801a:	61bb      	str	r3, [r7, #24]
            slotTime -= Radio.GetWakeupTime( );
 801801c:	4b0e      	ldr	r3, [pc, #56]	@ (8018058 <CalcNextSlotTime+0x10c>)
 801801e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018020:	4798      	blx	r3
 8018022:	4602      	mov	r2, r0
 8018024:	69bb      	ldr	r3, [r7, #24]
 8018026:	1a9b      	subs	r3, r3, r2
 8018028:	61bb      	str	r3, [r7, #24]
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 801802a:	4b09      	ldr	r3, [pc, #36]	@ (8018050 <CalcNextSlotTime+0x104>)
 801802c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018030:	4619      	mov	r1, r3
 8018032:	69b8      	ldr	r0, [r7, #24]
 8018034:	f7ff fd6e 	bl	8017b14 <TimerTempCompensation>
 8018038:	61b8      	str	r0, [r7, #24]
            *timeOffset = slotTime;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	69ba      	ldr	r2, [r7, #24]
 801803e:	601a      	str	r2, [r3, #0]
            return true;
 8018040:	2301      	movs	r3, #1
 8018042:	e000      	b.n	8018046 <CalcNextSlotTime+0xfa>
        }
    }
    return false;
 8018044:	2300      	movs	r3, #0
}
 8018046:	4618      	mov	r0, r3
 8018048:	3720      	adds	r7, #32
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}
 801804e:	bf00      	nop
 8018050:	20001cec 	.word	0x20001cec
 8018054:	10624dd3 	.word	0x10624dd3
 8018058:	08029818 	.word	0x08029818

0801805c <BeaconCrc>:
 * \param [in] length Length of the data
 *
 * \retval CRC
 */
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
 801805c:	b480      	push	{r7}
 801805e:	b085      	sub	sp, #20
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
 8018064:	460b      	mov	r3, r1
 8018066:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint16_t crc = 0x0000;
 8018068:	2300      	movs	r3, #0
 801806a:	81fb      	strh	r3, [r7, #14]

    if( buffer == NULL )
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d101      	bne.n	8018076 <BeaconCrc+0x1a>
    {
        return 0;
 8018072:	2300      	movs	r3, #0
 8018074:	e030      	b.n	80180d8 <BeaconCrc+0x7c>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018076:	2300      	movs	r3, #0
 8018078:	81bb      	strh	r3, [r7, #12]
 801807a:	e028      	b.n	80180ce <BeaconCrc+0x72>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
 801807c:	89bb      	ldrh	r3, [r7, #12]
 801807e:	687a      	ldr	r2, [r7, #4]
 8018080:	4413      	add	r3, r2
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	021b      	lsls	r3, r3, #8
 8018086:	b21a      	sxth	r2, r3
 8018088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801808c:	4053      	eors	r3, r2
 801808e:	b21b      	sxth	r3, r3
 8018090:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 8018092:	2300      	movs	r3, #0
 8018094:	817b      	strh	r3, [r7, #10]
 8018096:	e014      	b.n	80180c2 <BeaconCrc+0x66>
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 8018098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801809c:	2b00      	cmp	r3, #0
 801809e:	da09      	bge.n	80180b4 <BeaconCrc+0x58>
 80180a0:	89fb      	ldrh	r3, [r7, #14]
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	b21a      	sxth	r2, r3
 80180a6:	f241 0321 	movw	r3, #4129	@ 0x1021
 80180aa:	b21b      	sxth	r3, r3
 80180ac:	4053      	eors	r3, r2
 80180ae:	b21b      	sxth	r3, r3
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	e002      	b.n	80180ba <BeaconCrc+0x5e>
 80180b4:	89fb      	ldrh	r3, [r7, #14]
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80180bc:	897b      	ldrh	r3, [r7, #10]
 80180be:	3301      	adds	r3, #1
 80180c0:	817b      	strh	r3, [r7, #10]
 80180c2:	897b      	ldrh	r3, [r7, #10]
 80180c4:	2b07      	cmp	r3, #7
 80180c6:	d9e7      	bls.n	8018098 <BeaconCrc+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80180c8:	89bb      	ldrh	r3, [r7, #12]
 80180ca:	3301      	adds	r3, #1
 80180cc:	81bb      	strh	r3, [r7, #12]
 80180ce:	89ba      	ldrh	r2, [r7, #12]
 80180d0:	887b      	ldrh	r3, [r7, #2]
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d3d2      	bcc.n	801807c <BeaconCrc+0x20>
        }
    }

    return crc;
 80180d6:	89fb      	ldrh	r3, [r7, #14]
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3714      	adds	r7, #20
 80180dc:	46bd      	mov	sp, r7
 80180de:	bc80      	pop	{r7}
 80180e0:	4770      	bx	lr

080180e2 <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
 80180e2:	b580      	push	{r7, lr}
 80180e4:	b082      	sub	sp, #8
 80180e6:	af00      	add	r7, sp, #0
 80180e8:	6078      	str	r0, [r7, #4]
 80180ea:	6039      	str	r1, [r7, #0]
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d00a      	beq.n	8018108 <GetTemperature+0x26>
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d006      	beq.n	8018108 <GetTemperature+0x26>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4798      	blx	r3
 8018100:	4603      	mov	r3, r0
 8018102:	461a      	mov	r2, r3
 8018104:	683b      	ldr	r3, [r7, #0]
 8018106:	805a      	strh	r2, [r3, #2]
    }
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <OnClassBMacProcessNotify>:

static void OnClassBMacProcessNotify( void )
{
 8018110:	b580      	push	{r7, lr}
 8018112:	af00      	add	r7, sp, #0
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8018114:	4b05      	ldr	r3, [pc, #20]	@ (801812c <OnClassBMacProcessNotify+0x1c>)
 8018116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801811a:	2b00      	cmp	r3, #0
 801811c:	d003      	beq.n	8018126 <OnClassBMacProcessNotify+0x16>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 801811e:	4b03      	ldr	r3, [pc, #12]	@ (801812c <OnClassBMacProcessNotify+0x1c>)
 8018120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018124:	4798      	blx	r3
    }
}
 8018126:	bf00      	nop
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	20001cec 	.word	0x20001cec

08018130 <InitClassB>:

static void InitClassB( void )
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b084      	sub	sp, #16
 8018134:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Init events
    LoRaMacClassBEvents.Value = 0;
 8018136:	4b21      	ldr	r3, [pc, #132]	@ (80181bc <InitClassB+0x8c>)
 8018138:	2200      	movs	r2, #0
 801813a:	601a      	str	r2, [r3, #0]

    // Init variables to default
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 801813c:	4b20      	ldr	r3, [pc, #128]	@ (80181c0 <InitClassB+0x90>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	2218      	movs	r2, #24
 8018142:	2100      	movs	r1, #0
 8018144:	4618      	mov	r0, r3
 8018146:	f007 faa1 	bl	801f68c <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 801814a:	220c      	movs	r2, #12
 801814c:	2100      	movs	r1, #0
 801814e:	481d      	ldr	r0, [pc, #116]	@ (80181c4 <InitClassB+0x94>)
 8018150:	f007 fa9c 	bl	801f68c <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 8018154:	223c      	movs	r2, #60	@ 0x3c
 8018156:	2100      	movs	r1, #0
 8018158:	481b      	ldr	r0, [pc, #108]	@ (80181c8 <InitClassB+0x98>)
 801815a:	f007 fa97 	bl	801f68c <memset1>

    // Setup default temperature
    Ctx.BeaconCtx.Temperature = 25.0;
 801815e:	4b19      	ldr	r3, [pc, #100]	@ (80181c4 <InitClassB+0x94>)
 8018160:	2219      	movs	r2, #25
 8018162:	81da      	strh	r2, [r3, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8018164:	4918      	ldr	r1, [pc, #96]	@ (80181c8 <InitClassB+0x98>)
 8018166:	4819      	ldr	r0, [pc, #100]	@ (80181cc <InitClassB+0x9c>)
 8018168:	f7ff ffbb 	bl	80180e2 <GetTemperature>

    // Setup default ping slot datarate
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 801816c:	2335      	movs	r3, #53	@ 0x35
 801816e:	723b      	strb	r3, [r7, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8018170:	4b14      	ldr	r3, [pc, #80]	@ (80181c4 <InitClassB+0x94>)
 8018172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	f107 0208 	add.w	r2, r7, #8
 801817c:	4611      	mov	r1, r2
 801817e:	4618      	mov	r0, r3
 8018180:	f003 fb88 	bl	801b894 <RegionGetPhyParam>
 8018184:	4603      	mov	r3, r0
 8018186:	607b      	str	r3, [r7, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	4b0d      	ldr	r3, [pc, #52]	@ (80181c0 <InitClassB+0x90>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	b252      	sxtb	r2, r2
 8018190:	721a      	strb	r2, [r3, #8]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Setup default FPending bit
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
 8018192:	4b0b      	ldr	r3, [pc, #44]	@ (80181c0 <InitClassB+0x90>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2200      	movs	r2, #0
 8018198:	725a      	strb	r2, [r3, #9]
#endif /* LORAMAC_VERSION */

    // Setup default states
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 801819a:	4b0a      	ldr	r3, [pc, #40]	@ (80181c4 <InitClassB+0x94>)
 801819c:	2200      	movs	r2, #0
 801819e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80181a2:	4b08      	ldr	r3, [pc, #32]	@ (80181c4 <InitClassB+0x94>)
 80181a4:	2200      	movs	r2, #0
 80181a6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80181aa:	4b06      	ldr	r3, [pc, #24]	@ (80181c4 <InitClassB+0x94>)
 80181ac:	2200      	movs	r2, #0
 80181ae:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80181b2:	bf00      	nop
 80181b4:	3710      	adds	r7, #16
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd80      	pop	{r7, pc}
 80181ba:	bf00      	nop
 80181bc:	20001ce8 	.word	0x20001ce8
 80181c0:	20001dac 	.word	0x20001dac
 80181c4:	20001cec 	.word	0x20001cec
 80181c8:	20001cf8 	.word	0x20001cf8
 80181cc:	20001d80 	.word	0x20001d80

080181d0 <InitClassBDefaults>:

static void InitClassBDefaults( void )
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b086      	sub	sp, #24
 80181d4:	af00      	add	r7, sp, #0
    // This function shall reset the Class B settings to default,
    // but should keep important configurations
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 80181d6:	4b1b      	ldr	r3, [pc, #108]	@ (8018244 <InitClassBDefaults+0x74>)
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	f107 0310 	add.w	r3, r7, #16
 80181de:	320c      	adds	r2, #12
 80181e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181e4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 80181e8:	4b16      	ldr	r3, [pc, #88]	@ (8018244 <InitClassBDefaults+0x74>)
 80181ea:	681a      	ldr	r2, [r3, #0]
 80181ec:	1d3b      	adds	r3, r7, #4
 80181ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80181f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    InitClassB( );
 80181f4:	f7ff ff9c 	bl	8018130 <InitClassB>

    // Parameters from BeaconFreqReq
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 80181f8:	4b12      	ldr	r3, [pc, #72]	@ (8018244 <InitClassBDefaults+0x74>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	697a      	ldr	r2, [r7, #20]
 80181fe:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8018200:	4b10      	ldr	r3, [pc, #64]	@ (8018244 <InitClassBDefaults+0x74>)
 8018202:	681a      	ldr	r2, [r3, #0]
 8018204:	7c3b      	ldrb	r3, [r7, #16]
 8018206:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801820a:	b2d9      	uxtb	r1, r3
 801820c:	7b13      	ldrb	r3, [r2, #12]
 801820e:	f361 0300 	bfi	r3, r1, #0, #1
 8018212:	7313      	strb	r3, [r2, #12]

    // Parameters from PingSlotChannelReq
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 8018214:	4b0b      	ldr	r3, [pc, #44]	@ (8018244 <InitClassBDefaults+0x74>)
 8018216:	681a      	ldr	r2, [r3, #0]
 8018218:	793b      	ldrb	r3, [r7, #4]
 801821a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801821e:	b2d9      	uxtb	r1, r3
 8018220:	7813      	ldrb	r3, [r2, #0]
 8018222:	f361 0341 	bfi	r3, r1, #1, #1
 8018226:	7013      	strb	r3, [r2, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 8018228:	4b06      	ldr	r3, [pc, #24]	@ (8018244 <InitClassBDefaults+0x74>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	68ba      	ldr	r2, [r7, #8]
 801822e:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8018230:	4b04      	ldr	r3, [pc, #16]	@ (8018244 <InitClassBDefaults+0x74>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8018238:	721a      	strb	r2, [r3, #8]
}
 801823a:	bf00      	nop
 801823c:	3718      	adds	r7, #24
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	20001dac 	.word	0x20001dac

08018248 <EnlargeWindowTimeout>:

static void EnlargeWindowTimeout( void )
{
 8018248:	b480      	push	{r7}
 801824a:	af00      	add	r7, sp, #0
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 801824c:	4b15      	ldr	r3, [pc, #84]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 801824e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	4a14      	ldr	r2, [pc, #80]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018254:	6313      	str	r3, [r2, #48]	@ 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 8018256:	4b13      	ldr	r3, [pc, #76]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801825a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801825e:	d903      	bls.n	8018268 <EnlargeWindowTimeout+0x20>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 8018260:	4b10      	ldr	r3, [pc, #64]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018266:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8018268:	4b0e      	ldr	r3, [pc, #56]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 801826a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801826c:	005b      	lsls	r3, r3, #1
 801826e:	b29a      	uxth	r2, r3
 8018270:	4b0c      	ldr	r3, [pc, #48]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018272:	859a      	strh	r2, [r3, #44]	@ 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 8018274:	4b0b      	ldr	r3, [pc, #44]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018276:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018278:	2bff      	cmp	r3, #255	@ 0xff
 801827a:	d902      	bls.n	8018282 <EnlargeWindowTimeout+0x3a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 801827c:	4b09      	ldr	r3, [pc, #36]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 801827e:	22ff      	movs	r2, #255	@ 0xff
 8018280:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8018282:	4b08      	ldr	r3, [pc, #32]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018284:	88db      	ldrh	r3, [r3, #6]
 8018286:	005b      	lsls	r3, r3, #1
 8018288:	b29a      	uxth	r2, r3
 801828a:	4b06      	ldr	r3, [pc, #24]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 801828c:	80da      	strh	r2, [r3, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 801828e:	4b05      	ldr	r3, [pc, #20]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018290:	88db      	ldrh	r3, [r3, #6]
 8018292:	2b1e      	cmp	r3, #30
 8018294:	d902      	bls.n	801829c <EnlargeWindowTimeout+0x54>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 8018296:	4b03      	ldr	r3, [pc, #12]	@ (80182a4 <EnlargeWindowTimeout+0x5c>)
 8018298:	221e      	movs	r2, #30
 801829a:	80da      	strh	r2, [r3, #6]
    }
}
 801829c:	bf00      	nop
 801829e:	46bd      	mov	sp, r7
 80182a0:	bc80      	pop	{r7}
 80182a2:	4770      	bx	lr
 80182a4:	20001cec 	.word	0x20001cec

080182a8 <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
 80182a8:	b480      	push	{r7}
 80182aa:	af00      	add	r7, sp, #0
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80182ac:	4b06      	ldr	r3, [pc, #24]	@ (80182c8 <ResetWindowTimeout+0x20>)
 80182ae:	2208      	movs	r2, #8
 80182b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80182b2:	4b05      	ldr	r3, [pc, #20]	@ (80182c8 <ResetWindowTimeout+0x20>)
 80182b4:	2208      	movs	r2, #8
 80182b6:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 80182b8:	4b03      	ldr	r3, [pc, #12]	@ (80182c8 <ResetWindowTimeout+0x20>)
 80182ba:	2202      	movs	r2, #2
 80182bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80182be:	bf00      	nop
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bc80      	pop	{r7}
 80182c4:	4770      	bx	lr
 80182c6:	bf00      	nop
 80182c8:	20001cec 	.word	0x20001cec

080182cc <CalcDelayForNextBeacon>:

static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
 80182cc:	b480      	push	{r7}
 80182ce:	b085      	sub	sp, #20
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	6039      	str	r1, [r7, #0]
    TimerTime_t nextBeaconRxTime = 0;
 80182d6:	2300      	movs	r3, #0
 80182d8:	60fb      	str	r3, [r7, #12]

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	1ad3      	subs	r3, r2, r3
 80182e0:	4a08      	ldr	r2, [pc, #32]	@ (8018304 <CalcDelayForNextBeacon+0x38>)
 80182e2:	fba2 1203 	umull	r1, r2, r2, r3
 80182e6:	0b52      	lsrs	r2, r2, #13
 80182e8:	f44f 31fa 	mov.w	r1, #128000	@ 0x1f400
 80182ec:	fb01 f202 	mul.w	r2, r1, r2
 80182f0:	1a9b      	subs	r3, r3, r2
 80182f2:	60fb      	str	r3, [r7, #12]
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	f5c3 33fa 	rsb	r3, r3, #128000	@ 0x1f400
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3714      	adds	r7, #20
 80182fe:	46bd      	mov	sp, r7
 8018300:	bc80      	pop	{r7}
 8018302:	4770      	bx	lr
 8018304:	10624dd3 	.word	0x10624dd3

08018308 <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
 8018308:	b480      	push	{r7}
 801830a:	b083      	sub	sp, #12
 801830c:	af00      	add	r7, sp, #0
 801830e:	4603      	mov	r3, r0
 8018310:	71fb      	strb	r3, [r7, #7]
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 8018312:	4b14      	ldr	r3, [pc, #80]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 8018314:	7b1b      	ldrb	r3, [r3, #12]
 8018316:	f003 0320 	and.w	r3, r3, #32
 801831a:	b2db      	uxtb	r3, r3
 801831c:	2b00      	cmp	r3, #0
 801831e:	d117      	bne.n	8018350 <IndicateBeaconStatus+0x48>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 8018320:	4b10      	ldr	r3, [pc, #64]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 8018322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018326:	220a      	movs	r2, #10
 8018328:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 801832a:	4b0e      	ldr	r3, [pc, #56]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 801832c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018330:	79fa      	ldrb	r2, [r7, #7]
 8018332:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8018334:	4b0b      	ldr	r3, [pc, #44]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 8018336:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 801833a:	7813      	ldrb	r3, [r2, #0]
 801833c:	f043 0308 	orr.w	r3, r3, #8
 8018340:	7013      	strb	r3, [r2, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8018342:	4b08      	ldr	r3, [pc, #32]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 8018344:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8018348:	7813      	ldrb	r3, [r2, #0]
 801834a:	f043 0310 	orr.w	r3, r3, #16
 801834e:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 8018350:	4a04      	ldr	r2, [pc, #16]	@ (8018364 <IndicateBeaconStatus+0x5c>)
 8018352:	7b13      	ldrb	r3, [r2, #12]
 8018354:	f36f 1345 	bfc	r3, #5, #1
 8018358:	7313      	strb	r3, [r2, #12]
}
 801835a:	bf00      	nop
 801835c:	370c      	adds	r7, #12
 801835e:	46bd      	mov	sp, r7
 8018360:	bc80      	pop	{r7}
 8018362:	4770      	bx	lr
 8018364:	20001cec 	.word	0x20001cec

08018368 <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
 8018368:	b480      	push	{r7}
 801836a:	b085      	sub	sp, #20
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeGuard = beaconEventTime;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	60fb      	str	r3, [r7, #12]

    if( timeGuard > CLASSB_BEACON_GUARD )
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801837a:	4293      	cmp	r3, r2
 801837c:	d903      	bls.n	8018386 <ApplyGuardTime+0x1e>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8018384:	60fb      	str	r3, [r7, #12]
    }
    return timeGuard;
 8018386:	68fb      	ldr	r3, [r7, #12]
}
 8018388:	4618      	mov	r0, r3
 801838a:	3714      	adds	r7, #20
 801838c:	46bd      	mov	sp, r7
 801838e:	bc80      	pop	{r7}
 8018390:	4770      	bx	lr
	...

08018394 <UpdateBeaconState>:

static TimerTime_t UpdateBeaconState( LoRaMacEventInfoStatus_t status,
                                      TimerTime_t windowMovement, TimerTime_t currentTime )

{
 8018394:	b590      	push	{r4, r7, lr}
 8018396:	b089      	sub	sp, #36	@ 0x24
 8018398:	af00      	add	r7, sp, #0
 801839a:	4603      	mov	r3, r0
 801839c:	6139      	str	r1, [r7, #16]
 801839e:	60fa      	str	r2, [r7, #12]
 80183a0:	75fb      	strb	r3, [r7, #23]
    TimerTime_t beaconEventTime = 0;
 80183a2:	2300      	movs	r3, #0
 80183a4:	61fb      	str	r3, [r7, #28]

    // Calculate the next beacon RX time
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 80183a6:	4b1f      	ldr	r3, [pc, #124]	@ (8018424 <UpdateBeaconState+0x90>)
 80183a8:	3318      	adds	r3, #24
 80183aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80183ae:	f00a fdbb 	bl	8022f28 <SysTimeToMs>
 80183b2:	4603      	mov	r3, r0
 80183b4:	4619      	mov	r1, r3
 80183b6:	68f8      	ldr	r0, [r7, #12]
 80183b8:	f7ff ff88 	bl	80182cc <CalcDelayForNextBeacon>
 80183bc:	61f8      	str	r0, [r7, #28]
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 80183be:	68fa      	ldr	r2, [r7, #12]
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	441a      	add	r2, r3
 80183c4:	4c17      	ldr	r4, [pc, #92]	@ (8018424 <UpdateBeaconState+0x90>)
 80183c6:	463b      	mov	r3, r7
 80183c8:	4611      	mov	r1, r2
 80183ca:	4618      	mov	r0, r3
 80183cc:	f00a fdd4 	bl	8022f78 <SysTimeFromMs>
 80183d0:	f104 0320 	add.w	r3, r4, #32
 80183d4:	463a      	mov	r2, r7
 80183d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80183da:	e883 0003 	stmia.w	r3, {r0, r1}

    // Take temperature compensation into account
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 80183de:	4b11      	ldr	r3, [pc, #68]	@ (8018424 <UpdateBeaconState+0x90>)
 80183e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80183e4:	4619      	mov	r1, r3
 80183e6:	69f8      	ldr	r0, [r7, #28]
 80183e8:	f7ff fb94 	bl	8017b14 <TimerTempCompensation>
 80183ec:	61f8      	str	r0, [r7, #28]

    // Move the window
    if( beaconEventTime > windowMovement )
 80183ee:	69fa      	ldr	r2, [r7, #28]
 80183f0:	693b      	ldr	r3, [r7, #16]
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d903      	bls.n	80183fe <UpdateBeaconState+0x6a>
    {
        beaconEventTime -= windowMovement;
 80183f6:	69fa      	ldr	r2, [r7, #28]
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	1ad3      	subs	r3, r2, r3
 80183fc:	61fb      	str	r3, [r7, #28]
    }
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 80183fe:	68fa      	ldr	r2, [r7, #12]
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	4413      	add	r3, r2
 8018404:	4a07      	ldr	r2, [pc, #28]	@ (8018424 <UpdateBeaconState+0x90>)
 8018406:	6293      	str	r3, [r2, #40]	@ 0x28

    // Start the RX slot state machine for ping and multicast slots
    LoRaMacClassBStartRxSlots( );
 8018408:	f001 facc 	bl	80199a4 <LoRaMacClassBStartRxSlots>

    // Setup an MLME_BEACON indication to inform the upper layer
    IndicateBeaconStatus( status );
 801840c:	7dfb      	ldrb	r3, [r7, #23]
 801840e:	4618      	mov	r0, r3
 8018410:	f7ff ff7a 	bl	8018308 <IndicateBeaconStatus>

    // Apply guard time
    return ApplyGuardTime( beaconEventTime );
 8018414:	69f8      	ldr	r0, [r7, #28]
 8018416:	f7ff ffa7 	bl	8018368 <ApplyGuardTime>
 801841a:	4603      	mov	r3, r0
}
 801841c:	4618      	mov	r0, r3
 801841e:	3724      	adds	r7, #36	@ 0x24
 8018420:	46bd      	mov	sp, r7
 8018422:	bd90      	pop	{r4, r7, pc}
 8018424:	20001cec 	.word	0x20001cec

08018428 <CalcPingNb>:

static uint8_t CalcPingNb( uint16_t periodicity )
{
 8018428:	b480      	push	{r7}
 801842a:	b083      	sub	sp, #12
 801842c:	af00      	add	r7, sp, #0
 801842e:	4603      	mov	r3, r0
 8018430:	80fb      	strh	r3, [r7, #6]
    return 128 / ( 1 << periodicity );
 8018432:	88fb      	ldrh	r3, [r7, #6]
 8018434:	2280      	movs	r2, #128	@ 0x80
 8018436:	fa42 f303 	asr.w	r3, r2, r3
 801843a:	b2db      	uxtb	r3, r3
}
 801843c:	4618      	mov	r0, r3
 801843e:	370c      	adds	r7, #12
 8018440:	46bd      	mov	sp, r7
 8018442:	bc80      	pop	{r7}
 8018444:	4770      	bx	lr

08018446 <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
 8018446:	b480      	push	{r7}
 8018448:	b083      	sub	sp, #12
 801844a:	af00      	add	r7, sp, #0
 801844c:	4603      	mov	r3, r0
 801844e:	71fb      	strb	r3, [r7, #7]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 8018450:	79fb      	ldrb	r3, [r7, #7]
 8018452:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018456:	fb92 f3f3 	sdiv	r3, r2, r3
 801845a:	b29b      	uxth	r3, r3
}
 801845c:	4618      	mov	r0, r3
 801845e:	370c      	adds	r7, #12
 8018460:	46bd      	mov	sp, r7
 8018462:	bc80      	pop	{r7}
 8018464:	4770      	bx	lr

08018466 <CheckSlotPriority>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckSlotPriority( uint32_t currentAddress, uint8_t currentFPendingSet, uint8_t currentIsMulticast,
                               uint32_t address, uint8_t fPendingSet, uint8_t isMulticast )
{
 8018466:	b480      	push	{r7}
 8018468:	b085      	sub	sp, #20
 801846a:	af00      	add	r7, sp, #0
 801846c:	60f8      	str	r0, [r7, #12]
 801846e:	607b      	str	r3, [r7, #4]
 8018470:	460b      	mov	r3, r1
 8018472:	72fb      	strb	r3, [r7, #11]
 8018474:	4613      	mov	r3, r2
 8018476:	72bb      	strb	r3, [r7, #10]
    if( currentFPendingSet != fPendingSet )
 8018478:	7afa      	ldrb	r2, [r7, #11]
 801847a:	7e3b      	ldrb	r3, [r7, #24]
 801847c:	429a      	cmp	r2, r3
 801847e:	d007      	beq.n	8018490 <CheckSlotPriority+0x2a>
    {
        if( currentFPendingSet < fPendingSet )
 8018480:	7afa      	ldrb	r2, [r7, #11]
 8018482:	7e3b      	ldrb	r3, [r7, #24]
 8018484:	429a      	cmp	r2, r3
 8018486:	d201      	bcs.n	801848c <CheckSlotPriority+0x26>
        {
            // New slot sequence has priority. It does not matter
            // which type it is
            return true;
 8018488:	2301      	movs	r3, #1
 801848a:	e014      	b.n	80184b6 <CheckSlotPriority+0x50>
        }
        return false;
 801848c:	2300      	movs	r3, #0
 801848e:	e012      	b.n	80184b6 <CheckSlotPriority+0x50>
    }
    else
    {
        // FPendingSet has the same priority level, decide
        // based on multicast or unicast setting
        if( currentIsMulticast != isMulticast )
 8018490:	7aba      	ldrb	r2, [r7, #10]
 8018492:	7f3b      	ldrb	r3, [r7, #28]
 8018494:	429a      	cmp	r2, r3
 8018496:	d007      	beq.n	80184a8 <CheckSlotPriority+0x42>
        {
            if( currentIsMulticast < isMulticast )
 8018498:	7aba      	ldrb	r2, [r7, #10]
 801849a:	7f3b      	ldrb	r3, [r7, #28]
 801849c:	429a      	cmp	r2, r3
 801849e:	d201      	bcs.n	80184a4 <CheckSlotPriority+0x3e>
            {
                // New slot sequence has priority. Multicasts have
                // more priority than unicasts
                return true;
 80184a0:	2301      	movs	r3, #1
 80184a2:	e008      	b.n	80184b6 <CheckSlotPriority+0x50>
            }
            return false;
 80184a4:	2300      	movs	r3, #0
 80184a6:	e006      	b.n	80184b6 <CheckSlotPriority+0x50>
        }
        else
        {
            // IsMulticast has the same priority level, decide
            // based on the highest address
            if( currentAddress < address )
 80184a8:	68fa      	ldr	r2, [r7, #12]
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d201      	bcs.n	80184b4 <CheckSlotPriority+0x4e>
            {
                // New slot sequence has priority. The sequence with
                // the highest address has priority
                return true;
 80184b0:	2301      	movs	r3, #1
 80184b2:	e000      	b.n	80184b6 <CheckSlotPriority+0x50>
            }
        }
    }
    return false;
 80184b4:	2300      	movs	r3, #0
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3714      	adds	r7, #20
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bc80      	pop	{r7}
 80184be:	4770      	bx	lr

080184c0 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80184c0:	b5b0      	push	{r4, r5, r7, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	af02      	add	r7, sp, #8
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	60b9      	str	r1, [r7, #8]
 80184ca:	607a      	str	r2, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    // Assign non-volatile context
    if( nvm == NULL )
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d032      	beq.n	8018538 <LoRaMacClassBInit+0x78>
    {
        return;
    }
    ClassBNvm = nvm;
 80184d2:	4a1b      	ldr	r2, [pc, #108]	@ (8018540 <LoRaMacClassBInit+0x80>)
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6013      	str	r3, [r2, #0]

    // Store callbacks
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 80184d8:	4b1a      	ldr	r3, [pc, #104]	@ (8018544 <LoRaMacClassBInit+0x84>)
 80184da:	68ba      	ldr	r2, [r7, #8]
 80184dc:	3394      	adds	r3, #148	@ 0x94
 80184de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184e2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Store parameter pointers
    Ctx.LoRaMacClassBParams = *classBParams;
 80184e6:	4b17      	ldr	r3, [pc, #92]	@ (8018544 <LoRaMacClassBInit+0x84>)
 80184e8:	68fa      	ldr	r2, [r7, #12]
 80184ea:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 80184ee:	4615      	mov	r5, r2
 80184f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184f8:	682b      	ldr	r3, [r5, #0]
 80184fa:	6023      	str	r3, [r4, #0]

    // Initialize timers
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 80184fc:	2300      	movs	r3, #0
 80184fe:	9300      	str	r3, [sp, #0]
 8018500:	4b11      	ldr	r3, [pc, #68]	@ (8018548 <LoRaMacClassBInit+0x88>)
 8018502:	2200      	movs	r2, #0
 8018504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018508:	4810      	ldr	r0, [pc, #64]	@ (801854c <LoRaMacClassBInit+0x8c>)
 801850a:	f00b ff8b 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 801850e:	2300      	movs	r3, #0
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	4b0f      	ldr	r3, [pc, #60]	@ (8018550 <LoRaMacClassBInit+0x90>)
 8018514:	2200      	movs	r2, #0
 8018516:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801851a:	480e      	ldr	r0, [pc, #56]	@ (8018554 <LoRaMacClassBInit+0x94>)
 801851c:	f00b ff82 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 8018520:	2300      	movs	r3, #0
 8018522:	9300      	str	r3, [sp, #0]
 8018524:	4b0c      	ldr	r3, [pc, #48]	@ (8018558 <LoRaMacClassBInit+0x98>)
 8018526:	2200      	movs	r2, #0
 8018528:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801852c:	480b      	ldr	r0, [pc, #44]	@ (801855c <LoRaMacClassBInit+0x9c>)
 801852e:	f00b ff79 	bl	8024424 <UTIL_TIMER_Create>

    InitClassB( );
 8018532:	f7ff fdfd 	bl	8018130 <InitClassB>
 8018536:	e000      	b.n	801853a <LoRaMacClassBInit+0x7a>
        return;
 8018538:	bf00      	nop
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801853a:	3710      	adds	r7, #16
 801853c:	46bd      	mov	sp, r7
 801853e:	bdb0      	pop	{r4, r5, r7, pc}
 8018540:	20001dac 	.word	0x20001dac
 8018544:	20001cec 	.word	0x20001cec
 8018548:	08018639 	.word	0x08018639
 801854c:	20001d38 	.word	0x20001d38
 8018550:	08018a5d 	.word	0x08018a5d
 8018554:	20001d50 	.word	0x20001d50
 8018558:	08018ced 	.word	0x08018ced
 801855c:	20001d68 	.word	0x20001d68

08018560 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	4603      	mov	r3, r0
 8018568:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( beaconState == BEACON_STATE_ACQUISITION )
 801856a:	79fb      	ldrb	r3, [r7, #7]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d118      	bne.n	80185a2 <LoRaMacClassBSetBeaconState+0x42>
    {
        // If the MAC has received a time reference for the beacon,
        // apply the state BEACON_STATE_ACQUISITION_BY_TIME.
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8018570:	4b15      	ldr	r3, [pc, #84]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 8018572:	7b1b      	ldrb	r3, [r3, #12]
 8018574:	f003 0304 	and.w	r3, r3, #4
 8018578:	b2db      	uxtb	r3, r3
 801857a:	2b00      	cmp	r3, #0
 801857c:	d00c      	beq.n	8018598 <LoRaMacClassBSetBeaconState+0x38>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 801857e:	f000 ff11 	bl	80193a4 <LoRaMacClassBIsAcquisitionPending>
 8018582:	4603      	mov	r3, r0
 8018584:	f083 0301 	eor.w	r3, r3, #1
 8018588:	b2db      	uxtb	r3, r3
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 801858a:	2b00      	cmp	r3, #0
 801858c:	d004      	beq.n	8018598 <LoRaMacClassBSetBeaconState+0x38>
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 801858e:	4b0e      	ldr	r3, [pc, #56]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 8018590:	2201      	movs	r2, #1
 8018592:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8018596:	e012      	b.n	80185be <LoRaMacClassBSetBeaconState+0x5e>
           Ctx.BeaconState = beaconState;
 8018598:	4a0b      	ldr	r2, [pc, #44]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 801859a:	79fb      	ldrb	r3, [r7, #7]
 801859c:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
}
 80185a0:	e00d      	b.n	80185be <LoRaMacClassBSetBeaconState+0x5e>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 80185a2:	4b09      	ldr	r3, [pc, #36]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 80185a4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d008      	beq.n	80185be <LoRaMacClassBSetBeaconState+0x5e>
            ( Ctx.BeaconState != BEACON_STATE_ACQUISITION_BY_TIME ) )
 80185ac:	4b06      	ldr	r3, [pc, #24]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 80185ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d003      	beq.n	80185be <LoRaMacClassBSetBeaconState+0x5e>
            Ctx.BeaconState = beaconState;
 80185b6:	4a04      	ldr	r2, [pc, #16]	@ (80185c8 <LoRaMacClassBSetBeaconState+0x68>)
 80185b8:	79fb      	ldrb	r3, [r7, #7]
 80185ba:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
}
 80185be:	bf00      	nop
 80185c0:	3708      	adds	r7, #8
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	20001cec 	.word	0x20001cec

080185cc <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80185cc:	b480      	push	{r7}
 80185ce:	b083      	sub	sp, #12
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	4603      	mov	r3, r0
 80185d4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
 80185d6:	4a04      	ldr	r2, [pc, #16]	@ (80185e8 <LoRaMacClassBSetPingSlotState+0x1c>)
 80185d8:	79fb      	ldrb	r3, [r7, #7]
 80185da:	f882 3049 	strb.w	r3, [r2, #73]	@ 0x49
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80185de:	bf00      	nop
 80185e0:	370c      	adds	r7, #12
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bc80      	pop	{r7}
 80185e6:	4770      	bx	lr
 80185e8:	20001cec 	.word	0x20001cec

080185ec <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80185ec:	b480      	push	{r7}
 80185ee:	b083      	sub	sp, #12
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	4603      	mov	r3, r0
 80185f4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
 80185f6:	4a04      	ldr	r2, [pc, #16]	@ (8018608 <LoRaMacClassBSetMulticastSlotState+0x1c>)
 80185f8:	79fb      	ldrb	r3, [r7, #7]
 80185fa:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80185fe:	bf00      	nop
 8018600:	370c      	adds	r7, #12
 8018602:	46bd      	mov	sp, r7
 8018604:	bc80      	pop	{r7}
 8018606:	4770      	bx	lr
 8018608:	20001cec 	.word	0x20001cec

0801860c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801860c:	b580      	push	{r7, lr}
 801860e:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 8018610:	4b08      	ldr	r3, [pc, #32]	@ (8018634 <LoRaMacClassBIsAcquisitionInProgress+0x28>)
 8018612:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018616:	2b01      	cmp	r3, #1
 8018618:	d101      	bne.n	801861e <LoRaMacClassBIsAcquisitionInProgress+0x12>
    {
        // In this case the acquisition is in progress, as the MAC has
        // a time reference for the next beacon RX.
        return true;
 801861a:	2301      	movs	r3, #1
 801861c:	e007      	b.n	801862e <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 801861e:	f000 fec1 	bl	80193a4 <LoRaMacClassBIsAcquisitionPending>
 8018622:	4603      	mov	r3, r0
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <LoRaMacClassBIsAcquisitionInProgress+0x20>
    {
        // In this case the acquisition is in progress, as the MAC
        // searches for a beacon.
        return true;
 8018628:	2301      	movs	r3, #1
 801862a:	e000      	b.n	801862e <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    return false;
 801862c:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801862e:	4618      	mov	r0, r3
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	20001cec 	.word	0x20001cec

08018638 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 8018640:	f00c f8ae 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 8018644:	4603      	mov	r3, r0
 8018646:	4a08      	ldr	r2, [pc, #32]	@ (8018668 <LoRaMacClassBBeaconTimerEvent+0x30>)
 8018648:	63d3      	str	r3, [r2, #60]	@ 0x3c
    TimerStop( &Ctx.BeaconTimer );
 801864a:	4808      	ldr	r0, [pc, #32]	@ (801866c <LoRaMacClassBBeaconTimerEvent+0x34>)
 801864c:	f00b ff8e 	bl	802456c <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 8018650:	4a07      	ldr	r2, [pc, #28]	@ (8018670 <LoRaMacClassBBeaconTimerEvent+0x38>)
 8018652:	7813      	ldrb	r3, [r2, #0]
 8018654:	f043 0301 	orr.w	r3, r3, #1
 8018658:	7013      	strb	r3, [r2, #0]
    OnClassBMacProcessNotify( );
 801865a:	f7ff fd59 	bl	8018110 <OnClassBMacProcessNotify>
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801865e:	bf00      	nop
 8018660:	3708      	adds	r7, #8
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	20001cec 	.word	0x20001cec
 801866c:	20001d38 	.word	0x20001d38
 8018670:	20001ce8 	.word	0x20001ce8

08018674 <LoRaMacClassBProcessBeacon>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessBeacon( void )
{
 8018674:	b590      	push	{r4, r7, lr}
 8018676:	b08f      	sub	sp, #60	@ 0x3c
 8018678:	af02      	add	r7, sp, #8
    bool activateTimer = false;
 801867a:	2300      	movs	r3, #0
 801867c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    TimerTime_t beaconEventTime = 1;
 8018680:	2301      	movs	r3, #1
 8018682:	62bb      	str	r3, [r7, #40]	@ 0x28
    RxConfigParams_t beaconRxConfig;
    TimerTime_t beaconTimestamp = Ctx.BeaconCtx.TimeStamp;
 8018684:	4b9c      	ldr	r3, [pc, #624]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018688:	627b      	str	r3, [r7, #36]	@ 0x24
 
    MW_LOG(TS_ON, VLEVEL_H, "Process beacon state Entry %d\r\n", Ctx.BeaconState);
 801868a:	4b9b      	ldr	r3, [pc, #620]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801868c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018690:	9300      	str	r3, [sp, #0]
 8018692:	4b9a      	ldr	r3, [pc, #616]	@ (80188fc <LoRaMacClassBProcessBeacon+0x288>)
 8018694:	2201      	movs	r2, #1
 8018696:	2100      	movs	r1, #0
 8018698:	2003      	movs	r0, #3
 801869a:	f00c f981 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
    // Beacon state machine
    switch( Ctx.BeaconState )
 801869e:	4b96      	ldr	r3, [pc, #600]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80186a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80186a4:	2b0a      	cmp	r3, #10
 80186a6:	f200 81ad 	bhi.w	8018a04 <LoRaMacClassBProcessBeacon+0x390>
 80186aa:	a201      	add	r2, pc, #4	@ (adr r2, 80186b0 <LoRaMacClassBProcessBeacon+0x3c>)
 80186ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b0:	080187e5 	.word	0x080187e5
 80186b4:	080186dd 	.word	0x080186dd
 80186b8:	0801883b 	.word	0x0801883b
 80186bc:	08018a05 	.word	0x08018a05
 80186c0:	08018857 	.word	0x08018857
 80186c4:	080188a3 	.word	0x080188a3
 80186c8:	08018a05 	.word	0x08018a05
 80186cc:	08018909 	.word	0x08018909
 80186d0:	08018985 	.word	0x08018985
 80186d4:	08018a05 	.word	0x08018a05
 80186d8:	080189a3 	.word	0x080189a3
    {
        case BEACON_STATE_ACQUISITION_BY_TIME:
        {
            activateTimer = true;
 80186dc:	2301      	movs	r3, #1
 80186de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 80186e2:	4b85      	ldr	r3, [pc, #532]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80186e4:	7b1b      	ldrb	r3, [r3, #12]
 80186e6:	f003 0310 	and.w	r3, r3, #16
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d007      	beq.n	8018700 <LoRaMacClassBProcessBeacon+0x8c>
            {
                Radio.Sleep();
 80186f0:	4b83      	ldr	r3, [pc, #524]	@ (8018900 <LoRaMacClassBProcessBeacon+0x28c>)
 80186f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186f4:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 80186f6:	4b80      	ldr	r3, [pc, #512]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80186f8:	220a      	movs	r2, #10
 80186fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;

                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
                }
            }
            break;
 80186fe:	e187      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
                ResetWindowTimeout( );
 8018700:	f7ff fdd2 	bl	80182a8 <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 8018704:	4b7c      	ldr	r3, [pc, #496]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018706:	7b1b      	ldrb	r3, [r3, #12]
 8018708:	f003 0304 	and.w	r3, r3, #4
 801870c:	b2db      	uxtb	r3, r3
 801870e:	2b00      	cmp	r3, #0
 8018710:	d05a      	beq.n	80187c8 <LoRaMacClassBProcessBeacon+0x154>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8018712:	4b79      	ldr	r3, [pc, #484]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018714:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8018716:	1d3b      	adds	r3, r7, #4
 8018718:	4611      	mov	r1, r2
 801871a:	4618      	mov	r0, r3
 801871c:	f7ff fb64 	bl	8017de8 <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 8018720:	4b75      	ldr	r3, [pc, #468]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018724:	2b00      	cmp	r3, #0
 8018726:	d039      	beq.n	801879c <LoRaMacClassBProcessBeacon+0x128>
                        uint32_t now = TimerGetCurrentTime( );
 8018728:	f00c f83a 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 801872c:	61f8      	str	r0, [r7, #28]
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > now )
 801872e:	4b72      	ldr	r3, [pc, #456]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018730:	3320      	adds	r3, #32
 8018732:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018736:	f00a fbf7 	bl	8022f28 <SysTimeToMs>
 801873a:	4602      	mov	r2, r0
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	4293      	cmp	r3, r2
 8018740:	d21a      	bcs.n	8018778 <LoRaMacClassBProcessBeacon+0x104>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - now, Ctx.BeaconCtx.Temperature );
 8018742:	4b6d      	ldr	r3, [pc, #436]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018744:	3320      	adds	r3, #32
 8018746:	e893 0003 	ldmia.w	r3, {r0, r1}
 801874a:	f00a fbed 	bl	8022f28 <SysTimeToMs>
 801874e:	4602      	mov	r2, r0
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	1ad3      	subs	r3, r2, r3
 8018754:	4a68      	ldr	r2, [pc, #416]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018756:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801875a:	4611      	mov	r1, r2
 801875c:	4618      	mov	r0, r3
 801875e:	f7ff f9d9 	bl	8017b14 <TimerTempCompensation>
 8018762:	62b8      	str	r0, [r7, #40]	@ 0x28
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8018764:	693a      	ldr	r2, [r7, #16]
 8018766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018768:	429a      	cmp	r2, r3
 801876a:	da13      	bge.n	8018794 <LoRaMacClassBProcessBeacon+0x120>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	461a      	mov	r2, r3
 8018770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018772:	4413      	add	r3, r2
 8018774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018776:	e00d      	b.n	8018794 <LoRaMacClassBProcessBeacon+0x120>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8018778:	4a5f      	ldr	r2, [pc, #380]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801877a:	7b13      	ldrb	r3, [r2, #12]
 801877c:	f36f 0382 	bfc	r3, #2, #1
 8018780:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8018782:	4a5d      	ldr	r2, [pc, #372]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018784:	7b13      	ldrb	r3, [r2, #12]
 8018786:	f36f 03c3 	bfc	r3, #3, #1
 801878a:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 801878c:	4b5a      	ldr	r3, [pc, #360]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801878e:	2200      	movs	r2, #0
 8018790:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8018794:	4b58      	ldr	r3, [pc, #352]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018796:	2200      	movs	r2, #0
 8018798:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 801879a:	e139      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
                        activateTimer = false;
 801879c:	2300      	movs	r3, #0
 801879e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 80187a2:	4a55      	ldr	r2, [pc, #340]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187a4:	7b13      	ldrb	r3, [r2, #12]
 80187a6:	f36f 0382 	bfc	r3, #2, #1
 80187aa:	7313      	strb	r3, [r2, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 80187ac:	4a52      	ldr	r2, [pc, #328]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187ae:	7b13      	ldrb	r3, [r2, #12]
 80187b0:	f043 0310 	orr.w	r3, r3, #16
 80187b4:	7313      	strb	r3, [r2, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	461a      	mov	r2, r3
 80187bc:	2100      	movs	r1, #0
 80187be:	f640 0048 	movw	r0, #2120	@ 0x848
 80187c2:	f7ff fb5d 	bl	8017e80 <RxBeaconSetup>
            break;
 80187c6:	e123      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 80187c8:	4b4b      	ldr	r3, [pc, #300]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187ca:	2200      	movs	r2, #0
 80187cc:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 80187ce:	4b4a      	ldr	r3, [pc, #296]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187d0:	2200      	movs	r2, #0
 80187d2:	849a      	strh	r2, [r3, #36]	@ 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 80187d4:	4b48      	ldr	r3, [pc, #288]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187d6:	2200      	movs	r2, #0
 80187d8:	639a      	str	r2, [r3, #56]	@ 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 80187da:	4b47      	ldr	r3, [pc, #284]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187dc:	2200      	movs	r2, #0
 80187de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80187e2:	e115      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
        }
        case BEACON_STATE_ACQUISITION:
        {
            activateTimer = true;
 80187e4:	2301      	movs	r3, #1
 80187e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 80187ea:	4b43      	ldr	r3, [pc, #268]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80187ec:	7b1b      	ldrb	r3, [r3, #12]
 80187ee:	f003 0310 	and.w	r3, r3, #16
 80187f2:	b2db      	uxtb	r3, r3
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d007      	beq.n	8018808 <LoRaMacClassBProcessBeacon+0x194>
            {
                Radio.Sleep();
 80187f8:	4b41      	ldr	r3, [pc, #260]	@ (8018900 <LoRaMacClassBProcessBeacon+0x28c>)
 80187fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187fc:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 80187fe:	4b3e      	ldr	r3, [pc, #248]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018800:	220a      	movs	r2, #10
 8018802:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                // find a beacon, the state machine will stay in state BEACON_STATE_ACQUISITION.
                // This state detects that a acquisition was pending previously and will change the next
                // state to BEACON_STATE_LOST.
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
            }
            break;
 8018806:	e103      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
                ResetWindowTimeout( );
 8018808:	f7ff fd4e 	bl	80182a8 <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 801880c:	4a3a      	ldr	r2, [pc, #232]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801880e:	7b13      	ldrb	r3, [r2, #12]
 8018810:	f043 0310 	orr.w	r3, r3, #16
 8018814:	7313      	strb	r3, [r2, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8018816:	f44f 33fa 	mov.w	r3, #128000	@ 0x1f400
 801881a:	62bb      	str	r3, [r7, #40]	@ 0x28
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 801881c:	4b36      	ldr	r3, [pc, #216]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801881e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8018820:	1d3b      	adds	r3, r7, #4
 8018822:	4611      	mov	r1, r2
 8018824:	4618      	mov	r0, r3
 8018826:	f7ff fadf 	bl	8017de8 <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	b29b      	uxth	r3, r3
 801882e:	461a      	mov	r2, r3
 8018830:	2101      	movs	r1, #1
 8018832:	2000      	movs	r0, #0
 8018834:	f7ff fb24 	bl	8017e80 <RxBeaconSetup>
            break;
 8018838:	e0ea      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
        }
        case BEACON_STATE_TIMEOUT:
        {
            // We have to update the beacon time, since we missed a beacon
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 801883a:	4b2f      	ldr	r3, [pc, #188]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801883c:	691b      	ldr	r3, [r3, #16]
 801883e:	3380      	adds	r3, #128	@ 0x80
 8018840:	4a2d      	ldr	r2, [pc, #180]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018842:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8018844:	4b2c      	ldr	r3, [pc, #176]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018846:	2200      	movs	r2, #0
 8018848:	829a      	strh	r2, [r3, #20]

            // Enlarge window timeouts to increase the chance to receive the next beacon
            EnlargeWindowTimeout( );
 801884a:	f7ff fcfd 	bl	8018248 <EnlargeWindowTimeout>

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 801884e:	4b2a      	ldr	r3, [pc, #168]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018850:	2204      	movs	r2, #4
 8018852:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        }
            // Intentional fall through
        case BEACON_STATE_REACQUISITION:
        {
            activateTimer = true;
 8018856:	2301      	movs	r3, #1
 8018858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            // The beacon is no longer acquired
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 801885c:	4a26      	ldr	r2, [pc, #152]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801885e:	7b13      	ldrb	r3, [r2, #12]
 8018860:	f36f 0341 	bfc	r3, #1, #1
 8018864:	7313      	strb	r3, [r2, #12]

            // Verify if the maximum beacon less period has been elapsed
            if( ( beaconTimestamp - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 8018866:	4b24      	ldr	r3, [pc, #144]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018868:	3318      	adds	r3, #24
 801886a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801886e:	f00a fb5b 	bl	8022f28 <SysTimeToMs>
 8018872:	4602      	mov	r2, r0
 8018874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018876:	1a9b      	subs	r3, r3, r2
 8018878:	4a22      	ldr	r2, [pc, #136]	@ (8018904 <LoRaMacClassBProcessBeacon+0x290>)
 801887a:	4293      	cmp	r3, r2
 801887c:	d904      	bls.n	8018888 <LoRaMacClassBProcessBeacon+0x214>
            {
                Ctx.BeaconState = BEACON_STATE_LOST;
 801887e:	4b1e      	ldr	r3, [pc, #120]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 8018880:	220a      	movs	r2, #10
 8018882:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                                                     Ctx.BeaconCtx.BeaconWindowMovement, beaconTimestamp );

                // Setup next state
                Ctx.BeaconState = BEACON_STATE_IDLE;
            }
            break;
 8018886:	e0c3      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 8018888:	4b1b      	ldr	r3, [pc, #108]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801888a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801888c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801888e:	4619      	mov	r1, r3
 8018890:	200f      	movs	r0, #15
 8018892:	f7ff fd7f 	bl	8018394 <UpdateBeaconState>
 8018896:	62b8      	str	r0, [r7, #40]	@ 0x28
                Ctx.BeaconState = BEACON_STATE_IDLE;
 8018898:	4b17      	ldr	r3, [pc, #92]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 801889a:	2207      	movs	r2, #7
 801889c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80188a0:	e0b6      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
        }
        case BEACON_STATE_LOCKED:
        {
            activateTimer = true;
 80188a2:	2301      	movs	r3, #1
 80188a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            // We have received a beacon. Acquisition is no longer pending.
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 80188a8:	4a13      	ldr	r2, [pc, #76]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80188aa:	7b13      	ldrb	r3, [r2, #12]
 80188ac:	f36f 1304 	bfc	r3, #4, #1
 80188b0:	7313      	strb	r3, [r2, #12]

            // Handle beacon reception
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 80188b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188b4:	2100      	movs	r1, #0
 80188b6:	200d      	movs	r0, #13
 80188b8:	f7ff fd6c 	bl	8018394 <UpdateBeaconState>
 80188bc:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                 0, beaconTimestamp );

            // Setup the MLME confirm for the MLME_BEACON_ACQUISITION
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 80188be:	4b0e      	ldr	r3, [pc, #56]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80188c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	f003 0304 	and.w	r3, r3, #4
 80188ca:	b2db      	uxtb	r3, r3
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d00e      	beq.n	80188ee <LoRaMacClassBProcessBeacon+0x27a>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 80188d0:	200b      	movs	r0, #11
 80188d2:	f001 fd6b 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80188d6:	4603      	mov	r3, r0
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d008      	beq.n	80188ee <LoRaMacClassBProcessBeacon+0x27a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 80188dc:	210b      	movs	r1, #11
 80188de:	2000      	movs	r0, #0
 80188e0:	f001 fcd8 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 80188e4:	4b04      	ldr	r3, [pc, #16]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80188e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80188ea:	2200      	movs	r2, #0
 80188ec:	605a      	str	r2, [r3, #4]
                }
            }

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_IDLE;
 80188ee:	4b02      	ldr	r3, [pc, #8]	@ (80188f8 <LoRaMacClassBProcessBeacon+0x284>)
 80188f0:	2207      	movs	r2, #7
 80188f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80188f6:	e08b      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
 80188f8:	20001cec 	.word	0x20001cec
 80188fc:	08028b78 	.word	0x08028b78
 8018900:	08029818 	.word	0x08029818
 8018904:	006ddd00 	.word	0x006ddd00
        }
        case BEACON_STATE_IDLE:
        {
            activateTimer = true;
 8018908:	2301      	movs	r3, #1
 801890a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 801890e:	494d      	ldr	r1, [pc, #308]	@ (8018a44 <LoRaMacClassBProcessBeacon+0x3d0>)
 8018910:	484d      	ldr	r0, [pc, #308]	@ (8018a48 <LoRaMacClassBProcessBeacon+0x3d4>)
 8018912:	f7ff fbe6 	bl	80180e2 <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 8018916:	4b4d      	ldr	r3, [pc, #308]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018918:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 801891a:	4b4d      	ldr	r3, [pc, #308]	@ (8018a50 <LoRaMacClassBProcessBeacon+0x3dc>)
 801891c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801891e:	4798      	blx	r3
 8018920:	4603      	mov	r3, r0
 8018922:	1ae3      	subs	r3, r4, r3
 8018924:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t now = TimerGetCurrentTime( );
 8018926:	f00b ff3b 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 801892a:	6238      	str	r0, [r7, #32]

            // The goal is to calculate beaconRxConfig.WindowTimeout and beaconRxConfig.WindowOffset
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 801892c:	4b47      	ldr	r3, [pc, #284]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 801892e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8018930:	1d3b      	adds	r3, r7, #4
 8018932:	4611      	mov	r1, r2
 8018934:	4618      	mov	r0, r3
 8018936:	f7ff fa57 	bl	8017de8 <CalculateBeaconRxWindowConfig>

            if( beaconEventTime > now )
 801893a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801893c:	6a3b      	ldr	r3, [r7, #32]
 801893e:	429a      	cmp	r2, r3
 8018940:	d919      	bls.n	8018976 <LoRaMacClassBProcessBeacon+0x302>
            {
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8018942:	4b42      	ldr	r3, [pc, #264]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018944:	2208      	movs	r2, #8
 8018946:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                beaconEventTime -= now;
 801894a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801894c:	6a3b      	ldr	r3, [r7, #32]
 801894e:	1ad3      	subs	r3, r2, r3
 8018950:	62bb      	str	r3, [r7, #40]	@ 0x28
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8018952:	4b3e      	ldr	r3, [pc, #248]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018954:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018958:	4619      	mov	r1, r3
 801895a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801895c:	f7ff f8da 	bl	8017b14 <TimerTempCompensation>
 8018960:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8018962:	693a      	ldr	r2, [r7, #16]
 8018964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018966:	429a      	cmp	r2, r3
 8018968:	da51      	bge.n	8018a0e <LoRaMacClassBProcessBeacon+0x39a>
                {
                    // Apply the offset of the system error respectively beaconing precision setting
                    beaconEventTime += beaconRxConfig.WindowOffset;
 801896a:	693b      	ldr	r3, [r7, #16]
 801896c:	461a      	mov	r2, r3
 801896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018970:	4413      	add	r3, r2
 8018972:	62bb      	str	r3, [r7, #40]	@ 0x28
            else
            {
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
                beaconEventTime = 1;
            }
            break;
 8018974:	e04b      	b.n	8018a0e <LoRaMacClassBProcessBeacon+0x39a>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8018976:	4b35      	ldr	r3, [pc, #212]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018978:	2204      	movs	r2, #4
 801897a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                beaconEventTime = 1;
 801897e:	2301      	movs	r3, #1
 8018980:	62bb      	str	r3, [r7, #40]	@ 0x28
            break;
 8018982:	e044      	b.n	8018a0e <LoRaMacClassBProcessBeacon+0x39a>
        }
        case BEACON_STATE_GUARD:
        {
            Ctx.BeaconState = BEACON_STATE_RX;
 8018984:	4b31      	ldr	r3, [pc, #196]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018986:	2209      	movs	r2, #9
 8018988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 801898c:	f000 ffe0 	bl	8019950 <LoRaMacClassBStopRxSlots>

            // Don't use the default channel. We know on which
            // channel the next beacon will be transmitted
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	b29b      	uxth	r3, r3
 8018994:	461a      	mov	r2, r3
 8018996:	2100      	movs	r1, #0
 8018998:	f640 0048 	movw	r0, #2120	@ 0x848
 801899c:	f7ff fa70 	bl	8017e80 <RxBeaconSetup>
            break;
 80189a0:	e036      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
        }
        case BEACON_STATE_LOST:
        {
            // Handle events
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 80189a2:	4b2a      	ldr	r3, [pc, #168]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 80189a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80189a8:	781b      	ldrb	r3, [r3, #0]
 80189aa:	f003 0304 	and.w	r3, r3, #4
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d00a      	beq.n	80189ca <LoRaMacClassBProcessBeacon+0x356>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 80189b4:	200b      	movs	r0, #11
 80189b6:	f001 fcf9 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d015      	beq.n	80189ec <LoRaMacClassBProcessBeacon+0x378>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 80189c0:	210b      	movs	r1, #11
 80189c2:	200f      	movs	r0, #15
 80189c4:	f001 fc66 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
 80189c8:	e010      	b.n	80189ec <LoRaMacClassBProcessBeacon+0x378>
                }
            }
            else
            {
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 80189ca:	4b20      	ldr	r3, [pc, #128]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 80189cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80189d0:	220e      	movs	r2, #14
 80189d2:	701a      	strb	r2, [r3, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80189d4:	4b1d      	ldr	r3, [pc, #116]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 80189d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80189da:	2200      	movs	r2, #0
 80189dc:	705a      	strb	r2, [r3, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 80189de:	4b1b      	ldr	r3, [pc, #108]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 80189e0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80189e4:	7813      	ldrb	r3, [r2, #0]
 80189e6:	f043 0308 	orr.w	r3, r3, #8
 80189ea:	7013      	strb	r3, [r2, #0]
            }

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 80189ec:	f000 ffb0 	bl	8019950 <LoRaMacClassBStopRxSlots>

            // Initialize default state for class b
            InitClassBDefaults( );
 80189f0:	f7ff fbee 	bl	80181d0 <InitClassBDefaults>

            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 80189f4:	4b15      	ldr	r3, [pc, #84]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 80189f6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80189fa:	7813      	ldrb	r3, [r2, #0]
 80189fc:	f043 0310 	orr.w	r3, r3, #16
 8018a00:	7013      	strb	r3, [r2, #0]

            break;
 8018a02:	e005      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
        }
        default:
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8018a04:	4b11      	ldr	r3, [pc, #68]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018a06:	2200      	movs	r2, #0
 8018a08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8018a0c:	e000      	b.n	8018a10 <LoRaMacClassBProcessBeacon+0x39c>
            break;
 8018a0e:	bf00      	nop
        }
    }
    MW_LOG(TS_ON, VLEVEL_H, "Process beacon state Exit %d\r\n", Ctx.BeaconState);
 8018a10:	4b0e      	ldr	r3, [pc, #56]	@ (8018a4c <LoRaMacClassBProcessBeacon+0x3d8>)
 8018a12:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018a16:	9300      	str	r3, [sp, #0]
 8018a18:	4b0e      	ldr	r3, [pc, #56]	@ (8018a54 <LoRaMacClassBProcessBeacon+0x3e0>)
 8018a1a:	2201      	movs	r2, #1
 8018a1c:	2100      	movs	r1, #0
 8018a1e:	2003      	movs	r0, #3
 8018a20:	f00b ffbe 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>

    if( activateTimer == true )
 8018a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d006      	beq.n	8018a3a <LoRaMacClassBProcessBeacon+0x3c6>
    {
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 8018a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018a2e:	480a      	ldr	r0, [pc, #40]	@ (8018a58 <LoRaMacClassBProcessBeacon+0x3e4>)
 8018a30:	f00b fe0c 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 8018a34:	4808      	ldr	r0, [pc, #32]	@ (8018a58 <LoRaMacClassBProcessBeacon+0x3e4>)
 8018a36:	f00b fd2b 	bl	8024490 <UTIL_TIMER_Start>
    }
}
 8018a3a:	bf00      	nop
 8018a3c:	3734      	adds	r7, #52	@ 0x34
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd90      	pop	{r4, r7, pc}
 8018a42:	bf00      	nop
 8018a44:	20001cf8 	.word	0x20001cf8
 8018a48:	20001d80 	.word	0x20001d80
 8018a4c:	20001cec 	.word	0x20001cec
 8018a50:	08029818 	.word	0x08029818
 8018a54:	08028b98 	.word	0x08028b98
 8018a58:	20001d38 	.word	0x20001d38

08018a5c <LoRaMacClassBPingSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b082      	sub	sp, #8
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 8018a64:	4a05      	ldr	r2, [pc, #20]	@ (8018a7c <LoRaMacClassBPingSlotTimerEvent+0x20>)
 8018a66:	7813      	ldrb	r3, [r2, #0]
 8018a68:	f043 0302 	orr.w	r3, r3, #2
 8018a6c:	7013      	strb	r3, [r2, #0]

    OnClassBMacProcessNotify( );
 8018a6e:	f7ff fb4f 	bl	8018110 <OnClassBMacProcessNotify>
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8018a72:	bf00      	nop
 8018a74:	3708      	adds	r7, #8
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	20001ce8 	.word	0x20001ce8

08018a80 <LoRaMacClassBProcessPingSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessPingSlot( void )
{
 8018a80:	b590      	push	{r4, r7, lr}
 8018a82:	b087      	sub	sp, #28
 8018a84:	af02      	add	r7, sp, #8
    static RxConfigParams_t pingSlotRxConfig;
    TimerTime_t pingSlotTime = 0;
 8018a86:	2300      	movs	r3, #0
 8018a88:	603b      	str	r3, [r7, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint32_t maxRxError = 0;
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	607b      	str	r3, [r7, #4]
    bool slotHasPriority = false;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	73fb      	strb	r3, [r7, #15]
#endif /* LORAMAC_VERSION */

    switch( Ctx.PingSlotState )
 8018a92:	4b8f      	ldr	r3, [pc, #572]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018a94:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8018a98:	2b02      	cmp	r3, #2
 8018a9a:	d06c      	beq.n	8018b76 <LoRaMacClassBProcessPingSlot+0xf6>
 8018a9c:	2b02      	cmp	r3, #2
 8018a9e:	f300 810d 	bgt.w	8018cbc <LoRaMacClassBProcessPingSlot+0x23c>
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d002      	beq.n	8018aac <LoRaMacClassBProcessPingSlot+0x2c>
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d014      	beq.n	8018ad4 <LoRaMacClassBProcessPingSlot+0x54>
 8018aaa:	e107      	b.n	8018cbc <LoRaMacClassBProcessPingSlot+0x23c>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8018aac:	4b88      	ldr	r3, [pc, #544]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018aae:	691b      	ldr	r3, [r3, #16]
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	4611      	mov	r1, r2
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 8018ab6:	4b86      	ldr	r3, [pc, #536]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018ab8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8018abc:	681a      	ldr	r2, [r3, #0]
                               ClassBNvm->PingSlotCtx.PingPeriod,
 8018abe:	4b85      	ldr	r3, [pc, #532]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8018ac2:	885b      	ldrh	r3, [r3, #2]
 8018ac4:	4c84      	ldr	r4, [pc, #528]	@ (8018cd8 <LoRaMacClassBProcessPingSlot+0x258>)
 8018ac6:	9400      	str	r4, [sp, #0]
 8018ac8:	f7ff f8b2 	bl	8017c30 <ComputePingOffset>
                               &( Ctx.PingSlotCtx.PingOffset ) );
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 8018acc:	4b80      	ldr	r3, [pc, #512]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018ace:	2201      	movs	r2, #1
 8018ad0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 8018ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018ad6:	8898      	ldrh	r0, [r3, #4]
 8018ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	8859      	ldrh	r1, [r3, #2]
 8018ade:	4b7d      	ldr	r3, [pc, #500]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	785b      	ldrb	r3, [r3, #1]
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	463b      	mov	r3, r7
 8018ae8:	f7ff fa30 	bl	8017f4c <CalcNextSlotTime>
 8018aec:	4603      	mov	r3, r0
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	f000 80e9 	beq.w	8018cc6 <LoRaMacClassBProcessPingSlot+0x246>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8018af4:	4b76      	ldr	r3, [pc, #472]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018af6:	7b1b      	ldrb	r3, [r3, #12]
 8018af8:	f003 0302 	and.w	r3, r3, #2
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d02c      	beq.n	8018b5c <LoRaMacClassBProcessPingSlot+0xdc>
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
                                                     &pingSlotRxConfig );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Compare and assign the maximum between the region specific rx error window time
                    // and time precision received from beacon frame format.
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 8018b02:	4b73      	ldr	r3, [pc, #460]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b04:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8018b08:	461a      	mov	r2, r3
 8018b0a:	4b71      	ldr	r3, [pc, #452]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	4293      	cmp	r3, r2
 8018b14:	bf38      	it	cc
 8018b16:	4613      	movcc	r3, r2
 8018b18:	607b      	str	r3, [r7, #4]
                                      ( uint32_t ) Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds );

                    // Compute the symbol timeout. Apply it only, if the beacon is acquired
                    // Otherwise, take the enlargement of the symbols into account.
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018b20:	7818      	ldrb	r0, [r3, #0]
                                                     ClassBNvm->PingSlotCtx.Datarate,
 8018b22:	4b6c      	ldr	r3, [pc, #432]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018b24:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018b26:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8018b2a:	4b69      	ldr	r3, [pc, #420]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018b30:	791a      	ldrb	r2, [r3, #4]
 8018b32:	4b6a      	ldr	r3, [pc, #424]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018b34:	9300      	str	r3, [sp, #0]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	f002 ff4d 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                                     maxRxError,
                                                     &pingSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 8018b3c:	4b67      	ldr	r3, [pc, #412]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018b3e:	689b      	ldr	r3, [r3, #8]
 8018b40:	b29a      	uxth	r2, r3
 8018b42:	4b63      	ldr	r3, [pc, #396]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b44:	80da      	strh	r2, [r3, #6]

                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 8018b46:	4b65      	ldr	r3, [pc, #404]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	683a      	ldr	r2, [r7, #0]
 8018b4c:	4293      	cmp	r3, r2
 8018b4e:	da05      	bge.n	8018b5c <LoRaMacClassBProcessPingSlot+0xdc>
                    {// Apply the window offset
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 8018b50:	4b62      	ldr	r3, [pc, #392]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	461a      	mov	r2, r3
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	4413      	add	r3, r2
 8018b5a:	603b      	str	r3, [r7, #0]
                    }
                }

                // Start the timer if the ping slot time is in range
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 8018b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b5e:	2202      	movs	r2, #2
 8018b60:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 8018b64:	683b      	ldr	r3, [r7, #0]
 8018b66:	4619      	mov	r1, r3
 8018b68:	485d      	ldr	r0, [pc, #372]	@ (8018ce0 <LoRaMacClassBProcessPingSlot+0x260>)
 8018b6a:	f00b fd6f 	bl	802464c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8018b6e:	485c      	ldr	r0, [pc, #368]	@ (8018ce0 <LoRaMacClassBProcessPingSlot+0x260>)
 8018b70:	f00b fc8e 	bl	8024490 <UTIL_TIMER_Start>
            }
            break;
 8018b74:	e0a7      	b.n	8018cc6 <LoRaMacClassBProcessPingSlot+0x246>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 8018b76:	4b57      	ldr	r3, [pc, #348]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	60bb      	str	r3, [r7, #8]

            // Apply a custom frequency if the following bit is set
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 8018b7e:	4b55      	ldr	r3, [pc, #340]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	781b      	ldrb	r3, [r3, #0]
 8018b84:	f003 0302 	and.w	r3, r3, #2
 8018b88:	b2db      	uxtb	r3, r3
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d10b      	bne.n	8018ba6 <LoRaMacClassBProcessPingSlot+0x126>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 8018b8e:	4b50      	ldr	r3, [pc, #320]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018b94:	6818      	ldr	r0, [r3, #0]
 8018b96:	4b4e      	ldr	r3, [pc, #312]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018b98:	6919      	ldr	r1, [r3, #16]
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8018ba0:	f7ff f8c6 	bl	8017d30 <CalcDownlinkChannelAndFrequency>
 8018ba4:	60b8      	str	r0, [r7, #8]
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.PingSlotTimer );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 8018ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018ba8:	689b      	ldr	r3, [r3, #8]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d016      	beq.n	8018bdc <LoRaMacClassBProcessPingSlot+0x15c>
            {
                // Verify, if the unicast has priority.
                slotHasPriority = CheckSlotPriority( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0,
 8018bae:	4b48      	ldr	r3, [pc, #288]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018bb4:	6818      	ldr	r0, [r3, #0]
 8018bb6:	4b47      	ldr	r3, [pc, #284]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	7a59      	ldrb	r1, [r3, #9]
                                                     Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1 );
 8018bbc:	4b44      	ldr	r3, [pc, #272]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bbe:	689b      	ldr	r3, [r3, #8]
                slotHasPriority = CheckSlotPriority( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0,
 8018bc0:	685a      	ldr	r2, [r3, #4]
                                                     Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1 );
 8018bc2:	4b43      	ldr	r3, [pc, #268]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bc4:	689b      	ldr	r3, [r3, #8]
                slotHasPriority = CheckSlotPriority( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0,
 8018bc6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8018bca:	2401      	movs	r4, #1
 8018bcc:	9401      	str	r4, [sp, #4]
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	4613      	mov	r3, r2
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	f7ff fc47 	bl	8018466 <CheckSlotPriority>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	73fb      	strb	r3, [r7, #15]
            }

            // Open the ping slot window only, if there is no multicast ping slot
            // open or if the unicast has priority.
            if( ( Ctx.MulticastSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 8018bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8018be2:	2b03      	cmp	r3, #3
 8018be4:	d102      	bne.n	8018bec <LoRaMacClassBProcessPingSlot+0x16c>
 8018be6:	7bfb      	ldrb	r3, [r7, #15]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d05a      	beq.n	8018ca2 <LoRaMacClassBProcessPingSlot+0x222>
            {
                if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8018bec:	4b38      	ldr	r3, [pc, #224]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bee:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8018bf2:	2b03      	cmp	r3, #3
 8018bf4:	d10d      	bne.n	8018c12 <LoRaMacClassBProcessPingSlot+0x192>
                {
                    // Close multicast slot window, if necessary. Multicast slots have priority
                    Radio.Standby( );
 8018bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8018ce4 <LoRaMacClassBProcessPingSlot+0x264>)
 8018bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018bfa:	4798      	blx	r3
                    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018bfc:	4b34      	ldr	r3, [pc, #208]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018bfe:	2200      	movs	r2, #0
 8018c00:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                    TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8018c04:	211e      	movs	r1, #30
 8018c06:	4838      	ldr	r0, [pc, #224]	@ (8018ce8 <LoRaMacClassBProcessPingSlot+0x268>)
 8018c08:	f00b fd20 	bl	802464c <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.MulticastSlotTimer );
 8018c0c:	4836      	ldr	r0, [pc, #216]	@ (8018ce8 <LoRaMacClassBProcessPingSlot+0x268>)
 8018c0e:	f00b fc3f 	bl	8024490 <UTIL_TIMER_Start>
                }

                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 8018c12:	4b2f      	ldr	r3, [pc, #188]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c14:	2203      	movs	r2, #3
 8018c16:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 8018c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8018cd4 <LoRaMacClassBProcessPingSlot+0x254>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018c22:	4b2e      	ldr	r3, [pc, #184]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c24:	705a      	strb	r2, [r3, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8018c26:	4b2a      	ldr	r3, [pc, #168]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c2c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8018c30:	4b2a      	ldr	r3, [pc, #168]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c32:	741a      	strb	r2, [r3, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 8018c34:	4b26      	ldr	r3, [pc, #152]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c3a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8018c3e:	4b27      	ldr	r3, [pc, #156]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c40:	745a      	strb	r2, [r3, #17]
                pingSlotRxConfig.Frequency = frequency;
 8018c42:	4a26      	ldr	r2, [pc, #152]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	6053      	str	r3, [r2, #4]
                pingSlotRxConfig.RxContinuous = false;
 8018c48:	4b24      	ldr	r3, [pc, #144]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	749a      	strb	r2, [r3, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8018c4e:	4b23      	ldr	r3, [pc, #140]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c50:	2204      	movs	r2, #4
 8018c52:	74da      	strb	r2, [r3, #19]
                pingSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 8018c54:	4b1e      	ldr	r3, [pc, #120]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018c5a:	781a      	ldrb	r2, [r3, #0]
 8018c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c5e:	751a      	strb	r2, [r3, #20]

                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8018c60:	4b1b      	ldr	r3, [pc, #108]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018c66:	7818      	ldrb	r0, [r3, #0]
 8018c68:	4b19      	ldr	r3, [pc, #100]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018c6e:	3304      	adds	r3, #4
 8018c70:	461a      	mov	r2, r3
 8018c72:	491a      	ldr	r1, [pc, #104]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c74:	f002 fed2 	bl	801ba1c <RegionRxConfig>

                if( pingSlotRxConfig.RxContinuous == false )
 8018c78:	4b18      	ldr	r3, [pc, #96]	@ (8018cdc <LoRaMacClassBProcessPingSlot+0x25c>)
 8018c7a:	7c9b      	ldrb	r3, [r3, #18]
 8018c7c:	f083 0301 	eor.w	r3, r3, #1
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d008      	beq.n	8018c98 <LoRaMacClassBProcessPingSlot+0x218>
                {
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8018c86:	4b17      	ldr	r3, [pc, #92]	@ (8018ce4 <LoRaMacClassBProcessPingSlot+0x264>)
 8018c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c8a:	4a11      	ldr	r2, [pc, #68]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018c8c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 8018c90:	6892      	ldr	r2, [r2, #8]
 8018c92:	4610      	mov	r0, r2
 8018c94:	4798      	blx	r3
                if( pingSlotRxConfig.RxContinuous == false )
 8018c96:	e010      	b.n	8018cba <LoRaMacClassBProcessPingSlot+0x23a>
                }
                else
                {
                    Radio.Rx( 0 ); // Continuous mode
 8018c98:	4b12      	ldr	r3, [pc, #72]	@ (8018ce4 <LoRaMacClassBProcessPingSlot+0x264>)
 8018c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c9c:	2000      	movs	r0, #0
 8018c9e:	4798      	blx	r3
                if( pingSlotRxConfig.RxContinuous == false )
 8018ca0:	e00b      	b.n	8018cba <LoRaMacClassBProcessPingSlot+0x23a>
                }
            }
            else
            {
                // Multicast slots have priority. Skip Rx
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8018caa:	211e      	movs	r1, #30
 8018cac:	480c      	ldr	r0, [pc, #48]	@ (8018ce0 <LoRaMacClassBProcessPingSlot+0x260>)
 8018cae:	f00b fccd 	bl	802464c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 8018cb2:	480b      	ldr	r0, [pc, #44]	@ (8018ce0 <LoRaMacClassBProcessPingSlot+0x260>)
 8018cb4:	f00b fbec 	bl	8024490 <UTIL_TIMER_Start>
            }
#endif /* LORAMAC_VERSION */
            break;
 8018cb8:	e006      	b.n	8018cc8 <LoRaMacClassBProcessPingSlot+0x248>
 8018cba:	e005      	b.n	8018cc8 <LoRaMacClassBProcessPingSlot+0x248>
        }
        default:
        {
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018cbc:	4b04      	ldr	r3, [pc, #16]	@ (8018cd0 <LoRaMacClassBProcessPingSlot+0x250>)
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            break;
 8018cc4:	e000      	b.n	8018cc8 <LoRaMacClassBProcessPingSlot+0x248>
            break;
 8018cc6:	bf00      	nop
        }
    }
}
 8018cc8:	bf00      	nop
 8018cca:	3714      	adds	r7, #20
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd90      	pop	{r4, r7, pc}
 8018cd0:	20001cec 	.word	0x20001cec
 8018cd4:	20001dac 	.word	0x20001dac
 8018cd8:	20001cf0 	.word	0x20001cf0
 8018cdc:	20001db0 	.word	0x20001db0
 8018ce0:	20001d50 	.word	0x20001d50
 8018ce4:	08029818 	.word	0x08029818
 8018ce8:	20001d68 	.word	0x20001d68

08018cec <LoRaMacClassBMulticastSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 8018cf4:	4a05      	ldr	r2, [pc, #20]	@ (8018d0c <LoRaMacClassBMulticastSlotTimerEvent+0x20>)
 8018cf6:	7813      	ldrb	r3, [r2, #0]
 8018cf8:	f043 0304 	orr.w	r3, r3, #4
 8018cfc:	7013      	strb	r3, [r2, #0]

    OnClassBMacProcessNotify( );
 8018cfe:	f7ff fa07 	bl	8018110 <OnClassBMacProcessNotify>
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8018d02:	bf00      	nop
 8018d04:	3708      	adds	r7, #8
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}
 8018d0a:	bf00      	nop
 8018d0c:	20001ce8 	.word	0x20001ce8

08018d10 <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 8018d10:	b5b0      	push	{r4, r5, r7, lr}
 8018d12:	b08a      	sub	sp, #40	@ 0x28
 8018d14:	af02      	add	r7, sp, #8
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
 8018d16:	2300      	movs	r3, #0
 8018d18:	61fb      	str	r3, [r7, #28]
    TimerTime_t slotTime = 0;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	607b      	str	r3, [r7, #4]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8018d1e:	4ba2      	ldr	r3, [pc, #648]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018d20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018d24:	61bb      	str	r3, [r7, #24]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint32_t maxRxError = 0;
 8018d26:	2300      	movs	r3, #0
 8018d28:	60fb      	str	r3, [r7, #12]
    bool slotHasPriority = false;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	72fb      	strb	r3, [r7, #11]
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 8018d2e:	69bb      	ldr	r3, [r7, #24]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	f000 815c 	beq.w	8018fee <LoRaMacClassBProcessMulticastSlot+0x2de>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8018d36:	4b9c      	ldr	r3, [pc, #624]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018d38:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8018d3c:	2b03      	cmp	r3, #3
 8018d3e:	f000 8158 	beq.w	8018ff2 <LoRaMacClassBProcessMulticastSlot+0x2e2>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 8018d42:	4b99      	ldr	r3, [pc, #612]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018d44:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8018d48:	2b02      	cmp	r3, #2
 8018d4a:	f000 809b 	beq.w	8018e84 <LoRaMacClassBProcessMulticastSlot+0x174>
 8018d4e:	2b02      	cmp	r3, #2
 8018d50:	f300 8148 	bgt.w	8018fe4 <LoRaMacClassBProcessMulticastSlot+0x2d4>
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d002      	beq.n	8018d5e <LoRaMacClassBProcessMulticastSlot+0x4e>
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d021      	beq.n	8018da0 <LoRaMacClassBProcessMulticastSlot+0x90>
 8018d5c:	e142      	b.n	8018fe4 <LoRaMacClassBProcessMulticastSlot+0x2d4>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            // Compute all offsets for every multicast slots
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018d5e:	2300      	movs	r3, #0
 8018d60:	75fb      	strb	r3, [r7, #23]
 8018d62:	e016      	b.n	8018d92 <LoRaMacClassBProcessMulticastSlot+0x82>
            {
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8018d64:	4b90      	ldr	r3, [pc, #576]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018d66:	691b      	ldr	r3, [r3, #16]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	461c      	mov	r4, r3
 8018d6c:	4615      	mov	r5, r2
 8018d6e:	69bb      	ldr	r3, [r7, #24]
 8018d70:	685a      	ldr	r2, [r3, #4]
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	332c      	adds	r3, #44	@ 0x2c
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	460b      	mov	r3, r1
 8018d7e:	4620      	mov	r0, r4
 8018d80:	4629      	mov	r1, r5
 8018d82:	f7fe ff55 	bl	8017c30 <ComputePingOffset>
                                   cur->ChannelParams.Address,
                                   cur->PingPeriod,
                                   &( cur->PingOffset ) );
                cur++;
 8018d86:	69bb      	ldr	r3, [r7, #24]
 8018d88:	3330      	adds	r3, #48	@ 0x30
 8018d8a:	61bb      	str	r3, [r7, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018d8c:	7dfb      	ldrb	r3, [r7, #23]
 8018d8e:	3301      	adds	r3, #1
 8018d90:	75fb      	strb	r3, [r7, #23]
 8018d92:	7dfb      	ldrb	r3, [r7, #23]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d0e5      	beq.n	8018d64 <LoRaMacClassBProcessMulticastSlot+0x54>
            }
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 8018d98:	4b83      	ldr	r3, [pc, #524]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018d9a:	2201      	movs	r2, #1
 8018d9c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8018da0:	4b81      	ldr	r3, [pc, #516]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018da2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018da6:	61bb      	str	r3, [r7, #24]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 8018da8:	4b7f      	ldr	r3, [pc, #508]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018daa:	2200      	movs	r2, #0
 8018dac:	609a      	str	r2, [r3, #8]

            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018dae:	2300      	movs	r3, #0
 8018db0:	75bb      	strb	r3, [r7, #22]
 8018db2:	e01f      	b.n	8018df4 <LoRaMacClassBProcessMulticastSlot+0xe4>
            {
                // Calculate the next slot time for every multicast slot
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 8018db4:	69bb      	ldr	r3, [r7, #24]
 8018db6:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8018dbc:	69bb      	ldr	r3, [r7, #24]
 8018dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	1d3b      	adds	r3, r7, #4
 8018dc6:	f7ff f8c1 	bl	8017f4c <CalcNextSlotTime>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d00b      	beq.n	8018de8 <LoRaMacClassBProcessMulticastSlot+0xd8>
                {
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 8018dd0:	69fb      	ldr	r3, [r7, #28]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d003      	beq.n	8018dde <LoRaMacClassBProcessMulticastSlot+0xce>
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	69fa      	ldr	r2, [r7, #28]
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d904      	bls.n	8018de8 <LoRaMacClassBProcessMulticastSlot+0xd8>
                    {
                        // Update the slot time and the next multicast channel
                        multicastSlotTime = slotTime;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	61fb      	str	r3, [r7, #28]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 8018de2:	4a71      	ldr	r2, [pc, #452]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	6093      	str	r3, [r2, #8]
                    }
                }
                cur++;
 8018de8:	69bb      	ldr	r3, [r7, #24]
 8018dea:	3330      	adds	r3, #48	@ 0x30
 8018dec:	61bb      	str	r3, [r7, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018dee:	7dbb      	ldrb	r3, [r7, #22]
 8018df0:	3301      	adds	r3, #1
 8018df2:	75bb      	strb	r3, [r7, #22]
 8018df4:	7dbb      	ldrb	r3, [r7, #22]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d0dc      	beq.n	8018db4 <LoRaMacClassBProcessMulticastSlot+0xa4>
            }

            // Schedule the next multicast slot
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 8018dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018dfc:	689b      	ldr	r3, [r3, #8]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	f000 80f9 	beq.w	8018ff6 <LoRaMacClassBProcessMulticastSlot+0x2e6>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8018e04:	4b68      	ldr	r3, [pc, #416]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e06:	7b1b      	ldrb	r3, [r3, #12]
 8018e08:	f003 0302 	and.w	r3, r3, #2
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d021      	beq.n	8018e56 <LoRaMacClassBProcessMulticastSlot+0x146>
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
                                                    &multicastSlotRxConfig );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Compare and assign the maximum between the region specific rx error window time
                    // and time precision received from beacon frame format.
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 8018e12:	4b65      	ldr	r3, [pc, #404]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e14:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8018e18:	461a      	mov	r2, r3
 8018e1a:	4b63      	ldr	r3, [pc, #396]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4293      	cmp	r3, r2
 8018e24:	bf38      	it	cc
 8018e26:	4613      	movcc	r3, r2
 8018e28:	60fb      	str	r3, [r7, #12]
                                      ( uint32_t ) Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds );

                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018e30:	7818      	ldrb	r0, [r3, #0]
                                                    ClassBNvm->PingSlotCtx.Datarate,
 8018e32:	4b5e      	ldr	r3, [pc, #376]	@ (8018fac <LoRaMacClassBProcessMulticastSlot+0x29c>)
 8018e34:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018e36:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8018e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8018e40:	791a      	ldrb	r2, [r3, #4]
 8018e42:	4b5b      	ldr	r3, [pc, #364]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018e44:	9300      	str	r3, [sp, #0]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	f002 fdc5 	bl	801b9d6 <RegionComputeRxWindowParameters>
                                                    maxRxError,
                                                    &multicastSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 8018e4c:	4b58      	ldr	r3, [pc, #352]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018e4e:	689b      	ldr	r3, [r3, #8]
 8018e50:	b29a      	uxth	r2, r3
 8018e52:	4b55      	ldr	r3, [pc, #340]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e54:	80da      	strh	r2, [r3, #6]
                }

                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 8018e56:	4b56      	ldr	r3, [pc, #344]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018e58:	68da      	ldr	r2, [r3, #12]
 8018e5a:	69fb      	ldr	r3, [r7, #28]
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	da05      	bge.n	8018e6c <LoRaMacClassBProcessMulticastSlot+0x15c>
                {// Apply the window offset
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 8018e60:	4b53      	ldr	r3, [pc, #332]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018e62:	68db      	ldr	r3, [r3, #12]
 8018e64:	461a      	mov	r2, r3
 8018e66:	69fb      	ldr	r3, [r7, #28]
 8018e68:	4413      	add	r3, r2
 8018e6a:	61fb      	str	r3, [r7, #28]
                }

                // Start the timer if the ping slot time is in range
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 8018e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e6e:	2202      	movs	r2, #2
 8018e70:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 8018e74:	69f9      	ldr	r1, [r7, #28]
 8018e76:	484f      	ldr	r0, [pc, #316]	@ (8018fb4 <LoRaMacClassBProcessMulticastSlot+0x2a4>)
 8018e78:	f00b fbe8 	bl	802464c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 8018e7c:	484d      	ldr	r0, [pc, #308]	@ (8018fb4 <LoRaMacClassBProcessMulticastSlot+0x2a4>)
 8018e7e:	f00b fb07 	bl	8024490 <UTIL_TIMER_Start>
            }
            break;
 8018e82:	e0b8      	b.n	8018ff6 <LoRaMacClassBProcessMulticastSlot+0x2e6>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = 0;
 8018e84:	2300      	movs	r3, #0
 8018e86:	613b      	str	r3, [r7, #16]

            // Verify if the multicast channel is valid
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 8018e88:	4b47      	ldr	r3, [pc, #284]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e8a:	689b      	ldr	r3, [r3, #8]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d10b      	bne.n	8018ea8 <LoRaMacClassBProcessMulticastSlot+0x198>
            {
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018e90:	4b45      	ldr	r3, [pc, #276]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018e92:	2200      	movs	r2, #0
 8018e94:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8018e98:	2101      	movs	r1, #1
 8018e9a:	4846      	ldr	r0, [pc, #280]	@ (8018fb4 <LoRaMacClassBProcessMulticastSlot+0x2a4>)
 8018e9c:	f00b fbd6 	bl	802464c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 8018ea0:	4844      	ldr	r0, [pc, #272]	@ (8018fb4 <LoRaMacClassBProcessMulticastSlot+0x2a4>)
 8018ea2:	f00b faf5 	bl	8024490 <UTIL_TIMER_Start>
                break;
 8018ea6:	e0a7      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
            }

            // Apply frequency
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.Params.ClassB.Frequency;
 8018ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018eaa:	689b      	ldr	r3, [r3, #8]
 8018eac:	69db      	ldr	r3, [r3, #28]
 8018eae:	613b      	str	r3, [r7, #16]

            // Restore the floor plan frequency if there is no individual frequency assigned
            if( frequency == 0 )
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d10a      	bne.n	8018ecc <LoRaMacClassBProcessMulticastSlot+0x1bc>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 8018eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018eb8:	689b      	ldr	r3, [r3, #8]
 8018eba:	6858      	ldr	r0, [r3, #4]
 8018ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018ebe:	6919      	ldr	r1, [r3, #16]
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8018ec6:	f7fe ff33 	bl	8017d30 <CalcDownlinkChannelAndFrequency>
 8018eca:	6138      	str	r0, [r7, #16]
            {
                Radio.Rx( 0 ); // Continuous mode
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Verify, if the unicast has priority.
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 8018ecc:	4b36      	ldr	r3, [pc, #216]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018ece:	689b      	ldr	r3, [r3, #8]
 8018ed0:	6858      	ldr	r0, [r3, #4]
 8018ed2:	4b35      	ldr	r3, [pc, #212]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018ed4:	689b      	ldr	r3, [r3, #8]
 8018ed6:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
                                                 *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0 );
 8018eda:	4b33      	ldr	r3, [pc, #204]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018edc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 8018ee0:	681a      	ldr	r2, [r3, #0]
                                                 *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0 );
 8018ee2:	4b32      	ldr	r3, [pc, #200]	@ (8018fac <LoRaMacClassBProcessMulticastSlot+0x29c>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 8018ee6:	7a5b      	ldrb	r3, [r3, #9]
 8018ee8:	2400      	movs	r4, #0
 8018eea:	9401      	str	r4, [sp, #4]
 8018eec:	9300      	str	r3, [sp, #0]
 8018eee:	4613      	mov	r3, r2
 8018ef0:	2201      	movs	r2, #1
 8018ef2:	f7ff fab8 	bl	8018466 <CheckSlotPriority>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	72fb      	strb	r3, [r7, #11]

            // Open the ping slot window only, if there is no multicast ping slot
            // open or if the unicast has priority.
            if( ( Ctx.PingSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 8018efa:	4b2b      	ldr	r3, [pc, #172]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018efc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8018f00:	2b03      	cmp	r3, #3
 8018f02:	d102      	bne.n	8018f0a <LoRaMacClassBProcessMulticastSlot+0x1fa>
 8018f04:	7afb      	ldrb	r3, [r7, #11]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d05f      	beq.n	8018fca <LoRaMacClassBProcessMulticastSlot+0x2ba>
            {
                if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8018f0a:	4b27      	ldr	r3, [pc, #156]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f0c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8018f10:	2b03      	cmp	r3, #3
 8018f12:	d10d      	bne.n	8018f30 <LoRaMacClassBProcessMulticastSlot+0x220>
                {
                    // Close ping slot window, if necessary. Multicast slots have priority
                    Radio.Standby( );
 8018f14:	4b28      	ldr	r3, [pc, #160]	@ (8018fb8 <LoRaMacClassBProcessMulticastSlot+0x2a8>)
 8018f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f18:	4798      	blx	r3
                    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018f1a:	4b23      	ldr	r3, [pc, #140]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8018f22:	211e      	movs	r1, #30
 8018f24:	4825      	ldr	r0, [pc, #148]	@ (8018fbc <LoRaMacClassBProcessMulticastSlot+0x2ac>)
 8018f26:	f00b fb91 	bl	802464c <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.PingSlotTimer );
 8018f2a:	4824      	ldr	r0, [pc, #144]	@ (8018fbc <LoRaMacClassBProcessMulticastSlot+0x2ac>)
 8018f2c:	f00b fab0 	bl	8024490 <UTIL_TIMER_Start>
                }

                Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 8018f30:	4b1d      	ldr	r3, [pc, #116]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f32:	2203      	movs	r2, #3
 8018f34:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

                multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.Params.ClassB.Datarate;
 8018f38:	4b1b      	ldr	r3, [pc, #108]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f3a:	689b      	ldr	r3, [r3, #8]
 8018f3c:	f993 2020 	ldrsb.w	r2, [r3, #32]
 8018f40:	4b1b      	ldr	r3, [pc, #108]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f42:	705a      	strb	r2, [r3, #1]
                multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8018f44:	4b18      	ldr	r3, [pc, #96]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f4a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8018f4e:	4b18      	ldr	r3, [pc, #96]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f50:	741a      	strb	r2, [r3, #16]
                multicastSlotRxConfig.Frequency = frequency;
 8018f52:	4a17      	ldr	r2, [pc, #92]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	6053      	str	r3, [r2, #4]
                multicastSlotRxConfig.RxContinuous = false;
 8018f58:	4b15      	ldr	r3, [pc, #84]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	749a      	strb	r2, [r3, #18]
                multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8018f5e:	4b14      	ldr	r3, [pc, #80]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f60:	2205      	movs	r2, #5
 8018f62:	74da      	strb	r2, [r3, #19]
                multicastSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 8018f64:	4b10      	ldr	r3, [pc, #64]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018f6a:	781a      	ldrb	r2, [r3, #0]
 8018f6c:	4b10      	ldr	r3, [pc, #64]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f6e:	751a      	strb	r2, [r3, #20]

                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8018f70:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018f76:	7818      	ldrb	r0, [r3, #0]
 8018f78:	4b0b      	ldr	r3, [pc, #44]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018f7e:	3304      	adds	r3, #4
 8018f80:	461a      	mov	r2, r3
 8018f82:	490b      	ldr	r1, [pc, #44]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f84:	f002 fd4a 	bl	801ba1c <RegionRxConfig>

                if( multicastSlotRxConfig.RxContinuous == false )
 8018f88:	4b09      	ldr	r3, [pc, #36]	@ (8018fb0 <LoRaMacClassBProcessMulticastSlot+0x2a0>)
 8018f8a:	7c9b      	ldrb	r3, [r3, #18]
 8018f8c:	f083 0301 	eor.w	r3, r3, #1
 8018f90:	b2db      	uxtb	r3, r3
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d014      	beq.n	8018fc0 <LoRaMacClassBProcessMulticastSlot+0x2b0>
                {
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8018f96:	4b08      	ldr	r3, [pc, #32]	@ (8018fb8 <LoRaMacClassBProcessMulticastSlot+0x2a8>)
 8018f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018f9a:	4a03      	ldr	r2, [pc, #12]	@ (8018fa8 <LoRaMacClassBProcessMulticastSlot+0x298>)
 8018f9c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 8018fa0:	6892      	ldr	r2, [r2, #8]
 8018fa2:	4610      	mov	r0, r2
 8018fa4:	4798      	blx	r3
                if( multicastSlotRxConfig.RxContinuous == false )
 8018fa6:	e01c      	b.n	8018fe2 <LoRaMacClassBProcessMulticastSlot+0x2d2>
 8018fa8:	20001cec 	.word	0x20001cec
 8018fac:	20001dac 	.word	0x20001dac
 8018fb0:	20001dc8 	.word	0x20001dc8
 8018fb4:	20001d68 	.word	0x20001d68
 8018fb8:	08029818 	.word	0x08029818
 8018fbc:	20001d50 	.word	0x20001d50
                }
                else
                {
                    Radio.Rx( 0 ); // Continuous mode
 8018fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8019000 <LoRaMacClassBProcessMulticastSlot+0x2f0>)
 8018fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018fc4:	2000      	movs	r0, #0
 8018fc6:	4798      	blx	r3
                if( multicastSlotRxConfig.RxContinuous == false )
 8018fc8:	e00b      	b.n	8018fe2 <LoRaMacClassBProcessMulticastSlot+0x2d2>
                }
            }
            else
            {
                // Unicast slots have priority. Skip Rx
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018fca:	4b0e      	ldr	r3, [pc, #56]	@ (8019004 <LoRaMacClassBProcessMulticastSlot+0x2f4>)
 8018fcc:	2200      	movs	r2, #0
 8018fce:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8018fd2:	211e      	movs	r1, #30
 8018fd4:	480c      	ldr	r0, [pc, #48]	@ (8019008 <LoRaMacClassBProcessMulticastSlot+0x2f8>)
 8018fd6:	f00b fb39 	bl	802464c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 8018fda:	480b      	ldr	r0, [pc, #44]	@ (8019008 <LoRaMacClassBProcessMulticastSlot+0x2f8>)
 8018fdc:	f00b fa58 	bl	8024490 <UTIL_TIMER_Start>
            }
#endif /* LORAMAC_VERSION */
            break;
 8018fe0:	e00a      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
 8018fe2:	e009      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8018fe4:	4b07      	ldr	r3, [pc, #28]	@ (8019004 <LoRaMacClassBProcessMulticastSlot+0x2f4>)
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            break;
 8018fec:	e004      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
        return;
 8018fee:	bf00      	nop
 8018ff0:	e002      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
        return;
 8018ff2:	bf00      	nop
 8018ff4:	e000      	b.n	8018ff8 <LoRaMacClassBProcessMulticastSlot+0x2e8>
            break;
 8018ff6:	bf00      	nop
        }
    }
}
 8018ff8:	3720      	adds	r7, #32
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8018ffe:	bf00      	nop
 8019000:	08029818 	.word	0x08029818
 8019004:	20001cec 	.word	0x20001cec
 8019008:	20001d68 	.word	0x20001d68

0801900c <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801900c:	b590      	push	{r4, r7, lr}
 801900e:	b095      	sub	sp, #84	@ 0x54
 8019010:	af04      	add	r7, sp, #16
 8019012:	6078      	str	r0, [r7, #4]
 8019014:	460b      	mov	r3, r1
 8019016:	807b      	strh	r3, [r7, #2]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool beaconProcessed = false;
 8019018:	2300      	movs	r3, #0
 801901a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint16_t crc0 = 0;
 801901e:	2300      	movs	r3, #0
 8019020:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    uint16_t crc1 = 0;
 8019022:	2300      	movs	r3, #0
 8019024:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t beaconCrc0 = 0;
 8019026:	2300      	movs	r3, #0
 8019028:	873b      	strh	r3, [r7, #56]	@ 0x38
    uint16_t beaconCrc1 = 0;
 801902a:	2300      	movs	r3, #0
 801902c:	86fb      	strh	r3, [r7, #54]	@ 0x36

    getPhy.Attribute = PHY_BEACON_FORMAT;
 801902e:	2330      	movs	r3, #48	@ 0x30
 8019030:	763b      	strb	r3, [r7, #24]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8019032:	4baf      	ldr	r3, [pc, #700]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	f107 0218 	add.w	r2, r7, #24
 801903e:	4611      	mov	r1, r2
 8019040:	4618      	mov	r0, r3
 8019042:	f002 fc27 	bl	801b894 <RegionGetPhyParam>
 8019046:	4603      	mov	r3, r0
 8019048:	617b      	str	r3, [r7, #20]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 801904a:	4ba9      	ldr	r3, [pc, #676]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801904c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8019050:	2b09      	cmp	r3, #9
 8019052:	d007      	beq.n	8019064 <LoRaMacClassBRxBeacon+0x58>
 8019054:	4ba6      	ldr	r3, [pc, #664]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019056:	7b1b      	ldrb	r3, [r3, #12]
 8019058:	f003 0310 	and.w	r3, r3, #16
 801905c:	b2db      	uxtb	r3, r3
 801905e:	2b00      	cmp	r3, #0
 8019060:	f000 815f 	beq.w	8019322 <LoRaMacClassBRxBeacon+0x316>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 8019064:	7d3b      	ldrb	r3, [r7, #20]
 8019066:	461a      	mov	r2, r3
 8019068:	887b      	ldrh	r3, [r7, #2]
 801906a:	4293      	cmp	r3, r2
 801906c:	f040 814a 	bne.w	8019304 <LoRaMacClassBRxBeacon+0x2f8>
            // Field: | RFU1 | Param | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4] ) & 0x00FF;
 8019070:	7d7b      	ldrb	r3, [r7, #21]
 8019072:	3305      	adds	r3, #5
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	4413      	add	r3, r2
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	873b      	strh	r3, [r7, #56]	@ 0x38
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 1] << 8 ) & 0xFF00;
 801907c:	7d7b      	ldrb	r3, [r7, #21]
 801907e:	3306      	adds	r3, #6
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	4413      	add	r3, r2
 8019084:	781b      	ldrb	r3, [r3, #0]
 8019086:	021b      	lsls	r3, r3, #8
 8019088:	b21a      	sxth	r2, r3
 801908a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801908e:	4313      	orrs	r3, r2
 8019090:	b21b      	sxth	r3, r3
 8019092:	873b      	strh	r3, [r7, #56]	@ 0x38
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 1 + 4 );
 8019094:	7d7b      	ldrb	r3, [r7, #21]
 8019096:	3305      	adds	r3, #5
 8019098:	b29b      	uxth	r3, r3
 801909a:	4619      	mov	r1, r3
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f7fe ffdd 	bl	801805c <BeaconCrc>
 80190a2:	4603      	mov	r3, r0
 80190a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 80190a6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80190a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d14f      	bne.n	801914e <LoRaMacClassBRxBeacon+0x142>
            {
                // Copy the param field for app layer
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param = ( payload[phyParam.BeaconFormat.Rfu1Size] );
 80190ae:	7d7b      	ldrb	r3, [r7, #21]
 80190b0:	461a      	mov	r2, r3
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	441a      	add	r2, r3
 80190b6:	4b8e      	ldr	r3, [pc, #568]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80190bc:	7812      	ldrb	r2, [r2, #0]
 80190be:	765a      	strb	r2, [r3, #25]
                // Fetch the precise time value in milliseconds that will be used for Rx ping slot delay.
                Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds = BeaconPrecTimeValue[Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param];
 80190c0:	4b8b      	ldr	r3, [pc, #556]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80190c6:	7e5b      	ldrb	r3, [r3, #25]
 80190c8:	461a      	mov	r2, r3
 80190ca:	4b8a      	ldr	r3, [pc, #552]	@ (80192f4 <LoRaMacClassBRxBeacon+0x2e8>)
 80190cc:	5c9b      	ldrb	r3, [r3, r2]
 80190ce:	b21a      	sxth	r2, r3
 80190d0:	4b87      	ldr	r3, [pc, #540]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size + 1] ) & 0x000000FF;
 80190d6:	7d7b      	ldrb	r3, [r7, #21]
 80190d8:	3301      	adds	r3, #1
 80190da:	687a      	ldr	r2, [r7, #4]
 80190dc:	4413      	add	r3, r2
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	461a      	mov	r2, r3
 80190e2:	4b83      	ldr	r3, [pc, #524]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190e4:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 8 ) ) & 0x0000FF00;
 80190e6:	4b82      	ldr	r3, [pc, #520]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190e8:	691a      	ldr	r2, [r3, #16]
 80190ea:	7d7b      	ldrb	r3, [r7, #21]
 80190ec:	3302      	adds	r3, #2
 80190ee:	6879      	ldr	r1, [r7, #4]
 80190f0:	440b      	add	r3, r1
 80190f2:	781b      	ldrb	r3, [r3, #0]
 80190f4:	021b      	lsls	r3, r3, #8
 80190f6:	b29b      	uxth	r3, r3
 80190f8:	4313      	orrs	r3, r2
 80190fa:	4a7d      	ldr	r2, [pc, #500]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80190fc:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 16 ) ) & 0x00FF0000;
 80190fe:	4b7c      	ldr	r3, [pc, #496]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019100:	691a      	ldr	r2, [r3, #16]
 8019102:	7d7b      	ldrb	r3, [r7, #21]
 8019104:	3303      	adds	r3, #3
 8019106:	6879      	ldr	r1, [r7, #4]
 8019108:	440b      	add	r3, r1
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	041b      	lsls	r3, r3, #16
 801910e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8019112:	4313      	orrs	r3, r2
 8019114:	4a76      	ldr	r2, [pc, #472]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019116:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 4] << 24 ) ) & 0xFF000000;
 8019118:	4b75      	ldr	r3, [pc, #468]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801911a:	691a      	ldr	r2, [r3, #16]
 801911c:	7d7b      	ldrb	r3, [r7, #21]
 801911e:	3304      	adds	r3, #4
 8019120:	6879      	ldr	r1, [r7, #4]
 8019122:	440b      	add	r3, r1
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	061b      	lsls	r3, r3, #24
 8019128:	4313      	orrs	r3, r2
 801912a:	4a71      	ldr	r2, [pc, #452]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801912c:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 801912e:	4b70      	ldr	r3, [pc, #448]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019130:	2200      	movs	r2, #0
 8019132:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 8019134:	4b6e      	ldr	r3, [pc, #440]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801913a:	4a6d      	ldr	r2, [pc, #436]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801913c:	3308      	adds	r3, #8
 801913e:	3210      	adds	r2, #16
 8019140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019144:	e883 0003 	stmia.w	r3, {r0, r1}
                beaconProcessed = true;
 8019148:	2301      	movs	r3, #1
 801914a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 801914e:	7d7b      	ldrb	r3, [r7, #21]
 8019150:	330e      	adds	r3, #14
 8019152:	7dba      	ldrb	r2, [r7, #22]
 8019154:	4413      	add	r3, r2
 8019156:	461a      	mov	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	4413      	add	r3, r2
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 8019160:	7d7b      	ldrb	r3, [r7, #21]
 8019162:	330e      	adds	r3, #14
 8019164:	7dba      	ldrb	r2, [r7, #22]
 8019166:	4413      	add	r3, r2
 8019168:	3301      	adds	r3, #1
 801916a:	687a      	ldr	r2, [r7, #4]
 801916c:	4413      	add	r3, r2
 801916e:	781b      	ldrb	r3, [r3, #0]
 8019170:	021b      	lsls	r3, r3, #8
 8019172:	b21a      	sxth	r2, r3
 8019174:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8019178:	4313      	orrs	r3, r2
 801917a:	b21b      	sxth	r3, r3
 801917c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 801917e:	7d7b      	ldrb	r3, [r7, #21]
 8019180:	3307      	adds	r3, #7
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	4413      	add	r3, r2
 8019186:	7dba      	ldrb	r2, [r7, #22]
 8019188:	3207      	adds	r2, #7
 801918a:	b292      	uxth	r2, r2
 801918c:	4611      	mov	r1, r2
 801918e:	4618      	mov	r0, r3
 8019190:	f7fe ff64 	bl	801805c <BeaconCrc>
 8019194:	4603      	mov	r3, r0
 8019196:	877b      	strh	r3, [r7, #58]	@ 0x3a

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 8019198:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801919a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801919c:	429a      	cmp	r2, r3
 801919e:	d115      	bne.n	80191cc <LoRaMacClassBRxBeacon+0x1c0>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2];
 80191a0:	7d7b      	ldrb	r3, [r7, #21]
 80191a2:	3307      	adds	r3, #7
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	441a      	add	r2, r3
 80191a8:	4b51      	ldr	r3, [pc, #324]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80191aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80191ae:	7812      	ldrb	r2, [r2, #0]
 80191b0:	769a      	strb	r2, [r3, #26]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
 80191b2:	4b4f      	ldr	r3, [pc, #316]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80191b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80191b8:	f103 001b 	add.w	r0, r3, #27
 80191bc:	7d7b      	ldrb	r3, [r7, #21]
 80191be:	3308      	adds	r3, #8
 80191c0:	687a      	ldr	r2, [r7, #4]
 80191c2:	4413      	add	r3, r2
 80191c4:	2206      	movs	r2, #6
 80191c6:	4619      	mov	r1, r3
 80191c8:	f006 fa25 	bl	801f616 <memcpy1>
            }
#endif /* LORAMAC_VERSION */

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 80191cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	f000 8097 	beq.w	8019304 <LoRaMacClassBRxBeacon+0x2f8>
            {
                uint32_t spreadingFactor = 0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	633b      	str	r3, [r7, #48]	@ 0x30
                uint32_t bandwidth = 0;
 80191da:	2300      	movs	r3, #0
 80191dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 80191de:	2331      	movs	r3, #49	@ 0x31
 80191e0:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80191e2:	4b43      	ldr	r3, [pc, #268]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80191e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	f107 0218 	add.w	r2, r7, #24
 80191ee:	4611      	mov	r1, r2
 80191f0:	4618      	mov	r0, r3
 80191f2:	f002 fb4f 	bl	801b894 <RegionGetPhyParam>
 80191f6:	4603      	mov	r3, r0
 80191f8:	617b      	str	r3, [r7, #20]

                getPhy.Attribute = PHY_SF_FROM_DR;
 80191fa:	2337      	movs	r3, #55	@ 0x37
 80191fc:	763b      	strb	r3, [r7, #24]
                getPhy.Datarate = phyParam.Value;
 80191fe:	697b      	ldr	r3, [r7, #20]
 8019200:	b25b      	sxtb	r3, r3
 8019202:	767b      	strb	r3, [r7, #25]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8019204:	4b3a      	ldr	r3, [pc, #232]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	f107 0218 	add.w	r2, r7, #24
 8019210:	4611      	mov	r1, r2
 8019212:	4618      	mov	r0, r3
 8019214:	f002 fb3e 	bl	801b894 <RegionGetPhyParam>
 8019218:	4603      	mov	r3, r0
 801921a:	617b      	str	r3, [r7, #20]
                spreadingFactor = phyParam.Value;
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	633b      	str	r3, [r7, #48]	@ 0x30

                getPhy.Attribute = PHY_BW_FROM_DR;
 8019220:	2338      	movs	r3, #56	@ 0x38
 8019222:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8019224:	4b32      	ldr	r3, [pc, #200]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	f107 0218 	add.w	r2, r7, #24
 8019230:	4611      	mov	r1, r2
 8019232:	4618      	mov	r0, r3
 8019234:	f002 fb2e 	bl	801b894 <RegionGetPhyParam>
 8019238:	4603      	mov	r3, r0
 801923a:	617b      	str	r3, [r7, #20]
                bandwidth = phyParam.Value;
 801923c:	697b      	ldr	r3, [r7, #20]
 801923e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 8019240:	4b2d      	ldr	r3, [pc, #180]	@ (80192f8 <LoRaMacClassBRxBeacon+0x2ec>)
 8019242:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8019244:	887b      	ldrh	r3, [r7, #2]
 8019246:	b2db      	uxtb	r3, r3
 8019248:	2200      	movs	r2, #0
 801924a:	9203      	str	r2, [sp, #12]
 801924c:	9302      	str	r3, [sp, #8]
 801924e:	2301      	movs	r3, #1
 8019250:	9301      	str	r3, [sp, #4]
 8019252:	230a      	movs	r3, #10
 8019254:	9300      	str	r3, [sp, #0]
 8019256:	2301      	movs	r3, #1
 8019258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801925a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801925c:	2001      	movs	r0, #1
 801925e:	47a0      	blx	r4
 8019260:	62b8      	str	r0, [r7, #40]	@ 0x28
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 8019262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019264:	4a25      	ldr	r2, [pc, #148]	@ (80192fc <LoRaMacClassBRxBeacon+0x2f0>)
 8019266:	fba2 2303 	umull	r2, r3, r2, r3
 801926a:	099b      	lsrs	r3, r3, #6
 801926c:	60fb      	str	r3, [r7, #12]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 801926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019270:	b29a      	uxth	r2, r3
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	b29b      	uxth	r3, r3
 8019276:	4619      	mov	r1, r3
 8019278:	0149      	lsls	r1, r1, #5
 801927a:	1ac9      	subs	r1, r1, r3
 801927c:	0089      	lsls	r1, r1, #2
 801927e:	440b      	add	r3, r1
 8019280:	00db      	lsls	r3, r3, #3
 8019282:	b29b      	uxth	r3, r3
 8019284:	1ad3      	subs	r3, r2, r3
 8019286:	b29b      	uxth	r3, r3
 8019288:	b21b      	sxth	r3, r3
 801928a:	823b      	strh	r3, [r7, #16]

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 801928c:	4b18      	ldr	r3, [pc, #96]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801928e:	4a18      	ldr	r2, [pc, #96]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 8019290:	3318      	adds	r3, #24
 8019292:	3210      	adds	r2, #16
 8019294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019298:	e883 0003 	stmia.w	r3, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801929c:	4b14      	ldr	r3, [pc, #80]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 801929e:	699a      	ldr	r2, [r3, #24]
 80192a0:	4b17      	ldr	r3, [pc, #92]	@ (8019300 <LoRaMacClassBRxBeacon+0x2f4>)
 80192a2:	4413      	add	r3, r2
 80192a4:	4a12      	ldr	r2, [pc, #72]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80192a6:	6193      	str	r3, [r2, #24]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 80192a8:	f107 0020 	add.w	r0, r7, #32
 80192ac:	4a10      	ldr	r2, [pc, #64]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80192ae:	693b      	ldr	r3, [r7, #16]
 80192b0:	9300      	str	r3, [sp, #0]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	3218      	adds	r2, #24
 80192b6:	ca06      	ldmia	r2, {r1, r2}
 80192b8:	f009 fd3e 	bl	8022d38 <SysTimeAdd>
 80192bc:	f107 0320 	add.w	r3, r7, #32
 80192c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80192c4:	f009 fdaa 	bl	8022e1c <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 80192c8:	4a09      	ldr	r2, [pc, #36]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80192ca:	7b13      	ldrb	r3, [r2, #12]
 80192cc:	f043 0302 	orr.w	r3, r3, #2
 80192d0:	7313      	strb	r3, [r2, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 80192d2:	4a07      	ldr	r2, [pc, #28]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80192d4:	7b13      	ldrb	r3, [r2, #12]
 80192d6:	f043 0301 	orr.w	r3, r3, #1
 80192da:	7313      	strb	r3, [r2, #12]
                ResetWindowTimeout( );
 80192dc:	f7fe ffe4 	bl	80182a8 <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 80192e0:	4b03      	ldr	r3, [pc, #12]	@ (80192f0 <LoRaMacClassBRxBeacon+0x2e4>)
 80192e2:	2205      	movs	r2, #5
 80192e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

                LoRaMacClassBBeaconTimerEvent( NULL );
 80192e8:	2000      	movs	r0, #0
 80192ea:	f7ff f9a5 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>
 80192ee:	e009      	b.n	8019304 <LoRaMacClassBRxBeacon+0x2f8>
 80192f0:	20001cec 	.word	0x20001cec
 80192f4:	08029758 	.word	0x08029758
 80192f8:	08029818 	.word	0x08029818
 80192fc:	10624dd3 	.word	0x10624dd3
 8019300:	12d53d80 	.word	0x12d53d80
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 8019304:	4b0a      	ldr	r3, [pc, #40]	@ (8019330 <LoRaMacClassBRxBeacon+0x324>)
 8019306:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801930a:	2b09      	cmp	r3, #9
 801930c:	d106      	bne.n	801931c <LoRaMacClassBRxBeacon+0x310>
        {
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 801930e:	4b08      	ldr	r3, [pc, #32]	@ (8019330 <LoRaMacClassBRxBeacon+0x324>)
 8019310:	2202      	movs	r2, #2
 8019312:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            LoRaMacClassBBeaconTimerEvent( NULL );
 8019316:	2000      	movs	r0, #0
 8019318:	f7ff f98e 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 801931c:	2301      	movs	r3, #1
 801931e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    return beaconProcessed;
 8019322:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019326:	4618      	mov	r0, r3
 8019328:	3744      	adds	r7, #68	@ 0x44
 801932a:	46bd      	mov	sp, r7
 801932c:	bd90      	pop	{r4, r7, pc}
 801932e:	bf00      	nop
 8019330:	20001cec 	.word	0x20001cec

08019334 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8019334:	b480      	push	{r7}
 8019336:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 8019338:	4b09      	ldr	r3, [pc, #36]	@ (8019360 <LoRaMacClassBIsBeaconExpected+0x2c>)
 801933a:	7b1b      	ldrb	r3, [r3, #12]
 801933c:	f003 0310 	and.w	r3, r3, #16
 8019340:	b2db      	uxtb	r3, r3
 8019342:	2b00      	cmp	r3, #0
 8019344:	d104      	bne.n	8019350 <LoRaMacClassBIsBeaconExpected+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 8019346:	4b06      	ldr	r3, [pc, #24]	@ (8019360 <LoRaMacClassBIsBeaconExpected+0x2c>)
 8019348:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 801934c:	2b09      	cmp	r3, #9
 801934e:	d101      	bne.n	8019354 <LoRaMacClassBIsBeaconExpected+0x20>
    {
        return true;
 8019350:	2301      	movs	r3, #1
 8019352:	e000      	b.n	8019356 <LoRaMacClassBIsBeaconExpected+0x22>
    }
    return false;
 8019354:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019356:	4618      	mov	r0, r3
 8019358:	46bd      	mov	sp, r7
 801935a:	bc80      	pop	{r7}
 801935c:	4770      	bx	lr
 801935e:	bf00      	nop
 8019360:	20001cec 	.word	0x20001cec

08019364 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8019364:	b480      	push	{r7}
 8019366:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 8019368:	4b05      	ldr	r3, [pc, #20]	@ (8019380 <LoRaMacClassBIsPingExpected+0x1c>)
 801936a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 801936e:	2b03      	cmp	r3, #3
 8019370:	d101      	bne.n	8019376 <LoRaMacClassBIsPingExpected+0x12>
    {
        return true;
 8019372:	2301      	movs	r3, #1
 8019374:	e000      	b.n	8019378 <LoRaMacClassBIsPingExpected+0x14>
    }
    return false;
 8019376:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019378:	4618      	mov	r0, r3
 801937a:	46bd      	mov	sp, r7
 801937c:	bc80      	pop	{r7}
 801937e:	4770      	bx	lr
 8019380:	20001cec 	.word	0x20001cec

08019384 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8019384:	b480      	push	{r7}
 8019386:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 8019388:	4b05      	ldr	r3, [pc, #20]	@ (80193a0 <LoRaMacClassBIsMulticastExpected+0x1c>)
 801938a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 801938e:	2b03      	cmp	r3, #3
 8019390:	d101      	bne.n	8019396 <LoRaMacClassBIsMulticastExpected+0x12>
    {
        return true;
 8019392:	2301      	movs	r3, #1
 8019394:	e000      	b.n	8019398 <LoRaMacClassBIsMulticastExpected+0x14>
    }
    return false;
 8019396:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019398:	4618      	mov	r0, r3
 801939a:	46bd      	mov	sp, r7
 801939c:	bc80      	pop	{r7}
 801939e:	4770      	bx	lr
 80193a0:	20001cec 	.word	0x20001cec

080193a4 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
 80193a4:	b480      	push	{r7}
 80193a6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 80193a8:	4b06      	ldr	r3, [pc, #24]	@ (80193c4 <LoRaMacClassBIsAcquisitionPending+0x20>)
 80193aa:	7b1b      	ldrb	r3, [r3, #12]
 80193ac:	f003 0310 	and.w	r3, r3, #16
 80193b0:	b2db      	uxtb	r3, r3
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d001      	beq.n	80193ba <LoRaMacClassBIsAcquisitionPending+0x16>
    {
        return true;
 80193b6:	2301      	movs	r3, #1
 80193b8:	e000      	b.n	80193bc <LoRaMacClassBIsAcquisitionPending+0x18>
    }
    return false;
 80193ba:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80193bc:	4618      	mov	r0, r3
 80193be:	46bd      	mov	sp, r7
 80193c0:	bc80      	pop	{r7}
 80193c2:	4770      	bx	lr
 80193c4:	20001cec 	.word	0x20001cec

080193c8 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80193c8:	b480      	push	{r7}
 80193ca:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 80193cc:	4b09      	ldr	r3, [pc, #36]	@ (80193f4 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 80193ce:	7b1b      	ldrb	r3, [r3, #12]
 80193d0:	f003 0301 	and.w	r3, r3, #1
 80193d4:	b2db      	uxtb	r3, r3
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d104      	bne.n	80193e4 <LoRaMacClassBIsBeaconModeActive+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 80193da:	4b06      	ldr	r3, [pc, #24]	@ (80193f4 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 80193dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 80193e0:	2b01      	cmp	r3, #1
 80193e2:	d101      	bne.n	80193e8 <LoRaMacClassBIsBeaconModeActive+0x20>
    {
        return true;
 80193e4:	2301      	movs	r3, #1
 80193e6:	e000      	b.n	80193ea <LoRaMacClassBIsBeaconModeActive+0x22>
    }
    return false;
 80193e8:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bc80      	pop	{r7}
 80193f0:	4770      	bx	lr
 80193f2:	bf00      	nop
 80193f4:	20001cec 	.word	0x20001cec

080193f8 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80193f8:	b590      	push	{r4, r7, lr}
 80193fa:	b083      	sub	sp, #12
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	4603      	mov	r3, r0
 8019400:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 8019402:	79fb      	ldrb	r3, [r7, #7]
 8019404:	b29b      	uxth	r3, r3
 8019406:	4a0a      	ldr	r2, [pc, #40]	@ (8019430 <LoRaMacClassBSetPingSlotInfo+0x38>)
 8019408:	6814      	ldr	r4, [r2, #0]
 801940a:	4618      	mov	r0, r3
 801940c:	f7ff f80c 	bl	8018428 <CalcPingNb>
 8019410:	4603      	mov	r3, r0
 8019412:	7063      	strb	r3, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 8019414:	4b06      	ldr	r3, [pc, #24]	@ (8019430 <LoRaMacClassBSetPingSlotInfo+0x38>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	785b      	ldrb	r3, [r3, #1]
 801941a:	4a05      	ldr	r2, [pc, #20]	@ (8019430 <LoRaMacClassBSetPingSlotInfo+0x38>)
 801941c:	6814      	ldr	r4, [r2, #0]
 801941e:	4618      	mov	r0, r3
 8019420:	f7ff f811 	bl	8018446 <CalcPingPeriod>
 8019424:	4603      	mov	r3, r0
 8019426:	8063      	strh	r3, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019428:	bf00      	nop
 801942a:	370c      	adds	r7, #12
 801942c:	46bd      	mov	sp, r7
 801942e:	bd90      	pop	{r4, r7, pc}
 8019430:	20001dac 	.word	0x20001dac

08019434 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 801943a:	4b19      	ldr	r3, [pc, #100]	@ (80194a0 <LoRaMacClassBHaltBeaconing+0x6c>)
 801943c:	7b1b      	ldrb	r3, [r3, #12]
 801943e:	f003 0301 	and.w	r3, r3, #1
 8019442:	b2db      	uxtb	r3, r3
 8019444:	2b00      	cmp	r3, #0
 8019446:	d027      	beq.n	8019498 <LoRaMacClassBHaltBeaconing+0x64>
    {
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 8019448:	4b15      	ldr	r3, [pc, #84]	@ (80194a0 <LoRaMacClassBHaltBeaconing+0x6c>)
 801944a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801944e:	2b02      	cmp	r3, #2
 8019450:	d004      	beq.n	801945c <LoRaMacClassBHaltBeaconing+0x28>
            ( Ctx.BeaconState == BEACON_STATE_LOST ) )
 8019452:	4b13      	ldr	r3, [pc, #76]	@ (80194a0 <LoRaMacClassBHaltBeaconing+0x6c>)
 8019454:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 8019458:	2b0a      	cmp	r3, #10
 801945a:	d102      	bne.n	8019462 <LoRaMacClassBHaltBeaconing+0x2e>
        {
            // Update the state machine before halt
            LoRaMacClassBBeaconTimerEvent( NULL );
 801945c:	2000      	movs	r0, #0
 801945e:	f7ff f8eb 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019462:	f3ef 8310 	mrs	r3, PRIMASK
 8019466:	607b      	str	r3, [r7, #4]
  return(result);
 8019468:	687b      	ldr	r3, [r7, #4]
        }

        CRITICAL_SECTION_BEGIN( );
 801946a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801946c:	b672      	cpsid	i
}
 801946e:	bf00      	nop
        LoRaMacClassBEvents.Events.Beacon = 0;
 8019470:	4a0c      	ldr	r2, [pc, #48]	@ (80194a4 <LoRaMacClassBHaltBeaconing+0x70>)
 8019472:	7813      	ldrb	r3, [r2, #0]
 8019474:	f36f 0300 	bfc	r3, #0, #1
 8019478:	7013      	strb	r3, [r2, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801947e:	68bb      	ldr	r3, [r7, #8]
 8019480:	f383 8810 	msr	PRIMASK, r3
}
 8019484:	bf00      	nop
        CRITICAL_SECTION_END( );

        // Halt ping slot state machine
        TimerStop( &Ctx.BeaconTimer );
 8019486:	4808      	ldr	r0, [pc, #32]	@ (80194a8 <LoRaMacClassBHaltBeaconing+0x74>)
 8019488:	f00b f870 	bl	802456c <UTIL_TIMER_Stop>

        // Halt beacon state machine
        Ctx.BeaconState = BEACON_STATE_HALT;
 801948c:	4b04      	ldr	r3, [pc, #16]	@ (80194a0 <LoRaMacClassBHaltBeaconing+0x6c>)
 801948e:	2206      	movs	r2, #6
 8019490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
 8019494:	f000 fa5c 	bl	8019950 <LoRaMacClassBStopRxSlots>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019498:	bf00      	nop
 801949a:	3710      	adds	r7, #16
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	20001cec 	.word	0x20001cec
 80194a4:	20001ce8 	.word	0x20001ce8
 80194a8:	20001d38 	.word	0x20001d38

080194ac <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 80194b0:	4b0e      	ldr	r3, [pc, #56]	@ (80194ec <LoRaMacClassBResumeBeaconing+0x40>)
 80194b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80194b6:	2b06      	cmp	r3, #6
 80194b8:	d116      	bne.n	80194e8 <LoRaMacClassBResumeBeaconing+0x3c>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 80194ba:	4a0c      	ldr	r2, [pc, #48]	@ (80194ec <LoRaMacClassBResumeBeaconing+0x40>)
 80194bc:	7b13      	ldrb	r3, [r2, #12]
 80194be:	f043 0320 	orr.w	r3, r3, #32
 80194c2:	7313      	strb	r3, [r2, #12]

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 80194c4:	4b09      	ldr	r3, [pc, #36]	@ (80194ec <LoRaMacClassBResumeBeaconing+0x40>)
 80194c6:	2205      	movs	r2, #5
 80194c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 80194cc:	4b07      	ldr	r3, [pc, #28]	@ (80194ec <LoRaMacClassBResumeBeaconing+0x40>)
 80194ce:	7b1b      	ldrb	r3, [r3, #12]
 80194d0:	f003 0302 	and.w	r3, r3, #2
 80194d4:	b2db      	uxtb	r3, r3
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d103      	bne.n	80194e2 <LoRaMacClassBResumeBeaconing+0x36>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 80194da:	4b04      	ldr	r3, [pc, #16]	@ (80194ec <LoRaMacClassBResumeBeaconing+0x40>)
 80194dc:	2204      	movs	r2, #4
 80194de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
 80194e2:	2000      	movs	r0, #0
 80194e4:	f7ff f8a8 	bl	8018638 <LoRaMacClassBBeaconTimerEvent>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80194e8:	bf00      	nop
 80194ea:	bd80      	pop	{r7, pc}
 80194ec:	20001cec 	.word	0x20001cec

080194f0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	4603      	mov	r3, r0
 80194f8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( nextClass == CLASS_B )
 80194fa:	79fb      	ldrb	r3, [r7, #7]
 80194fc:	2b01      	cmp	r3, #1
 80194fe:	d110      	bne.n	8019522 <LoRaMacClassBSwitchClass+0x32>
    {// Switch to from class a to class b
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 8019500:	4b0f      	ldr	r3, [pc, #60]	@ (8019540 <LoRaMacClassBSwitchClass+0x50>)
 8019502:	7b1b      	ldrb	r3, [r3, #12]
 8019504:	f003 0301 	and.w	r3, r3, #1
 8019508:	b2db      	uxtb	r3, r3
 801950a:	2b00      	cmp	r3, #0
 801950c:	d009      	beq.n	8019522 <LoRaMacClassBSwitchClass+0x32>
 801950e:	4b0d      	ldr	r3, [pc, #52]	@ (8019544 <LoRaMacClassBSwitchClass+0x54>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	781b      	ldrb	r3, [r3, #0]
 8019514:	f003 0301 	and.w	r3, r3, #1
 8019518:	b2db      	uxtb	r3, r3
 801951a:	2b00      	cmp	r3, #0
 801951c:	d001      	beq.n	8019522 <LoRaMacClassBSwitchClass+0x32>
        {
            return LORAMAC_STATUS_OK;
 801951e:	2300      	movs	r3, #0
 8019520:	e009      	b.n	8019536 <LoRaMacClassBSwitchClass+0x46>
        }
    }
    if( nextClass == CLASS_A )
 8019522:	79fb      	ldrb	r3, [r7, #7]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d105      	bne.n	8019534 <LoRaMacClassBSwitchClass+0x44>
    {// Switch from class b to class a
        LoRaMacClassBHaltBeaconing( );
 8019528:	f7ff ff84 	bl	8019434 <LoRaMacClassBHaltBeaconing>

        // Initialize default state for class b
        InitClassBDefaults( );
 801952c:	f7fe fe50 	bl	80181d0 <InitClassBDefaults>

        return LORAMAC_STATUS_OK;
 8019530:	2300      	movs	r3, #0
 8019532:	e000      	b.n	8019536 <LoRaMacClassBSwitchClass+0x46>
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8019534:	2302      	movs	r3, #2
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019536:	4618      	mov	r0, r3
 8019538:	3708      	adds	r7, #8
 801953a:	46bd      	mov	sp, r7
 801953c:	bd80      	pop	{r7, pc}
 801953e:	bf00      	nop
 8019540:	20001cec 	.word	0x20001cec
 8019544:	20001dac 	.word	0x20001dac

08019548 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8019548:	b480      	push	{r7}
 801954a:	b085      	sub	sp, #20
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8019550:	2300      	movs	r3, #0
 8019552:	73fb      	strb	r3, [r7, #15]

    switch( mibGet->Type )
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	781b      	ldrb	r3, [r3, #0]
 8019558:	2b39      	cmp	r3, #57	@ 0x39
 801955a:	d002      	beq.n	8019562 <LoRaMacClassBMibGetRequestConfirm+0x1a>
 801955c:	2b42      	cmp	r3, #66	@ 0x42
 801955e:	d007      	beq.n	8019570 <LoRaMacClassBMibGetRequestConfirm+0x28>
 8019560:	e00c      	b.n	801957c <LoRaMacClassBMibGetRequestConfirm+0x34>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 8019562:	4b0b      	ldr	r3, [pc, #44]	@ (8019590 <LoRaMacClassBMibGetRequestConfirm+0x48>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	711a      	strb	r2, [r3, #4]
            break;
 801956e:	e008      	b.n	8019582 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 8019570:	4b08      	ldr	r3, [pc, #32]	@ (8019594 <LoRaMacClassBMibGetRequestConfirm+0x4c>)
 8019572:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	711a      	strb	r2, [r3, #4]
            break;
 801957a:	e002      	b.n	8019582 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801957c:	2302      	movs	r3, #2
 801957e:	73fb      	strb	r3, [r7, #15]
            break;
 8019580:	bf00      	nop
        }
    }
    return status;
 8019582:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019584:	4618      	mov	r0, r3
 8019586:	3714      	adds	r7, #20
 8019588:	46bd      	mov	sp, r7
 801958a:	bc80      	pop	{r7}
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop
 8019590:	20001dac 	.word	0x20001dac
 8019594:	20001cec 	.word	0x20001cec

08019598 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8019598:	b480      	push	{r7}
 801959a:	b085      	sub	sp, #20
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80195a0:	2300      	movs	r3, #0
 80195a2:	73fb      	strb	r3, [r7, #15]

    switch( mibSet->Type )
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	781b      	ldrb	r3, [r3, #0]
 80195a8:	2b39      	cmp	r3, #57	@ 0x39
 80195aa:	d106      	bne.n	80195ba <LoRaMacMibClassBSetRequestConfirm+0x22>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 80195ac:	4b07      	ldr	r3, [pc, #28]	@ (80195cc <LoRaMacMibClassBSetRequestConfirm+0x34>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	687a      	ldr	r2, [r7, #4]
 80195b2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80195b6:	721a      	strb	r2, [r3, #8]
            break;
 80195b8:	e002      	b.n	80195c0 <LoRaMacMibClassBSetRequestConfirm+0x28>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80195ba:	2302      	movs	r3, #2
 80195bc:	73fb      	strb	r3, [r7, #15]
            break;
 80195be:	bf00      	nop
        }
    }
    return status;
 80195c0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	3714      	adds	r7, #20
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bc80      	pop	{r7}
 80195ca:	4770      	bx	lr
 80195cc:	20001dac 	.word	0x20001dac

080195d0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80195d4:	200c      	movs	r0, #12
 80195d6:	f000 fee9 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80195da:	4603      	mov	r3, r0
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d009      	beq.n	80195f4 <LoRaMacClassBPingSlotInfoAns+0x24>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80195e0:	210c      	movs	r1, #12
 80195e2:	2000      	movs	r0, #0
 80195e4:	f000 fe56 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 80195e8:	4b03      	ldr	r3, [pc, #12]	@ (80195f8 <LoRaMacClassBPingSlotInfoAns+0x28>)
 80195ea:	681a      	ldr	r2, [r3, #0]
 80195ec:	7813      	ldrb	r3, [r2, #0]
 80195ee:	f043 0301 	orr.w	r3, r3, #1
 80195f2:	7013      	strb	r3, [r2, #0]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80195f4:	bf00      	nop
 80195f6:	bd80      	pop	{r7, pc}
 80195f8:	20001dac 	.word	0x20001dac

080195fc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b084      	sub	sp, #16
 8019600:	af00      	add	r7, sp, #0
 8019602:	4603      	mov	r3, r0
 8019604:	6039      	str	r1, [r7, #0]
 8019606:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
 8019608:	2303      	movs	r3, #3
 801960a:	73fb      	strb	r3, [r7, #15]
    VerifyParams_t verify;
    bool isCustomFreq = false;
 801960c:	2300      	movs	r3, #0
 801960e:	73bb      	strb	r3, [r7, #14]

    if( frequency != 0 )
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d017      	beq.n	8019646 <LoRaMacClassBPingSlotChannelReq+0x4a>
    {
        isCustomFreq = true;
 8019616:	2301      	movs	r3, #1
 8019618:	73bb      	strb	r3, [r7, #14]
        verify.Frequency = frequency;
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	60bb      	str	r3, [r7, #8]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 801961e:	4b2b      	ldr	r3, [pc, #172]	@ (80196cc <LoRaMacClassBPingSlotChannelReq+0xd0>)
 8019620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	f107 0108 	add.w	r1, r7, #8
 801962a:	2200      	movs	r2, #0
 801962c:	4618      	mov	r0, r3
 801962e:	f002 f97f 	bl	801b930 <RegionVerify>
 8019632:	4603      	mov	r3, r0
 8019634:	f083 0301 	eor.w	r3, r3, #1
 8019638:	b2db      	uxtb	r3, r3
 801963a:	2b00      	cmp	r3, #0
 801963c:	d003      	beq.n	8019646 <LoRaMacClassBPingSlotChannelReq+0x4a>
        {
            status &= 0xFE; // Channel frequency KO
 801963e:	7bfb      	ldrb	r3, [r7, #15]
 8019640:	f023 0301 	bic.w	r3, r3, #1
 8019644:	73fb      	strb	r3, [r7, #15]
        }
    }

    verify.DatarateParams.Datarate = datarate;
 8019646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801964a:	723b      	strb	r3, [r7, #8]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 801964c:	4b1f      	ldr	r3, [pc, #124]	@ (80196cc <LoRaMacClassBPingSlotChannelReq+0xd0>)
 801964e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019652:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019656:	727b      	strb	r3, [r7, #9]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 8019658:	4b1c      	ldr	r3, [pc, #112]	@ (80196cc <LoRaMacClassBPingSlotChannelReq+0xd0>)
 801965a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	f107 0108 	add.w	r1, r7, #8
 8019664:	2207      	movs	r2, #7
 8019666:	4618      	mov	r0, r3
 8019668:	f002 f962 	bl	801b930 <RegionVerify>
 801966c:	4603      	mov	r3, r0
 801966e:	f083 0301 	eor.w	r3, r3, #1
 8019672:	b2db      	uxtb	r3, r3
 8019674:	2b00      	cmp	r3, #0
 8019676:	d003      	beq.n	8019680 <LoRaMacClassBPingSlotChannelReq+0x84>
    {
        status &= 0xFD; // Datarate range KO
 8019678:	7bfb      	ldrb	r3, [r7, #15]
 801967a:	f023 0302 	bic.w	r3, r3, #2
 801967e:	73fb      	strb	r3, [r7, #15]
    }

    if( status == 0x03 )
 8019680:	7bfb      	ldrb	r3, [r7, #15]
 8019682:	2b03      	cmp	r3, #3
 8019684:	d11c      	bne.n	80196c0 <LoRaMacClassBPingSlotChannelReq+0xc4>
    {
        if( isCustomFreq == true )
 8019686:	7bbb      	ldrb	r3, [r7, #14]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d00a      	beq.n	80196a2 <LoRaMacClassBPingSlotChannelReq+0xa6>
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 801968c:	4b10      	ldr	r3, [pc, #64]	@ (80196d0 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 801968e:	681a      	ldr	r2, [r3, #0]
 8019690:	7813      	ldrb	r3, [r2, #0]
 8019692:	f043 0302 	orr.w	r3, r3, #2
 8019696:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 8019698:	4b0d      	ldr	r3, [pc, #52]	@ (80196d0 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	683a      	ldr	r2, [r7, #0]
 801969e:	605a      	str	r2, [r3, #4]
 80196a0:	e009      	b.n	80196b6 <LoRaMacClassBPingSlotChannelReq+0xba>
        }
        else
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 80196a2:	4b0b      	ldr	r3, [pc, #44]	@ (80196d0 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80196a4:	681a      	ldr	r2, [r3, #0]
 80196a6:	7813      	ldrb	r3, [r2, #0]
 80196a8:	f36f 0341 	bfc	r3, #1, #1
 80196ac:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 80196ae:	4b08      	ldr	r3, [pc, #32]	@ (80196d0 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2200      	movs	r2, #0
 80196b4:	605a      	str	r2, [r3, #4]
        }
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 80196b6:	4b06      	ldr	r3, [pc, #24]	@ (80196d0 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80196be:	721a      	strb	r2, [r3, #8]
    }

    return status;
 80196c0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3710      	adds	r7, #16
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}
 80196ca:	bf00      	nop
 80196cc:	20001cec 	.word	0x20001cec
 80196d0:	20001dac 	.word	0x20001dac

080196d4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80196d4:	b590      	push	{r4, r7, lr}
 80196d6:	b085      	sub	sp, #20
 80196d8:	af00      	add	r7, sp, #0
 80196da:	4603      	mov	r3, r0
 80196dc:	60ba      	str	r2, [r7, #8]
 80196de:	81fb      	strh	r3, [r7, #14]
 80196e0:	460b      	mov	r3, r1
 80196e2:	737b      	strb	r3, [r7, #13]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 80196e4:	89fa      	ldrh	r2, [r7, #14]
 80196e6:	4613      	mov	r3, r2
 80196e8:	011b      	lsls	r3, r3, #4
 80196ea:	1a9b      	subs	r3, r3, r2
 80196ec:	005b      	lsls	r3, r3, #1
 80196ee:	461a      	mov	r2, r3
 80196f0:	4b26      	ldr	r3, [pc, #152]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 80196f2:	639a      	str	r2, [r3, #56]	@ 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 80196f4:	4a25      	ldr	r2, [pc, #148]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 80196f6:	7b7b      	ldrb	r3, [r7, #13]
 80196f8:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80196fc:	200d      	movs	r0, #13
 80196fe:	f000 fe55 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 8019702:	4603      	mov	r3, r0
 8019704:	2b00      	cmp	r3, #0
 8019706:	d03c      	beq.n	8019782 <LoRaMacClassBBeaconTimingAns+0xae>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 8019708:	4b20      	ldr	r3, [pc, #128]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 801970a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801970c:	f5b3 3ffa 	cmp.w	r3, #128000	@ 0x1f400
 8019710:	d90b      	bls.n	801972a <LoRaMacClassBBeaconTimingAns+0x56>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8019712:	4b1e      	ldr	r3, [pc, #120]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019714:	2200      	movs	r2, #0
 8019716:	639a      	str	r2, [r3, #56]	@ 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 8019718:	4b1c      	ldr	r3, [pc, #112]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 801971a:	2200      	movs	r2, #0
 801971c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 8019720:	210d      	movs	r1, #13
 8019722:	200f      	movs	r0, #15
 8019724:	f000 fdb6 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
 8019728:	e01e      	b.n	8019768 <LoRaMacClassBBeaconTimingAns+0x94>
        }
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 801972a:	4a18      	ldr	r2, [pc, #96]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 801972c:	7b13      	ldrb	r3, [r2, #12]
 801972e:	f043 0304 	orr.w	r3, r3, #4
 8019732:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 8019734:	4a15      	ldr	r2, [pc, #84]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019736:	7b13      	ldrb	r3, [r2, #12]
 8019738:	f043 0308 	orr.w	r3, r3, #8
 801973c:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 801973e:	4b13      	ldr	r3, [pc, #76]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	441a      	add	r2, r3
 8019746:	4c11      	ldr	r4, [pc, #68]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019748:	463b      	mov	r3, r7
 801974a:	4611      	mov	r1, r2
 801974c:	4618      	mov	r0, r3
 801974e:	f009 fc13 	bl	8022f78 <SysTimeFromMs>
 8019752:	f104 0320 	add.w	r3, r4, #32
 8019756:	463a      	mov	r2, r7
 8019758:	e892 0003 	ldmia.w	r2, {r0, r1}
 801975c:	e883 0003 	stmia.w	r3, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8019760:	210d      	movs	r1, #13
 8019762:	2000      	movs	r0, #0
 8019764:	f000 fd96 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 8019768:	4b08      	ldr	r3, [pc, #32]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 801976a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801976e:	4a07      	ldr	r2, [pc, #28]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019770:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8019772:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 8019774:	4b05      	ldr	r3, [pc, #20]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 8019776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801977a:	4a04      	ldr	r2, [pc, #16]	@ (801978c <LoRaMacClassBBeaconTimingAns+0xb8>)
 801977c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8019780:	741a      	strb	r2, [r3, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019782:	bf00      	nop
 8019784:	3714      	adds	r7, #20
 8019786:	46bd      	mov	sp, r7
 8019788:	bd90      	pop	{r4, r7, pc}
 801978a:	bf00      	nop
 801978c:	20001cec 	.word	0x20001cec

08019790 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8019790:	b590      	push	{r4, r7, lr}
 8019792:	b08b      	sub	sp, #44	@ 0x2c
 8019794:	af02      	add	r7, sp, #8
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 8019796:	f107 0314 	add.w	r3, r7, #20
 801979a:	4618      	mov	r0, r3
 801979c:	f009 fb6c 	bl	8022e78 <SysTimeGet>
    TimerTime_t currentTimeMs = SysTimeToMs( nextBeacon );
 80197a0:	f107 0314 	add.w	r3, r7, #20
 80197a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197a8:	f009 fbbe 	bl	8022f28 <SysTimeToMs>
 80197ac:	61f8      	str	r0, [r7, #28]

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80197b4:	3380      	adds	r3, #128	@ 0x80
 80197b6:	617b      	str	r3, [r7, #20]
    nextBeacon.SubSeconds = 0;
 80197b8:	2300      	movs	r3, #0
 80197ba:	833b      	strh	r3, [r7, #24]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 80197bc:	4b2e      	ldr	r3, [pc, #184]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 80197be:	3320      	adds	r3, #32
 80197c0:	f107 0214 	add.w	r2, r7, #20
 80197c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197c8:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 80197cc:	2380      	movs	r3, #128	@ 0x80
 80197ce:	60fb      	str	r3, [r7, #12]
 80197d0:	2300      	movs	r3, #0
 80197d2:	823b      	strh	r3, [r7, #16]
 80197d4:	4c28      	ldr	r4, [pc, #160]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 80197d6:	4638      	mov	r0, r7
 80197d8:	4a27      	ldr	r2, [pc, #156]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 80197da:	693b      	ldr	r3, [r7, #16]
 80197dc:	9300      	str	r3, [sp, #0]
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	3220      	adds	r2, #32
 80197e2:	ca06      	ldmia	r2, {r1, r2}
 80197e4:	f009 fae1 	bl	8022daa <SysTimeSub>
 80197e8:	f104 0318 	add.w	r3, r4, #24
 80197ec:	463a      	mov	r2, r7
 80197ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197f2:	e883 0003 	stmia.w	r3, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80197f6:	2009      	movs	r0, #9
 80197f8:	f000 fdd8 	bl	801a3ac <LoRaMacConfirmQueueIsCmdActive>
 80197fc:	4603      	mov	r3, r0
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d036      	beq.n	8019870 <LoRaMacClassBDeviceTimeAns+0xe0>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 8019802:	4b1d      	ldr	r3, [pc, #116]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019804:	3320      	adds	r3, #32
 8019806:	e893 0003 	ldmia.w	r3, {r0, r1}
 801980a:	f009 fb8d 	bl	8022f28 <SysTimeToMs>
 801980e:	4602      	mov	r2, r0
 8019810:	69fb      	ldr	r3, [r7, #28]
 8019812:	4293      	cmp	r3, r2
 8019814:	d910      	bls.n	8019838 <LoRaMacClassBDeviceTimeAns+0xa8>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 8019816:	4b18      	ldr	r3, [pc, #96]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019818:	2200      	movs	r2, #0
 801981a:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 801981c:	4b16      	ldr	r3, [pc, #88]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 801981e:	2200      	movs	r2, #0
 8019820:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8019822:	4b15      	ldr	r3, [pc, #84]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019824:	2200      	movs	r2, #0
 8019826:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8019828:	4b13      	ldr	r3, [pc, #76]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 801982a:	2200      	movs	r2, #0
 801982c:	849a      	strh	r2, [r3, #36]	@ 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 801982e:	2109      	movs	r1, #9
 8019830:	200f      	movs	r0, #15
 8019832:	f000 fd2f 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019836:	e01b      	b.n	8019870 <LoRaMacClassBDeviceTimeAns+0xe0>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8019838:	4a0f      	ldr	r2, [pc, #60]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 801983a:	7b13      	ldrb	r3, [r2, #12]
 801983c:	f043 0304 	orr.w	r3, r3, #4
 8019840:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8019842:	4b0d      	ldr	r3, [pc, #52]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019844:	3320      	adds	r3, #32
 8019846:	e893 0003 	ldmia.w	r3, {r0, r1}
 801984a:	f009 fb6d 	bl	8022f28 <SysTimeToMs>
 801984e:	4602      	mov	r2, r0
 8019850:	69fb      	ldr	r3, [r7, #28]
 8019852:	1ad3      	subs	r3, r2, r3
 8019854:	4a08      	ldr	r2, [pc, #32]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019856:	6393      	str	r3, [r2, #56]	@ 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 8019858:	697a      	ldr	r2, [r7, #20]
 801985a:	4b08      	ldr	r3, [pc, #32]	@ (801987c <LoRaMacClassBDeviceTimeAns+0xec>)
 801985c:	4413      	add	r3, r2
 801985e:	4a06      	ldr	r2, [pc, #24]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019860:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8019862:	4b05      	ldr	r3, [pc, #20]	@ (8019878 <LoRaMacClassBDeviceTimeAns+0xe8>)
 8019864:	2200      	movs	r2, #0
 8019866:	829a      	strh	r2, [r3, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8019868:	2109      	movs	r1, #9
 801986a:	2000      	movs	r0, #0
 801986c:	f000 fd12 	bl	801a294 <LoRaMacConfirmQueueSetStatus>
}
 8019870:	bf00      	nop
 8019872:	3724      	adds	r7, #36	@ 0x24
 8019874:	46bd      	mov	sp, r7
 8019876:	bd90      	pop	{r4, r7, pc}
 8019878:	20001cec 	.word	0x20001cec
 801987c:	ed2ac200 	.word	0xed2ac200

08019880 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8019880:	b580      	push	{r7, lr}
 8019882:	b084      	sub	sp, #16
 8019884:	af00      	add	r7, sp, #0
 8019886:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d01a      	beq.n	80198c4 <LoRaMacClassBBeaconFreqReq+0x44>
    {
        verify.Frequency = frequency;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	60fb      	str	r3, [r7, #12]

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8019892:	4b13      	ldr	r3, [pc, #76]	@ (80198e0 <LoRaMacClassBBeaconFreqReq+0x60>)
 8019894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019898:	781b      	ldrb	r3, [r3, #0]
 801989a:	f107 010c 	add.w	r1, r7, #12
 801989e:	2200      	movs	r2, #0
 80198a0:	4618      	mov	r0, r3
 80198a2:	f002 f845 	bl	801b930 <RegionVerify>
 80198a6:	4603      	mov	r3, r0
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d013      	beq.n	80198d4 <LoRaMacClassBBeaconFreqReq+0x54>
        {
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 80198ac:	4b0d      	ldr	r3, [pc, #52]	@ (80198e4 <LoRaMacClassBBeaconFreqReq+0x64>)
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	7b13      	ldrb	r3, [r2, #12]
 80198b2:	f043 0301 	orr.w	r3, r3, #1
 80198b6:	7313      	strb	r3, [r2, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 80198b8:	4b0a      	ldr	r3, [pc, #40]	@ (80198e4 <LoRaMacClassBBeaconFreqReq+0x64>)
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	687a      	ldr	r2, [r7, #4]
 80198be:	611a      	str	r2, [r3, #16]
            return true;
 80198c0:	2301      	movs	r3, #1
 80198c2:	e008      	b.n	80198d6 <LoRaMacClassBBeaconFreqReq+0x56>
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 80198c4:	4b07      	ldr	r3, [pc, #28]	@ (80198e4 <LoRaMacClassBBeaconFreqReq+0x64>)
 80198c6:	681a      	ldr	r2, [r3, #0]
 80198c8:	7b13      	ldrb	r3, [r2, #12]
 80198ca:	f36f 0300 	bfc	r3, #0, #1
 80198ce:	7313      	strb	r3, [r2, #12]
        return true;
 80198d0:	2301      	movs	r3, #1
 80198d2:	e000      	b.n	80198d6 <LoRaMacClassBBeaconFreqReq+0x56>
    }
    return false;
 80198d4:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80198d6:	4618      	mov	r0, r3
 80198d8:	3710      	adds	r7, #16
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	20001cec 	.word	0x20001cec
 80198e4:	20001dac 	.word	0x20001dac

080198e8 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b086      	sub	sp, #24
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80198f0:	f00a ff56 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 80198f4:	6178      	str	r0, [r7, #20]
    TimerTime_t beaconReserved = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	613b      	str	r3, [r7, #16]
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 80198fa:	4b14      	ldr	r3, [pc, #80]	@ (801994c <LoRaMacClassBIsUplinkCollision+0x64>)
 80198fc:	3320      	adds	r3, #32
 80198fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019902:	f009 fb11 	bl	8022f28 <SysTimeToMs>
 8019906:	60f8      	str	r0, [r7, #12]

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8019908:	4b10      	ldr	r3, [pc, #64]	@ (801994c <LoRaMacClassBIsUplinkCollision+0x64>)
 801990a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801990e:	68db      	ldr	r3, [r3, #12]
                     CLASSB_BEACON_GUARD -
 8019910:	68fa      	ldr	r2, [r7, #12]
 8019912:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8019914:	4b0d      	ldr	r3, [pc, #52]	@ (801994c <LoRaMacClassBIsUplinkCollision+0x64>)
 8019916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801991a:	691b      	ldr	r3, [r3, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 801991c:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	1ad3      	subs	r3, r2, r3
    beaconReserved = nextBeacon -
 8019922:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8019926:	613b      	str	r3, [r7, #16]
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 8019928:	697a      	ldr	r2, [r7, #20]
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	429a      	cmp	r2, r3
 801992e:	d308      	bcc.n	8019942 <LoRaMacClassBIsUplinkCollision+0x5a>
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 8019936:	697a      	ldr	r2, [r7, #20]
 8019938:	429a      	cmp	r2, r3
 801993a:	d202      	bcs.n	8019942 <LoRaMacClassBIsUplinkCollision+0x5a>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
 801993c:	f640 0348 	movw	r3, #2120	@ 0x848
 8019940:	e000      	b.n	8019944 <LoRaMacClassBIsUplinkCollision+0x5c>
    }
    return 0;
 8019942:	2300      	movs	r3, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019944:	4618      	mov	r0, r3
 8019946:	3718      	adds	r7, #24
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	20001cec 	.word	0x20001cec

08019950 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 8019956:	4810      	ldr	r0, [pc, #64]	@ (8019998 <LoRaMacClassBStopRxSlots+0x48>)
 8019958:	f00a fe08 	bl	802456c <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 801995c:	480f      	ldr	r0, [pc, #60]	@ (801999c <LoRaMacClassBStopRxSlots+0x4c>)
 801995e:	f00a fe05 	bl	802456c <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019962:	f3ef 8310 	mrs	r3, PRIMASK
 8019966:	607b      	str	r3, [r7, #4]
  return(result);
 8019968:	687b      	ldr	r3, [r7, #4]

    CRITICAL_SECTION_BEGIN( );
 801996a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801996c:	b672      	cpsid	i
}
 801996e:	bf00      	nop
    LoRaMacClassBEvents.Events.PingSlot = 0;
 8019970:	4a0b      	ldr	r2, [pc, #44]	@ (80199a0 <LoRaMacClassBStopRxSlots+0x50>)
 8019972:	7813      	ldrb	r3, [r2, #0]
 8019974:	f36f 0341 	bfc	r3, #1, #1
 8019978:	7013      	strb	r3, [r2, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 801997a:	4a09      	ldr	r2, [pc, #36]	@ (80199a0 <LoRaMacClassBStopRxSlots+0x50>)
 801997c:	7813      	ldrb	r3, [r2, #0]
 801997e:	f36f 0382 	bfc	r3, #2, #1
 8019982:	7013      	strb	r3, [r2, #0]
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	f383 8810 	msr	PRIMASK, r3
}
 801998e:	bf00      	nop
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019990:	bf00      	nop
 8019992:	3710      	adds	r7, #16
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}
 8019998:	20001d50 	.word	0x20001d50
 801999c:	20001d68 	.word	0x20001d68
 80199a0:	20001ce8 	.word	0x20001ce8

080199a4 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 80199a8:	4b0f      	ldr	r3, [pc, #60]	@ (80199e8 <LoRaMacClassBStartRxSlots+0x44>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	f003 0301 	and.w	r3, r3, #1
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d015      	beq.n	80199e4 <LoRaMacClassBStartRxSlots+0x40>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80199b8:	4b0c      	ldr	r3, [pc, #48]	@ (80199ec <LoRaMacClassBStartRxSlots+0x48>)
 80199ba:	2200      	movs	r2, #0
 80199bc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 80199c0:	2101      	movs	r1, #1
 80199c2:	480b      	ldr	r0, [pc, #44]	@ (80199f0 <LoRaMacClassBStartRxSlots+0x4c>)
 80199c4:	f00a fe42 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 80199c8:	4809      	ldr	r0, [pc, #36]	@ (80199f0 <LoRaMacClassBStartRxSlots+0x4c>)
 80199ca:	f00a fd61 	bl	8024490 <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80199ce:	4b07      	ldr	r3, [pc, #28]	@ (80199ec <LoRaMacClassBStartRxSlots+0x48>)
 80199d0:	2200      	movs	r2, #0
 80199d2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 80199d6:	2101      	movs	r1, #1
 80199d8:	4806      	ldr	r0, [pc, #24]	@ (80199f4 <LoRaMacClassBStartRxSlots+0x50>)
 80199da:	f00a fe37 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 80199de:	4805      	ldr	r0, [pc, #20]	@ (80199f4 <LoRaMacClassBStartRxSlots+0x50>)
 80199e0:	f00a fd56 	bl	8024490 <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80199e4:	bf00      	nop
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	20001dac 	.word	0x20001dac
 80199ec:	20001cec 	.word	0x20001cec
 80199f0:	20001d50 	.word	0x20001d50
 80199f4:	20001d68 	.word	0x20001d68

080199f8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80199f8:	b480      	push	{r7}
 80199fa:	b085      	sub	sp, #20
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	460b      	mov	r3, r1
 8019a02:	70fb      	strb	r3, [r7, #3]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 8019a04:	4b16      	ldr	r3, [pc, #88]	@ (8019a60 <LoRaMacClassBSetFPendingBit+0x68>)
 8019a06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8019a0a:	60fb      	str	r3, [r7, #12]

    if( address == *Ctx.LoRaMacClassBParams.LoRaMacDevAddr )
 8019a0c:	4b14      	ldr	r3, [pc, #80]	@ (8019a60 <LoRaMacClassBSetFPendingBit+0x68>)
 8019a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	687a      	ldr	r2, [r7, #4]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	d104      	bne.n	8019a24 <LoRaMacClassBSetFPendingBit+0x2c>
    {
        // Unicast
        ClassBNvm->PingSlotCtx.FPendingSet = fPendingSet;
 8019a1a:	4b12      	ldr	r3, [pc, #72]	@ (8019a64 <LoRaMacClassBSetFPendingBit+0x6c>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	78fa      	ldrb	r2, [r7, #3]
 8019a20:	725a      	strb	r2, [r3, #9]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019a22:	e017      	b.n	8019a54 <LoRaMacClassBSetFPendingBit+0x5c>
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8019a24:	2300      	movs	r3, #0
 8019a26:	72fb      	strb	r3, [r7, #11]
 8019a28:	e011      	b.n	8019a4e <LoRaMacClassBSetFPendingBit+0x56>
            if( cur != NULL )
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d008      	beq.n	8019a42 <LoRaMacClassBSetFPendingBit+0x4a>
                if( address == cur->ChannelParams.Address )
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d103      	bne.n	8019a42 <LoRaMacClassBSetFPendingBit+0x4a>
                    cur->FPendingSet = fPendingSet;
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	78fa      	ldrb	r2, [r7, #3]
 8019a3e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
            cur++;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	3330      	adds	r3, #48	@ 0x30
 8019a46:	60fb      	str	r3, [r7, #12]
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8019a48:	7afb      	ldrb	r3, [r7, #11]
 8019a4a:	3301      	adds	r3, #1
 8019a4c:	72fb      	strb	r3, [r7, #11]
 8019a4e:	7afb      	ldrb	r3, [r7, #11]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d0ea      	beq.n	8019a2a <LoRaMacClassBSetFPendingBit+0x32>
}
 8019a54:	bf00      	nop
 8019a56:	3714      	adds	r7, #20
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bc80      	pop	{r7}
 8019a5c:	4770      	bx	lr
 8019a5e:	bf00      	nop
 8019a60:	20001cec 	.word	0x20001cec
 8019a64:	20001dac 	.word	0x20001dac

08019a68 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8019a72:	607b      	str	r3, [r7, #4]
  return(result);
 8019a74:	687b      	ldr	r3, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8019a76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a78:	b672      	cpsid	i
}
 8019a7a:	bf00      	nop
    events = LoRaMacClassBEvents;
 8019a7c:	4b15      	ldr	r3, [pc, #84]	@ (8019ad4 <LoRaMacClassBProcess+0x6c>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	603b      	str	r3, [r7, #0]
    LoRaMacClassBEvents.Value = 0;
 8019a82:	4b14      	ldr	r3, [pc, #80]	@ (8019ad4 <LoRaMacClassBProcess+0x6c>)
 8019a84:	2200      	movs	r2, #0
 8019a86:	601a      	str	r2, [r3, #0]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	f383 8810 	msr	PRIMASK, r3
}
 8019a92:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d017      	beq.n	8019aca <LoRaMacClassBProcess+0x62>
    {
        if( events.Events.Beacon == 1 )
 8019a9a:	783b      	ldrb	r3, [r7, #0]
 8019a9c:	f003 0301 	and.w	r3, r3, #1
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d001      	beq.n	8019aaa <LoRaMacClassBProcess+0x42>
        {
            LoRaMacClassBProcessBeacon( );
 8019aa6:	f7fe fde5 	bl	8018674 <LoRaMacClassBProcessBeacon>
        }
        if( events.Events.PingSlot == 1 )
 8019aaa:	783b      	ldrb	r3, [r7, #0]
 8019aac:	f003 0302 	and.w	r3, r3, #2
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d001      	beq.n	8019aba <LoRaMacClassBProcess+0x52>
        {
            LoRaMacClassBProcessPingSlot( );
 8019ab6:	f7fe ffe3 	bl	8018a80 <LoRaMacClassBProcessPingSlot>
        }
        if( events.Events.MulticastSlot == 1 )
 8019aba:	783b      	ldrb	r3, [r7, #0]
 8019abc:	f003 0304 	and.w	r3, r3, #4
 8019ac0:	b2db      	uxtb	r3, r3
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d001      	beq.n	8019aca <LoRaMacClassBProcess+0x62>
        {
            LoRaMacClassBProcessMulticastSlot( );
 8019ac6:	f7ff f923 	bl	8018d10 <LoRaMacClassBProcessMulticastSlot>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8019aca:	bf00      	nop
 8019acc:	3710      	adds	r7, #16
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
 8019ad2:	bf00      	nop
 8019ad4:	20001ce8 	.word	0x20001ce8

08019ad8 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b085      	sub	sp, #20
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	81fb      	strh	r3, [r7, #14]
 8019ae8:	e00a      	b.n	8019b00 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8019aea:	89fb      	ldrh	r3, [r7, #14]
 8019aec:	68ba      	ldr	r2, [r7, #8]
 8019aee:	4413      	add	r3, r2
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d001      	beq.n	8019afa <IsSlotFree+0x22>
        {
            return false;
 8019af6:	2300      	movs	r3, #0
 8019af8:	e006      	b.n	8019b08 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8019afa:	89fb      	ldrh	r3, [r7, #14]
 8019afc:	3301      	adds	r3, #1
 8019afe:	81fb      	strh	r3, [r7, #14]
 8019b00:	89fb      	ldrh	r3, [r7, #14]
 8019b02:	2b0f      	cmp	r3, #15
 8019b04:	d9f1      	bls.n	8019aea <IsSlotFree+0x12>
        }
    }
    return true;
 8019b06:	2301      	movs	r3, #1
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bc80      	pop	{r7}
 8019b10:	4770      	bx	lr
	...

08019b14 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8019b1e:	e007      	b.n	8019b30 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8019b20:	79fb      	ldrb	r3, [r7, #7]
 8019b22:	3301      	adds	r3, #1
 8019b24:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8019b26:	79fb      	ldrb	r3, [r7, #7]
 8019b28:	2b20      	cmp	r3, #32
 8019b2a:	d101      	bne.n	8019b30 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	e012      	b.n	8019b56 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8019b30:	79fb      	ldrb	r3, [r7, #7]
 8019b32:	011b      	lsls	r3, r3, #4
 8019b34:	3308      	adds	r3, #8
 8019b36:	4a0a      	ldr	r2, [pc, #40]	@ (8019b60 <MallocNewMacCommandSlot+0x4c>)
 8019b38:	4413      	add	r3, r2
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7ff ffcc 	bl	8019ad8 <IsSlotFree>
 8019b40:	4603      	mov	r3, r0
 8019b42:	f083 0301 	eor.w	r3, r3, #1
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d1e9      	bne.n	8019b20 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8019b4c:	79fb      	ldrb	r3, [r7, #7]
 8019b4e:	011b      	lsls	r3, r3, #4
 8019b50:	3308      	adds	r3, #8
 8019b52:	4a03      	ldr	r2, [pc, #12]	@ (8019b60 <MallocNewMacCommandSlot+0x4c>)
 8019b54:	4413      	add	r3, r2
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	20001de0 	.word	0x20001de0

08019b64 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d101      	bne.n	8019b76 <FreeMacCommandSlot+0x12>
    {
        return false;
 8019b72:	2300      	movs	r3, #0
 8019b74:	e005      	b.n	8019b82 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8019b76:	2210      	movs	r2, #16
 8019b78:	2100      	movs	r1, #0
 8019b7a:	6878      	ldr	r0, [r7, #4]
 8019b7c:	f005 fd86 	bl	801f68c <memset1>

    return true;
 8019b80:	2301      	movs	r3, #1
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3708      	adds	r7, #8
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8019b8a:	b480      	push	{r7}
 8019b8c:	b083      	sub	sp, #12
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d101      	bne.n	8019b9c <LinkedListInit+0x12>
    {
        return false;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	e006      	b.n	8019baa <LinkedListInit+0x20>
    }

    list->First = NULL;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	605a      	str	r2, [r3, #4]

    return true;
 8019ba8:	2301      	movs	r3, #1
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	370c      	adds	r7, #12
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bc80      	pop	{r7}
 8019bb2:	4770      	bx	lr

08019bb4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8019bb4:	b480      	push	{r7}
 8019bb6:	b083      	sub	sp, #12
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d002      	beq.n	8019bca <LinkedListAdd+0x16>
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d101      	bne.n	8019bce <LinkedListAdd+0x1a>
    {
        return false;
 8019bca:	2300      	movs	r3, #0
 8019bcc:	e015      	b.n	8019bfa <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d102      	bne.n	8019bdc <LinkedListAdd+0x28>
    {
        list->First = element;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	683a      	ldr	r2, [r7, #0]
 8019bda:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d003      	beq.n	8019bec <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	683a      	ldr	r2, [r7, #0]
 8019bea:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	2200      	movs	r2, #0
 8019bf0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	683a      	ldr	r2, [r7, #0]
 8019bf6:	605a      	str	r2, [r3, #4]

    return true;
 8019bf8:	2301      	movs	r3, #1
}
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	370c      	adds	r7, #12
 8019bfe:	46bd      	mov	sp, r7
 8019c00:	bc80      	pop	{r7}
 8019c02:	4770      	bx	lr

08019c04 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8019c04:	b480      	push	{r7}
 8019c06:	b085      	sub	sp, #20
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d002      	beq.n	8019c1a <LinkedListGetPrevious+0x16>
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d101      	bne.n	8019c1e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	e016      	b.n	8019c4c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8019c24:	683a      	ldr	r2, [r7, #0]
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	429a      	cmp	r2, r3
 8019c2a:	d00c      	beq.n	8019c46 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8019c2c:	e002      	b.n	8019c34 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d007      	beq.n	8019c4a <LinkedListGetPrevious+0x46>
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	683a      	ldr	r2, [r7, #0]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d1f4      	bne.n	8019c2e <LinkedListGetPrevious+0x2a>
 8019c44:	e001      	b.n	8019c4a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8019c46:	2300      	movs	r3, #0
 8019c48:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3714      	adds	r7, #20
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bc80      	pop	{r7}
 8019c54:	4770      	bx	lr

08019c56 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8019c56:	b580      	push	{r7, lr}
 8019c58:	b084      	sub	sp, #16
 8019c5a:	af00      	add	r7, sp, #0
 8019c5c:	6078      	str	r0, [r7, #4]
 8019c5e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d002      	beq.n	8019c6c <LinkedListRemove+0x16>
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d101      	bne.n	8019c70 <LinkedListRemove+0x1a>
    {
        return false;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	e020      	b.n	8019cb2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8019c70:	6839      	ldr	r1, [r7, #0]
 8019c72:	6878      	ldr	r0, [r7, #4]
 8019c74:	f7ff ffc6 	bl	8019c04 <LinkedListGetPrevious>
 8019c78:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	683a      	ldr	r2, [r7, #0]
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d103      	bne.n	8019c8c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	681a      	ldr	r2, [r3, #0]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	683a      	ldr	r2, [r7, #0]
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d102      	bne.n	8019c9c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	68fa      	ldr	r2, [r7, #12]
 8019c9a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d003      	beq.n	8019caa <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	681a      	ldr	r2, [r3, #0]
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	2200      	movs	r2, #0
 8019cae:	601a      	str	r2, [r3, #0]

    return true;
 8019cb0:	2301      	movs	r3, #1
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	3710      	adds	r7, #16
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
	...

08019cbc <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8019cbc:	b480      	push	{r7}
 8019cbe:	b083      	sub	sp, #12
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8019cc6:	79fb      	ldrb	r3, [r7, #7]
 8019cc8:	2b11      	cmp	r3, #17
 8019cca:	bf8c      	ite	hi
 8019ccc:	2201      	movhi	r2, #1
 8019cce:	2200      	movls	r2, #0
 8019cd0:	b2d2      	uxtb	r2, r2
 8019cd2:	2a00      	cmp	r2, #0
 8019cd4:	d10d      	bne.n	8019cf2 <IsSticky+0x36>
 8019cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8019d00 <IsSticky+0x44>)
 8019cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8019cdc:	f003 0301 	and.w	r3, r3, #1
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	bf14      	ite	ne
 8019ce4:	2301      	movne	r3, #1
 8019ce6:	2300      	moveq	r3, #0
 8019ce8:	b2db      	uxtb	r3, r3
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d001      	beq.n	8019cf2 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8019cee:	2301      	movs	r3, #1
 8019cf0:	e000      	b.n	8019cf4 <IsSticky+0x38>
        default:
            return false;
 8019cf2:	2300      	movs	r3, #0
    }
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	370c      	adds	r7, #12
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bc80      	pop	{r7}
 8019cfc:	4770      	bx	lr
 8019cfe:	bf00      	nop
 8019d00:	00020720 	.word	0x00020720

08019d04 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8019d04:	b480      	push	{r7}
 8019d06:	b083      	sub	sp, #12
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8019d0e:	2300      	movs	r3, #0
    }
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	370c      	adds	r7, #12
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bc80      	pop	{r7}
 8019d18:	4770      	bx	lr
	...

08019d1c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8019d20:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8019d24:	2100      	movs	r1, #0
 8019d26:	4804      	ldr	r0, [pc, #16]	@ (8019d38 <LoRaMacCommandsInit+0x1c>)
 8019d28:	f005 fcb0 	bl	801f68c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8019d2c:	4802      	ldr	r0, [pc, #8]	@ (8019d38 <LoRaMacCommandsInit+0x1c>)
 8019d2e:	f7ff ff2c 	bl	8019b8a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8019d32:	2300      	movs	r3, #0
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	bd80      	pop	{r7, pc}
 8019d38:	20001de0 	.word	0x20001de0

08019d3c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b086      	sub	sp, #24
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	4603      	mov	r3, r0
 8019d44:	60b9      	str	r1, [r7, #8]
 8019d46:	607a      	str	r2, [r7, #4]
 8019d48:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d101      	bne.n	8019d54 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8019d50:	2301      	movs	r3, #1
 8019d52:	e03b      	b.n	8019dcc <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8019d54:	f7ff fede 	bl	8019b14 <MallocNewMacCommandSlot>
 8019d58:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d101      	bne.n	8019d64 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8019d60:	2302      	movs	r3, #2
 8019d62:	e033      	b.n	8019dcc <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8019d64:	6979      	ldr	r1, [r7, #20]
 8019d66:	481b      	ldr	r0, [pc, #108]	@ (8019dd4 <LoRaMacCommandsAddCmd+0x98>)
 8019d68:	f7ff ff24 	bl	8019bb4 <LinkedListAdd>
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	f083 0301 	eor.w	r3, r3, #1
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d001      	beq.n	8019d7c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8019d78:	2305      	movs	r3, #5
 8019d7a:	e027      	b.n	8019dcc <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	7bfa      	ldrb	r2, [r7, #15]
 8019d80:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	3305      	adds	r3, #5
 8019d8c:	687a      	ldr	r2, [r7, #4]
 8019d8e:	b292      	uxth	r2, r2
 8019d90:	68b9      	ldr	r1, [r7, #8]
 8019d92:	4618      	mov	r0, r3
 8019d94:	f005 fc3f 	bl	801f616 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8019d98:	7bfb      	ldrb	r3, [r7, #15]
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	f7ff ff8e 	bl	8019cbc <IsSticky>
 8019da0:	4603      	mov	r3, r0
 8019da2:	461a      	mov	r2, r3
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8019da8:	7bfb      	ldrb	r3, [r7, #15]
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7ff ffaa 	bl	8019d04 <IsConfirmationRequired>
 8019db0:	4603      	mov	r3, r0
 8019db2:	461a      	mov	r2, r3
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8019db8:	4b06      	ldr	r3, [pc, #24]	@ (8019dd4 <LoRaMacCommandsAddCmd+0x98>)
 8019dba:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	4413      	add	r3, r2
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	4a03      	ldr	r2, [pc, #12]	@ (8019dd4 <LoRaMacCommandsAddCmd+0x98>)
 8019dc6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8019dca:	2300      	movs	r3, #0
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3718      	adds	r7, #24
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}
 8019dd4:	20001de0 	.word	0x20001de0

08019dd8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b082      	sub	sp, #8
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d101      	bne.n	8019dea <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8019de6:	2301      	movs	r3, #1
 8019de8:	e021      	b.n	8019e2e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8019dea:	6879      	ldr	r1, [r7, #4]
 8019dec:	4812      	ldr	r0, [pc, #72]	@ (8019e38 <LoRaMacCommandsRemoveCmd+0x60>)
 8019dee:	f7ff ff32 	bl	8019c56 <LinkedListRemove>
 8019df2:	4603      	mov	r3, r0
 8019df4:	f083 0301 	eor.w	r3, r3, #1
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d001      	beq.n	8019e02 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8019dfe:	2303      	movs	r3, #3
 8019e00:	e015      	b.n	8019e2e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8019e02:	4b0d      	ldr	r3, [pc, #52]	@ (8019e38 <LoRaMacCommandsRemoveCmd+0x60>)
 8019e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	689b      	ldr	r3, [r3, #8]
 8019e0c:	1ad3      	subs	r3, r2, r3
 8019e0e:	3b01      	subs	r3, #1
 8019e10:	4a09      	ldr	r2, [pc, #36]	@ (8019e38 <LoRaMacCommandsRemoveCmd+0x60>)
 8019e12:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f7ff fea4 	bl	8019b64 <FreeMacCommandSlot>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	f083 0301 	eor.w	r3, r3, #1
 8019e22:	b2db      	uxtb	r3, r3
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d001      	beq.n	8019e2c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8019e28:	2305      	movs	r3, #5
 8019e2a:	e000      	b.n	8019e2e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8019e2c:	2300      	movs	r3, #0
}
 8019e2e:	4618      	mov	r0, r3
 8019e30:	3708      	adds	r7, #8
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd80      	pop	{r7, pc}
 8019e36:	bf00      	nop
 8019e38:	20001de0 	.word	0x20001de0

08019e3c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8019e3c:	b480      	push	{r7}
 8019e3e:	b085      	sub	sp, #20
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	4603      	mov	r3, r0
 8019e44:	6039      	str	r1, [r7, #0]
 8019e46:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8019e48:	4b0e      	ldr	r3, [pc, #56]	@ (8019e84 <LoRaMacCommandsGetCmd+0x48>)
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8019e4e:	e002      	b.n	8019e56 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d004      	beq.n	8019e66 <LoRaMacCommandsGetCmd+0x2a>
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	791b      	ldrb	r3, [r3, #4]
 8019e60:	79fa      	ldrb	r2, [r7, #7]
 8019e62:	429a      	cmp	r2, r3
 8019e64:	d1f4      	bne.n	8019e50 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	68fa      	ldr	r2, [r7, #12]
 8019e6a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d101      	bne.n	8019e76 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8019e72:	2303      	movs	r3, #3
 8019e74:	e000      	b.n	8019e78 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8019e76:	2300      	movs	r3, #0
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3714      	adds	r7, #20
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bc80      	pop	{r7}
 8019e80:	4770      	bx	lr
 8019e82:	bf00      	nop
 8019e84:	20001de0 	.word	0x20001de0

08019e88 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8019e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8019ecc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8019e94:	e012      	b.n	8019ebc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	7b1b      	ldrb	r3, [r3, #12]
 8019e9a:	f083 0301 	eor.w	r3, r3, #1
 8019e9e:	b2db      	uxtb	r3, r3
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d008      	beq.n	8019eb6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8019eaa:	6878      	ldr	r0, [r7, #4]
 8019eac:	f7ff ff94 	bl	8019dd8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8019eb0:	683b      	ldr	r3, [r7, #0]
 8019eb2:	607b      	str	r3, [r7, #4]
 8019eb4:	e002      	b.n	8019ebc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d1e9      	bne.n	8019e96 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8019ec2:	2300      	movs	r3, #0
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3708      	adds	r7, #8
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	20001de0 	.word	0x20001de0

08019ed0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8019ed6:	4b13      	ldr	r3, [pc, #76]	@ (8019f24 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8019edc:	e01a      	b.n	8019f14 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	791b      	ldrb	r3, [r3, #4]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7ff fee7 	bl	8019cbc <IsSticky>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d00d      	beq.n	8019f10 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	791b      	ldrb	r3, [r3, #4]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7ff ff03 	bl	8019d04 <IsConfirmationRequired>
 8019efe:	4603      	mov	r3, r0
 8019f00:	f083 0301 	eor.w	r3, r3, #1
 8019f04:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d002      	beq.n	8019f10 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8019f0a:	6878      	ldr	r0, [r7, #4]
 8019f0c:	f7ff ff64 	bl	8019dd8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d1e1      	bne.n	8019ede <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8019f1a:	2300      	movs	r3, #0
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3708      	adds	r7, #8
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}
 8019f24:	20001de0 	.word	0x20001de0

08019f28 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8019f28:	b480      	push	{r7}
 8019f2a:	b083      	sub	sp, #12
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d101      	bne.n	8019f3a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8019f36:	2301      	movs	r3, #1
 8019f38:	e005      	b.n	8019f46 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8019f3a:	4b05      	ldr	r3, [pc, #20]	@ (8019f50 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8019f3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8019f44:	2300      	movs	r3, #0
}
 8019f46:	4618      	mov	r0, r3
 8019f48:	370c      	adds	r7, #12
 8019f4a:	46bd      	mov	sp, r7
 8019f4c:	bc80      	pop	{r7}
 8019f4e:	4770      	bx	lr
 8019f50:	20001de0 	.word	0x20001de0

08019f54 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b088      	sub	sp, #32
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	60f8      	str	r0, [r7, #12]
 8019f5c:	60b9      	str	r1, [r7, #8]
 8019f5e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8019f60:	4b25      	ldr	r3, [pc, #148]	@ (8019ff8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8019f66:	2300      	movs	r3, #0
 8019f68:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d002      	beq.n	8019f76 <LoRaMacCommandsSerializeCmds+0x22>
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d126      	bne.n	8019fc4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8019f76:	2301      	movs	r3, #1
 8019f78:	e039      	b.n	8019fee <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8019f7a:	7efb      	ldrb	r3, [r7, #27]
 8019f7c:	68fa      	ldr	r2, [r7, #12]
 8019f7e:	1ad2      	subs	r2, r2, r3
 8019f80:	69fb      	ldr	r3, [r7, #28]
 8019f82:	689b      	ldr	r3, [r3, #8]
 8019f84:	3301      	adds	r3, #1
 8019f86:	429a      	cmp	r2, r3
 8019f88:	d320      	bcc.n	8019fcc <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8019f8a:	7efb      	ldrb	r3, [r7, #27]
 8019f8c:	1c5a      	adds	r2, r3, #1
 8019f8e:	76fa      	strb	r2, [r7, #27]
 8019f90:	461a      	mov	r2, r3
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	4413      	add	r3, r2
 8019f96:	69fa      	ldr	r2, [r7, #28]
 8019f98:	7912      	ldrb	r2, [r2, #4]
 8019f9a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8019f9c:	7efb      	ldrb	r3, [r7, #27]
 8019f9e:	687a      	ldr	r2, [r7, #4]
 8019fa0:	18d0      	adds	r0, r2, r3
 8019fa2:	69fb      	ldr	r3, [r7, #28]
 8019fa4:	1d59      	adds	r1, r3, #5
 8019fa6:	69fb      	ldr	r3, [r7, #28]
 8019fa8:	689b      	ldr	r3, [r3, #8]
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	461a      	mov	r2, r3
 8019fae:	f005 fb32 	bl	801f616 <memcpy1>
            itr += curElement->PayloadSize;
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	689b      	ldr	r3, [r3, #8]
 8019fb6:	b2da      	uxtb	r2, r3
 8019fb8:	7efb      	ldrb	r3, [r7, #27]
 8019fba:	4413      	add	r3, r2
 8019fbc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8019fc4:	69fb      	ldr	r3, [r7, #28]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d1d7      	bne.n	8019f7a <LoRaMacCommandsSerializeCmds+0x26>
 8019fca:	e009      	b.n	8019fe0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8019fcc:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8019fce:	e007      	b.n	8019fe0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8019fd6:	69f8      	ldr	r0, [r7, #28]
 8019fd8:	f7ff fefe 	bl	8019dd8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d1f4      	bne.n	8019fd0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8019fe6:	68b8      	ldr	r0, [r7, #8]
 8019fe8:	f7ff ff9e 	bl	8019f28 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8019fec:	2300      	movs	r3, #0
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3720      	adds	r7, #32
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	20001de0 	.word	0x20001de0

08019ffc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	b085      	sub	sp, #20
 801a000:	af00      	add	r7, sp, #0
 801a002:	4603      	mov	r3, r0
 801a004:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801a006:	2300      	movs	r3, #0
 801a008:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801a00a:	79fb      	ldrb	r3, [r7, #7]
 801a00c:	3b02      	subs	r3, #2
 801a00e:	2b11      	cmp	r3, #17
 801a010:	d850      	bhi.n	801a0b4 <LoRaMacCommandsGetCmdSize+0xb8>
 801a012:	a201      	add	r2, pc, #4	@ (adr r2, 801a018 <LoRaMacCommandsGetCmdSize+0x1c>)
 801a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a018:	0801a061 	.word	0x0801a061
 801a01c:	0801a067 	.word	0x0801a067
 801a020:	0801a06d 	.word	0x0801a06d
 801a024:	0801a073 	.word	0x0801a073
 801a028:	0801a079 	.word	0x0801a079
 801a02c:	0801a07f 	.word	0x0801a07f
 801a030:	0801a085 	.word	0x0801a085
 801a034:	0801a08b 	.word	0x0801a08b
 801a038:	0801a091 	.word	0x0801a091
 801a03c:	0801a0b5 	.word	0x0801a0b5
 801a040:	0801a0b5 	.word	0x0801a0b5
 801a044:	0801a097 	.word	0x0801a097
 801a048:	0801a0b5 	.word	0x0801a0b5
 801a04c:	0801a0b5 	.word	0x0801a0b5
 801a050:	0801a09d 	.word	0x0801a09d
 801a054:	0801a0a3 	.word	0x0801a0a3
 801a058:	0801a0a9 	.word	0x0801a0a9
 801a05c:	0801a0af 	.word	0x0801a0af
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801a060:	2303      	movs	r3, #3
 801a062:	73fb      	strb	r3, [r7, #15]
            break;
 801a064:	e027      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801a066:	2305      	movs	r3, #5
 801a068:	73fb      	strb	r3, [r7, #15]
            break;
 801a06a:	e024      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801a06c:	2302      	movs	r3, #2
 801a06e:	73fb      	strb	r3, [r7, #15]
            break;
 801a070:	e021      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801a072:	2305      	movs	r3, #5
 801a074:	73fb      	strb	r3, [r7, #15]
            break;
 801a076:	e01e      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801a078:	2301      	movs	r3, #1
 801a07a:	73fb      	strb	r3, [r7, #15]
            break;
 801a07c:	e01b      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801a07e:	2306      	movs	r3, #6
 801a080:	73fb      	strb	r3, [r7, #15]
            break;
 801a082:	e018      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801a084:	2302      	movs	r3, #2
 801a086:	73fb      	strb	r3, [r7, #15]
            break;
 801a088:	e015      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801a08a:	2302      	movs	r3, #2
 801a08c:	73fb      	strb	r3, [r7, #15]
            break;
 801a08e:	e012      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801a090:	2305      	movs	r3, #5
 801a092:	73fb      	strb	r3, [r7, #15]
            break;
 801a094:	e00f      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801a096:	2306      	movs	r3, #6
 801a098:	73fb      	strb	r3, [r7, #15]
            break;
 801a09a:	e00c      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801a09c:	2301      	movs	r3, #1
 801a09e:	73fb      	strb	r3, [r7, #15]
            break;
 801a0a0:	e009      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801a0a2:	2305      	movs	r3, #5
 801a0a4:	73fb      	strb	r3, [r7, #15]
            break;
 801a0a6:	e006      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801a0a8:	2304      	movs	r3, #4
 801a0aa:	73fb      	strb	r3, [r7, #15]
            break;
 801a0ac:	e003      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801a0ae:	2304      	movs	r3, #4
 801a0b0:	73fb      	strb	r3, [r7, #15]
            break;
 801a0b2:	e000      	b.n	801a0b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801a0b4:	bf00      	nop
        }
    }
    return cidSize;
 801a0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	3714      	adds	r7, #20
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bc80      	pop	{r7}
 801a0c0:	4770      	bx	lr
 801a0c2:	bf00      	nop

0801a0c4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b083      	sub	sp, #12
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	4a07      	ldr	r2, [pc, #28]	@ (801a0ec <IncreaseBufferPointer+0x28>)
 801a0d0:	4293      	cmp	r3, r2
 801a0d2:	d102      	bne.n	801a0da <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801a0d4:	4b06      	ldr	r3, [pc, #24]	@ (801a0f0 <IncreaseBufferPointer+0x2c>)
 801a0d6:	607b      	str	r3, [r7, #4]
 801a0d8:	e002      	b.n	801a0e0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	3304      	adds	r3, #4
 801a0de:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801a0e0:	687b      	ldr	r3, [r7, #4]
}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	370c      	adds	r7, #12
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bc80      	pop	{r7}
 801a0ea:	4770      	bx	lr
 801a0ec:	20002008 	.word	0x20002008
 801a0f0:	20001ff8 	.word	0x20001ff8

0801a0f4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801a0fe:	79fb      	ldrb	r3, [r7, #7]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d101      	bne.n	801a108 <IsListEmpty+0x14>
    {
        return true;
 801a104:	2301      	movs	r3, #1
 801a106:	e000      	b.n	801a10a <IsListEmpty+0x16>
    }
    return false;
 801a108:	2300      	movs	r3, #0
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	370c      	adds	r7, #12
 801a10e:	46bd      	mov	sp, r7
 801a110:	bc80      	pop	{r7}
 801a112:	4770      	bx	lr

0801a114 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801a114:	b480      	push	{r7}
 801a116:	b083      	sub	sp, #12
 801a118:	af00      	add	r7, sp, #0
 801a11a:	4603      	mov	r3, r0
 801a11c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801a11e:	79fb      	ldrb	r3, [r7, #7]
 801a120:	2b04      	cmp	r3, #4
 801a122:	d901      	bls.n	801a128 <IsListFull+0x14>
    {
        return true;
 801a124:	2301      	movs	r3, #1
 801a126:	e000      	b.n	801a12a <IsListFull+0x16>
    }
    return false;
 801a128:	2300      	movs	r3, #0
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	370c      	adds	r7, #12
 801a12e:	46bd      	mov	sp, r7
 801a130:	bc80      	pop	{r7}
 801a132:	4770      	bx	lr

0801a134 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b086      	sub	sp, #24
 801a138:	af00      	add	r7, sp, #0
 801a13a:	4603      	mov	r3, r0
 801a13c:	60b9      	str	r1, [r7, #8]
 801a13e:	607a      	str	r2, [r7, #4]
 801a140:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801a142:	68bb      	ldr	r3, [r7, #8]
 801a144:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801a146:	4b13      	ldr	r3, [pc, #76]	@ (801a194 <GetElement+0x60>)
 801a148:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7ff ffd1 	bl	801a0f4 <IsListEmpty>
 801a152:	4603      	mov	r3, r0
 801a154:	2b00      	cmp	r3, #0
 801a156:	d001      	beq.n	801a15c <GetElement+0x28>
    {
        return NULL;
 801a158:	2300      	movs	r3, #0
 801a15a:	e017      	b.n	801a18c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801a15c:	2300      	movs	r3, #0
 801a15e:	74fb      	strb	r3, [r7, #19]
 801a160:	e00d      	b.n	801a17e <GetElement+0x4a>
    {
        if( element->Request == request )
 801a162:	697b      	ldr	r3, [r7, #20]
 801a164:	781b      	ldrb	r3, [r3, #0]
 801a166:	7bfa      	ldrb	r2, [r7, #15]
 801a168:	429a      	cmp	r2, r3
 801a16a:	d101      	bne.n	801a170 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	e00d      	b.n	801a18c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801a170:	6978      	ldr	r0, [r7, #20]
 801a172:	f7ff ffa7 	bl	801a0c4 <IncreaseBufferPointer>
 801a176:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801a178:	7cfb      	ldrb	r3, [r7, #19]
 801a17a:	3301      	adds	r3, #1
 801a17c:	74fb      	strb	r3, [r7, #19]
 801a17e:	4b05      	ldr	r3, [pc, #20]	@ (801a194 <GetElement+0x60>)
 801a180:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a184:	7cfa      	ldrb	r2, [r7, #19]
 801a186:	429a      	cmp	r2, r3
 801a188:	d3eb      	bcc.n	801a162 <GetElement+0x2e>
    }

    return NULL;
 801a18a:	2300      	movs	r3, #0
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	3718      	adds	r7, #24
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}
 801a194:	20001fec 	.word	0x20001fec

0801a198 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b082      	sub	sp, #8
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801a1a0:	4a0c      	ldr	r2, [pc, #48]	@ (801a1d4 <LoRaMacConfirmQueueInit+0x3c>)
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801a1a6:	4b0b      	ldr	r3, [pc, #44]	@ (801a1d4 <LoRaMacConfirmQueueInit+0x3c>)
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801a1ae:	4b09      	ldr	r3, [pc, #36]	@ (801a1d4 <LoRaMacConfirmQueueInit+0x3c>)
 801a1b0:	4a09      	ldr	r2, [pc, #36]	@ (801a1d8 <LoRaMacConfirmQueueInit+0x40>)
 801a1b2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801a1b4:	4b07      	ldr	r3, [pc, #28]	@ (801a1d4 <LoRaMacConfirmQueueInit+0x3c>)
 801a1b6:	4a08      	ldr	r2, [pc, #32]	@ (801a1d8 <LoRaMacConfirmQueueInit+0x40>)
 801a1b8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801a1ba:	2214      	movs	r2, #20
 801a1bc:	21ff      	movs	r1, #255	@ 0xff
 801a1be:	4806      	ldr	r0, [pc, #24]	@ (801a1d8 <LoRaMacConfirmQueueInit+0x40>)
 801a1c0:	f005 fa64 	bl	801f68c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801a1c4:	4b03      	ldr	r3, [pc, #12]	@ (801a1d4 <LoRaMacConfirmQueueInit+0x3c>)
 801a1c6:	2201      	movs	r2, #1
 801a1c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801a1cc:	bf00      	nop
 801a1ce:	3708      	adds	r7, #8
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}
 801a1d4:	20001fec 	.word	0x20001fec
 801a1d8:	20001ff8 	.word	0x20001ff8

0801a1dc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801a1e4:	4b19      	ldr	r3, [pc, #100]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a1e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7ff ff92 	bl	801a114 <IsListFull>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d001      	beq.n	801a1fa <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	e024      	b.n	801a244 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801a1fa:	4b14      	ldr	r3, [pc, #80]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a1fc:	689b      	ldr	r3, [r3, #8]
 801a1fe:	687a      	ldr	r2, [r7, #4]
 801a200:	7812      	ldrb	r2, [r2, #0]
 801a202:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801a204:	4b11      	ldr	r3, [pc, #68]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a206:	689b      	ldr	r3, [r3, #8]
 801a208:	687a      	ldr	r2, [r7, #4]
 801a20a:	7852      	ldrb	r2, [r2, #1]
 801a20c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801a20e:	4b0f      	ldr	r3, [pc, #60]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a210:	689b      	ldr	r3, [r3, #8]
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	78d2      	ldrb	r2, [r2, #3]
 801a216:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 801a218:	4b0c      	ldr	r3, [pc, #48]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a21a:	689b      	ldr	r3, [r3, #8]
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	7892      	ldrb	r2, [r2, #2]
 801a220:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801a222:	4b0a      	ldr	r3, [pc, #40]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a224:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a228:	3301      	adds	r3, #1
 801a22a:	b2da      	uxtb	r2, r3
 801a22c:	4b07      	ldr	r3, [pc, #28]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a22e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801a232:	4b06      	ldr	r3, [pc, #24]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a234:	689b      	ldr	r3, [r3, #8]
 801a236:	4618      	mov	r0, r3
 801a238:	f7ff ff44 	bl	801a0c4 <IncreaseBufferPointer>
 801a23c:	4603      	mov	r3, r0
 801a23e:	4a03      	ldr	r2, [pc, #12]	@ (801a24c <LoRaMacConfirmQueueAdd+0x70>)
 801a240:	6093      	str	r3, [r2, #8]

    return true;
 801a242:	2301      	movs	r3, #1
}
 801a244:	4618      	mov	r0, r3
 801a246:	3708      	adds	r7, #8
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	20001fec 	.word	0x20001fec

0801a250 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801a250:	b580      	push	{r7, lr}
 801a252:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801a254:	4b0e      	ldr	r3, [pc, #56]	@ (801a290 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801a256:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a25a:	4618      	mov	r0, r3
 801a25c:	f7ff ff4a 	bl	801a0f4 <IsListEmpty>
 801a260:	4603      	mov	r3, r0
 801a262:	2b00      	cmp	r3, #0
 801a264:	d001      	beq.n	801a26a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801a266:	2300      	movs	r3, #0
 801a268:	e010      	b.n	801a28c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801a26a:	4b09      	ldr	r3, [pc, #36]	@ (801a290 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801a26c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a270:	3b01      	subs	r3, #1
 801a272:	b2da      	uxtb	r2, r3
 801a274:	4b06      	ldr	r3, [pc, #24]	@ (801a290 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801a276:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801a27a:	4b05      	ldr	r3, [pc, #20]	@ (801a290 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801a27c:	685b      	ldr	r3, [r3, #4]
 801a27e:	4618      	mov	r0, r3
 801a280:	f7ff ff20 	bl	801a0c4 <IncreaseBufferPointer>
 801a284:	4603      	mov	r3, r0
 801a286:	4a02      	ldr	r2, [pc, #8]	@ (801a290 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801a288:	6053      	str	r3, [r2, #4]

    return true;
 801a28a:	2301      	movs	r3, #1
}
 801a28c:	4618      	mov	r0, r3
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	20001fec 	.word	0x20001fec

0801a294 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	4603      	mov	r3, r0
 801a29c:	460a      	mov	r2, r1
 801a29e:	71fb      	strb	r3, [r7, #7]
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801a2a8:	4b10      	ldr	r3, [pc, #64]	@ (801a2ec <LoRaMacConfirmQueueSetStatus+0x58>)
 801a2aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7ff ff20 	bl	801a0f4 <IsListEmpty>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	f083 0301 	eor.w	r3, r3, #1
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d011      	beq.n	801a2e4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801a2c0:	4b0a      	ldr	r3, [pc, #40]	@ (801a2ec <LoRaMacConfirmQueueSetStatus+0x58>)
 801a2c2:	6859      	ldr	r1, [r3, #4]
 801a2c4:	4b09      	ldr	r3, [pc, #36]	@ (801a2ec <LoRaMacConfirmQueueSetStatus+0x58>)
 801a2c6:	689a      	ldr	r2, [r3, #8]
 801a2c8:	79bb      	ldrb	r3, [r7, #6]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f7ff ff32 	bl	801a134 <GetElement>
 801a2d0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d005      	beq.n	801a2e4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	79fa      	ldrb	r2, [r7, #7]
 801a2dc:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	2201      	movs	r2, #1
 801a2e2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801a2e4:	bf00      	nop
 801a2e6:	3710      	adds	r7, #16
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	bd80      	pop	{r7, pc}
 801a2ec:	20001fec 	.word	0x20001fec

0801a2f0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801a2fe:	4b10      	ldr	r3, [pc, #64]	@ (801a340 <LoRaMacConfirmQueueGetStatus+0x50>)
 801a300:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a304:	4618      	mov	r0, r3
 801a306:	f7ff fef5 	bl	801a0f4 <IsListEmpty>
 801a30a:	4603      	mov	r3, r0
 801a30c:	f083 0301 	eor.w	r3, r3, #1
 801a310:	b2db      	uxtb	r3, r3
 801a312:	2b00      	cmp	r3, #0
 801a314:	d00e      	beq.n	801a334 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801a316:	4b0a      	ldr	r3, [pc, #40]	@ (801a340 <LoRaMacConfirmQueueGetStatus+0x50>)
 801a318:	6859      	ldr	r1, [r3, #4]
 801a31a:	4b09      	ldr	r3, [pc, #36]	@ (801a340 <LoRaMacConfirmQueueGetStatus+0x50>)
 801a31c:	689a      	ldr	r2, [r3, #8]
 801a31e:	79fb      	ldrb	r3, [r7, #7]
 801a320:	4618      	mov	r0, r3
 801a322:	f7ff ff07 	bl	801a134 <GetElement>
 801a326:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d002      	beq.n	801a334 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	785b      	ldrb	r3, [r3, #1]
 801a332:	e000      	b.n	801a336 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801a334:	2301      	movs	r3, #1
}
 801a336:	4618      	mov	r0, r3
 801a338:	3710      	adds	r7, #16
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}
 801a33e:	bf00      	nop
 801a340:	20001fec 	.word	0x20001fec

0801a344 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b084      	sub	sp, #16
 801a348:	af00      	add	r7, sp, #0
 801a34a:	4603      	mov	r3, r0
 801a34c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801a34e:	4b16      	ldr	r3, [pc, #88]	@ (801a3a8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801a350:	685b      	ldr	r3, [r3, #4]
 801a352:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801a354:	4a14      	ldr	r2, [pc, #80]	@ (801a3a8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801a356:	79fb      	ldrb	r3, [r7, #7]
 801a358:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801a35c:	4b12      	ldr	r3, [pc, #72]	@ (801a3a8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801a35e:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a362:	4618      	mov	r0, r3
 801a364:	f7ff fec6 	bl	801a0f4 <IsListEmpty>
 801a368:	4603      	mov	r3, r0
 801a36a:	f083 0301 	eor.w	r3, r3, #1
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	2b00      	cmp	r3, #0
 801a372:	d015      	beq.n	801a3a0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	79fa      	ldrb	r2, [r7, #7]
 801a378:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	78db      	ldrb	r3, [r3, #3]
 801a37e:	f083 0301 	eor.w	r3, r3, #1
 801a382:	b2db      	uxtb	r3, r3
 801a384:	2b00      	cmp	r3, #0
 801a386:	d002      	beq.n	801a38e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	2201      	movs	r2, #1
 801a38c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801a38e:	68f8      	ldr	r0, [r7, #12]
 801a390:	f7ff fe98 	bl	801a0c4 <IncreaseBufferPointer>
 801a394:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801a396:	4b04      	ldr	r3, [pc, #16]	@ (801a3a8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801a398:	689b      	ldr	r3, [r3, #8]
 801a39a:	68fa      	ldr	r2, [r7, #12]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	d1e9      	bne.n	801a374 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801a3a0:	bf00      	nop
 801a3a2:	3710      	adds	r7, #16
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	20001fec 	.word	0x20001fec

0801a3ac <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b082      	sub	sp, #8
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801a3b6:	4b09      	ldr	r3, [pc, #36]	@ (801a3dc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801a3b8:	6859      	ldr	r1, [r3, #4]
 801a3ba:	4b08      	ldr	r3, [pc, #32]	@ (801a3dc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801a3bc:	689a      	ldr	r2, [r3, #8]
 801a3be:	79fb      	ldrb	r3, [r7, #7]
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f7ff feb7 	bl	801a134 <GetElement>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d001      	beq.n	801a3d0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	e000      	b.n	801a3d2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801a3d0:	2300      	movs	r3, #0
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	3708      	adds	r7, #8
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}
 801a3da:	bf00      	nop
 801a3dc:	20001fec 	.word	0x20001fec

0801a3e0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b084      	sub	sp, #16
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801a3e8:	4b25      	ldr	r3, [pc, #148]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a3ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a3ee:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801a3f4:	f107 0308 	add.w	r3, r7, #8
 801a3f8:	2204      	movs	r2, #4
 801a3fa:	2100      	movs	r1, #0
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f005 f945 	bl	801f68c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801a402:	2300      	movs	r3, #0
 801a404:	73fb      	strb	r3, [r7, #15]
 801a406:	e032      	b.n	801a46e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801a408:	4b1d      	ldr	r3, [pc, #116]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a40a:	685b      	ldr	r3, [r3, #4]
 801a40c:	781a      	ldrb	r2, [r3, #0]
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801a412:	4b1b      	ldr	r3, [pc, #108]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	785a      	ldrb	r2, [r3, #1]
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801a41c:	4b18      	ldr	r3, [pc, #96]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	789b      	ldrb	r3, [r3, #2]
 801a422:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801a424:	7b7b      	ldrb	r3, [r7, #13]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d005      	beq.n	801a436 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801a42a:	4b15      	ldr	r3, [pc, #84]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	689b      	ldr	r3, [r3, #8]
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	4798      	blx	r3
 801a434:	e00b      	b.n	801a44e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801a436:	4b12      	ldr	r3, [pc, #72]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a438:	685b      	ldr	r3, [r3, #4]
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801a43e:	4b10      	ldr	r3, [pc, #64]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	785b      	ldrb	r3, [r3, #1]
 801a444:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801a446:	4b0e      	ldr	r3, [pc, #56]	@ (801a480 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	78db      	ldrb	r3, [r3, #3]
 801a44c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801a44e:	f7ff feff 	bl	801a250 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801a452:	7b7b      	ldrb	r3, [r7, #13]
 801a454:	f083 0301 	eor.w	r3, r3, #1
 801a458:	b2db      	uxtb	r3, r3
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d004      	beq.n	801a468 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801a45e:	f107 0308 	add.w	r3, r7, #8
 801a462:	4618      	mov	r0, r3
 801a464:	f7ff feba 	bl	801a1dc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801a468:	7bfb      	ldrb	r3, [r7, #15]
 801a46a:	3301      	adds	r3, #1
 801a46c:	73fb      	strb	r3, [r7, #15]
 801a46e:	7bfa      	ldrb	r2, [r7, #15]
 801a470:	7bbb      	ldrb	r3, [r7, #14]
 801a472:	429a      	cmp	r2, r3
 801a474:	d3c8      	bcc.n	801a408 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801a476:	bf00      	nop
 801a478:	bf00      	nop
 801a47a:	3710      	adds	r7, #16
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}
 801a480:	20001fec 	.word	0x20001fec

0801a484 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801a484:	b480      	push	{r7}
 801a486:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801a488:	4b03      	ldr	r3, [pc, #12]	@ (801a498 <LoRaMacConfirmQueueGetCnt+0x14>)
 801a48a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801a48e:	4618      	mov	r0, r3
 801a490:	46bd      	mov	sp, r7
 801a492:	bc80      	pop	{r7}
 801a494:	4770      	bx	lr
 801a496:	bf00      	nop
 801a498:	20001fec 	.word	0x20001fec

0801a49c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801a4a0:	4b06      	ldr	r3, [pc, #24]	@ (801a4bc <LoRaMacConfirmQueueIsFull+0x20>)
 801a4a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f7ff fe34 	bl	801a114 <IsListFull>
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d001      	beq.n	801a4b6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	e000      	b.n	801a4b8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801a4b6:	2300      	movs	r3, #0
    }
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	bd80      	pop	{r7, pc}
 801a4bc:	20001fec 	.word	0x20001fec

0801a4c0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b08e      	sub	sp, #56	@ 0x38
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	60f8      	str	r0, [r7, #12]
 801a4c8:	607b      	str	r3, [r7, #4]
 801a4ca:	460b      	mov	r3, r1
 801a4cc:	817b      	strh	r3, [r7, #10]
 801a4ce:	4613      	mov	r3, r2
 801a4d0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d101      	bne.n	801a4dc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801a4d8:	2309      	movs	r3, #9
 801a4da:	e086      	b.n	801a5ea <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801a4dc:	2300      	movs	r3, #0
 801a4de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801a4e2:	2301      	movs	r3, #1
 801a4e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	623b      	str	r3, [r7, #32]
 801a4ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	601a      	str	r2, [r3, #0]
 801a4f2:	605a      	str	r2, [r3, #4]
 801a4f4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	613b      	str	r3, [r7, #16]
 801a4fa:	f107 0314 	add.w	r3, r7, #20
 801a4fe:	2200      	movs	r2, #0
 801a500:	601a      	str	r2, [r3, #0]
 801a502:	605a      	str	r2, [r3, #4]
 801a504:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801a506:	2301      	movs	r3, #1
 801a508:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801a50a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801a50e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	b2db      	uxtb	r3, r3
 801a514:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	0a1b      	lsrs	r3, r3, #8
 801a51a:	b2db      	uxtb	r3, r3
 801a51c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	0c1b      	lsrs	r3, r3, #16
 801a522:	b2db      	uxtb	r3, r3
 801a524:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	0e1b      	lsrs	r3, r3, #24
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801a52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a530:	b2db      	uxtb	r3, r3
 801a532:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801a534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a536:	0a1b      	lsrs	r3, r3, #8
 801a538:	b2db      	uxtb	r3, r3
 801a53a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801a53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a53e:	0c1b      	lsrs	r3, r3, #16
 801a540:	b2db      	uxtb	r3, r3
 801a542:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801a544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a546:	0e1b      	lsrs	r3, r3, #24
 801a548:	b2db      	uxtb	r3, r3
 801a54a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801a54c:	e048      	b.n	801a5e0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801a54e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a550:	b2db      	uxtb	r3, r3
 801a552:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801a554:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a556:	3301      	adds	r3, #1
 801a558:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801a55a:	f107 0320 	add.w	r3, r7, #32
 801a55e:	7a7a      	ldrb	r2, [r7, #9]
 801a560:	f107 0010 	add.w	r0, r7, #16
 801a564:	2110      	movs	r1, #16
 801a566:	f7f5 fedf 	bl	8010328 <SecureElementAesEncrypt>
 801a56a:	4603      	mov	r3, r0
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d001      	beq.n	801a574 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801a570:	230e      	movs	r3, #14
 801a572:	e03a      	b.n	801a5ea <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801a574:	2300      	movs	r3, #0
 801a576:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801a57a:	e01e      	b.n	801a5ba <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801a57c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801a580:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a584:	4413      	add	r3, r2
 801a586:	461a      	mov	r2, r3
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	4413      	add	r3, r2
 801a58c:	7819      	ldrb	r1, [r3, #0]
 801a58e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a592:	3338      	adds	r3, #56	@ 0x38
 801a594:	443b      	add	r3, r7
 801a596:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801a59a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801a59e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a5a2:	4403      	add	r3, r0
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	4403      	add	r3, r0
 801a5aa:	404a      	eors	r2, r1
 801a5ac:	b2d2      	uxtb	r2, r2
 801a5ae:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801a5b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801a5ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a5be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801a5c2:	2a10      	cmp	r2, #16
 801a5c4:	bfa8      	it	ge
 801a5c6:	2210      	movge	r2, #16
 801a5c8:	b212      	sxth	r2, r2
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	dbd6      	blt.n	801a57c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801a5ce:	897b      	ldrh	r3, [r7, #10]
 801a5d0:	3b10      	subs	r3, #16
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801a5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a5da:	3310      	adds	r3, #16
 801a5dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801a5e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	dcb2      	bgt.n	801a54e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801a5e8:	2300      	movs	r3, #0
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	3738      	adds	r7, #56	@ 0x38
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd80      	pop	{r7, pc}

0801a5f2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801a5f2:	b490      	push	{r4, r7}
 801a5f4:	b082      	sub	sp, #8
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	4604      	mov	r4, r0
 801a5fa:	4608      	mov	r0, r1
 801a5fc:	4611      	mov	r1, r2
 801a5fe:	461a      	mov	r2, r3
 801a600:	4623      	mov	r3, r4
 801a602:	80fb      	strh	r3, [r7, #6]
 801a604:	4603      	mov	r3, r0
 801a606:	717b      	strb	r3, [r7, #5]
 801a608:	460b      	mov	r3, r1
 801a60a:	713b      	strb	r3, [r7, #4]
 801a60c:	4613      	mov	r3, r2
 801a60e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801a610:	69bb      	ldr	r3, [r7, #24]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d101      	bne.n	801a61a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801a616:	2309      	movs	r3, #9
 801a618:	e04e      	b.n	801a6b8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	2249      	movs	r2, #73	@ 0x49
 801a61e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801a620:	69bb      	ldr	r3, [r7, #24]
 801a622:	3301      	adds	r3, #1
 801a624:	2200      	movs	r2, #0
 801a626:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801a628:	69bb      	ldr	r3, [r7, #24]
 801a62a:	3302      	adds	r3, #2
 801a62c:	2200      	movs	r2, #0
 801a62e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801a630:	69bb      	ldr	r3, [r7, #24]
 801a632:	3303      	adds	r3, #3
 801a634:	2200      	movs	r2, #0
 801a636:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801a638:	69bb      	ldr	r3, [r7, #24]
 801a63a:	3304      	adds	r3, #4
 801a63c:	2200      	movs	r2, #0
 801a63e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801a640:	69bb      	ldr	r3, [r7, #24]
 801a642:	3305      	adds	r3, #5
 801a644:	78fa      	ldrb	r2, [r7, #3]
 801a646:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801a648:	69bb      	ldr	r3, [r7, #24]
 801a64a:	3306      	adds	r3, #6
 801a64c:	693a      	ldr	r2, [r7, #16]
 801a64e:	b2d2      	uxtb	r2, r2
 801a650:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	0a1a      	lsrs	r2, r3, #8
 801a656:	69bb      	ldr	r3, [r7, #24]
 801a658:	3307      	adds	r3, #7
 801a65a:	b2d2      	uxtb	r2, r2
 801a65c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801a65e:	693b      	ldr	r3, [r7, #16]
 801a660:	0c1a      	lsrs	r2, r3, #16
 801a662:	69bb      	ldr	r3, [r7, #24]
 801a664:	3308      	adds	r3, #8
 801a666:	b2d2      	uxtb	r2, r2
 801a668:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801a66a:	693b      	ldr	r3, [r7, #16]
 801a66c:	0e1a      	lsrs	r2, r3, #24
 801a66e:	69bb      	ldr	r3, [r7, #24]
 801a670:	3309      	adds	r3, #9
 801a672:	b2d2      	uxtb	r2, r2
 801a674:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801a676:	69bb      	ldr	r3, [r7, #24]
 801a678:	330a      	adds	r3, #10
 801a67a:	697a      	ldr	r2, [r7, #20]
 801a67c:	b2d2      	uxtb	r2, r2
 801a67e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	0a1a      	lsrs	r2, r3, #8
 801a684:	69bb      	ldr	r3, [r7, #24]
 801a686:	330b      	adds	r3, #11
 801a688:	b2d2      	uxtb	r2, r2
 801a68a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801a68c:	697b      	ldr	r3, [r7, #20]
 801a68e:	0c1a      	lsrs	r2, r3, #16
 801a690:	69bb      	ldr	r3, [r7, #24]
 801a692:	330c      	adds	r3, #12
 801a694:	b2d2      	uxtb	r2, r2
 801a696:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801a698:	697b      	ldr	r3, [r7, #20]
 801a69a:	0e1a      	lsrs	r2, r3, #24
 801a69c:	69bb      	ldr	r3, [r7, #24]
 801a69e:	330d      	adds	r3, #13
 801a6a0:	b2d2      	uxtb	r2, r2
 801a6a2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	330e      	adds	r3, #14
 801a6a8:	2200      	movs	r2, #0
 801a6aa:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801a6ac:	69bb      	ldr	r3, [r7, #24]
 801a6ae:	330f      	adds	r3, #15
 801a6b0:	88fa      	ldrh	r2, [r7, #6]
 801a6b2:	b2d2      	uxtb	r2, r2
 801a6b4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801a6b6:	2300      	movs	r3, #0
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	3708      	adds	r7, #8
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bc90      	pop	{r4, r7}
 801a6c0:	4770      	bx	lr

0801a6c2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801a6c2:	b590      	push	{r4, r7, lr}
 801a6c4:	b08b      	sub	sp, #44	@ 0x2c
 801a6c6:	af04      	add	r7, sp, #16
 801a6c8:	6078      	str	r0, [r7, #4]
 801a6ca:	4608      	mov	r0, r1
 801a6cc:	4611      	mov	r1, r2
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	807b      	strh	r3, [r7, #2]
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	707b      	strb	r3, [r7, #1]
 801a6d8:	4613      	mov	r3, r2
 801a6da:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d002      	beq.n	801a6e8 <ComputeCmacB0+0x26>
 801a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d101      	bne.n	801a6ec <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801a6e8:	2309      	movs	r3, #9
 801a6ea:	e024      	b.n	801a736 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801a6ec:	887b      	ldrh	r3, [r7, #2]
 801a6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a6f2:	d901      	bls.n	801a6f8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801a6f4:	230d      	movs	r3, #13
 801a6f6:	e01e      	b.n	801a736 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801a6f8:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 801a6fc:	783a      	ldrb	r2, [r7, #0]
 801a6fe:	7879      	ldrb	r1, [r7, #1]
 801a700:	8878      	ldrh	r0, [r7, #2]
 801a702:	f107 0308 	add.w	r3, r7, #8
 801a706:	9302      	str	r3, [sp, #8]
 801a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a70a:	9301      	str	r3, [sp, #4]
 801a70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a70e:	9300      	str	r3, [sp, #0]
 801a710:	4623      	mov	r3, r4
 801a712:	f7ff ff6e 	bl	801a5f2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801a716:	887a      	ldrh	r2, [r7, #2]
 801a718:	7879      	ldrb	r1, [r7, #1]
 801a71a:	f107 0008 	add.w	r0, r7, #8
 801a71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a720:	9300      	str	r3, [sp, #0]
 801a722:	460b      	mov	r3, r1
 801a724:	6879      	ldr	r1, [r7, #4]
 801a726:	f7f5 fdb9 	bl	801029c <SecureElementComputeAesCmac>
 801a72a:	4603      	mov	r3, r0
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d001      	beq.n	801a734 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801a730:	230e      	movs	r3, #14
 801a732:	e000      	b.n	801a736 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801a734:	2300      	movs	r3, #0
}
 801a736:	4618      	mov	r0, r3
 801a738:	371c      	adds	r7, #28
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd90      	pop	{r4, r7, pc}

0801a73e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801a73e:	b590      	push	{r4, r7, lr}
 801a740:	b0cd      	sub	sp, #308	@ 0x134
 801a742:	af04      	add	r7, sp, #16
 801a744:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801a748:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 801a74c:	6020      	str	r0, [r4, #0]
 801a74e:	460c      	mov	r4, r1
 801a750:	4610      	mov	r0, r2
 801a752:	4619      	mov	r1, r3
 801a754:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a758:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801a75c:	4622      	mov	r2, r4
 801a75e:	801a      	strh	r2, [r3, #0]
 801a760:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a764:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801a768:	4602      	mov	r2, r0
 801a76a:	701a      	strb	r2, [r3, #0]
 801a76c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a770:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801a774:	460a      	mov	r2, r1
 801a776:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801a778:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a77c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d101      	bne.n	801a78a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801a786:	2309      	movs	r3, #9
 801a788:	e063      	b.n	801a852 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801a78a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a78e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801a792:	881b      	ldrh	r3, [r3, #0]
 801a794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a798:	d901      	bls.n	801a79e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801a79a:	230d      	movs	r3, #13
 801a79c:	e059      	b.n	801a852 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801a79e:	f107 030c 	add.w	r3, r7, #12
 801a7a2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801a7a6:	2100      	movs	r1, #0
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f004 ff6f 	bl	801f68c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801a7ae:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801a7b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a7b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801a7ba:	781a      	ldrb	r2, [r3, #0]
 801a7bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a7c0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801a7c4:	7819      	ldrb	r1, [r3, #0]
 801a7c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a7ca:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801a7ce:	8818      	ldrh	r0, [r3, #0]
 801a7d0:	f107 030c 	add.w	r3, r7, #12
 801a7d4:	9302      	str	r3, [sp, #8]
 801a7d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a7da:	9301      	str	r3, [sp, #4]
 801a7dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a7e0:	9300      	str	r3, [sp, #0]
 801a7e2:	4623      	mov	r3, r4
 801a7e4:	f7ff ff05 	bl	801a5f2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801a7e8:	f107 030c 	add.w	r3, r7, #12
 801a7ec:	3310      	adds	r3, #16
 801a7ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801a7f2:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801a7f6:	8812      	ldrh	r2, [r2, #0]
 801a7f8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801a7fc:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801a800:	6809      	ldr	r1, [r1, #0]
 801a802:	4618      	mov	r0, r3
 801a804:	f004 ff07 	bl	801f616 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801a808:	2306      	movs	r3, #6
 801a80a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801a80e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a812:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801a816:	881b      	ldrh	r3, [r3, #0]
 801a818:	3310      	adds	r3, #16
 801a81a:	4619      	mov	r1, r3
 801a81c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a820:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	f107 000c 	add.w	r0, r7, #12
 801a82a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a82e:	f7f5 fd4f 	bl	80102d0 <SecureElementVerifyAesCmac>
 801a832:	4603      	mov	r3, r0
 801a834:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801a838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d101      	bne.n	801a844 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801a840:	2300      	movs	r3, #0
 801a842:	e006      	b.n	801a852 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801a844:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801a848:	2b01      	cmp	r3, #1
 801a84a:	d101      	bne.n	801a850 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801a84c:	2301      	movs	r3, #1
 801a84e:	e000      	b.n	801a852 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801a850:	230e      	movs	r3, #14
}
 801a852:	4618      	mov	r0, r3
 801a854:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd90      	pop	{r4, r7, pc}

0801a85c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801a85c:	b480      	push	{r7}
 801a85e:	b085      	sub	sp, #20
 801a860:	af00      	add	r7, sp, #0
 801a862:	4603      	mov	r3, r0
 801a864:	6039      	str	r1, [r7, #0]
 801a866:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801a868:	2300      	movs	r3, #0
 801a86a:	73fb      	strb	r3, [r7, #15]
 801a86c:	e011      	b.n	801a892 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801a86e:	7bfb      	ldrb	r3, [r7, #15]
 801a870:	4a0c      	ldr	r2, [pc, #48]	@ (801a8a4 <GetKeyAddrItem+0x48>)
 801a872:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801a876:	79fa      	ldrb	r2, [r7, #7]
 801a878:	429a      	cmp	r2, r3
 801a87a:	d107      	bne.n	801a88c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801a87c:	7bfb      	ldrb	r3, [r7, #15]
 801a87e:	009b      	lsls	r3, r3, #2
 801a880:	4a08      	ldr	r2, [pc, #32]	@ (801a8a4 <GetKeyAddrItem+0x48>)
 801a882:	441a      	add	r2, r3
 801a884:	683b      	ldr	r3, [r7, #0]
 801a886:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801a888:	2300      	movs	r3, #0
 801a88a:	e006      	b.n	801a89a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801a88c:	7bfb      	ldrb	r3, [r7, #15]
 801a88e:	3301      	adds	r3, #1
 801a890:	73fb      	strb	r3, [r7, #15]
 801a892:	7bfb      	ldrb	r3, [r7, #15]
 801a894:	2b01      	cmp	r3, #1
 801a896:	d9ea      	bls.n	801a86e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801a898:	230b      	movs	r3, #11
}
 801a89a:	4618      	mov	r0, r3
 801a89c:	3714      	adds	r7, #20
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bc80      	pop	{r7}
 801a8a2:	4770      	bx	lr
 801a8a4:	20000120 	.word	0x20000120

0801a8a8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b088      	sub	sp, #32
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	60b9      	str	r1, [r7, #8]
 801a8b0:	607a      	str	r2, [r7, #4]
 801a8b2:	461a      	mov	r2, r3
 801a8b4:	4603      	mov	r3, r0
 801a8b6:	73fb      	strb	r3, [r7, #15]
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801a8bc:	2300      	movs	r3, #0
 801a8be:	613b      	str	r3, [r7, #16]
 801a8c0:	f107 0314 	add.w	r3, r7, #20
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	601a      	str	r2, [r3, #0]
 801a8c8:	605a      	str	r2, [r3, #4]
 801a8ca:	609a      	str	r2, [r3, #8]

    switch( keyID )
 801a8cc:	7bfb      	ldrb	r3, [r7, #15]
 801a8ce:	2b08      	cmp	r3, #8
 801a8d0:	d002      	beq.n	801a8d8 <DeriveSessionKey10x+0x30>
 801a8d2:	2b09      	cmp	r3, #9
 801a8d4:	d003      	beq.n	801a8de <DeriveSessionKey10x+0x36>
 801a8d6:	e005      	b.n	801a8e4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801a8d8:	2301      	movs	r3, #1
 801a8da:	743b      	strb	r3, [r7, #16]
            break;
 801a8dc:	e004      	b.n	801a8e8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801a8de:	2302      	movs	r3, #2
 801a8e0:	743b      	strb	r3, [r7, #16]
            break;
 801a8e2:	e001      	b.n	801a8e8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801a8e4:	230a      	movs	r3, #10
 801a8e6:	e02a      	b.n	801a93e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	b2db      	uxtb	r3, r3
 801a8ec:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	0a1b      	lsrs	r3, r3, #8
 801a8f2:	b2db      	uxtb	r3, r3
 801a8f4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801a8f6:	68bb      	ldr	r3, [r7, #8]
 801a8f8:	0c1b      	lsrs	r3, r3, #16
 801a8fa:	b2db      	uxtb	r3, r3
 801a8fc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	b2db      	uxtb	r3, r3
 801a902:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	0a1b      	lsrs	r3, r3, #8
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	0c1b      	lsrs	r3, r3, #16
 801a910:	b2db      	uxtb	r3, r3
 801a912:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801a914:	89bb      	ldrh	r3, [r7, #12]
 801a916:	b2db      	uxtb	r3, r3
 801a918:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801a91a:	89bb      	ldrh	r3, [r7, #12]
 801a91c:	0a1b      	lsrs	r3, r3, #8
 801a91e:	b29b      	uxth	r3, r3
 801a920:	b2db      	uxtb	r3, r3
 801a922:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801a924:	7bfa      	ldrb	r2, [r7, #15]
 801a926:	f107 0310 	add.w	r3, r7, #16
 801a92a:	2101      	movs	r1, #1
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7f5 fd7b 	bl	8010428 <SecureElementDeriveAndStoreKey>
 801a932:	4603      	mov	r3, r0
 801a934:	2b00      	cmp	r3, #0
 801a936:	d001      	beq.n	801a93c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801a938:	230e      	movs	r3, #14
 801a93a:	e000      	b.n	801a93e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801a93c:	2300      	movs	r3, #0
}
 801a93e:	4618      	mov	r0, r3
 801a940:	3720      	adds	r7, #32
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}
	...

0801a948 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801a948:	b480      	push	{r7}
 801a94a:	b083      	sub	sp, #12
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	4603      	mov	r3, r0
 801a950:	6039      	str	r1, [r7, #0]
 801a952:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801a954:	683b      	ldr	r3, [r7, #0]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d101      	bne.n	801a95e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801a95a:	2309      	movs	r3, #9
 801a95c:	e029      	b.n	801a9b2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801a95e:	79fb      	ldrb	r3, [r7, #7]
 801a960:	3b01      	subs	r3, #1
 801a962:	2b03      	cmp	r3, #3
 801a964:	d822      	bhi.n	801a9ac <GetLastFcntDown+0x64>
 801a966:	a201      	add	r2, pc, #4	@ (adr r2, 801a96c <GetLastFcntDown+0x24>)
 801a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a96c:	0801a97d 	.word	0x0801a97d
 801a970:	0801a989 	.word	0x0801a989
 801a974:	0801a995 	.word	0x0801a995
 801a978:	0801a9a1 	.word	0x0801a9a1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801a97c:	4b0f      	ldr	r3, [pc, #60]	@ (801a9bc <GetLastFcntDown+0x74>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	691a      	ldr	r2, [r3, #16]
 801a982:	683b      	ldr	r3, [r7, #0]
 801a984:	601a      	str	r2, [r3, #0]
            break;
 801a986:	e013      	b.n	801a9b0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801a988:	4b0c      	ldr	r3, [pc, #48]	@ (801a9bc <GetLastFcntDown+0x74>)
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	695a      	ldr	r2, [r3, #20]
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	601a      	str	r2, [r3, #0]
            break;
 801a992:	e00d      	b.n	801a9b0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801a994:	4b09      	ldr	r3, [pc, #36]	@ (801a9bc <GetLastFcntDown+0x74>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	699a      	ldr	r2, [r3, #24]
 801a99a:	683b      	ldr	r3, [r7, #0]
 801a99c:	601a      	str	r2, [r3, #0]
            break;
 801a99e:	e007      	b.n	801a9b0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801a9a0:	4b06      	ldr	r3, [pc, #24]	@ (801a9bc <GetLastFcntDown+0x74>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	69da      	ldr	r2, [r3, #28]
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	601a      	str	r2, [r3, #0]
            break;
 801a9aa:	e001      	b.n	801a9b0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801a9ac:	2305      	movs	r3, #5
 801a9ae:	e000      	b.n	801a9b2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801a9b0:	2300      	movs	r3, #0
}
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	370c      	adds	r7, #12
 801a9b6:	46bd      	mov	sp, r7
 801a9b8:	bc80      	pop	{r7}
 801a9ba:	4770      	bx	lr
 801a9bc:	20002010 	.word	0x20002010

0801a9c0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	6039      	str	r1, [r7, #0]
 801a9ca:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801a9d0:	f107 020c 	add.w	r2, r7, #12
 801a9d4:	79fb      	ldrb	r3, [r7, #7]
 801a9d6:	4611      	mov	r1, r2
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f7ff ffb5 	bl	801a948 <GetLastFcntDown>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d001      	beq.n	801a9e8 <CheckFCntDown+0x28>
    {
        return false;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	e00a      	b.n	801a9fe <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	683a      	ldr	r2, [r7, #0]
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	d803      	bhi.n	801a9f8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 801a9f0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a9f6:	d101      	bne.n	801a9fc <CheckFCntDown+0x3c>
    {
        return true;
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	e000      	b.n	801a9fe <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801a9fc:	2300      	movs	r3, #0
    }
}
 801a9fe:	4618      	mov	r0, r3
 801aa00:	3710      	adds	r7, #16
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}
	...

0801aa08 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b083      	sub	sp, #12
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	4603      	mov	r3, r0
 801aa10:	6039      	str	r1, [r7, #0]
 801aa12:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801aa14:	79fb      	ldrb	r3, [r7, #7]
 801aa16:	3b01      	subs	r3, #1
 801aa18:	2b03      	cmp	r3, #3
 801aa1a:	d82b      	bhi.n	801aa74 <UpdateFCntDown+0x6c>
 801aa1c:	a201      	add	r2, pc, #4	@ (adr r2, 801aa24 <UpdateFCntDown+0x1c>)
 801aa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa22:	bf00      	nop
 801aa24:	0801aa35 	.word	0x0801aa35
 801aa28:	0801aa47 	.word	0x0801aa47
 801aa2c:	0801aa59 	.word	0x0801aa59
 801aa30:	0801aa6b 	.word	0x0801aa6b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801aa34:	4b12      	ldr	r3, [pc, #72]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	683a      	ldr	r2, [r7, #0]
 801aa3a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801aa3c:	4b10      	ldr	r3, [pc, #64]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	683a      	ldr	r2, [r7, #0]
 801aa42:	621a      	str	r2, [r3, #32]
            break;
 801aa44:	e017      	b.n	801aa76 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801aa46:	4b0e      	ldr	r3, [pc, #56]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	683a      	ldr	r2, [r7, #0]
 801aa4c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801aa4e:	4b0c      	ldr	r3, [pc, #48]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	683a      	ldr	r2, [r7, #0]
 801aa54:	621a      	str	r2, [r3, #32]
            break;
 801aa56:	e00e      	b.n	801aa76 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801aa58:	4b09      	ldr	r3, [pc, #36]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	683a      	ldr	r2, [r7, #0]
 801aa5e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801aa60:	4b07      	ldr	r3, [pc, #28]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	683a      	ldr	r2, [r7, #0]
 801aa66:	621a      	str	r2, [r3, #32]
            break;
 801aa68:	e005      	b.n	801aa76 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801aa6a:	4b05      	ldr	r3, [pc, #20]	@ (801aa80 <UpdateFCntDown+0x78>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	683a      	ldr	r2, [r7, #0]
 801aa70:	61da      	str	r2, [r3, #28]
            break;
 801aa72:	e000      	b.n	801aa76 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801aa74:	bf00      	nop
    }
}
 801aa76:	bf00      	nop
 801aa78:	370c      	adds	r7, #12
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bc80      	pop	{r7}
 801aa7e:	4770      	bx	lr
 801aa80:	20002010 	.word	0x20002010

0801aa84 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801aa84:	b480      	push	{r7}
 801aa86:	b083      	sub	sp, #12
 801aa88:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801aa8a:	4b18      	ldr	r3, [pc, #96]	@ (801aaec <ResetFCnts+0x68>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801aa92:	4b16      	ldr	r3, [pc, #88]	@ (801aaec <ResetFCnts+0x68>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aa9a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801aa9c:	4b13      	ldr	r3, [pc, #76]	@ (801aaec <ResetFCnts+0x68>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aaa4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801aaa6:	4b11      	ldr	r3, [pc, #68]	@ (801aaec <ResetFCnts+0x68>)
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aaae:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801aab0:	4b0e      	ldr	r3, [pc, #56]	@ (801aaec <ResetFCnts+0x68>)
 801aab2:	681a      	ldr	r2, [r3, #0]
 801aab4:	4b0d      	ldr	r3, [pc, #52]	@ (801aaec <ResetFCnts+0x68>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	6992      	ldr	r2, [r2, #24]
 801aaba:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801aabc:	2300      	movs	r3, #0
 801aabe:	607b      	str	r3, [r7, #4]
 801aac0:	e00b      	b.n	801aada <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801aac2:	4b0a      	ldr	r3, [pc, #40]	@ (801aaec <ResetFCnts+0x68>)
 801aac4:	681a      	ldr	r2, [r3, #0]
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	3306      	adds	r3, #6
 801aaca:	009b      	lsls	r3, r3, #2
 801aacc:	4413      	add	r3, r2
 801aace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aad2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	3301      	adds	r3, #1
 801aad8:	607b      	str	r3, [r7, #4]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	ddf0      	ble.n	801aac2 <ResetFCnts+0x3e>
    }
}
 801aae0:	bf00      	nop
 801aae2:	bf00      	nop
 801aae4:	370c      	adds	r7, #12
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bc80      	pop	{r7}
 801aaea:	4770      	bx	lr
 801aaec:	20002010 	.word	0x20002010

0801aaf0 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 801aaf0:	b480      	push	{r7}
 801aaf2:	b083      	sub	sp, #12
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 801aaf8:	4b06      	ldr	r3, [pc, #24]	@ (801ab14 <IsJoinNonce10xOk+0x24>)
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	689b      	ldr	r3, [r3, #8]
 801aafe:	687a      	ldr	r2, [r7, #4]
 801ab00:	429a      	cmp	r2, r3
 801ab02:	bf8c      	ite	hi
 801ab04:	2301      	movhi	r3, #1
 801ab06:	2300      	movls	r3, #0
 801ab08:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	370c      	adds	r7, #12
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bc80      	pop	{r7}
 801ab12:	4770      	bx	lr
 801ab14:	20002010 	.word	0x20002010

0801ab18 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b082      	sub	sp, #8
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d101      	bne.n	801ab2a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801ab26:	2308      	movs	r3, #8
 801ab28:	e01c      	b.n	801ab64 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801ab2a:	4a10      	ldr	r2, [pc, #64]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801ab30:	4b0e      	ldr	r3, [pc, #56]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	2228      	movs	r2, #40	@ 0x28
 801ab36:	2100      	movs	r1, #0
 801ab38:	4618      	mov	r0, r3
 801ab3a:	f004 fda7 	bl	801f68c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801ab3e:	4b0b      	ldr	r3, [pc, #44]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	2201      	movs	r2, #1
 801ab44:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801ab46:	4b09      	ldr	r3, [pc, #36]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2201      	movs	r2, #1
 801ab4c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801ab4e:	4b07      	ldr	r3, [pc, #28]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	2201      	movs	r2, #1
 801ab54:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801ab56:	4b05      	ldr	r3, [pc, #20]	@ (801ab6c <LoRaMacCryptoInit+0x54>)
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801ab5e:	f7ff ff91 	bl	801aa84 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801ab62:	2300      	movs	r3, #0
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	3708      	adds	r7, #8
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	20002010 	.word	0x20002010

0801ab70 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801ab70:	b480      	push	{r7}
 801ab72:	b083      	sub	sp, #12
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801ab78:	4b04      	ldr	r3, [pc, #16]	@ (801ab8c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	687a      	ldr	r2, [r7, #4]
 801ab7e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801ab80:	2300      	movs	r3, #0
}
 801ab82:	4618      	mov	r0, r3
 801ab84:	370c      	adds	r7, #12
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bc80      	pop	{r7}
 801ab8a:	4770      	bx	lr
 801ab8c:	20002010 	.word	0x20002010

0801ab90 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801ab90:	b480      	push	{r7}
 801ab92:	b083      	sub	sp, #12
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d101      	bne.n	801aba2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801ab9e:	2309      	movs	r3, #9
 801aba0:	e006      	b.n	801abb0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801aba2:	4b06      	ldr	r3, [pc, #24]	@ (801abbc <LoRaMacCryptoGetFCntUp+0x2c>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	68db      	ldr	r3, [r3, #12]
 801aba8:	1c5a      	adds	r2, r3, #1
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801abae:	2300      	movs	r3, #0
}
 801abb0:	4618      	mov	r0, r3
 801abb2:	370c      	adds	r7, #12
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bc80      	pop	{r7}
 801abb8:	4770      	bx	lr
 801abba:	bf00      	nop
 801abbc:	20002010 	.word	0x20002010

0801abc0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b088      	sub	sp, #32
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	4603      	mov	r3, r0
 801abc8:	60b9      	str	r1, [r7, #8]
 801abca:	607a      	str	r2, [r7, #4]
 801abcc:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 801abce:	2300      	movs	r3, #0
 801abd0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801abd2:	2300      	movs	r3, #0
 801abd4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801abd6:	2312      	movs	r3, #18
 801abd8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d101      	bne.n	801abe4 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801abe0:	2309      	movs	r3, #9
 801abe2:	e035      	b.n	801ac50 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801abe4:	f107 0214 	add.w	r2, r7, #20
 801abe8:	7bfb      	ldrb	r3, [r7, #15]
 801abea:	4611      	mov	r1, r2
 801abec:	4618      	mov	r0, r3
 801abee:	f7ff feab 	bl	801a948 <GetLastFcntDown>
 801abf2:	4603      	mov	r3, r0
 801abf4:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801abf6:	7efb      	ldrb	r3, [r7, #27]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d001      	beq.n	801ac00 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 801abfc:	7efb      	ldrb	r3, [r7, #27]
 801abfe:	e027      	b.n	801ac50 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac06:	d103      	bne.n	801ac10 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	68ba      	ldr	r2, [r7, #8]
 801ac0c:	601a      	str	r2, [r3, #0]
 801ac0e:	e01e      	b.n	801ac4e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801ac10:	697b      	ldr	r3, [r7, #20]
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	68ba      	ldr	r2, [r7, #8]
 801ac16:	1ad3      	subs	r3, r2, r3
 801ac18:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801ac1a:	69fb      	ldr	r3, [r7, #28]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	dd05      	ble.n	801ac2c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801ac20:	697a      	ldr	r2, [r7, #20]
 801ac22:	69fb      	ldr	r3, [r7, #28]
 801ac24:	441a      	add	r2, r3
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	601a      	str	r2, [r3, #0]
 801ac2a:	e010      	b.n	801ac4e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 801ac2c:	69fb      	ldr	r3, [r7, #28]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d104      	bne.n	801ac3c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801ac32:	697a      	ldr	r2, [r7, #20]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801ac38:	2307      	movs	r3, #7
 801ac3a:	e009      	b.n	801ac50 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	0c1b      	lsrs	r3, r3, #16
 801ac40:	041b      	lsls	r3, r3, #16
 801ac42:	68ba      	ldr	r2, [r7, #8]
 801ac44:	4413      	add	r3, r2
 801ac46:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801ac4e:	2300      	movs	r3, #0
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3720      	adds	r7, #32
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bd80      	pop	{r7, pc}

0801ac58 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801ac58:	b480      	push	{r7}
 801ac5a:	b085      	sub	sp, #20
 801ac5c:	af00      	add	r7, sp, #0
 801ac5e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d101      	bne.n	801ac6a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801ac66:	2309      	movs	r3, #9
 801ac68:	e019      	b.n	801ac9e <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	60fb      	str	r3, [r7, #12]
 801ac6e:	e012      	b.n	801ac96 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801ac70:	4b0d      	ldr	r3, [pc, #52]	@ (801aca8 <LoRaMacCryptoSetMulticastReference+0x50>)
 801ac72:	6819      	ldr	r1, [r3, #0]
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	4613      	mov	r3, r2
 801ac78:	005b      	lsls	r3, r3, #1
 801ac7a:	4413      	add	r3, r2
 801ac7c:	011b      	lsls	r3, r3, #4
 801ac7e:	461a      	mov	r2, r3
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	4413      	add	r3, r2
 801ac84:	68fa      	ldr	r2, [r7, #12]
 801ac86:	3206      	adds	r2, #6
 801ac88:	0092      	lsls	r2, r2, #2
 801ac8a:	440a      	add	r2, r1
 801ac8c:	3204      	adds	r2, #4
 801ac8e:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	3301      	adds	r3, #1
 801ac94:	60fb      	str	r3, [r7, #12]
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	dde9      	ble.n	801ac70 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801ac9c:	2300      	movs	r3, #0
}
 801ac9e:	4618      	mov	r0, r3
 801aca0:	3714      	adds	r7, #20
 801aca2:	46bd      	mov	sp, r7
 801aca4:	bc80      	pop	{r7}
 801aca6:	4770      	bx	lr
 801aca8:	20002010 	.word	0x20002010

0801acac <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b082      	sub	sp, #8
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	4603      	mov	r3, r0
 801acb4:	6039      	str	r1, [r7, #0]
 801acb6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801acb8:	79fb      	ldrb	r3, [r7, #7]
 801acba:	6839      	ldr	r1, [r7, #0]
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7f5 fa8f 	bl	80101e0 <SecureElementSetKey>
 801acc2:	4603      	mov	r3, r0
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d001      	beq.n	801accc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801acc8:	230e      	movs	r3, #14
 801acca:	e021      	b.n	801ad10 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 801accc:	79fb      	ldrb	r3, [r7, #7]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d11d      	bne.n	801ad0e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801acd2:	4b11      	ldr	r3, [pc, #68]	@ (801ad18 <LoRaMacCryptoSetKey+0x6c>)
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	789b      	ldrb	r3, [r3, #2]
 801acd8:	210b      	movs	r1, #11
 801acda:	4618      	mov	r0, r3
 801acdc:	f000 fa56 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801ace0:	4603      	mov	r3, r0
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d001      	beq.n	801acea <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801ace6:	230e      	movs	r3, #14
 801ace8:	e012      	b.n	801ad10 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801acea:	210c      	movs	r1, #12
 801acec:	2000      	movs	r0, #0
 801acee:	f000 fa4d 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801acf2:	4603      	mov	r3, r0
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d001      	beq.n	801acfc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801acf8:	230e      	movs	r3, #14
 801acfa:	e009      	b.n	801ad10 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801acfc:	210a      	movs	r1, #10
 801acfe:	2000      	movs	r0, #0
 801ad00:	f000 fa44 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801ad04:	4603      	mov	r3, r0
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d001      	beq.n	801ad0e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801ad0a:	230e      	movs	r3, #14
 801ad0c:	e000      	b.n	801ad10 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801ad0e:	2300      	movs	r3, #0
}
 801ad10:	4618      	mov	r0, r3
 801ad12:	3708      	adds	r7, #8
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd80      	pop	{r7, pc}
 801ad18:	20002010 	.word	0x20002010

0801ad1c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b086      	sub	sp, #24
 801ad20:	af02      	add	r7, sp, #8
 801ad22:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d101      	bne.n	801ad2e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801ad2a:	2309      	movs	r3, #9
 801ad2c:	e02d      	b.n	801ad8a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801ad2e:	2301      	movs	r3, #1
 801ad30:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801ad32:	4b18      	ldr	r3, [pc, #96]	@ (801ad94 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	889a      	ldrh	r2, [r3, #4]
 801ad38:	3201      	adds	r2, #1
 801ad3a:	b292      	uxth	r2, r2
 801ad3c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801ad3e:	4b15      	ldr	r3, [pc, #84]	@ (801ad94 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	889a      	ldrh	r2, [r3, #4]
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801ad48:	6878      	ldr	r0, [r7, #4]
 801ad4a:	f000 fc17 	bl	801b57c <LoRaMacSerializerJoinRequest>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d001      	beq.n	801ad58 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801ad54:	2310      	movs	r3, #16
 801ad56:	e018      	b.n	801ad8a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	6819      	ldr	r1, [r3, #0]
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	3318      	adds	r3, #24
 801ad60:	7bfa      	ldrb	r2, [r7, #15]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	4613      	mov	r3, r2
 801ad66:	2213      	movs	r2, #19
 801ad68:	2000      	movs	r0, #0
 801ad6a:	f7f5 fa97 	bl	801029c <SecureElementComputeAesCmac>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d001      	beq.n	801ad78 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801ad74:	230e      	movs	r3, #14
 801ad76:	e008      	b.n	801ad8a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f000 fbff 	bl	801b57c <LoRaMacSerializerJoinRequest>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d001      	beq.n	801ad88 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801ad84:	2310      	movs	r3, #16
 801ad86:	e000      	b.n	801ad8a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801ad88:	2300      	movs	r3, #0
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	3710      	adds	r7, #16
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd80      	pop	{r7, pc}
 801ad92:	bf00      	nop
 801ad94:	20002010 	.word	0x20002010

0801ad98 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801ad98:	b590      	push	{r4, r7, lr}
 801ad9a:	b097      	sub	sp, #92	@ 0x5c
 801ad9c:	af04      	add	r7, sp, #16
 801ad9e:	4603      	mov	r3, r0
 801ada0:	60b9      	str	r1, [r7, #8]
 801ada2:	607a      	str	r2, [r7, #4]
 801ada4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d002      	beq.n	801adb2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801adac:	68bb      	ldr	r3, [r7, #8]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d101      	bne.n	801adb6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801adb2:	2309      	movs	r3, #9
 801adb4:	e0d3      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801adb6:	2312      	movs	r3, #18
 801adb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801adbc:	2300      	movs	r3, #0
 801adbe:	617b      	str	r3, [r7, #20]
 801adc0:	f107 0318 	add.w	r3, r7, #24
 801adc4:	221d      	movs	r2, #29
 801adc6:	2100      	movs	r1, #0
 801adc8:	4618      	mov	r0, r3
 801adca:	f00a fa48 	bl	802525e <memset>
    uint8_t versionMinor         = 0;
 801adce:	2300      	movs	r3, #0
 801add0:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801add2:	4b65      	ldr	r3, [pc, #404]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	889b      	ldrh	r3, [r3, #4]
 801add8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	681c      	ldr	r4, [r3, #0]
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	791b      	ldrb	r3, [r3, #4]
 801ade4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 801ade8:	7bf8      	ldrb	r0, [r7, #15]
 801adea:	f107 0213 	add.w	r2, r7, #19
 801adee:	9202      	str	r2, [sp, #8]
 801adf0:	f107 0214 	add.w	r2, r7, #20
 801adf4:	9201      	str	r2, [sp, #4]
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	4623      	mov	r3, r4
 801adfa:	460a      	mov	r2, r1
 801adfc:	68b9      	ldr	r1, [r7, #8]
 801adfe:	f7f5 fb53 	bl	80104a8 <SecureElementProcessJoinAccept>
 801ae02:	4603      	mov	r3, r0
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d001      	beq.n	801ae0c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801ae08:	230e      	movs	r3, #14
 801ae0a:	e0a8      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	6818      	ldr	r0, [r3, #0]
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	791b      	ldrb	r3, [r3, #4]
 801ae14:	461a      	mov	r2, r3
 801ae16:	f107 0314 	add.w	r3, r7, #20
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	f004 fbfb 	bl	801f616 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f000 f9ee 	bl	801b202 <LoRaMacParserJoinAccept>
 801ae26:	4603      	mov	r3, r0
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d001      	beq.n	801ae30 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801ae2c:	230f      	movs	r3, #15
 801ae2e:	e096      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 801ae30:	2300      	movs	r3, #0
 801ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	799b      	ldrb	r3, [r3, #6]
 801ae3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	79db      	ldrb	r3, [r3, #7]
 801ae40:	021b      	lsls	r3, r3, #8
 801ae42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae44:	4313      	orrs	r3, r2
 801ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	7a1b      	ldrb	r3, [r3, #8]
 801ae4c:	041b      	lsls	r3, r3, #16
 801ae4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae50:	4313      	orrs	r3, r2
 801ae52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801ae54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801ae56:	f7ff fe4b 	bl	801aaf0 <IsJoinNonce10xOk>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 801ae60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d010      	beq.n	801ae8a <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801ae68:	4b3f      	ldr	r3, [pc, #252]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae6e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 801ae70:	7cfb      	ldrb	r3, [r7, #19]
 801ae72:	210b      	movs	r1, #11
 801ae74:	4618      	mov	r0, r3
 801ae76:	f000 f989 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801ae80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d005      	beq.n	801ae94 <LoRaMacCryptoHandleJoinAccept+0xfc>
 801ae88:	e001      	b.n	801ae8e <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801ae8a:	2303      	movs	r3, #3
 801ae8c:	e067      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801ae8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ae92:	e064      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801ae94:	210c      	movs	r1, #12
 801ae96:	2000      	movs	r0, #0
 801ae98:	f000 f978 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801aea2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d002      	beq.n	801aeb0 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801aeaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801aeae:	e056      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 801aeb0:	210a      	movs	r1, #10
 801aeb2:	2000      	movs	r0, #0
 801aeb4:	f000 f96a 	bl	801b18c <LoRaMacCryptoDeriveLifeTimeKey>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801aebe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d002      	beq.n	801aecc <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801aec6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801aeca:	e048      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	7a5b      	ldrb	r3, [r3, #9]
 801aed0:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	7a9b      	ldrb	r3, [r3, #10]
 801aed6:	021b      	lsls	r3, r3, #8
 801aed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aeda:	4313      	orrs	r3, r2
 801aedc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	7adb      	ldrb	r3, [r3, #11]
 801aee2:	041b      	lsls	r3, r3, #16
 801aee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aee6:	4313      	orrs	r3, r2
 801aee8:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801aeea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801aeee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aef0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801aef2:	2009      	movs	r0, #9
 801aef4:	f7ff fcd8 	bl	801a8a8 <DeriveSessionKey10x>
 801aef8:	4603      	mov	r3, r0
 801aefa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801aefe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801af02:	2b00      	cmp	r3, #0
 801af04:	d002      	beq.n	801af0c <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801af06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801af0a:	e028      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801af0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801af10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801af12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801af14:	2008      	movs	r0, #8
 801af16:	f7ff fcc7 	bl	801a8a8 <DeriveSessionKey10x>
 801af1a:	4603      	mov	r3, r0
 801af1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801af20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801af24:	2b00      	cmp	r3, #0
 801af26:	d002      	beq.n	801af2e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 801af28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801af2c:	e017      	b.n	801af5e <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801af2e:	4b0e      	ldr	r3, [pc, #56]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	7cfa      	ldrb	r2, [r7, #19]
 801af34:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801af36:	4b0c      	ldr	r3, [pc, #48]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	2200      	movs	r2, #0
 801af3c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801af3e:	4b0a      	ldr	r3, [pc, #40]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af46:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801af48:	4b07      	ldr	r3, [pc, #28]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af50:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801af52:	4b05      	ldr	r3, [pc, #20]	@ (801af68 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af5a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801af5c:	2300      	movs	r3, #0
}
 801af5e:	4618      	mov	r0, r3
 801af60:	374c      	adds	r7, #76	@ 0x4c
 801af62:	46bd      	mov	sp, r7
 801af64:	bd90      	pop	{r4, r7, pc}
 801af66:	bf00      	nop
 801af68:	20002010 	.word	0x20002010

0801af6c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801af6c:	b590      	push	{r4, r7, lr}
 801af6e:	b08b      	sub	sp, #44	@ 0x2c
 801af70:	af04      	add	r7, sp, #16
 801af72:	60f8      	str	r0, [r7, #12]
 801af74:	607b      	str	r3, [r7, #4]
 801af76:	460b      	mov	r3, r1
 801af78:	72fb      	strb	r3, [r7, #11]
 801af7a:	4613      	mov	r3, r2
 801af7c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801af7e:	2312      	movs	r3, #18
 801af80:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801af82:	2309      	movs	r3, #9
 801af84:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d101      	bne.n	801af90 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801af8c:	2309      	movs	r3, #9
 801af8e:	e05e      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801af90:	4b31      	ldr	r3, [pc, #196]	@ (801b058 <LoRaMacCryptoSecureMessage+0xec>)
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	68db      	ldr	r3, [r3, #12]
 801af96:	68fa      	ldr	r2, [r7, #12]
 801af98:	429a      	cmp	r2, r3
 801af9a:	d201      	bcs.n	801afa0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801af9c:	2306      	movs	r3, #6
 801af9e:	e056      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d101      	bne.n	801afae <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801afaa:	2308      	movs	r3, #8
 801afac:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801afae:	4b2a      	ldr	r3, [pc, #168]	@ (801b058 <LoRaMacCryptoSecureMessage+0xec>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	68db      	ldr	r3, [r3, #12]
 801afb4:	68fa      	ldr	r2, [r7, #12]
 801afb6:	429a      	cmp	r2, r3
 801afb8:	d916      	bls.n	801afe8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801afc4:	b219      	sxth	r1, r3
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	689c      	ldr	r4, [r3, #8]
 801afca:	7dfa      	ldrb	r2, [r7, #23]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	9301      	str	r3, [sp, #4]
 801afd0:	2300      	movs	r3, #0
 801afd2:	9300      	str	r3, [sp, #0]
 801afd4:	4623      	mov	r3, r4
 801afd6:	f7ff fa73 	bl	801a4c0 <PayloadEncrypt>
 801afda:	4603      	mov	r3, r0
 801afdc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801afde:	7dbb      	ldrb	r3, [r7, #22]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d001      	beq.n	801afe8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801afe4:	7dbb      	ldrb	r3, [r7, #22]
 801afe6:	e032      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f000 fb49 	bl	801b680 <LoRaMacSerializerData>
 801afee:	4603      	mov	r3, r0
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d001      	beq.n	801aff8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801aff4:	2310      	movs	r3, #16
 801aff6:	e02a      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801aff8:	2308      	movs	r3, #8
 801affa:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	6818      	ldr	r0, [r3, #0]
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	791b      	ldrb	r3, [r3, #4]
 801b004:	3b04      	subs	r3, #4
 801b006:	b299      	uxth	r1, r3
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	689b      	ldr	r3, [r3, #8]
 801b00c:	687a      	ldr	r2, [r7, #4]
 801b00e:	322c      	adds	r2, #44	@ 0x2c
 801b010:	7dfc      	ldrb	r4, [r7, #23]
 801b012:	9203      	str	r2, [sp, #12]
 801b014:	68fa      	ldr	r2, [r7, #12]
 801b016:	9202      	str	r2, [sp, #8]
 801b018:	9301      	str	r3, [sp, #4]
 801b01a:	2300      	movs	r3, #0
 801b01c:	9300      	str	r3, [sp, #0]
 801b01e:	2300      	movs	r3, #0
 801b020:	4622      	mov	r2, r4
 801b022:	f7ff fb4e 	bl	801a6c2 <ComputeCmacB0>
 801b026:	4603      	mov	r3, r0
 801b028:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801b02a:	7dbb      	ldrb	r3, [r7, #22]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d001      	beq.n	801b034 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 801b030:	7dbb      	ldrb	r3, [r7, #22]
 801b032:	e00c      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801b034:	6878      	ldr	r0, [r7, #4]
 801b036:	f000 fb23 	bl	801b680 <LoRaMacSerializerData>
 801b03a:	4603      	mov	r3, r0
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d001      	beq.n	801b044 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801b040:	2310      	movs	r3, #16
 801b042:	e004      	b.n	801b04e <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801b044:	4b04      	ldr	r3, [pc, #16]	@ (801b058 <LoRaMacCryptoSecureMessage+0xec>)
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	68fa      	ldr	r2, [r7, #12]
 801b04a:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801b04c:	2300      	movs	r3, #0
}
 801b04e:	4618      	mov	r0, r3
 801b050:	371c      	adds	r7, #28
 801b052:	46bd      	mov	sp, r7
 801b054:	bd90      	pop	{r4, r7, pc}
 801b056:	bf00      	nop
 801b058:	20002010 	.word	0x20002010

0801b05c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801b05c:	b590      	push	{r4, r7, lr}
 801b05e:	b08b      	sub	sp, #44	@ 0x2c
 801b060:	af04      	add	r7, sp, #16
 801b062:	60b9      	str	r1, [r7, #8]
 801b064:	607b      	str	r3, [r7, #4]
 801b066:	4603      	mov	r3, r0
 801b068:	73fb      	strb	r3, [r7, #15]
 801b06a:	4613      	mov	r3, r2
 801b06c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b070:	2b00      	cmp	r3, #0
 801b072:	d101      	bne.n	801b078 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801b074:	2309      	movs	r3, #9
 801b076:	e083      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801b078:	7bbb      	ldrb	r3, [r7, #14]
 801b07a:	6879      	ldr	r1, [r7, #4]
 801b07c:	4618      	mov	r0, r3
 801b07e:	f7ff fc9f 	bl	801a9c0 <CheckFCntDown>
 801b082:	4603      	mov	r3, r0
 801b084:	f083 0301 	eor.w	r3, r3, #1
 801b088:	b2db      	uxtb	r3, r3
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d001      	beq.n	801b092 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801b08e:	2306      	movs	r3, #6
 801b090:	e076      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801b092:	2312      	movs	r3, #18
 801b094:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801b096:	2309      	movs	r3, #9
 801b098:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801b09a:	2308      	movs	r3, #8
 801b09c:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801b09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b0a0:	f000 f97a 	bl	801b398 <LoRaMacParserData>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d001      	beq.n	801b0ae <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801b0aa:	230f      	movs	r3, #15
 801b0ac:	e068      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801b0ae:	f107 0210 	add.w	r2, r7, #16
 801b0b2:	7bfb      	ldrb	r3, [r7, #15]
 801b0b4:	4611      	mov	r1, r2
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f7ff fbd0 	bl	801a85c <GetKeyAddrItem>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801b0c0:	7d7b      	ldrb	r3, [r7, #21]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d001      	beq.n	801b0ca <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801b0c6:	7d7b      	ldrb	r3, [r7, #21]
 801b0c8:	e05a      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801b0ca:	693b      	ldr	r3, [r7, #16]
 801b0cc:	785b      	ldrb	r3, [r3, #1]
 801b0ce:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801b0d0:	693b      	ldr	r3, [r7, #16]
 801b0d2:	789b      	ldrb	r3, [r3, #2]
 801b0d4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801b0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0d8:	689b      	ldr	r3, [r3, #8]
 801b0da:	68ba      	ldr	r2, [r7, #8]
 801b0dc:	429a      	cmp	r2, r3
 801b0de:	d001      	beq.n	801b0e4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801b0e0:	2302      	movs	r3, #2
 801b0e2:	e04d      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e6:	7b1b      	ldrb	r3, [r3, #12]
 801b0e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b0ec:	b2db      	uxtb	r3, r3
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	bf14      	ite	ne
 801b0f2:	2301      	movne	r3, #1
 801b0f4:	2300      	moveq	r3, #0
 801b0f6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801b0f8:	4b23      	ldr	r3, [pc, #140]	@ (801b188 <LoRaMacCryptoUnsecureMessage+0x12c>)
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	789b      	ldrb	r3, [r3, #2]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d101      	bne.n	801b106 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801b102:	2300      	movs	r3, #0
 801b104:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b108:	6818      	ldr	r0, [r3, #0]
 801b10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b10c:	791b      	ldrb	r3, [r3, #4]
 801b10e:	3b04      	subs	r3, #4
 801b110:	b299      	uxth	r1, r3
 801b112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b116:	7dbc      	ldrb	r4, [r7, #22]
 801b118:	7d3a      	ldrb	r2, [r7, #20]
 801b11a:	9303      	str	r3, [sp, #12]
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	9302      	str	r3, [sp, #8]
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	9301      	str	r3, [sp, #4]
 801b124:	2301      	movs	r3, #1
 801b126:	9300      	str	r3, [sp, #0]
 801b128:	4623      	mov	r3, r4
 801b12a:	f7ff fb08 	bl	801a73e <VerifyCmacB0>
 801b12e:	4603      	mov	r3, r0
 801b130:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801b132:	7d7b      	ldrb	r3, [r7, #21]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d001      	beq.n	801b13c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 801b138:	7d7b      	ldrb	r3, [r7, #21]
 801b13a:	e021      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b13e:	f893 3020 	ldrb.w	r3, [r3, #32]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d101      	bne.n	801b14a <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801b146:	2308      	movs	r3, #8
 801b148:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b14c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b150:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b154:	b219      	sxth	r1, r3
 801b156:	7dfa      	ldrb	r2, [r7, #23]
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	9301      	str	r3, [sp, #4]
 801b15c:	2301      	movs	r3, #1
 801b15e:	9300      	str	r3, [sp, #0]
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	f7ff f9ad 	bl	801a4c0 <PayloadEncrypt>
 801b166:	4603      	mov	r3, r0
 801b168:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801b16a:	7d7b      	ldrb	r3, [r7, #21]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d001      	beq.n	801b174 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 801b170:	7d7b      	ldrb	r3, [r7, #21]
 801b172:	e005      	b.n	801b180 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801b174:	7bbb      	ldrb	r3, [r7, #14]
 801b176:	6879      	ldr	r1, [r7, #4]
 801b178:	4618      	mov	r0, r3
 801b17a:	f7ff fc45 	bl	801aa08 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801b17e:	2300      	movs	r3, #0
}
 801b180:	4618      	mov	r0, r3
 801b182:	371c      	adds	r7, #28
 801b184:	46bd      	mov	sp, r7
 801b186:	bd90      	pop	{r4, r7, pc}
 801b188:	20002010 	.word	0x20002010

0801b18c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b088      	sub	sp, #32
 801b190:	af00      	add	r7, sp, #0
 801b192:	4603      	mov	r3, r0
 801b194:	460a      	mov	r2, r1
 801b196:	71fb      	strb	r3, [r7, #7]
 801b198:	4613      	mov	r3, r2
 801b19a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 801b19c:	2300      	movs	r3, #0
 801b19e:	60fb      	str	r3, [r7, #12]
 801b1a0:	f107 0310 	add.w	r3, r7, #16
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	601a      	str	r2, [r3, #0]
 801b1a8:	605a      	str	r2, [r3, #4]
 801b1aa:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801b1b0:	79bb      	ldrb	r3, [r7, #6]
 801b1b2:	2b0c      	cmp	r3, #12
 801b1b4:	d00b      	beq.n	801b1ce <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801b1b6:	2b0c      	cmp	r3, #12
 801b1b8:	dc0f      	bgt.n	801b1da <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 801b1ba:	2b0a      	cmp	r3, #10
 801b1bc:	d00a      	beq.n	801b1d4 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801b1be:	2b0b      	cmp	r3, #11
 801b1c0:	d10b      	bne.n	801b1da <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801b1c2:	79fb      	ldrb	r3, [r7, #7]
 801b1c4:	2b01      	cmp	r3, #1
 801b1c6:	d10a      	bne.n	801b1de <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 801b1c8:	2320      	movs	r3, #32
 801b1ca:	733b      	strb	r3, [r7, #12]
            }
            break;
 801b1cc:	e007      	b.n	801b1de <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801b1ce:	230b      	movs	r3, #11
 801b1d0:	77fb      	strb	r3, [r7, #31]
            break;
 801b1d2:	e005      	b.n	801b1e0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801b1d4:	2330      	movs	r3, #48	@ 0x30
 801b1d6:	733b      	strb	r3, [r7, #12]
            break;
 801b1d8:	e002      	b.n	801b1e0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801b1da:	230a      	movs	r3, #10
 801b1dc:	e00d      	b.n	801b1fa <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801b1de:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801b1e0:	79ba      	ldrb	r2, [r7, #6]
 801b1e2:	7ff9      	ldrb	r1, [r7, #31]
 801b1e4:	f107 030c 	add.w	r3, r7, #12
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f7f5 f91d 	bl	8010428 <SecureElementDeriveAndStoreKey>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d001      	beq.n	801b1f8 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801b1f4:	230e      	movs	r3, #14
 801b1f6:	e000      	b.n	801b1fa <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801b1f8:	2300      	movs	r3, #0
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3720      	adds	r7, #32
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd80      	pop	{r7, pc}

0801b202 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801b202:	b580      	push	{r7, lr}
 801b204:	b084      	sub	sp, #16
 801b206:	af00      	add	r7, sp, #0
 801b208:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d003      	beq.n	801b218 <LoRaMacParserJoinAccept+0x16>
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d101      	bne.n	801b21c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801b218:	2302      	movs	r3, #2
 801b21a:	e0b9      	b.n	801b390 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801b21c:	2300      	movs	r3, #0
 801b21e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	89fb      	ldrh	r3, [r7, #14]
 801b226:	1c59      	adds	r1, r3, #1
 801b228:	81f9      	strh	r1, [r7, #14]
 801b22a:	4413      	add	r3, r2
 801b22c:	781a      	ldrb	r2, [r3, #0]
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	1d98      	adds	r0, r3, #6
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681a      	ldr	r2, [r3, #0]
 801b23a:	89fb      	ldrh	r3, [r7, #14]
 801b23c:	4413      	add	r3, r2
 801b23e:	2203      	movs	r2, #3
 801b240:	4619      	mov	r1, r3
 801b242:	f004 f9e8 	bl	801f616 <memcpy1>
    bufItr = bufItr + 3;
 801b246:	89fb      	ldrh	r3, [r7, #14]
 801b248:	3303      	adds	r3, #3
 801b24a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	f103 0009 	add.w	r0, r3, #9
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	89fb      	ldrh	r3, [r7, #14]
 801b258:	4413      	add	r3, r2
 801b25a:	2203      	movs	r2, #3
 801b25c:	4619      	mov	r1, r3
 801b25e:	f004 f9da 	bl	801f616 <memcpy1>
    bufItr = bufItr + 3;
 801b262:	89fb      	ldrh	r3, [r7, #14]
 801b264:	3303      	adds	r3, #3
 801b266:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	681a      	ldr	r2, [r3, #0]
 801b26c:	89fb      	ldrh	r3, [r7, #14]
 801b26e:	1c59      	adds	r1, r3, #1
 801b270:	81f9      	strh	r1, [r7, #14]
 801b272:	4413      	add	r3, r2
 801b274:	781b      	ldrb	r3, [r3, #0]
 801b276:	461a      	mov	r2, r3
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681a      	ldr	r2, [r3, #0]
 801b280:	89fb      	ldrh	r3, [r7, #14]
 801b282:	1c59      	adds	r1, r3, #1
 801b284:	81f9      	strh	r1, [r7, #14]
 801b286:	4413      	add	r3, r2
 801b288:	781b      	ldrb	r3, [r3, #0]
 801b28a:	021a      	lsls	r2, r3, #8
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	431a      	orrs	r2, r3
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681a      	ldr	r2, [r3, #0]
 801b29a:	89fb      	ldrh	r3, [r7, #14]
 801b29c:	1c59      	adds	r1, r3, #1
 801b29e:	81f9      	strh	r1, [r7, #14]
 801b2a0:	4413      	add	r3, r2
 801b2a2:	781b      	ldrb	r3, [r3, #0]
 801b2a4:	041a      	lsls	r2, r3, #16
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	68db      	ldr	r3, [r3, #12]
 801b2aa:	431a      	orrs	r2, r3
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681a      	ldr	r2, [r3, #0]
 801b2b4:	89fb      	ldrh	r3, [r7, #14]
 801b2b6:	1c59      	adds	r1, r3, #1
 801b2b8:	81f9      	strh	r1, [r7, #14]
 801b2ba:	4413      	add	r3, r2
 801b2bc:	781b      	ldrb	r3, [r3, #0]
 801b2be:	061a      	lsls	r2, r3, #24
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	68db      	ldr	r3, [r3, #12]
 801b2c4:	431a      	orrs	r2, r3
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	681a      	ldr	r2, [r3, #0]
 801b2ce:	89fb      	ldrh	r3, [r7, #14]
 801b2d0:	1c59      	adds	r1, r3, #1
 801b2d2:	81f9      	strh	r1, [r7, #14]
 801b2d4:	4413      	add	r3, r2
 801b2d6:	781a      	ldrb	r2, [r3, #0]
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	89fb      	ldrh	r3, [r7, #14]
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	81f9      	strh	r1, [r7, #14]
 801b2e6:	4413      	add	r3, r2
 801b2e8:	781a      	ldrb	r2, [r3, #0]
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	791b      	ldrb	r3, [r3, #4]
 801b2f2:	1f1a      	subs	r2, r3, #4
 801b2f4:	89fb      	ldrh	r3, [r7, #14]
 801b2f6:	1ad3      	subs	r3, r2, r3
 801b2f8:	2b10      	cmp	r3, #16
 801b2fa:	d10e      	bne.n	801b31a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	f103 0012 	add.w	r0, r3, #18
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	89fb      	ldrh	r3, [r7, #14]
 801b308:	4413      	add	r3, r2
 801b30a:	2210      	movs	r2, #16
 801b30c:	4619      	mov	r1, r3
 801b30e:	f004 f982 	bl	801f616 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801b312:	89fb      	ldrh	r3, [r7, #14]
 801b314:	3310      	adds	r3, #16
 801b316:	81fb      	strh	r3, [r7, #14]
 801b318:	e008      	b.n	801b32c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	791b      	ldrb	r3, [r3, #4]
 801b31e:	1f1a      	subs	r2, r3, #4
 801b320:	89fb      	ldrh	r3, [r7, #14]
 801b322:	1ad3      	subs	r3, r2, r3
 801b324:	2b00      	cmp	r3, #0
 801b326:	dd01      	ble.n	801b32c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801b328:	2301      	movs	r3, #1
 801b32a:	e031      	b.n	801b390 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	89fb      	ldrh	r3, [r7, #14]
 801b332:	1c59      	adds	r1, r3, #1
 801b334:	81f9      	strh	r1, [r7, #14]
 801b336:	4413      	add	r3, r2
 801b338:	781b      	ldrb	r3, [r3, #0]
 801b33a:	461a      	mov	r2, r3
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681a      	ldr	r2, [r3, #0]
 801b344:	89fb      	ldrh	r3, [r7, #14]
 801b346:	1c59      	adds	r1, r3, #1
 801b348:	81f9      	strh	r1, [r7, #14]
 801b34a:	4413      	add	r3, r2
 801b34c:	781b      	ldrb	r3, [r3, #0]
 801b34e:	021a      	lsls	r2, r3, #8
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b354:	431a      	orrs	r2, r3
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	89fb      	ldrh	r3, [r7, #14]
 801b360:	1c59      	adds	r1, r3, #1
 801b362:	81f9      	strh	r1, [r7, #14]
 801b364:	4413      	add	r3, r2
 801b366:	781b      	ldrb	r3, [r3, #0]
 801b368:	041a      	lsls	r2, r3, #16
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b36e:	431a      	orrs	r2, r3
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	89fb      	ldrh	r3, [r7, #14]
 801b37a:	1c59      	adds	r1, r3, #1
 801b37c:	81f9      	strh	r1, [r7, #14]
 801b37e:	4413      	add	r3, r2
 801b380:	781b      	ldrb	r3, [r3, #0]
 801b382:	061a      	lsls	r2, r3, #24
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b388:	431a      	orrs	r2, r3
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 801b38e:	2300      	movs	r3, #0
}
 801b390:	4618      	mov	r0, r3
 801b392:	3710      	adds	r7, #16
 801b394:	46bd      	mov	sp, r7
 801b396:	bd80      	pop	{r7, pc}

0801b398 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b084      	sub	sp, #16
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d003      	beq.n	801b3ae <LoRaMacParserData+0x16>
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d101      	bne.n	801b3b2 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801b3ae:	2302      	movs	r3, #2
 801b3b0:	e0e0      	b.n	801b574 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681a      	ldr	r2, [r3, #0]
 801b3ba:	89fb      	ldrh	r3, [r7, #14]
 801b3bc:	1c59      	adds	r1, r3, #1
 801b3be:	81f9      	strh	r1, [r7, #14]
 801b3c0:	4413      	add	r3, r2
 801b3c2:	781a      	ldrb	r2, [r3, #0]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681a      	ldr	r2, [r3, #0]
 801b3cc:	89fb      	ldrh	r3, [r7, #14]
 801b3ce:	1c59      	adds	r1, r3, #1
 801b3d0:	81f9      	strh	r1, [r7, #14]
 801b3d2:	4413      	add	r3, r2
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	461a      	mov	r2, r3
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681a      	ldr	r2, [r3, #0]
 801b3e0:	89fb      	ldrh	r3, [r7, #14]
 801b3e2:	1c59      	adds	r1, r3, #1
 801b3e4:	81f9      	strh	r1, [r7, #14]
 801b3e6:	4413      	add	r3, r2
 801b3e8:	781b      	ldrb	r3, [r3, #0]
 801b3ea:	021a      	lsls	r2, r3, #8
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	689b      	ldr	r3, [r3, #8]
 801b3f0:	431a      	orrs	r2, r3
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681a      	ldr	r2, [r3, #0]
 801b3fa:	89fb      	ldrh	r3, [r7, #14]
 801b3fc:	1c59      	adds	r1, r3, #1
 801b3fe:	81f9      	strh	r1, [r7, #14]
 801b400:	4413      	add	r3, r2
 801b402:	781b      	ldrb	r3, [r3, #0]
 801b404:	041a      	lsls	r2, r3, #16
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	689b      	ldr	r3, [r3, #8]
 801b40a:	431a      	orrs	r2, r3
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681a      	ldr	r2, [r3, #0]
 801b414:	89fb      	ldrh	r3, [r7, #14]
 801b416:	1c59      	adds	r1, r3, #1
 801b418:	81f9      	strh	r1, [r7, #14]
 801b41a:	4413      	add	r3, r2
 801b41c:	781b      	ldrb	r3, [r3, #0]
 801b41e:	061a      	lsls	r2, r3, #24
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	689b      	ldr	r3, [r3, #8]
 801b424:	431a      	orrs	r2, r3
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681a      	ldr	r2, [r3, #0]
 801b42e:	89fb      	ldrh	r3, [r7, #14]
 801b430:	1c59      	adds	r1, r3, #1
 801b432:	81f9      	strh	r1, [r7, #14]
 801b434:	4413      	add	r3, r2
 801b436:	781a      	ldrb	r2, [r3, #0]
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681a      	ldr	r2, [r3, #0]
 801b440:	89fb      	ldrh	r3, [r7, #14]
 801b442:	1c59      	adds	r1, r3, #1
 801b444:	81f9      	strh	r1, [r7, #14]
 801b446:	4413      	add	r3, r2
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	461a      	mov	r2, r3
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681a      	ldr	r2, [r3, #0]
 801b454:	89fb      	ldrh	r3, [r7, #14]
 801b456:	1c59      	adds	r1, r3, #1
 801b458:	81f9      	strh	r1, [r7, #14]
 801b45a:	4413      	add	r3, r2
 801b45c:	781b      	ldrb	r3, [r3, #0]
 801b45e:	0219      	lsls	r1, r3, #8
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	89db      	ldrh	r3, [r3, #14]
 801b464:	b21a      	sxth	r2, r3
 801b466:	b20b      	sxth	r3, r1
 801b468:	4313      	orrs	r3, r2
 801b46a:	b21b      	sxth	r3, r3
 801b46c:	b29a      	uxth	r2, r3
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f103 0010 	add.w	r0, r3, #16
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681a      	ldr	r2, [r3, #0]
 801b47c:	89fb      	ldrh	r3, [r7, #14]
 801b47e:	18d1      	adds	r1, r2, r3
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	7b1b      	ldrb	r3, [r3, #12]
 801b484:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	461a      	mov	r2, r3
 801b48c:	f004 f8c3 	bl	801f616 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	7b1b      	ldrb	r3, [r3, #12]
 801b494:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b498:	b2db      	uxtb	r3, r3
 801b49a:	461a      	mov	r2, r3
 801b49c:	89fb      	ldrh	r3, [r7, #14]
 801b49e:	4413      	add	r3, r2
 801b4a0:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	791b      	ldrb	r3, [r3, #4]
 801b4b6:	461a      	mov	r2, r3
 801b4b8:	89fb      	ldrh	r3, [r7, #14]
 801b4ba:	1ad3      	subs	r3, r2, r3
 801b4bc:	2b04      	cmp	r3, #4
 801b4be:	dd27      	ble.n	801b510 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681a      	ldr	r2, [r3, #0]
 801b4c4:	89fb      	ldrh	r3, [r7, #14]
 801b4c6:	1c59      	adds	r1, r3, #1
 801b4c8:	81f9      	strh	r1, [r7, #14]
 801b4ca:	4413      	add	r3, r2
 801b4cc:	781a      	ldrb	r2, [r3, #0]
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	791a      	ldrb	r2, [r3, #4]
 801b4d8:	89fb      	ldrh	r3, [r7, #14]
 801b4da:	b2db      	uxtb	r3, r3
 801b4dc:	1ad3      	subs	r3, r2, r3
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	3b04      	subs	r3, #4
 801b4e2:	b2da      	uxtb	r2, r3
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681a      	ldr	r2, [r3, #0]
 801b4f2:	89fb      	ldrh	r3, [r7, #14]
 801b4f4:	18d1      	adds	r1, r2, r3
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b4fc:	461a      	mov	r2, r3
 801b4fe:	f004 f88a 	bl	801f616 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b508:	461a      	mov	r2, r3
 801b50a:	89fb      	ldrh	r3, [r7, #14]
 801b50c:	4413      	add	r3, r2
 801b50e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681a      	ldr	r2, [r3, #0]
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	791b      	ldrb	r3, [r3, #4]
 801b518:	3b04      	subs	r3, #4
 801b51a:	4413      	add	r3, r2
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	461a      	mov	r2, r3
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	6819      	ldr	r1, [r3, #0]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	791b      	ldrb	r3, [r3, #4]
 801b530:	3b03      	subs	r3, #3
 801b532:	440b      	add	r3, r1
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	021b      	lsls	r3, r3, #8
 801b538:	431a      	orrs	r2, r3
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	6819      	ldr	r1, [r3, #0]
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	791b      	ldrb	r3, [r3, #4]
 801b54a:	3b02      	subs	r3, #2
 801b54c:	440b      	add	r3, r1
 801b54e:	781b      	ldrb	r3, [r3, #0]
 801b550:	041b      	lsls	r3, r3, #16
 801b552:	431a      	orrs	r2, r3
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	6819      	ldr	r1, [r3, #0]
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	791b      	ldrb	r3, [r3, #4]
 801b564:	3b01      	subs	r3, #1
 801b566:	440b      	add	r3, r1
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	061b      	lsls	r3, r3, #24
 801b56c:	431a      	orrs	r2, r3
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801b572:	2300      	movs	r3, #0
}
 801b574:	4618      	mov	r0, r3
 801b576:	3710      	adds	r7, #16
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}

0801b57c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b084      	sub	sp, #16
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d003      	beq.n	801b592 <LoRaMacSerializerJoinRequest+0x16>
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d101      	bne.n	801b596 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801b592:	2301      	movs	r3, #1
 801b594:	e070      	b.n	801b678 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801b596:	2300      	movs	r3, #0
 801b598:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	791b      	ldrb	r3, [r3, #4]
 801b59e:	2b16      	cmp	r3, #22
 801b5a0:	d801      	bhi.n	801b5a6 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801b5a2:	2302      	movs	r3, #2
 801b5a4:	e068      	b.n	801b678 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681a      	ldr	r2, [r3, #0]
 801b5aa:	89fb      	ldrh	r3, [r7, #14]
 801b5ac:	1c59      	adds	r1, r3, #1
 801b5ae:	81f9      	strh	r1, [r7, #14]
 801b5b0:	4413      	add	r3, r2
 801b5b2:	687a      	ldr	r2, [r7, #4]
 801b5b4:	7952      	ldrb	r2, [r2, #5]
 801b5b6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681a      	ldr	r2, [r3, #0]
 801b5bc:	89fb      	ldrh	r3, [r7, #14]
 801b5be:	18d0      	adds	r0, r2, r3
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	3306      	adds	r3, #6
 801b5c4:	2208      	movs	r2, #8
 801b5c6:	4619      	mov	r1, r3
 801b5c8:	f004 f840 	bl	801f64c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801b5cc:	89fb      	ldrh	r3, [r7, #14]
 801b5ce:	3308      	adds	r3, #8
 801b5d0:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681a      	ldr	r2, [r3, #0]
 801b5d6:	89fb      	ldrh	r3, [r7, #14]
 801b5d8:	18d0      	adds	r0, r2, r3
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	330e      	adds	r3, #14
 801b5de:	2208      	movs	r2, #8
 801b5e0:	4619      	mov	r1, r3
 801b5e2:	f004 f833 	bl	801f64c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801b5e6:	89fb      	ldrh	r3, [r7, #14]
 801b5e8:	3308      	adds	r3, #8
 801b5ea:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	8ad9      	ldrh	r1, [r3, #22]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681a      	ldr	r2, [r3, #0]
 801b5f4:	89fb      	ldrh	r3, [r7, #14]
 801b5f6:	1c58      	adds	r0, r3, #1
 801b5f8:	81f8      	strh	r0, [r7, #14]
 801b5fa:	4413      	add	r3, r2
 801b5fc:	b2ca      	uxtb	r2, r1
 801b5fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	8adb      	ldrh	r3, [r3, #22]
 801b604:	0a1b      	lsrs	r3, r3, #8
 801b606:	b299      	uxth	r1, r3
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	681a      	ldr	r2, [r3, #0]
 801b60c:	89fb      	ldrh	r3, [r7, #14]
 801b60e:	1c58      	adds	r0, r3, #1
 801b610:	81f8      	strh	r0, [r7, #14]
 801b612:	4413      	add	r3, r2
 801b614:	b2ca      	uxtb	r2, r1
 801b616:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6999      	ldr	r1, [r3, #24]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	681a      	ldr	r2, [r3, #0]
 801b620:	89fb      	ldrh	r3, [r7, #14]
 801b622:	1c58      	adds	r0, r3, #1
 801b624:	81f8      	strh	r0, [r7, #14]
 801b626:	4413      	add	r3, r2
 801b628:	b2ca      	uxtb	r2, r1
 801b62a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	699b      	ldr	r3, [r3, #24]
 801b630:	0a19      	lsrs	r1, r3, #8
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681a      	ldr	r2, [r3, #0]
 801b636:	89fb      	ldrh	r3, [r7, #14]
 801b638:	1c58      	adds	r0, r3, #1
 801b63a:	81f8      	strh	r0, [r7, #14]
 801b63c:	4413      	add	r3, r2
 801b63e:	b2ca      	uxtb	r2, r1
 801b640:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	699b      	ldr	r3, [r3, #24]
 801b646:	0c19      	lsrs	r1, r3, #16
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681a      	ldr	r2, [r3, #0]
 801b64c:	89fb      	ldrh	r3, [r7, #14]
 801b64e:	1c58      	adds	r0, r3, #1
 801b650:	81f8      	strh	r0, [r7, #14]
 801b652:	4413      	add	r3, r2
 801b654:	b2ca      	uxtb	r2, r1
 801b656:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	699b      	ldr	r3, [r3, #24]
 801b65c:	0e19      	lsrs	r1, r3, #24
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	681a      	ldr	r2, [r3, #0]
 801b662:	89fb      	ldrh	r3, [r7, #14]
 801b664:	1c58      	adds	r0, r3, #1
 801b666:	81f8      	strh	r0, [r7, #14]
 801b668:	4413      	add	r3, r2
 801b66a:	b2ca      	uxtb	r2, r1
 801b66c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801b66e:	89fb      	ldrh	r3, [r7, #14]
 801b670:	b2da      	uxtb	r2, r3
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801b676:	2300      	movs	r3, #0
}
 801b678:	4618      	mov	r0, r3
 801b67a:	3710      	adds	r7, #16
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}

0801b680 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b084      	sub	sp, #16
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d003      	beq.n	801b696 <LoRaMacSerializerData+0x16>
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d101      	bne.n	801b69a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801b696:	2301      	movs	r3, #1
 801b698:	e0e3      	b.n	801b862 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801b69a:	2300      	movs	r3, #0
 801b69c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801b69e:	2308      	movs	r3, #8
 801b6a0:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	7b1b      	ldrb	r3, [r3, #12]
 801b6a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	461a      	mov	r2, r3
 801b6ae:	89bb      	ldrh	r3, [r7, #12]
 801b6b0:	4413      	add	r3, r2
 801b6b2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d002      	beq.n	801b6c4 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801b6be:	89bb      	ldrh	r3, [r7, #12]
 801b6c0:	3301      	adds	r3, #1
 801b6c2:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b6ca:	461a      	mov	r2, r3
 801b6cc:	89bb      	ldrh	r3, [r7, #12]
 801b6ce:	4413      	add	r3, r2
 801b6d0:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801b6d2:	89bb      	ldrh	r3, [r7, #12]
 801b6d4:	3304      	adds	r3, #4
 801b6d6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	791b      	ldrb	r3, [r3, #4]
 801b6dc:	461a      	mov	r2, r3
 801b6de:	89bb      	ldrh	r3, [r7, #12]
 801b6e0:	4293      	cmp	r3, r2
 801b6e2:	d901      	bls.n	801b6e8 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801b6e4:	2302      	movs	r3, #2
 801b6e6:	e0bc      	b.n	801b862 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	89fb      	ldrh	r3, [r7, #14]
 801b6ee:	1c59      	adds	r1, r3, #1
 801b6f0:	81f9      	strh	r1, [r7, #14]
 801b6f2:	4413      	add	r3, r2
 801b6f4:	687a      	ldr	r2, [r7, #4]
 801b6f6:	7952      	ldrb	r2, [r2, #5]
 801b6f8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6899      	ldr	r1, [r3, #8]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681a      	ldr	r2, [r3, #0]
 801b702:	89fb      	ldrh	r3, [r7, #14]
 801b704:	1c58      	adds	r0, r3, #1
 801b706:	81f8      	strh	r0, [r7, #14]
 801b708:	4413      	add	r3, r2
 801b70a:	b2ca      	uxtb	r2, r1
 801b70c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	689b      	ldr	r3, [r3, #8]
 801b712:	0a19      	lsrs	r1, r3, #8
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681a      	ldr	r2, [r3, #0]
 801b718:	89fb      	ldrh	r3, [r7, #14]
 801b71a:	1c58      	adds	r0, r3, #1
 801b71c:	81f8      	strh	r0, [r7, #14]
 801b71e:	4413      	add	r3, r2
 801b720:	b2ca      	uxtb	r2, r1
 801b722:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	689b      	ldr	r3, [r3, #8]
 801b728:	0c19      	lsrs	r1, r3, #16
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	681a      	ldr	r2, [r3, #0]
 801b72e:	89fb      	ldrh	r3, [r7, #14]
 801b730:	1c58      	adds	r0, r3, #1
 801b732:	81f8      	strh	r0, [r7, #14]
 801b734:	4413      	add	r3, r2
 801b736:	b2ca      	uxtb	r2, r1
 801b738:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	689b      	ldr	r3, [r3, #8]
 801b73e:	0e19      	lsrs	r1, r3, #24
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	89fb      	ldrh	r3, [r7, #14]
 801b746:	1c58      	adds	r0, r3, #1
 801b748:	81f8      	strh	r0, [r7, #14]
 801b74a:	4413      	add	r3, r2
 801b74c:	b2ca      	uxtb	r2, r1
 801b74e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	681a      	ldr	r2, [r3, #0]
 801b754:	89fb      	ldrh	r3, [r7, #14]
 801b756:	1c59      	adds	r1, r3, #1
 801b758:	81f9      	strh	r1, [r7, #14]
 801b75a:	4413      	add	r3, r2
 801b75c:	687a      	ldr	r2, [r7, #4]
 801b75e:	7b12      	ldrb	r2, [r2, #12]
 801b760:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	89d9      	ldrh	r1, [r3, #14]
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	681a      	ldr	r2, [r3, #0]
 801b76a:	89fb      	ldrh	r3, [r7, #14]
 801b76c:	1c58      	adds	r0, r3, #1
 801b76e:	81f8      	strh	r0, [r7, #14]
 801b770:	4413      	add	r3, r2
 801b772:	b2ca      	uxtb	r2, r1
 801b774:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	89db      	ldrh	r3, [r3, #14]
 801b77a:	0a1b      	lsrs	r3, r3, #8
 801b77c:	b299      	uxth	r1, r3
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	681a      	ldr	r2, [r3, #0]
 801b782:	89fb      	ldrh	r3, [r7, #14]
 801b784:	1c58      	adds	r0, r3, #1
 801b786:	81f8      	strh	r0, [r7, #14]
 801b788:	4413      	add	r3, r2
 801b78a:	b2ca      	uxtb	r2, r1
 801b78c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681a      	ldr	r2, [r3, #0]
 801b792:	89fb      	ldrh	r3, [r7, #14]
 801b794:	18d0      	adds	r0, r2, r3
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	f103 0110 	add.w	r1, r3, #16
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	7b1b      	ldrb	r3, [r3, #12]
 801b7a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b7a4:	b2db      	uxtb	r3, r3
 801b7a6:	461a      	mov	r2, r3
 801b7a8:	f003 ff35 	bl	801f616 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	7b1b      	ldrb	r3, [r3, #12]
 801b7b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b7b4:	b2db      	uxtb	r3, r3
 801b7b6:	461a      	mov	r2, r3
 801b7b8:	89fb      	ldrh	r3, [r7, #14]
 801b7ba:	4413      	add	r3, r2
 801b7bc:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d009      	beq.n	801b7dc <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681a      	ldr	r2, [r3, #0]
 801b7cc:	89fb      	ldrh	r3, [r7, #14]
 801b7ce:	1c59      	adds	r1, r3, #1
 801b7d0:	81f9      	strh	r1, [r7, #14]
 801b7d2:	4413      	add	r3, r2
 801b7d4:	687a      	ldr	r2, [r7, #4]
 801b7d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 801b7da:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	89fb      	ldrh	r3, [r7, #14]
 801b7e2:	18d0      	adds	r0, r2, r3
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b7ee:	461a      	mov	r2, r3
 801b7f0:	f003 ff11 	bl	801f616 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b7fa:	461a      	mov	r2, r3
 801b7fc:	89fb      	ldrh	r3, [r7, #14]
 801b7fe:	4413      	add	r3, r2
 801b800:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681a      	ldr	r2, [r3, #0]
 801b80a:	89fb      	ldrh	r3, [r7, #14]
 801b80c:	1c58      	adds	r0, r3, #1
 801b80e:	81f8      	strh	r0, [r7, #14]
 801b810:	4413      	add	r3, r2
 801b812:	b2ca      	uxtb	r2, r1
 801b814:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b81a:	0a19      	lsrs	r1, r3, #8
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	681a      	ldr	r2, [r3, #0]
 801b820:	89fb      	ldrh	r3, [r7, #14]
 801b822:	1c58      	adds	r0, r3, #1
 801b824:	81f8      	strh	r0, [r7, #14]
 801b826:	4413      	add	r3, r2
 801b828:	b2ca      	uxtb	r2, r1
 801b82a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b830:	0c19      	lsrs	r1, r3, #16
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681a      	ldr	r2, [r3, #0]
 801b836:	89fb      	ldrh	r3, [r7, #14]
 801b838:	1c58      	adds	r0, r3, #1
 801b83a:	81f8      	strh	r0, [r7, #14]
 801b83c:	4413      	add	r3, r2
 801b83e:	b2ca      	uxtb	r2, r1
 801b840:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b846:	0e19      	lsrs	r1, r3, #24
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681a      	ldr	r2, [r3, #0]
 801b84c:	89fb      	ldrh	r3, [r7, #14]
 801b84e:	1c58      	adds	r0, r3, #1
 801b850:	81f8      	strh	r0, [r7, #14]
 801b852:	4413      	add	r3, r2
 801b854:	b2ca      	uxtb	r2, r1
 801b856:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801b858:	89fb      	ldrh	r3, [r7, #14]
 801b85a:	b2da      	uxtb	r2, r3
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801b860:	2300      	movs	r3, #0
}
 801b862:	4618      	mov	r0, r3
 801b864:	3710      	adds	r7, #16
 801b866:	46bd      	mov	sp, r7
 801b868:	bd80      	pop	{r7, pc}

0801b86a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801b86a:	b480      	push	{r7}
 801b86c:	b083      	sub	sp, #12
 801b86e:	af00      	add	r7, sp, #0
 801b870:	4603      	mov	r3, r0
 801b872:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801b874:	79fb      	ldrb	r3, [r7, #7]
 801b876:	2b05      	cmp	r3, #5
 801b878:	d002      	beq.n	801b880 <RegionIsActive+0x16>
 801b87a:	2b08      	cmp	r3, #8
 801b87c:	d002      	beq.n	801b884 <RegionIsActive+0x1a>
 801b87e:	e003      	b.n	801b888 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801b880:	2301      	movs	r3, #1
 801b882:	e002      	b.n	801b88a <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801b884:	2301      	movs	r3, #1
 801b886:	e000      	b.n	801b88a <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801b888:	2300      	movs	r3, #0
        }
    }
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	370c      	adds	r7, #12
 801b88e:	46bd      	mov	sp, r7
 801b890:	bc80      	pop	{r7}
 801b892:	4770      	bx	lr

0801b894 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b084      	sub	sp, #16
 801b898:	af00      	add	r7, sp, #0
 801b89a:	4603      	mov	r3, r0
 801b89c:	6039      	str	r1, [r7, #0]
 801b89e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	60bb      	str	r3, [r7, #8]
    switch( region )
 801b8a4:	79fb      	ldrb	r3, [r7, #7]
 801b8a6:	2b05      	cmp	r3, #5
 801b8a8:	d002      	beq.n	801b8b0 <RegionGetPhyParam+0x1c>
 801b8aa:	2b08      	cmp	r3, #8
 801b8ac:	d006      	beq.n	801b8bc <RegionGetPhyParam+0x28>
 801b8ae:	e00b      	b.n	801b8c8 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801b8b0:	6838      	ldr	r0, [r7, #0]
 801b8b2:	f001 fb4b 	bl	801cf4c <RegionEU868GetPhyParam>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	60fb      	str	r3, [r7, #12]
 801b8ba:	e007      	b.n	801b8cc <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801b8bc:	6838      	ldr	r0, [r7, #0]
 801b8be:	f002 fcef 	bl	801e2a0 <RegionUS915GetPhyParam>
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	60fb      	str	r3, [r7, #12]
 801b8c6:	e001      	b.n	801b8cc <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3710      	adds	r7, #16
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd80      	pop	{r7, pc}

0801b8d6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801b8d6:	b580      	push	{r7, lr}
 801b8d8:	b082      	sub	sp, #8
 801b8da:	af00      	add	r7, sp, #0
 801b8dc:	4603      	mov	r3, r0
 801b8de:	6039      	str	r1, [r7, #0]
 801b8e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801b8e2:	79fb      	ldrb	r3, [r7, #7]
 801b8e4:	2b05      	cmp	r3, #5
 801b8e6:	d002      	beq.n	801b8ee <RegionSetBandTxDone+0x18>
 801b8e8:	2b08      	cmp	r3, #8
 801b8ea:	d004      	beq.n	801b8f6 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801b8ec:	e006      	b.n	801b8fc <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 801b8ee:	6838      	ldr	r0, [r7, #0]
 801b8f0:	f001 fc72 	bl	801d1d8 <RegionEU868SetBandTxDone>
 801b8f4:	e002      	b.n	801b8fc <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801b8f6:	6838      	ldr	r0, [r7, #0]
 801b8f8:	f002 fe2e 	bl	801e558 <RegionUS915SetBandTxDone>
        }
    }
}
 801b8fc:	3708      	adds	r7, #8
 801b8fe:	46bd      	mov	sp, r7
 801b900:	bd80      	pop	{r7, pc}

0801b902 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801b902:	b580      	push	{r7, lr}
 801b904:	b082      	sub	sp, #8
 801b906:	af00      	add	r7, sp, #0
 801b908:	4603      	mov	r3, r0
 801b90a:	6039      	str	r1, [r7, #0]
 801b90c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801b90e:	79fb      	ldrb	r3, [r7, #7]
 801b910:	2b05      	cmp	r3, #5
 801b912:	d002      	beq.n	801b91a <RegionInitDefaults+0x18>
 801b914:	2b08      	cmp	r3, #8
 801b916:	d004      	beq.n	801b922 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801b918:	e006      	b.n	801b928 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801b91a:	6838      	ldr	r0, [r7, #0]
 801b91c:	f001 fc88 	bl	801d230 <RegionEU868InitDefaults>
 801b920:	e002      	b.n	801b928 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 801b922:	6838      	ldr	r0, [r7, #0]
 801b924:	f002 fe44 	bl	801e5b0 <RegionUS915InitDefaults>
        }
    }
}
 801b928:	bf00      	nop
 801b92a:	3708      	adds	r7, #8
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}

0801b930 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b082      	sub	sp, #8
 801b934:	af00      	add	r7, sp, #0
 801b936:	4603      	mov	r3, r0
 801b938:	6039      	str	r1, [r7, #0]
 801b93a:	71fb      	strb	r3, [r7, #7]
 801b93c:	4613      	mov	r3, r2
 801b93e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801b940:	79fb      	ldrb	r3, [r7, #7]
 801b942:	2b05      	cmp	r3, #5
 801b944:	d002      	beq.n	801b94c <RegionVerify+0x1c>
 801b946:	2b08      	cmp	r3, #8
 801b948:	d007      	beq.n	801b95a <RegionVerify+0x2a>
 801b94a:	e00d      	b.n	801b968 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801b94c:	79bb      	ldrb	r3, [r7, #6]
 801b94e:	4619      	mov	r1, r3
 801b950:	6838      	ldr	r0, [r7, #0]
 801b952:	f001 fd0b 	bl	801d36c <RegionEU868Verify>
 801b956:	4603      	mov	r3, r0
 801b958:	e007      	b.n	801b96a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801b95a:	79bb      	ldrb	r3, [r7, #6]
 801b95c:	4619      	mov	r1, r3
 801b95e:	6838      	ldr	r0, [r7, #0]
 801b960:	f002 ff58 	bl	801e814 <RegionUS915Verify>
 801b964:	4603      	mov	r3, r0
 801b966:	e000      	b.n	801b96a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 801b968:	2300      	movs	r3, #0
        }
    }
}
 801b96a:	4618      	mov	r0, r3
 801b96c:	3708      	adds	r7, #8
 801b96e:	46bd      	mov	sp, r7
 801b970:	bd80      	pop	{r7, pc}

0801b972 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801b972:	b580      	push	{r7, lr}
 801b974:	b082      	sub	sp, #8
 801b976:	af00      	add	r7, sp, #0
 801b978:	4603      	mov	r3, r0
 801b97a:	6039      	str	r1, [r7, #0]
 801b97c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801b97e:	79fb      	ldrb	r3, [r7, #7]
 801b980:	2b05      	cmp	r3, #5
 801b982:	d002      	beq.n	801b98a <RegionApplyCFList+0x18>
 801b984:	2b08      	cmp	r3, #8
 801b986:	d004      	beq.n	801b992 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801b988:	e006      	b.n	801b998 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801b98a:	6838      	ldr	r0, [r7, #0]
 801b98c:	f001 fd6a 	bl	801d464 <RegionEU868ApplyCFList>
 801b990:	e002      	b.n	801b998 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 801b992:	6838      	ldr	r0, [r7, #0]
 801b994:	f002 ffb4 	bl	801e900 <RegionUS915ApplyCFList>
        }
    }
}
 801b998:	bf00      	nop
 801b99a:	3708      	adds	r7, #8
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}

0801b9a0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b082      	sub	sp, #8
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	4603      	mov	r3, r0
 801b9a8:	6039      	str	r1, [r7, #0]
 801b9aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801b9ac:	79fb      	ldrb	r3, [r7, #7]
 801b9ae:	2b05      	cmp	r3, #5
 801b9b0:	d002      	beq.n	801b9b8 <RegionChanMaskSet+0x18>
 801b9b2:	2b08      	cmp	r3, #8
 801b9b4:	d005      	beq.n	801b9c2 <RegionChanMaskSet+0x22>
 801b9b6:	e009      	b.n	801b9cc <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801b9b8:	6838      	ldr	r0, [r7, #0]
 801b9ba:	f001 fdc7 	bl	801d54c <RegionEU868ChanMaskSet>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	e005      	b.n	801b9ce <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 801b9c2:	6838      	ldr	r0, [r7, #0]
 801b9c4:	f003 f80e 	bl	801e9e4 <RegionUS915ChanMaskSet>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	e000      	b.n	801b9ce <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801b9cc:	2300      	movs	r3, #0
        }
    }
}
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	3708      	adds	r7, #8
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	bd80      	pop	{r7, pc}

0801b9d6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801b9d6:	b580      	push	{r7, lr}
 801b9d8:	b082      	sub	sp, #8
 801b9da:	af00      	add	r7, sp, #0
 801b9dc:	603b      	str	r3, [r7, #0]
 801b9de:	4603      	mov	r3, r0
 801b9e0:	71fb      	strb	r3, [r7, #7]
 801b9e2:	460b      	mov	r3, r1
 801b9e4:	71bb      	strb	r3, [r7, #6]
 801b9e6:	4613      	mov	r3, r2
 801b9e8:	717b      	strb	r3, [r7, #5]
    switch( region )
 801b9ea:	79fb      	ldrb	r3, [r7, #7]
 801b9ec:	2b05      	cmp	r3, #5
 801b9ee:	d002      	beq.n	801b9f6 <RegionComputeRxWindowParameters+0x20>
 801b9f0:	2b08      	cmp	r3, #8
 801b9f2:	d008      	beq.n	801ba06 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801b9f4:	e00e      	b.n	801ba14 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801b9f6:	7979      	ldrb	r1, [r7, #5]
 801b9f8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801b9fc:	693b      	ldr	r3, [r7, #16]
 801b9fe:	683a      	ldr	r2, [r7, #0]
 801ba00:	f001 fdce 	bl	801d5a0 <RegionEU868ComputeRxWindowParameters>
 801ba04:	e006      	b.n	801ba14 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801ba06:	7979      	ldrb	r1, [r7, #5]
 801ba08:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801ba0c:	693b      	ldr	r3, [r7, #16]
 801ba0e:	683a      	ldr	r2, [r7, #0]
 801ba10:	f003 f850 	bl	801eab4 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 801ba14:	bf00      	nop
 801ba16:	3708      	adds	r7, #8
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}

0801ba1c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b084      	sub	sp, #16
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	4603      	mov	r3, r0
 801ba24:	60b9      	str	r1, [r7, #8]
 801ba26:	607a      	str	r2, [r7, #4]
 801ba28:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801ba2a:	7bfb      	ldrb	r3, [r7, #15]
 801ba2c:	2b05      	cmp	r3, #5
 801ba2e:	d002      	beq.n	801ba36 <RegionRxConfig+0x1a>
 801ba30:	2b08      	cmp	r3, #8
 801ba32:	d006      	beq.n	801ba42 <RegionRxConfig+0x26>
 801ba34:	e00b      	b.n	801ba4e <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801ba36:	6879      	ldr	r1, [r7, #4]
 801ba38:	68b8      	ldr	r0, [r7, #8]
 801ba3a:	f001 fe0b 	bl	801d654 <RegionEU868RxConfig>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	e006      	b.n	801ba50 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 801ba42:	6879      	ldr	r1, [r7, #4]
 801ba44:	68b8      	ldr	r0, [r7, #8]
 801ba46:	f003 f87f 	bl	801eb48 <RegionUS915RxConfig>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	e000      	b.n	801ba50 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801ba4e:	2300      	movs	r3, #0
        }
    }
}
 801ba50:	4618      	mov	r0, r3
 801ba52:	3710      	adds	r7, #16
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}

0801ba58 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b084      	sub	sp, #16
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	60b9      	str	r1, [r7, #8]
 801ba60:	607a      	str	r2, [r7, #4]
 801ba62:	603b      	str	r3, [r7, #0]
 801ba64:	4603      	mov	r3, r0
 801ba66:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801ba68:	7bfb      	ldrb	r3, [r7, #15]
 801ba6a:	2b05      	cmp	r3, #5
 801ba6c:	d002      	beq.n	801ba74 <RegionTxConfig+0x1c>
 801ba6e:	2b08      	cmp	r3, #8
 801ba70:	d007      	beq.n	801ba82 <RegionTxConfig+0x2a>
 801ba72:	e00d      	b.n	801ba90 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801ba74:	683a      	ldr	r2, [r7, #0]
 801ba76:	6879      	ldr	r1, [r7, #4]
 801ba78:	68b8      	ldr	r0, [r7, #8]
 801ba7a:	f001 febb 	bl	801d7f4 <RegionEU868TxConfig>
 801ba7e:	4603      	mov	r3, r0
 801ba80:	e007      	b.n	801ba92 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 801ba82:	683a      	ldr	r2, [r7, #0]
 801ba84:	6879      	ldr	r1, [r7, #4]
 801ba86:	68b8      	ldr	r0, [r7, #8]
 801ba88:	f003 f8e2 	bl	801ec50 <RegionUS915TxConfig>
 801ba8c:	4603      	mov	r3, r0
 801ba8e:	e000      	b.n	801ba92 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801ba90:	2300      	movs	r3, #0
        }
    }
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	3710      	adds	r7, #16
 801ba96:	46bd      	mov	sp, r7
 801ba98:	bd80      	pop	{r7, pc}

0801ba9a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801ba9a:	b580      	push	{r7, lr}
 801ba9c:	b086      	sub	sp, #24
 801ba9e:	af02      	add	r7, sp, #8
 801baa0:	60b9      	str	r1, [r7, #8]
 801baa2:	607a      	str	r2, [r7, #4]
 801baa4:	603b      	str	r3, [r7, #0]
 801baa6:	4603      	mov	r3, r0
 801baa8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801baaa:	7bfb      	ldrb	r3, [r7, #15]
 801baac:	2b05      	cmp	r3, #5
 801baae:	d002      	beq.n	801bab6 <RegionLinkAdrReq+0x1c>
 801bab0:	2b08      	cmp	r3, #8
 801bab2:	d00a      	beq.n	801baca <RegionLinkAdrReq+0x30>
 801bab4:	e013      	b.n	801bade <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801bab6:	69fb      	ldr	r3, [r7, #28]
 801bab8:	9300      	str	r3, [sp, #0]
 801baba:	69bb      	ldr	r3, [r7, #24]
 801babc:	683a      	ldr	r2, [r7, #0]
 801babe:	6879      	ldr	r1, [r7, #4]
 801bac0:	68b8      	ldr	r0, [r7, #8]
 801bac2:	f001 ff67 	bl	801d994 <RegionEU868LinkAdrReq>
 801bac6:	4603      	mov	r3, r0
 801bac8:	e00a      	b.n	801bae0 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801baca:	69fb      	ldr	r3, [r7, #28]
 801bacc:	9300      	str	r3, [sp, #0]
 801bace:	69bb      	ldr	r3, [r7, #24]
 801bad0:	683a      	ldr	r2, [r7, #0]
 801bad2:	6879      	ldr	r1, [r7, #4]
 801bad4:	68b8      	ldr	r0, [r7, #8]
 801bad6:	f003 f965 	bl	801eda4 <RegionUS915LinkAdrReq>
 801bada:	4603      	mov	r3, r0
 801badc:	e000      	b.n	801bae0 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801bade:	2300      	movs	r3, #0
        }
    }
}
 801bae0:	4618      	mov	r0, r3
 801bae2:	3710      	adds	r7, #16
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}

0801bae8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b082      	sub	sp, #8
 801baec:	af00      	add	r7, sp, #0
 801baee:	4603      	mov	r3, r0
 801baf0:	6039      	str	r1, [r7, #0]
 801baf2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801baf4:	79fb      	ldrb	r3, [r7, #7]
 801baf6:	2b05      	cmp	r3, #5
 801baf8:	d002      	beq.n	801bb00 <RegionRxParamSetupReq+0x18>
 801bafa:	2b08      	cmp	r3, #8
 801bafc:	d005      	beq.n	801bb0a <RegionRxParamSetupReq+0x22>
 801bafe:	e009      	b.n	801bb14 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801bb00:	6838      	ldr	r0, [r7, #0]
 801bb02:	f002 f869 	bl	801dbd8 <RegionEU868RxParamSetupReq>
 801bb06:	4603      	mov	r3, r0
 801bb08:	e005      	b.n	801bb16 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801bb0a:	6838      	ldr	r0, [r7, #0]
 801bb0c:	f003 fb64 	bl	801f1d8 <RegionUS915RxParamSetupReq>
 801bb10:	4603      	mov	r3, r0
 801bb12:	e000      	b.n	801bb16 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801bb14:	2300      	movs	r3, #0
        }
    }
}
 801bb16:	4618      	mov	r0, r3
 801bb18:	3708      	adds	r7, #8
 801bb1a:	46bd      	mov	sp, r7
 801bb1c:	bd80      	pop	{r7, pc}

0801bb1e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801bb1e:	b580      	push	{r7, lr}
 801bb20:	b082      	sub	sp, #8
 801bb22:	af00      	add	r7, sp, #0
 801bb24:	4603      	mov	r3, r0
 801bb26:	6039      	str	r1, [r7, #0]
 801bb28:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801bb2a:	79fb      	ldrb	r3, [r7, #7]
 801bb2c:	2b05      	cmp	r3, #5
 801bb2e:	d002      	beq.n	801bb36 <RegionNewChannelReq+0x18>
 801bb30:	2b08      	cmp	r3, #8
 801bb32:	d005      	beq.n	801bb40 <RegionNewChannelReq+0x22>
 801bb34:	e009      	b.n	801bb4a <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801bb36:	6838      	ldr	r0, [r7, #0]
 801bb38:	f002 f88c 	bl	801dc54 <RegionEU868NewChannelReq>
 801bb3c:	4603      	mov	r3, r0
 801bb3e:	e005      	b.n	801bb4c <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 801bb40:	6838      	ldr	r0, [r7, #0]
 801bb42:	f003 fb95 	bl	801f270 <RegionUS915NewChannelReq>
 801bb46:	4603      	mov	r3, r0
 801bb48:	e000      	b.n	801bb4c <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801bb4a:	2300      	movs	r3, #0
        }
    }
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	3708      	adds	r7, #8
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}

0801bb54 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b082      	sub	sp, #8
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	6039      	str	r1, [r7, #0]
 801bb5e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801bb60:	79fb      	ldrb	r3, [r7, #7]
 801bb62:	2b05      	cmp	r3, #5
 801bb64:	d002      	beq.n	801bb6c <RegionTxParamSetupReq+0x18>
 801bb66:	2b08      	cmp	r3, #8
 801bb68:	d005      	beq.n	801bb76 <RegionTxParamSetupReq+0x22>
 801bb6a:	e009      	b.n	801bb80 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801bb6c:	6838      	ldr	r0, [r7, #0]
 801bb6e:	f002 f8cf 	bl	801dd10 <RegionEU868TxParamSetupReq>
 801bb72:	4603      	mov	r3, r0
 801bb74:	e005      	b.n	801bb82 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 801bb76:	6838      	ldr	r0, [r7, #0]
 801bb78:	f003 fb85 	bl	801f286 <RegionUS915TxParamSetupReq>
 801bb7c:	4603      	mov	r3, r0
 801bb7e:	e000      	b.n	801bb82 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801bb80:	2300      	movs	r3, #0
        }
    }
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	3708      	adds	r7, #8
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd80      	pop	{r7, pc}

0801bb8a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801bb8a:	b580      	push	{r7, lr}
 801bb8c:	b082      	sub	sp, #8
 801bb8e:	af00      	add	r7, sp, #0
 801bb90:	4603      	mov	r3, r0
 801bb92:	6039      	str	r1, [r7, #0]
 801bb94:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801bb96:	79fb      	ldrb	r3, [r7, #7]
 801bb98:	2b05      	cmp	r3, #5
 801bb9a:	d002      	beq.n	801bba2 <RegionDlChannelReq+0x18>
 801bb9c:	2b08      	cmp	r3, #8
 801bb9e:	d005      	beq.n	801bbac <RegionDlChannelReq+0x22>
 801bba0:	e009      	b.n	801bbb6 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801bba2:	6838      	ldr	r0, [r7, #0]
 801bba4:	f002 f8c0 	bl	801dd28 <RegionEU868DlChannelReq>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	e005      	b.n	801bbb8 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801bbac:	6838      	ldr	r0, [r7, #0]
 801bbae:	f003 fb75 	bl	801f29c <RegionUS915DlChannelReq>
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	e000      	b.n	801bbb8 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801bbb6:	2300      	movs	r3, #0
        }
    }
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3708      	adds	r7, #8
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}

0801bbc0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b082      	sub	sp, #8
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	71fb      	strb	r3, [r7, #7]
 801bbca:	460b      	mov	r3, r1
 801bbcc:	71bb      	strb	r3, [r7, #6]
 801bbce:	4613      	mov	r3, r2
 801bbd0:	717b      	strb	r3, [r7, #5]
    switch( region )
 801bbd2:	79fb      	ldrb	r3, [r7, #7]
 801bbd4:	2b05      	cmp	r3, #5
 801bbd6:	d002      	beq.n	801bbde <RegionAlternateDr+0x1e>
 801bbd8:	2b08      	cmp	r3, #8
 801bbda:	d009      	beq.n	801bbf0 <RegionAlternateDr+0x30>
 801bbdc:	e011      	b.n	801bc02 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801bbde:	797a      	ldrb	r2, [r7, #5]
 801bbe0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bbe4:	4611      	mov	r1, r2
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	f002 f8e8 	bl	801ddbc <RegionEU868AlternateDr>
 801bbec:	4603      	mov	r3, r0
 801bbee:	e009      	b.n	801bc04 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 801bbf0:	797a      	ldrb	r2, [r7, #5]
 801bbf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bbf6:	4611      	mov	r1, r2
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	f003 fb5b 	bl	801f2b4 <RegionUS915AlternateDr>
 801bbfe:	4603      	mov	r3, r0
 801bc00:	e000      	b.n	801bc04 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801bc02:	2300      	movs	r3, #0
        }
    }
}
 801bc04:	4618      	mov	r0, r3
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}

0801bc0c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	60b9      	str	r1, [r7, #8]
 801bc14:	607a      	str	r2, [r7, #4]
 801bc16:	603b      	str	r3, [r7, #0]
 801bc18:	4603      	mov	r3, r0
 801bc1a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801bc1c:	7bfb      	ldrb	r3, [r7, #15]
 801bc1e:	2b05      	cmp	r3, #5
 801bc20:	d002      	beq.n	801bc28 <RegionNextChannel+0x1c>
 801bc22:	2b08      	cmp	r3, #8
 801bc24:	d008      	beq.n	801bc38 <RegionNextChannel+0x2c>
 801bc26:	e00f      	b.n	801bc48 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801bc28:	69bb      	ldr	r3, [r7, #24]
 801bc2a:	683a      	ldr	r2, [r7, #0]
 801bc2c:	6879      	ldr	r1, [r7, #4]
 801bc2e:	68b8      	ldr	r0, [r7, #8]
 801bc30:	f002 f8d4 	bl	801dddc <RegionEU868NextChannel>
 801bc34:	4603      	mov	r3, r0
 801bc36:	e008      	b.n	801bc4a <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801bc38:	69bb      	ldr	r3, [r7, #24]
 801bc3a:	683a      	ldr	r2, [r7, #0]
 801bc3c:	6879      	ldr	r1, [r7, #4]
 801bc3e:	68b8      	ldr	r0, [r7, #8]
 801bc40:	f003 fb6e 	bl	801f320 <RegionUS915NextChannel>
 801bc44:	4603      	mov	r3, r0
 801bc46:	e000      	b.n	801bc4a <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801bc48:	2309      	movs	r3, #9
        }
    }
}
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	3710      	adds	r7, #16
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}

0801bc52 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801bc52:	b590      	push	{r4, r7, lr}
 801bc54:	b083      	sub	sp, #12
 801bc56:	af00      	add	r7, sp, #0
 801bc58:	4604      	mov	r4, r0
 801bc5a:	4608      	mov	r0, r1
 801bc5c:	4611      	mov	r1, r2
 801bc5e:	461a      	mov	r2, r3
 801bc60:	4623      	mov	r3, r4
 801bc62:	71fb      	strb	r3, [r7, #7]
 801bc64:	4603      	mov	r3, r0
 801bc66:	71bb      	strb	r3, [r7, #6]
 801bc68:	460b      	mov	r3, r1
 801bc6a:	717b      	strb	r3, [r7, #5]
 801bc6c:	4613      	mov	r3, r2
 801bc6e:	713b      	strb	r3, [r7, #4]
    switch( region )
 801bc70:	79fb      	ldrb	r3, [r7, #7]
 801bc72:	2b05      	cmp	r3, #5
 801bc74:	d002      	beq.n	801bc7c <RegionApplyDrOffset+0x2a>
 801bc76:	2b08      	cmp	r3, #8
 801bc78:	d00a      	beq.n	801bc90 <RegionApplyDrOffset+0x3e>
 801bc7a:	e013      	b.n	801bca4 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801bc7c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801bc80:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801bc84:	79bb      	ldrb	r3, [r7, #6]
 801bc86:	4618      	mov	r0, r3
 801bc88:	f002 fa22 	bl	801e0d0 <RegionEU868ApplyDrOffset>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	e00a      	b.n	801bca6 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 801bc90:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801bc94:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801bc98:	79bb      	ldrb	r3, [r7, #6]
 801bc9a:	4618      	mov	r0, r3
 801bc9c:	f003 fc2e 	bl	801f4fc <RegionUS915ApplyDrOffset>
 801bca0:	4603      	mov	r3, r0
 801bca2:	e000      	b.n	801bca6 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801bca4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	370c      	adds	r7, #12
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bd90      	pop	{r4, r7, pc}

0801bcae <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801bcae:	b580      	push	{r7, lr}
 801bcb0:	b084      	sub	sp, #16
 801bcb2:	af00      	add	r7, sp, #0
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	60b9      	str	r1, [r7, #8]
 801bcb8:	607a      	str	r2, [r7, #4]
 801bcba:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801bcbc:	7bfb      	ldrb	r3, [r7, #15]
 801bcbe:	2b05      	cmp	r3, #5
 801bcc0:	d002      	beq.n	801bcc8 <RegionRxBeaconSetup+0x1a>
 801bcc2:	2b08      	cmp	r3, #8
 801bcc4:	d005      	beq.n	801bcd2 <RegionRxBeaconSetup+0x24>
        IN865_RX_BEACON_SETUP( );
        US915_RX_BEACON_SETUP( );
        RU864_RX_BEACON_SETUP( );
        default:
        {
            break;
 801bcc6:	e008      	b.n	801bcda <RegionRxBeaconSetup+0x2c>
        EU868_RX_BEACON_SETUP( );
 801bcc8:	6879      	ldr	r1, [r7, #4]
 801bcca:	68b8      	ldr	r0, [r7, #8]
 801bccc:	f002 fa1a 	bl	801e104 <RegionEU868RxBeaconSetup>
 801bcd0:	e003      	b.n	801bcda <RegionRxBeaconSetup+0x2c>
        US915_RX_BEACON_SETUP( );
 801bcd2:	6879      	ldr	r1, [r7, #4]
 801bcd4:	68b8      	ldr	r0, [r7, #8]
 801bcd6:	f003 fc33 	bl	801f540 <RegionUS915RxBeaconSetup>
        }
    }
}
 801bcda:	bf00      	nop
 801bcdc:	3710      	adds	r7, #16
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}
	...

0801bce4 <RegionGetVersion>:

Version_t RegionGetVersion( void )
{
 801bce4:	b480      	push	{r7}
 801bce6:	b083      	sub	sp, #12
 801bce8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801bcea:	4b04      	ldr	r3, [pc, #16]	@ (801bcfc <RegionGetVersion+0x18>)
 801bcec:	607b      	str	r3, [r7, #4]

    return version;
 801bcee:	687b      	ldr	r3, [r7, #4]
}
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	370c      	adds	r7, #12
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	bc80      	pop	{r7}
 801bcf8:	4770      	bx	lr
 801bcfa:	bf00      	nop
 801bcfc:	02010001 	.word	0x02010001

0801bd00 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 801bd00:	b480      	push	{r7}
 801bd02:	b087      	sub	sp, #28
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	4603      	mov	r3, r0
 801bd08:	60b9      	str	r1, [r7, #8]
 801bd0a:	607a      	str	r2, [r7, #4]
 801bd0c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801bd0e:	68bb      	ldr	r3, [r7, #8]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d002      	beq.n	801bd1a <FindAvailable125kHzChannels+0x1a>
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d101      	bne.n	801bd1e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801bd1a:	2303      	movs	r3, #3
 801bd1c:	e021      	b.n	801bd62 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	2200      	movs	r2, #0
 801bd22:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801bd24:	2300      	movs	r3, #0
 801bd26:	75fb      	strb	r3, [r7, #23]
 801bd28:	e017      	b.n	801bd5a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801bd2a:	89fa      	ldrh	r2, [r7, #14]
 801bd2c:	7dfb      	ldrb	r3, [r7, #23]
 801bd2e:	fa42 f303 	asr.w	r3, r2, r3
 801bd32:	f003 0301 	and.w	r3, r3, #1
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d00c      	beq.n	801bd54 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	461a      	mov	r2, r3
 801bd40:	68bb      	ldr	r3, [r7, #8]
 801bd42:	4413      	add	r3, r2
 801bd44:	7dfa      	ldrb	r2, [r7, #23]
 801bd46:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	781b      	ldrb	r3, [r3, #0]
 801bd4c:	3301      	adds	r3, #1
 801bd4e:	b2da      	uxtb	r2, r3
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801bd54:	7dfb      	ldrb	r3, [r7, #23]
 801bd56:	3301      	adds	r3, #1
 801bd58:	75fb      	strb	r3, [r7, #23]
 801bd5a:	7dfb      	ldrb	r3, [r7, #23]
 801bd5c:	2b07      	cmp	r3, #7
 801bd5e:	d9e4      	bls.n	801bd2a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801bd60:	2300      	movs	r3, #0
}
 801bd62:	4618      	mov	r0, r3
 801bd64:	371c      	adds	r7, #28
 801bd66:	46bd      	mov	sp, r7
 801bd68:	bc80      	pop	{r7}
 801bd6a:	4770      	bx	lr

0801bd6c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801bd6c:	b590      	push	{r4, r7, lr}
 801bd6e:	b089      	sub	sp, #36	@ 0x24
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	60f8      	str	r0, [r7, #12]
 801bd74:	60b9      	str	r1, [r7, #8]
 801bd76:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801bd78:	2300      	movs	r3, #0
 801bd7a:	617b      	str	r3, [r7, #20]
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801bd80:	2300      	movs	r3, #0
 801bd82:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d005      	beq.n	801bd96 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d002      	beq.n	801bd96 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d101      	bne.n	801bd9a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801bd96:	2303      	movs	r3, #3
 801bd98:	e055      	b.n	801be46 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801bd9a:	68bb      	ldr	r3, [r7, #8]
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801bda0:	7f7b      	ldrb	r3, [r7, #29]
 801bda2:	085b      	lsrs	r3, r3, #1
 801bda4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801bda6:	7f7b      	ldrb	r3, [r7, #29]
 801bda8:	f003 0301 	and.w	r3, r3, #1
 801bdac:	b2db      	uxtb	r3, r3
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d107      	bne.n	801bdc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801bdb2:	7f3b      	ldrb	r3, [r7, #28]
 801bdb4:	005b      	lsls	r3, r3, #1
 801bdb6:	68fa      	ldr	r2, [r7, #12]
 801bdb8:	4413      	add	r3, r2
 801bdba:	881b      	ldrh	r3, [r3, #0]
 801bdbc:	b2db      	uxtb	r3, r3
 801bdbe:	83fb      	strh	r3, [r7, #30]
 801bdc0:	e006      	b.n	801bdd0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801bdc2:	7f3b      	ldrb	r3, [r7, #28]
 801bdc4:	005b      	lsls	r3, r3, #1
 801bdc6:	68fa      	ldr	r2, [r7, #12]
 801bdc8:	4413      	add	r3, r2
 801bdca:	881b      	ldrh	r3, [r3, #0]
 801bdcc:	0a1b      	lsrs	r3, r3, #8
 801bdce:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801bdd0:	f107 0213 	add.w	r2, r7, #19
 801bdd4:	f107 0114 	add.w	r1, r7, #20
 801bdd8:	8bfb      	ldrh	r3, [r7, #30]
 801bdda:	4618      	mov	r0, r3
 801bddc:	f7ff ff90 	bl	801bd00 <FindAvailable125kHzChannels>
 801bde0:	4603      	mov	r3, r0
 801bde2:	2b03      	cmp	r3, #3
 801bde4:	d101      	bne.n	801bdea <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801bde6:	2303      	movs	r3, #3
 801bde8:	e02d      	b.n	801be46 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801bdea:	7cfb      	ldrb	r3, [r7, #19]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d011      	beq.n	801be14 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801bdf0:	7f7b      	ldrb	r3, [r7, #29]
 801bdf2:	00db      	lsls	r3, r3, #3
 801bdf4:	b2dc      	uxtb	r4, r3
 801bdf6:	7cfb      	ldrb	r3, [r7, #19]
 801bdf8:	3b01      	subs	r3, #1
 801bdfa:	4619      	mov	r1, r3
 801bdfc:	2000      	movs	r0, #0
 801bdfe:	f003 fbf3 	bl	801f5e8 <randr>
 801be02:	4603      	mov	r3, r0
 801be04:	3320      	adds	r3, #32
 801be06:	443b      	add	r3, r7
 801be08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801be0c:	4423      	add	r3, r4
 801be0e:	b2da      	uxtb	r2, r3
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801be14:	7f7b      	ldrb	r3, [r7, #29]
 801be16:	3301      	adds	r3, #1
 801be18:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801be1a:	7f7b      	ldrb	r3, [r7, #29]
 801be1c:	2b07      	cmp	r3, #7
 801be1e:	d901      	bls.n	801be24 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 801be20:	2300      	movs	r3, #0
 801be22:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 801be24:	7cfb      	ldrb	r3, [r7, #19]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d104      	bne.n	801be34 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	781b      	ldrb	r3, [r3, #0]
 801be2e:	7f7a      	ldrb	r2, [r7, #29]
 801be30:	429a      	cmp	r2, r3
 801be32:	d1b5      	bne.n	801bda0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 801be34:	7cfb      	ldrb	r3, [r7, #19]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d004      	beq.n	801be44 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801be3a:	68bb      	ldr	r3, [r7, #8]
 801be3c:	7f7a      	ldrb	r2, [r7, #29]
 801be3e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801be40:	2300      	movs	r3, #0
 801be42:	e000      	b.n	801be46 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801be44:	2303      	movs	r3, #3
}
 801be46:	4618      	mov	r0, r3
 801be48:	3724      	adds	r7, #36	@ 0x24
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bd90      	pop	{r4, r7, pc}

0801be4e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801be4e:	b480      	push	{r7}
 801be50:	b085      	sub	sp, #20
 801be52:	af00      	add	r7, sp, #0
 801be54:	4603      	mov	r3, r0
 801be56:	60b9      	str	r1, [r7, #8]
 801be58:	607a      	str	r2, [r7, #4]
 801be5a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801be5c:	7bfb      	ldrb	r3, [r7, #15]
 801be5e:	687a      	ldr	r2, [r7, #4]
 801be60:	fb03 f202 	mul.w	r2, r3, r2
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	4413      	add	r3, r2
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3714      	adds	r7, #20
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bc80      	pop	{r7}
 801be70:	4770      	bx	lr

0801be72 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801be72:	b480      	push	{r7}
 801be74:	b087      	sub	sp, #28
 801be76:	af00      	add	r7, sp, #0
 801be78:	60f8      	str	r0, [r7, #12]
 801be7a:	4608      	mov	r0, r1
 801be7c:	4639      	mov	r1, r7
 801be7e:	e881 000c 	stmia.w	r1, {r2, r3}
 801be82:	4603      	mov	r3, r0
 801be84:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	881b      	ldrh	r3, [r3, #0]
 801be8a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801be8c:	7afb      	ldrb	r3, [r7, #11]
 801be8e:	f083 0301 	eor.w	r3, r3, #1
 801be92:	b2db      	uxtb	r3, r3
 801be94:	2b00      	cmp	r3, #0
 801be96:	d01b      	beq.n	801bed0 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801be98:	f242 7310 	movw	r3, #10000	@ 0x2710
 801be9c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801be9e:	683b      	ldr	r3, [r7, #0]
 801bea0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801bea4:	d202      	bcs.n	801beac <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801bea6:	2364      	movs	r3, #100	@ 0x64
 801bea8:	82bb      	strh	r3, [r7, #20]
 801beaa:	e00b      	b.n	801bec4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801beb2:	4293      	cmp	r3, r2
 801beb4:	d803      	bhi.n	801bebe <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801beb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801beba:	82bb      	strh	r3, [r7, #20]
 801bebc:	e002      	b.n	801bec4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801bebe:	f242 7310 	movw	r3, #10000	@ 0x2710
 801bec2:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801bec4:	8aba      	ldrh	r2, [r7, #20]
 801bec6:	8afb      	ldrh	r3, [r7, #22]
 801bec8:	4293      	cmp	r3, r2
 801beca:	bf38      	it	cc
 801becc:	4613      	movcc	r3, r2
 801bece:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801bed0:	8afb      	ldrh	r3, [r7, #22]
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d101      	bne.n	801beda <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801bed6:	2301      	movs	r3, #1
 801bed8:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801beda:	8afb      	ldrh	r3, [r7, #22]
}
 801bedc:	4618      	mov	r0, r3
 801bede:	371c      	adds	r7, #28
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bc80      	pop	{r7}
 801bee4:	4770      	bx	lr
	...

0801bee8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b08e      	sub	sp, #56	@ 0x38
 801beec:	af02      	add	r7, sp, #8
 801beee:	60f8      	str	r0, [r7, #12]
 801bef0:	4608      	mov	r0, r1
 801bef2:	4639      	mov	r1, r7
 801bef4:	e881 000c 	stmia.w	r1, {r2, r3}
 801bef8:	4603      	mov	r3, r0
 801befa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	881b      	ldrh	r3, [r3, #0]
 801bf00:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801bf02:	4b4b      	ldr	r3, [pc, #300]	@ (801c030 <SetMaxTimeCredits+0x148>)
 801bf04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801bf06:	463b      	mov	r3, r7
 801bf08:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bf0c:	f007 f80c 	bl	8022f28 <SysTimeToMs>
 801bf10:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801bf12:	f107 0314 	add.w	r3, r7, #20
 801bf16:	2200      	movs	r2, #0
 801bf18:	601a      	str	r2, [r3, #0]
 801bf1a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801bf1c:	7af9      	ldrb	r1, [r7, #11]
 801bf1e:	463b      	mov	r3, r7
 801bf20:	cb0c      	ldmia	r3, {r2, r3}
 801bf22:	68f8      	ldr	r0, [r7, #12]
 801bf24:	f7ff ffa5 	bl	801be72 <GetDutyCycle>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 801bf2c:	7afb      	ldrb	r3, [r7, #11]
 801bf2e:	f083 0301 	eor.w	r3, r3, #1
 801bf32:	b2db      	uxtb	r3, r3
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d062      	beq.n	801bffe <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801bf38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bf3a:	2b64      	cmp	r3, #100	@ 0x64
 801bf3c:	d105      	bne.n	801bf4a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801bf3e:	4b3c      	ldr	r3, [pc, #240]	@ (801c030 <SetMaxTimeCredits+0x148>)
 801bf40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf46:	609a      	str	r2, [r3, #8]
 801bf48:	e00b      	b.n	801bf62 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801bf4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bf4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bf50:	d105      	bne.n	801bf5e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801bf52:	4b38      	ldr	r3, [pc, #224]	@ (801c034 <SetMaxTimeCredits+0x14c>)
 801bf54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf5a:	609a      	str	r2, [r3, #8]
 801bf5c:	e001      	b.n	801bf62 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801bf5e:	4b36      	ldr	r3, [pc, #216]	@ (801c038 <SetMaxTimeCredits+0x150>)
 801bf60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	689a      	ldr	r2, [r3, #8]
 801bf66:	f107 031c 	add.w	r3, r7, #28
 801bf6a:	4611      	mov	r1, r2
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f007 f803 	bl	8022f78 <SysTimeFromMs>
 801bf72:	f107 0014 	add.w	r0, r7, #20
 801bf76:	6a3b      	ldr	r3, [r7, #32]
 801bf78:	9300      	str	r3, [sp, #0]
 801bf7a:	69fb      	ldr	r3, [r7, #28]
 801bf7c:	463a      	mov	r2, r7
 801bf7e:	ca06      	ldmia	r2, {r1, r2}
 801bf80:	f006 ff13 	bl	8022daa <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801bf84:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801bf88:	f083 0301 	eor.w	r3, r3, #1
 801bf8c:	b2db      	uxtb	r3, r3
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d006      	beq.n	801bfa0 <SetMaxTimeCredits+0xb8>
 801bf92:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801bf96:	f083 0301 	eor.w	r3, r3, #1
 801bf9a:	b2db      	uxtb	r3, r3
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d108      	bne.n	801bfb2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801bfa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bfa6:	429a      	cmp	r2, r3
 801bfa8:	d103      	bne.n	801bfb2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801bfaa:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801bfac:	4a23      	ldr	r2, [pc, #140]	@ (801c03c <SetMaxTimeCredits+0x154>)
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	d92f      	bls.n	801c012 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bfb6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	4a21      	ldr	r2, [pc, #132]	@ (801c040 <SetMaxTimeCredits+0x158>)
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	d928      	bls.n	801c012 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801bfc6:	3b30      	subs	r3, #48	@ 0x30
 801bfc8:	4a1e      	ldr	r2, [pc, #120]	@ (801c044 <SetMaxTimeCredits+0x15c>)
 801bfca:	fba2 2303 	umull	r2, r3, r2, r3
 801bfce:	0c1b      	lsrs	r3, r3, #16
 801bfd0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	4a1c      	ldr	r2, [pc, #112]	@ (801c048 <SetMaxTimeCredits+0x160>)
 801bfd6:	fb02 f303 	mul.w	r3, r2, r3
 801bfda:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801bfe2:	3330      	adds	r3, #48	@ 0x30
 801bfe4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801bfea:	f107 0314 	add.w	r3, r7, #20
 801bfee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bff2:	f006 ff99 	bl	8022f28 <SysTimeToMs>
 801bff6:	4602      	mov	r2, r0
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	609a      	str	r2, [r3, #8]
 801bffc:	e009      	b.n	801c012 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801bffe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801c002:	f083 0301 	eor.w	r3, r3, #1
 801c006:	b2db      	uxtb	r3, r3
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d002      	beq.n	801c012 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c010:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	685b      	ldr	r3, [r3, #4]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d102      	bne.n	801c020 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c01e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c024:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801c026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 801c028:	4618      	mov	r0, r3
 801c02a:	3730      	adds	r7, #48	@ 0x30
 801c02c:	46bd      	mov	sp, r7
 801c02e:	bd80      	pop	{r7, pc}
 801c030:	001b7740 	.word	0x001b7740
 801c034:	0112a880 	.word	0x0112a880
 801c038:	02932e00 	.word	0x02932e00
 801c03c:	0001517f 	.word	0x0001517f
 801c040:	0001ec2f 	.word	0x0001ec2f
 801c044:	c22e4507 	.word	0xc22e4507
 801c048:	00015180 	.word	0x00015180

0801c04c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b086      	sub	sp, #24
 801c050:	af02      	add	r7, sp, #8
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	4608      	mov	r0, r1
 801c056:	4611      	mov	r1, r2
 801c058:	461a      	mov	r2, r3
 801c05a:	4603      	mov	r3, r0
 801c05c:	70fb      	strb	r3, [r7, #3]
 801c05e:	460b      	mov	r3, r1
 801c060:	70bb      	strb	r3, [r7, #2]
 801c062:	4613      	mov	r3, r2
 801c064:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801c066:	78f9      	ldrb	r1, [r7, #3]
 801c068:	787b      	ldrb	r3, [r7, #1]
 801c06a:	9301      	str	r3, [sp, #4]
 801c06c:	78bb      	ldrb	r3, [r7, #2]
 801c06e:	9300      	str	r3, [sp, #0]
 801c070:	f107 0318 	add.w	r3, r7, #24
 801c074:	cb0c      	ldmia	r3, {r2, r3}
 801c076:	6878      	ldr	r0, [r7, #4]
 801c078:	f7ff ff36 	bl	801bee8 <SetMaxTimeCredits>
 801c07c:	4603      	mov	r3, r0
 801c07e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801c080:	78fb      	ldrb	r3, [r7, #3]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d00a      	beq.n	801c09c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	4618      	mov	r0, r3
 801c08c:	f008 fb9a 	bl	80247c4 <UTIL_TIMER_GetElapsedTime>
 801c090:	4602      	mov	r2, r0
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	68db      	ldr	r3, [r3, #12]
 801c096:	441a      	add	r2, r3
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	68da      	ldr	r2, [r3, #12]
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	691b      	ldr	r3, [r3, #16]
 801c0a4:	429a      	cmp	r2, r3
 801c0a6:	d903      	bls.n	801c0b0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	691a      	ldr	r2, [r3, #16]
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6a3a      	ldr	r2, [r7, #32]
 801c0b4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801c0b6:	89fb      	ldrh	r3, [r7, #14]
}
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	3710      	adds	r7, #16
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bd80      	pop	{r7, pc}

0801c0c0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801c0c0:	b480      	push	{r7}
 801c0c2:	b085      	sub	sp, #20
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	460a      	mov	r2, r1
 801c0ca:	80fb      	strh	r3, [r7, #6]
 801c0cc:	4613      	mov	r3, r2
 801c0ce:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	73bb      	strb	r3, [r7, #14]
 801c0d8:	e011      	b.n	801c0fe <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801c0da:	88fa      	ldrh	r2, [r7, #6]
 801c0dc:	7bbb      	ldrb	r3, [r7, #14]
 801c0de:	2101      	movs	r1, #1
 801c0e0:	fa01 f303 	lsl.w	r3, r1, r3
 801c0e4:	401a      	ands	r2, r3
 801c0e6:	7bbb      	ldrb	r3, [r7, #14]
 801c0e8:	2101      	movs	r1, #1
 801c0ea:	fa01 f303 	lsl.w	r3, r1, r3
 801c0ee:	429a      	cmp	r2, r3
 801c0f0:	d102      	bne.n	801c0f8 <CountChannels+0x38>
        {
            nbActiveBits++;
 801c0f2:	7bfb      	ldrb	r3, [r7, #15]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801c0f8:	7bbb      	ldrb	r3, [r7, #14]
 801c0fa:	3301      	adds	r3, #1
 801c0fc:	73bb      	strb	r3, [r7, #14]
 801c0fe:	7bba      	ldrb	r2, [r7, #14]
 801c100:	797b      	ldrb	r3, [r7, #5]
 801c102:	429a      	cmp	r2, r3
 801c104:	d3e9      	bcc.n	801c0da <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801c106:	7bfb      	ldrb	r3, [r7, #15]
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3714      	adds	r7, #20
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bc80      	pop	{r7}
 801c110:	4770      	bx	lr

0801c112 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801c112:	b580      	push	{r7, lr}
 801c114:	b084      	sub	sp, #16
 801c116:	af00      	add	r7, sp, #0
 801c118:	6039      	str	r1, [r7, #0]
 801c11a:	4611      	mov	r1, r2
 801c11c:	461a      	mov	r2, r3
 801c11e:	4603      	mov	r3, r0
 801c120:	71fb      	strb	r3, [r7, #7]
 801c122:	460b      	mov	r3, r1
 801c124:	71bb      	strb	r3, [r7, #6]
 801c126:	4613      	mov	r3, r2
 801c128:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801c12a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801c12e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801c132:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c136:	4618      	mov	r0, r3
 801c138:	f000 f85d 	bl	801c1f6 <RegionCommonValueInRange>
 801c13c:	4603      	mov	r3, r0
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d101      	bne.n	801c146 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801c142:	2300      	movs	r3, #0
 801c144:	e053      	b.n	801c1ee <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801c146:	2300      	movs	r3, #0
 801c148:	73fb      	strb	r3, [r7, #15]
 801c14a:	2300      	movs	r3, #0
 801c14c:	73bb      	strb	r3, [r7, #14]
 801c14e:	e049      	b.n	801c1e4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801c150:	2300      	movs	r3, #0
 801c152:	737b      	strb	r3, [r7, #13]
 801c154:	e03d      	b.n	801c1d2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801c156:	7bbb      	ldrb	r3, [r7, #14]
 801c158:	005b      	lsls	r3, r3, #1
 801c15a:	683a      	ldr	r2, [r7, #0]
 801c15c:	4413      	add	r3, r2
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	461a      	mov	r2, r3
 801c162:	7b7b      	ldrb	r3, [r7, #13]
 801c164:	fa42 f303 	asr.w	r3, r2, r3
 801c168:	f003 0301 	and.w	r3, r3, #1
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d02d      	beq.n	801c1cc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801c170:	7bfa      	ldrb	r2, [r7, #15]
 801c172:	7b7b      	ldrb	r3, [r7, #13]
 801c174:	4413      	add	r3, r2
 801c176:	461a      	mov	r2, r3
 801c178:	4613      	mov	r3, r2
 801c17a:	005b      	lsls	r3, r3, #1
 801c17c:	4413      	add	r3, r2
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	461a      	mov	r2, r3
 801c182:	69fb      	ldr	r3, [r7, #28]
 801c184:	4413      	add	r3, r2
 801c186:	7a1b      	ldrb	r3, [r3, #8]
 801c188:	f343 0303 	sbfx	r3, r3, #0, #4
 801c18c:	b25b      	sxtb	r3, r3
 801c18e:	f003 030f 	and.w	r3, r3, #15
 801c192:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801c194:	7bfa      	ldrb	r2, [r7, #15]
 801c196:	7b7b      	ldrb	r3, [r7, #13]
 801c198:	4413      	add	r3, r2
 801c19a:	461a      	mov	r2, r3
 801c19c:	4613      	mov	r3, r2
 801c19e:	005b      	lsls	r3, r3, #1
 801c1a0:	4413      	add	r3, r2
 801c1a2:	009b      	lsls	r3, r3, #2
 801c1a4:	461a      	mov	r2, r3
 801c1a6:	69fb      	ldr	r3, [r7, #28]
 801c1a8:	4413      	add	r3, r2
 801c1aa:	7a1b      	ldrb	r3, [r3, #8]
 801c1ac:	f343 1303 	sbfx	r3, r3, #4, #4
 801c1b0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801c1b2:	f003 030f 	and.w	r3, r3, #15
 801c1b6:	b25a      	sxtb	r2, r3
 801c1b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c1bc:	4618      	mov	r0, r3
 801c1be:	f000 f81a 	bl	801c1f6 <RegionCommonValueInRange>
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	2b01      	cmp	r3, #1
 801c1c6:	d101      	bne.n	801c1cc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801c1c8:	2301      	movs	r3, #1
 801c1ca:	e010      	b.n	801c1ee <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801c1cc:	7b7b      	ldrb	r3, [r7, #13]
 801c1ce:	3301      	adds	r3, #1
 801c1d0:	737b      	strb	r3, [r7, #13]
 801c1d2:	7b7b      	ldrb	r3, [r7, #13]
 801c1d4:	2b0f      	cmp	r3, #15
 801c1d6:	d9be      	bls.n	801c156 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801c1d8:	7bfb      	ldrb	r3, [r7, #15]
 801c1da:	3310      	adds	r3, #16
 801c1dc:	73fb      	strb	r3, [r7, #15]
 801c1de:	7bbb      	ldrb	r3, [r7, #14]
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	73bb      	strb	r3, [r7, #14]
 801c1e4:	7bfa      	ldrb	r2, [r7, #15]
 801c1e6:	79fb      	ldrb	r3, [r7, #7]
 801c1e8:	429a      	cmp	r2, r3
 801c1ea:	d3b1      	bcc.n	801c150 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801c1ec:	2300      	movs	r3, #0
}
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	3710      	adds	r7, #16
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}

0801c1f6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801c1f6:	b480      	push	{r7}
 801c1f8:	b083      	sub	sp, #12
 801c1fa:	af00      	add	r7, sp, #0
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	71fb      	strb	r3, [r7, #7]
 801c200:	460b      	mov	r3, r1
 801c202:	71bb      	strb	r3, [r7, #6]
 801c204:	4613      	mov	r3, r2
 801c206:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801c208:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c20c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c210:	429a      	cmp	r2, r3
 801c212:	db07      	blt.n	801c224 <RegionCommonValueInRange+0x2e>
 801c214:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c218:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801c21c:	429a      	cmp	r2, r3
 801c21e:	dc01      	bgt.n	801c224 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801c220:	2301      	movs	r3, #1
 801c222:	e000      	b.n	801c226 <RegionCommonValueInRange+0x30>
    }
    return 0;
 801c224:	2300      	movs	r3, #0
}
 801c226:	4618      	mov	r0, r3
 801c228:	370c      	adds	r7, #12
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bc80      	pop	{r7}
 801c22e:	4770      	bx	lr

0801c230 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801c230:	b480      	push	{r7}
 801c232:	b085      	sub	sp, #20
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
 801c238:	460b      	mov	r3, r1
 801c23a:	70fb      	strb	r3, [r7, #3]
 801c23c:	4613      	mov	r3, r2
 801c23e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801c240:	78fb      	ldrb	r3, [r7, #3]
 801c242:	091b      	lsrs	r3, r3, #4
 801c244:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801c246:	78bb      	ldrb	r3, [r7, #2]
 801c248:	091b      	lsrs	r3, r3, #4
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	7bfa      	ldrb	r2, [r7, #15]
 801c24e:	429a      	cmp	r2, r3
 801c250:	d803      	bhi.n	801c25a <RegionCommonChanDisable+0x2a>
 801c252:	78fa      	ldrb	r2, [r7, #3]
 801c254:	78bb      	ldrb	r3, [r7, #2]
 801c256:	429a      	cmp	r2, r3
 801c258:	d301      	bcc.n	801c25e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801c25a:	2300      	movs	r3, #0
 801c25c:	e017      	b.n	801c28e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801c25e:	7bfb      	ldrb	r3, [r7, #15]
 801c260:	005b      	lsls	r3, r3, #1
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	4413      	add	r3, r2
 801c266:	881b      	ldrh	r3, [r3, #0]
 801c268:	b21a      	sxth	r2, r3
 801c26a:	78fb      	ldrb	r3, [r7, #3]
 801c26c:	f003 030f 	and.w	r3, r3, #15
 801c270:	2101      	movs	r1, #1
 801c272:	fa01 f303 	lsl.w	r3, r1, r3
 801c276:	b21b      	sxth	r3, r3
 801c278:	43db      	mvns	r3, r3
 801c27a:	b21b      	sxth	r3, r3
 801c27c:	4013      	ands	r3, r2
 801c27e:	b219      	sxth	r1, r3
 801c280:	7bfb      	ldrb	r3, [r7, #15]
 801c282:	005b      	lsls	r3, r3, #1
 801c284:	687a      	ldr	r2, [r7, #4]
 801c286:	4413      	add	r3, r2
 801c288:	b28a      	uxth	r2, r1
 801c28a:	801a      	strh	r2, [r3, #0]

    return true;
 801c28c:	2301      	movs	r3, #1
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3714      	adds	r7, #20
 801c292:	46bd      	mov	sp, r7
 801c294:	bc80      	pop	{r7}
 801c296:	4770      	bx	lr

0801c298 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b084      	sub	sp, #16
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
 801c2a0:	460b      	mov	r3, r1
 801c2a2:	70fb      	strb	r3, [r7, #3]
 801c2a4:	4613      	mov	r3, r2
 801c2a6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801c2a8:	2300      	movs	r3, #0
 801c2aa:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d101      	bne.n	801c2b6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	e018      	b.n	801c2e8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801c2b6:	78fb      	ldrb	r3, [r7, #3]
 801c2b8:	73bb      	strb	r3, [r7, #14]
 801c2ba:	e010      	b.n	801c2de <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801c2bc:	7bbb      	ldrb	r3, [r7, #14]
 801c2be:	005b      	lsls	r3, r3, #1
 801c2c0:	687a      	ldr	r2, [r7, #4]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	881b      	ldrh	r3, [r3, #0]
 801c2c6:	2110      	movs	r1, #16
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f7ff fef9 	bl	801c0c0 <CountChannels>
 801c2ce:	4603      	mov	r3, r0
 801c2d0:	461a      	mov	r2, r3
 801c2d2:	7bfb      	ldrb	r3, [r7, #15]
 801c2d4:	4413      	add	r3, r2
 801c2d6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801c2d8:	7bbb      	ldrb	r3, [r7, #14]
 801c2da:	3301      	adds	r3, #1
 801c2dc:	73bb      	strb	r3, [r7, #14]
 801c2de:	7bba      	ldrb	r2, [r7, #14]
 801c2e0:	78bb      	ldrb	r3, [r7, #2]
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	d3ea      	bcc.n	801c2bc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801c2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	3710      	adds	r7, #16
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}

0801c2f0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801c2f0:	b480      	push	{r7}
 801c2f2:	b087      	sub	sp, #28
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	60f8      	str	r0, [r7, #12]
 801c2f8:	60b9      	str	r1, [r7, #8]
 801c2fa:	4613      	mov	r3, r2
 801c2fc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d016      	beq.n	801c332 <RegionCommonChanMaskCopy+0x42>
 801c304:	68bb      	ldr	r3, [r7, #8]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d013      	beq.n	801c332 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801c30a:	2300      	movs	r3, #0
 801c30c:	75fb      	strb	r3, [r7, #23]
 801c30e:	e00c      	b.n	801c32a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801c310:	7dfb      	ldrb	r3, [r7, #23]
 801c312:	005b      	lsls	r3, r3, #1
 801c314:	68ba      	ldr	r2, [r7, #8]
 801c316:	441a      	add	r2, r3
 801c318:	7dfb      	ldrb	r3, [r7, #23]
 801c31a:	005b      	lsls	r3, r3, #1
 801c31c:	68f9      	ldr	r1, [r7, #12]
 801c31e:	440b      	add	r3, r1
 801c320:	8812      	ldrh	r2, [r2, #0]
 801c322:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801c324:	7dfb      	ldrb	r3, [r7, #23]
 801c326:	3301      	adds	r3, #1
 801c328:	75fb      	strb	r3, [r7, #23]
 801c32a:	7dfa      	ldrb	r2, [r7, #23]
 801c32c:	79fb      	ldrb	r3, [r7, #7]
 801c32e:	429a      	cmp	r2, r3
 801c330:	d3ee      	bcc.n	801c310 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801c332:	bf00      	nop
 801c334:	371c      	adds	r7, #28
 801c336:	46bd      	mov	sp, r7
 801c338:	bc80      	pop	{r7}
 801c33a:	4770      	bx	lr

0801c33c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801c33c:	b082      	sub	sp, #8
 801c33e:	b580      	push	{r7, lr}
 801c340:	b086      	sub	sp, #24
 801c342:	af00      	add	r7, sp, #0
 801c344:	60f8      	str	r0, [r7, #12]
 801c346:	60b9      	str	r1, [r7, #8]
 801c348:	627b      	str	r3, [r7, #36]	@ 0x24
 801c34a:	4613      	mov	r3, r2
 801c34c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801c34e:	79f9      	ldrb	r1, [r7, #7]
 801c350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c354:	cb0c      	ldmia	r3, {r2, r3}
 801c356:	68f8      	ldr	r0, [r7, #12]
 801c358:	f7ff fd8b 	bl	801be72 <GetDutyCycle>
 801c35c:	4603      	mov	r3, r0
 801c35e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	68da      	ldr	r2, [r3, #12]
 801c364:	8afb      	ldrh	r3, [r7, #22]
 801c366:	68b9      	ldr	r1, [r7, #8]
 801c368:	fb01 f303 	mul.w	r3, r1, r3
 801c36c:	429a      	cmp	r2, r3
 801c36e:	d909      	bls.n	801c384 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	68da      	ldr	r2, [r3, #12]
 801c374:	8afb      	ldrh	r3, [r7, #22]
 801c376:	68b9      	ldr	r1, [r7, #8]
 801c378:	fb01 f303 	mul.w	r3, r1, r3
 801c37c:	1ad2      	subs	r2, r2, r3
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801c382:	e002      	b.n	801c38a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	2200      	movs	r2, #0
 801c388:	60da      	str	r2, [r3, #12]
}
 801c38a:	bf00      	nop
 801c38c:	3718      	adds	r7, #24
 801c38e:	46bd      	mov	sp, r7
 801c390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c394:	b002      	add	sp, #8
 801c396:	4770      	bx	lr

0801c398 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801c398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c39a:	b08f      	sub	sp, #60	@ 0x3c
 801c39c:	af04      	add	r7, sp, #16
 801c39e:	6039      	str	r1, [r7, #0]
 801c3a0:	4611      	mov	r1, r2
 801c3a2:	461a      	mov	r2, r3
 801c3a4:	4603      	mov	r3, r0
 801c3a6:	71fb      	strb	r3, [r7, #7]
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	71bb      	strb	r3, [r7, #6]
 801c3ac:	4613      	mov	r3, r2
 801c3ae:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801c3b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c3b4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801c3b6:	f008 f9f3 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 801c3ba:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801c3bc:	2300      	movs	r3, #0
 801c3be:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c3d0:	e0ba      	b.n	801c548 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801c3d2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	005b      	lsls	r3, r3, #1
 801c3da:	4413      	add	r3, r2
 801c3dc:	00db      	lsls	r3, r3, #3
 801c3de:	461a      	mov	r2, r3
 801c3e0:	683b      	ldr	r3, [r7, #0]
 801c3e2:	189c      	adds	r4, r3, r2
 801c3e4:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 801c3e8:	797a      	ldrb	r2, [r7, #5]
 801c3ea:	79fd      	ldrb	r5, [r7, #7]
 801c3ec:	69fb      	ldr	r3, [r7, #28]
 801c3ee:	9302      	str	r3, [sp, #8]
 801c3f0:	46ec      	mov	ip, sp
 801c3f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801c3f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c3fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c3fe:	4633      	mov	r3, r6
 801c400:	4629      	mov	r1, r5
 801c402:	4620      	mov	r0, r4
 801c404:	f7ff fe22 	bl	801c04c <UpdateTimeCredits>
 801c408:	4603      	mov	r3, r0
 801c40a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801c40c:	8afa      	ldrh	r2, [r7, #22]
 801c40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c410:	fb02 f303 	mul.w	r3, r2, r3
 801c414:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801c416:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c41a:	4613      	mov	r3, r2
 801c41c:	005b      	lsls	r3, r3, #1
 801c41e:	4413      	add	r3, r2
 801c420:	00db      	lsls	r3, r3, #3
 801c422:	461a      	mov	r2, r3
 801c424:	683b      	ldr	r3, [r7, #0]
 801c426:	4413      	add	r3, r2
 801c428:	68db      	ldr	r3, [r3, #12]
 801c42a:	69ba      	ldr	r2, [r7, #24]
 801c42c:	429a      	cmp	r2, r3
 801c42e:	d908      	bls.n	801c442 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801c430:	797b      	ldrb	r3, [r7, #5]
 801c432:	f083 0301 	eor.w	r3, r3, #1
 801c436:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d013      	beq.n	801c464 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801c43c:	79fb      	ldrb	r3, [r7, #7]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d010      	beq.n	801c464 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801c442:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c446:	4613      	mov	r3, r2
 801c448:	005b      	lsls	r3, r3, #1
 801c44a:	4413      	add	r3, r2
 801c44c:	00db      	lsls	r3, r3, #3
 801c44e:	461a      	mov	r2, r3
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	4413      	add	r3, r2
 801c454:	2201      	movs	r2, #1
 801c456:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801c458:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c45c:	3301      	adds	r3, #1
 801c45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801c462:	e06c      	b.n	801c53e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801c464:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c468:	4613      	mov	r3, r2
 801c46a:	005b      	lsls	r3, r3, #1
 801c46c:	4413      	add	r3, r2
 801c46e:	00db      	lsls	r3, r3, #3
 801c470:	461a      	mov	r2, r3
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	4413      	add	r3, r2
 801c476:	2200      	movs	r2, #0
 801c478:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801c47a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c47e:	4613      	mov	r3, r2
 801c480:	005b      	lsls	r3, r3, #1
 801c482:	4413      	add	r3, r2
 801c484:	00db      	lsls	r3, r3, #3
 801c486:	461a      	mov	r2, r3
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	4413      	add	r3, r2
 801c48c:	691b      	ldr	r3, [r3, #16]
 801c48e:	69ba      	ldr	r2, [r7, #24]
 801c490:	429a      	cmp	r2, r3
 801c492:	d815      	bhi.n	801c4c0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801c494:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c498:	4613      	mov	r3, r2
 801c49a:	005b      	lsls	r3, r3, #1
 801c49c:	4413      	add	r3, r2
 801c49e:	00db      	lsls	r3, r3, #3
 801c4a0:	461a      	mov	r2, r3
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	4413      	add	r3, r2
 801c4a6:	68db      	ldr	r3, [r3, #12]
 801c4a8:	69ba      	ldr	r2, [r7, #24]
 801c4aa:	1ad3      	subs	r3, r2, r3
 801c4ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4ae:	4293      	cmp	r3, r2
 801c4b0:	bf28      	it	cs
 801c4b2:	4613      	movcs	r3, r2
 801c4b4:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801c4b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c4ba:	3301      	adds	r3, #1
 801c4bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801c4c0:	79fb      	ldrb	r3, [r7, #7]
 801c4c2:	f083 0301 	eor.w	r3, r3, #1
 801c4c6:	b2db      	uxtb	r3, r3
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d038      	beq.n	801c53e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	60fb      	str	r3, [r7, #12]
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801c4d4:	8afb      	ldrh	r3, [r7, #22]
 801c4d6:	2b64      	cmp	r3, #100	@ 0x64
 801c4d8:	d103      	bne.n	801c4e2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801c4da:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801c4de:	60fb      	str	r3, [r7, #12]
 801c4e0:	e009      	b.n	801c4f6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801c4e2:	8afb      	ldrh	r3, [r7, #22]
 801c4e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c4e8:	d103      	bne.n	801c4f2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801c4ea:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801c4ee:	60fb      	str	r3, [r7, #12]
 801c4f0:	e001      	b.n	801c4f6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801c4f2:	4b1e      	ldr	r3, [pc, #120]	@ (801c56c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801c4f4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801c4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c4f8:	4a1c      	ldr	r2, [pc, #112]	@ (801c56c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801c4fa:	4293      	cmp	r3, r2
 801c4fc:	d90e      	bls.n	801c51c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801c4fe:	68fa      	ldr	r2, [r7, #12]
 801c500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c502:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801c506:	3b30      	subs	r3, #48	@ 0x30
 801c508:	4919      	ldr	r1, [pc, #100]	@ (801c570 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801c50a:	fba1 1303 	umull	r1, r3, r1, r3
 801c50e:	0c1b      	lsrs	r3, r3, #16
 801c510:	3301      	adds	r3, #1
 801c512:	4918      	ldr	r1, [pc, #96]	@ (801c574 <RegionCommonUpdateBandTimeOff+0x1dc>)
 801c514:	fb01 f303 	mul.w	r3, r1, r3
 801c518:	4413      	add	r3, r2
 801c51a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801c51c:	f107 000c 	add.w	r0, r7, #12
 801c520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c522:	9300      	str	r3, [sp, #0]
 801c524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c526:	f107 020c 	add.w	r2, r7, #12
 801c52a:	ca06      	ldmia	r2, {r1, r2}
 801c52c:	f006 fc3d 	bl	8022daa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801c530:	f107 030c 	add.w	r3, r7, #12
 801c534:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c538:	f006 fcf6 	bl	8022f28 <SysTimeToMs>
 801c53c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801c53e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c542:	3301      	adds	r3, #1
 801c544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c548:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c54c:	79bb      	ldrb	r3, [r7, #6]
 801c54e:	429a      	cmp	r2, r3
 801c550:	f4ff af3f 	bcc.w	801c3d2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801c554:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d102      	bne.n	801c562 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801c55c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c560:	e000      	b.n	801c564 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801c562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c564:	4618      	mov	r0, r3
 801c566:	372c      	adds	r7, #44	@ 0x2c
 801c568:	46bd      	mov	sp, r7
 801c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c56c:	0001ec30 	.word	0x0001ec30
 801c570:	c22e4507 	.word	0xc22e4507
 801c574:	00015180 	.word	0x00015180

0801c578 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801c578:	b480      	push	{r7}
 801c57a:	b085      	sub	sp, #20
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
 801c580:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801c582:	2300      	movs	r3, #0
 801c584:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	781b      	ldrb	r3, [r3, #0]
 801c58a:	2b03      	cmp	r3, #3
 801c58c:	d13f      	bne.n	801c60e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	3301      	adds	r3, #1
 801c592:	781b      	ldrb	r3, [r3, #0]
 801c594:	b25a      	sxtb	r2, r3
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801c59a:	683b      	ldr	r3, [r7, #0]
 801c59c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c5a0:	f003 030f 	and.w	r3, r3, #15
 801c5a4:	b25a      	sxtb	r2, r3
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801c5aa:	683b      	ldr	r3, [r7, #0]
 801c5ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c5b0:	b2db      	uxtb	r3, r3
 801c5b2:	091b      	lsrs	r3, r3, #4
 801c5b4:	b2db      	uxtb	r3, r3
 801c5b6:	b25a      	sxtb	r2, r3
 801c5b8:	683b      	ldr	r3, [r7, #0]
 801c5ba:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	3302      	adds	r3, #2
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	461a      	mov	r2, r3
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801c5c8:	683b      	ldr	r3, [r7, #0]
 801c5ca:	889b      	ldrh	r3, [r3, #4]
 801c5cc:	b21a      	sxth	r2, r3
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	3303      	adds	r3, #3
 801c5d2:	781b      	ldrb	r3, [r3, #0]
 801c5d4:	021b      	lsls	r3, r3, #8
 801c5d6:	b21b      	sxth	r3, r3
 801c5d8:	4313      	orrs	r3, r2
 801c5da:	b21b      	sxth	r3, r3
 801c5dc:	b29a      	uxth	r2, r3
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	791a      	ldrb	r2, [r3, #4]
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	781b      	ldrb	r3, [r3, #0]
 801c5ee:	091b      	lsrs	r3, r3, #4
 801c5f0:	b2db      	uxtb	r3, r3
 801c5f2:	f003 0307 	and.w	r3, r3, #7
 801c5f6:	b2da      	uxtb	r2, r3
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801c5fc:	683b      	ldr	r3, [r7, #0]
 801c5fe:	781b      	ldrb	r3, [r3, #0]
 801c600:	f003 030f 	and.w	r3, r3, #15
 801c604:	b2da      	uxtb	r2, r3
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801c60a:	2305      	movs	r3, #5
 801c60c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801c60e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c610:	4618      	mov	r0, r3
 801c612:	3714      	adds	r7, #20
 801c614:	46bd      	mov	sp, r7
 801c616:	bc80      	pop	{r7}
 801c618:	4770      	bx	lr

0801c61a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801c61a:	b5b0      	push	{r4, r5, r7, lr}
 801c61c:	b088      	sub	sp, #32
 801c61e:	af02      	add	r7, sp, #8
 801c620:	60f8      	str	r0, [r7, #12]
 801c622:	60b9      	str	r1, [r7, #8]
 801c624:	607a      	str	r2, [r7, #4]
 801c626:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	791b      	ldrb	r3, [r3, #4]
 801c62c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	799b      	ldrb	r3, [r3, #6]
 801c632:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	79db      	ldrb	r3, [r3, #7]
 801c638:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	7a1b      	ldrb	r3, [r3, #8]
 801c63e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	795b      	ldrb	r3, [r3, #5]
 801c644:	f083 0301 	eor.w	r3, r3, #1
 801c648:	b2db      	uxtb	r3, r3
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d008      	beq.n	801c660 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	7adb      	ldrb	r3, [r3, #11]
 801c652:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	7a5b      	ldrb	r3, [r3, #9]
 801c658:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	7a9b      	ldrb	r3, [r3, #10]
 801c65e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801c660:	7dfb      	ldrb	r3, [r7, #23]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d04a      	beq.n	801c6fc <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801c666:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801c66a:	2b0f      	cmp	r3, #15
 801c66c:	d103      	bne.n	801c676 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	7a5b      	ldrb	r3, [r3, #9]
 801c672:	75bb      	strb	r3, [r7, #22]
 801c674:	e01d      	b.n	801c6b2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	7b18      	ldrb	r0, [r3, #12]
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	6919      	ldr	r1, [r3, #16]
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801c68a:	68fa      	ldr	r2, [r7, #12]
 801c68c:	6992      	ldr	r2, [r2, #24]
 801c68e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801c692:	9201      	str	r2, [sp, #4]
 801c694:	9300      	str	r3, [sp, #0]
 801c696:	462b      	mov	r3, r5
 801c698:	4622      	mov	r2, r4
 801c69a:	f7ff fd3a 	bl	801c112 <RegionCommonChanVerifyDr>
 801c69e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801c6a0:	f083 0301 	eor.w	r3, r3, #1
 801c6a4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d003      	beq.n	801c6b2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801c6aa:	7dfb      	ldrb	r3, [r7, #23]
 801c6ac:	f023 0302 	bic.w	r3, r3, #2
 801c6b0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801c6b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801c6b6:	2b0f      	cmp	r3, #15
 801c6b8:	d103      	bne.n	801c6c2 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	7a9b      	ldrb	r3, [r3, #10]
 801c6be:	757b      	strb	r3, [r7, #21]
 801c6c0:	e01c      	b.n	801c6fc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801c6ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f7ff fd8f 	bl	801c1f6 <RegionCommonValueInRange>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d10e      	bne.n	801c6fc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801c6e4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801c6e8:	429a      	cmp	r2, r3
 801c6ea:	da03      	bge.n	801c6f4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	7f5b      	ldrb	r3, [r3, #29]
 801c6f0:	757b      	strb	r3, [r7, #21]
 801c6f2:	e003      	b.n	801c6fc <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801c6f4:	7dfb      	ldrb	r3, [r7, #23]
 801c6f6:	f023 0304 	bic.w	r3, r3, #4
 801c6fa:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801c6fc:	7dfb      	ldrb	r3, [r7, #23]
 801c6fe:	2b07      	cmp	r3, #7
 801c700:	d105      	bne.n	801c70e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801c702:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d101      	bne.n	801c70e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801c70a:	2301      	movs	r3, #1
 801c70c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	7dba      	ldrb	r2, [r7, #22]
 801c712:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	7d7a      	ldrb	r2, [r7, #21]
 801c718:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801c71a:	7d3a      	ldrb	r2, [r7, #20]
 801c71c:	683b      	ldr	r3, [r7, #0]
 801c71e:	701a      	strb	r2, [r3, #0]

    return status;
 801c720:	7dfb      	ldrb	r3, [r7, #23]
}
 801c722:	4618      	mov	r0, r3
 801c724:	3718      	adds	r7, #24
 801c726:	46bd      	mov	sp, r7
 801c728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c72c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801c72c:	b480      	push	{r7}
 801c72e:	b083      	sub	sp, #12
 801c730:	af00      	add	r7, sp, #0
 801c732:	4603      	mov	r3, r0
 801c734:	6039      	str	r1, [r7, #0]
 801c736:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801c738:	79fb      	ldrb	r3, [r7, #7]
 801c73a:	4a06      	ldr	r2, [pc, #24]	@ (801c754 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801c73c:	fa02 f303 	lsl.w	r3, r2, r3
 801c740:	461a      	mov	r2, r3
 801c742:	683b      	ldr	r3, [r7, #0]
 801c744:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c748:	4618      	mov	r0, r3
 801c74a:	370c      	adds	r7, #12
 801c74c:	46bd      	mov	sp, r7
 801c74e:	bc80      	pop	{r7}
 801c750:	4770      	bx	lr
 801c752:	bf00      	nop
 801c754:	000f4240 	.word	0x000f4240

0801c758 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801c758:	b480      	push	{r7}
 801c75a:	b083      	sub	sp, #12
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	4603      	mov	r3, r0
 801c760:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801c762:	79fb      	ldrb	r3, [r7, #7]
 801c764:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801c768:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c76c:	4618      	mov	r0, r3
 801c76e:	370c      	adds	r7, #12
 801c770:	46bd      	mov	sp, r7
 801c772:	bc80      	pop	{r7}
 801c774:	4770      	bx	lr
	...

0801c778 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801c778:	b480      	push	{r7}
 801c77a:	b085      	sub	sp, #20
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	60f8      	str	r0, [r7, #12]
 801c780:	607a      	str	r2, [r7, #4]
 801c782:	603b      	str	r3, [r7, #0]
 801c784:	460b      	mov	r3, r1
 801c786:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801c788:	7afa      	ldrb	r2, [r7, #11]
 801c78a:	7afb      	ldrb	r3, [r7, #11]
 801c78c:	3b04      	subs	r3, #4
 801c78e:	4619      	mov	r1, r3
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	fb03 f101 	mul.w	r1, r3, r1
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c79c:	fb00 f303 	mul.w	r3, r0, r3
 801c7a0:	440b      	add	r3, r1
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d013      	beq.n	801c7d0 <RegionCommonComputeRxWindowParameters+0x58>
 801c7a8:	7afb      	ldrb	r3, [r7, #11]
 801c7aa:	3b04      	subs	r3, #4
 801c7ac:	4619      	mov	r1, r3
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	fb03 f101 	mul.w	r1, r3, r1
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c7ba:	fb00 f303 	mul.w	r3, r0, r3
 801c7be:	440b      	add	r3, r1
 801c7c0:	0059      	lsls	r1, r3, #1
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	440b      	add	r3, r1
 801c7c6:	1e59      	subs	r1, r3, #1
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	fbb1 f3f3 	udiv	r3, r1, r3
 801c7ce:	e00f      	b.n	801c7f0 <RegionCommonComputeRxWindowParameters+0x78>
 801c7d0:	7afb      	ldrb	r3, [r7, #11]
 801c7d2:	3b04      	subs	r3, #4
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	fb03 f101 	mul.w	r1, r3, r1
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c7e2:	fb00 f303 	mul.w	r3, r0, r3
 801c7e6:	440b      	add	r3, r1
 801c7e8:	0059      	lsls	r1, r3, #1
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	fbb1 f3f3 	udiv	r3, r1, r3
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	bf38      	it	cc
 801c7f4:	461a      	movcc	r2, r3
 801c7f6:	69bb      	ldr	r3, [r7, #24]
 801c7f8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	009b      	lsls	r3, r3, #2
 801c7fe:	4619      	mov	r1, r3
 801c800:	69bb      	ldr	r3, [r7, #24]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	68fa      	ldr	r2, [r7, #12]
 801c806:	fb02 f303 	mul.w	r3, r2, r3
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d007      	beq.n	801c81e <RegionCommonComputeRxWindowParameters+0xa6>
 801c80e:	69bb      	ldr	r3, [r7, #24]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	68fa      	ldr	r2, [r7, #12]
 801c814:	fb02 f303 	mul.w	r3, r2, r3
 801c818:	3301      	adds	r3, #1
 801c81a:	085b      	lsrs	r3, r3, #1
 801c81c:	e005      	b.n	801c82a <RegionCommonComputeRxWindowParameters+0xb2>
 801c81e:	69bb      	ldr	r3, [r7, #24]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	68fa      	ldr	r2, [r7, #12]
 801c824:	fb02 f303 	mul.w	r3, r2, r3
 801c828:	085b      	lsrs	r3, r3, #1
 801c82a:	1acb      	subs	r3, r1, r3
 801c82c:	683a      	ldr	r2, [r7, #0]
 801c82e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c832:	fb01 f202 	mul.w	r2, r1, r2
 801c836:	1a9b      	subs	r3, r3, r2
 801c838:	2b00      	cmp	r3, #0
 801c83a:	dd27      	ble.n	801c88c <RegionCommonComputeRxWindowParameters+0x114>
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	009b      	lsls	r3, r3, #2
 801c840:	4619      	mov	r1, r3
 801c842:	69bb      	ldr	r3, [r7, #24]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	68fa      	ldr	r2, [r7, #12]
 801c848:	fb02 f303 	mul.w	r3, r2, r3
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d007      	beq.n	801c860 <RegionCommonComputeRxWindowParameters+0xe8>
 801c850:	69bb      	ldr	r3, [r7, #24]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	68fa      	ldr	r2, [r7, #12]
 801c856:	fb02 f303 	mul.w	r3, r2, r3
 801c85a:	3301      	adds	r3, #1
 801c85c:	085b      	lsrs	r3, r3, #1
 801c85e:	e005      	b.n	801c86c <RegionCommonComputeRxWindowParameters+0xf4>
 801c860:	69bb      	ldr	r3, [r7, #24]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	68fa      	ldr	r2, [r7, #12]
 801c866:	fb02 f303 	mul.w	r3, r2, r3
 801c86a:	085b      	lsrs	r3, r3, #1
 801c86c:	1acb      	subs	r3, r1, r3
 801c86e:	683a      	ldr	r2, [r7, #0]
 801c870:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c874:	fb01 f202 	mul.w	r2, r1, r2
 801c878:	1a9b      	subs	r3, r3, r2
 801c87a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801c87e:	4a19      	ldr	r2, [pc, #100]	@ (801c8e4 <RegionCommonComputeRxWindowParameters+0x16c>)
 801c880:	fb82 1203 	smull	r1, r2, r2, r3
 801c884:	1192      	asrs	r2, r2, #6
 801c886:	17db      	asrs	r3, r3, #31
 801c888:	1ad3      	subs	r3, r2, r3
 801c88a:	e024      	b.n	801c8d6 <RegionCommonComputeRxWindowParameters+0x15e>
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	009b      	lsls	r3, r3, #2
 801c890:	4619      	mov	r1, r3
 801c892:	69bb      	ldr	r3, [r7, #24]
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	68fa      	ldr	r2, [r7, #12]
 801c898:	fb02 f303 	mul.w	r3, r2, r3
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d007      	beq.n	801c8b0 <RegionCommonComputeRxWindowParameters+0x138>
 801c8a0:	69bb      	ldr	r3, [r7, #24]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	68fa      	ldr	r2, [r7, #12]
 801c8a6:	fb02 f303 	mul.w	r3, r2, r3
 801c8aa:	3301      	adds	r3, #1
 801c8ac:	085b      	lsrs	r3, r3, #1
 801c8ae:	e005      	b.n	801c8bc <RegionCommonComputeRxWindowParameters+0x144>
 801c8b0:	69bb      	ldr	r3, [r7, #24]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	68fa      	ldr	r2, [r7, #12]
 801c8b6:	fb02 f303 	mul.w	r3, r2, r3
 801c8ba:	085b      	lsrs	r3, r3, #1
 801c8bc:	1acb      	subs	r3, r1, r3
 801c8be:	683a      	ldr	r2, [r7, #0]
 801c8c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c8c4:	fb01 f202 	mul.w	r2, r1, r2
 801c8c8:	1a9b      	subs	r3, r3, r2
 801c8ca:	4a06      	ldr	r2, [pc, #24]	@ (801c8e4 <RegionCommonComputeRxWindowParameters+0x16c>)
 801c8cc:	fb82 1203 	smull	r1, r2, r2, r3
 801c8d0:	1192      	asrs	r2, r2, #6
 801c8d2:	17db      	asrs	r3, r3, #31
 801c8d4:	1ad3      	subs	r3, r2, r3
 801c8d6:	69fa      	ldr	r2, [r7, #28]
 801c8d8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801c8da:	bf00      	nop
 801c8dc:	3714      	adds	r7, #20
 801c8de:	46bd      	mov	sp, r7
 801c8e0:	bc80      	pop	{r7}
 801c8e2:	4770      	bx	lr
 801c8e4:	10624dd3 	.word	0x10624dd3

0801c8e8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b086      	sub	sp, #24
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	60b9      	str	r1, [r7, #8]
 801c8f2:	607a      	str	r2, [r7, #4]
 801c8f4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801c8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	4618      	mov	r0, r3
 801c902:	f7e4 f807 	bl	8000914 <__aeabi_ui2f>
 801c906:	4603      	mov	r3, r0
 801c908:	4619      	mov	r1, r3
 801c90a:	68b8      	ldr	r0, [r7, #8]
 801c90c:	f7e3 ff50 	bl	80007b0 <__aeabi_fsub>
 801c910:	4603      	mov	r3, r0
 801c912:	6879      	ldr	r1, [r7, #4]
 801c914:	4618      	mov	r0, r3
 801c916:	f7e3 ff4b 	bl	80007b0 <__aeabi_fsub>
 801c91a:	4603      	mov	r3, r0
 801c91c:	4618      	mov	r0, r3
 801c91e:	f7e3 fdeb 	bl	80004f8 <__aeabi_f2d>
 801c922:	4602      	mov	r2, r0
 801c924:	460b      	mov	r3, r1
 801c926:	4610      	mov	r0, r2
 801c928:	4619      	mov	r1, r3
 801c92a:	f009 fd65 	bl	80263f8 <floor>
 801c92e:	4602      	mov	r2, r0
 801c930:	460b      	mov	r3, r1
 801c932:	4610      	mov	r0, r2
 801c934:	4619      	mov	r1, r3
 801c936:	f7e3 febf 	bl	80006b8 <__aeabi_d2iz>
 801c93a:	4603      	mov	r3, r0
 801c93c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801c93e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c942:	4618      	mov	r0, r3
 801c944:	3718      	adds	r7, #24
 801c946:	46bd      	mov	sp, r7
 801c948:	bd80      	pop	{r7, pc}
	...

0801c94c <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 801c94c:	b5b0      	push	{r4, r5, r7, lr}
 801c94e:	b08e      	sub	sp, #56	@ 0x38
 801c950:	af0a      	add	r7, sp, #40	@ 0x28
 801c952:	6078      	str	r0, [r7, #4]
    bool rxContinuous = true;
 801c954:	2301      	movs	r3, #1
 801c956:	73fb      	strb	r3, [r7, #15]
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 801c958:	4b29      	ldr	r3, [pc, #164]	@ (801ca00 <RegionCommonRxBeaconSetup+0xb4>)
 801c95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c95c:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 801c95e:	4b28      	ldr	r3, [pc, #160]	@ (801ca00 <RegionCommonRxBeaconSetup+0xb4>)
 801c960:	68db      	ldr	r3, [r3, #12]
 801c962:	687a      	ldr	r2, [r7, #4]
 801c964:	6852      	ldr	r2, [r2, #4]
 801c966:	4610      	mov	r0, r2
 801c968:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 801c96a:	4b25      	ldr	r3, [pc, #148]	@ (801ca00 <RegionCommonRxBeaconSetup+0xb4>)
 801c96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c96e:	687a      	ldr	r2, [r7, #4]
 801c970:	7a12      	ldrb	r2, [r2, #8]
 801c972:	4611      	mov	r1, r2
 801c974:	2001      	movs	r0, #1
 801c976:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	68db      	ldr	r3, [r3, #12]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d001      	beq.n	801c984 <RegionCommonRxBeaconSetup+0x38>
    {
        rxContinuous = false;
 801c980:	2300      	movs	r3, #0
 801c982:	73fb      	strb	r3, [r7, #15]
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	7a52      	ldrb	r2, [r2, #9]
 801c98c:	4413      	add	r3, r2
 801c98e:	781b      	ldrb	r3, [r3, #0]
 801c990:	73bb      	strb	r3, [r7, #14]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 801c992:	4b1b      	ldr	r3, [pc, #108]	@ (801ca00 <RegionCommonRxBeaconSetup+0xb4>)
 801c994:	699c      	ldr	r4, [r3, #24]
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	7a9b      	ldrb	r3, [r3, #10]
 801c99a:	461d      	mov	r5, r3
 801c99c:	7bb8      	ldrb	r0, [r7, #14]
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	8a1b      	ldrh	r3, [r3, #16]
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	7a12      	ldrb	r2, [r2, #8]
 801c9a6:	7bf9      	ldrb	r1, [r7, #15]
 801c9a8:	9109      	str	r1, [sp, #36]	@ 0x24
 801c9aa:	2100      	movs	r1, #0
 801c9ac:	9108      	str	r1, [sp, #32]
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	9107      	str	r1, [sp, #28]
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	9106      	str	r1, [sp, #24]
 801c9b6:	2100      	movs	r1, #0
 801c9b8:	9105      	str	r1, [sp, #20]
 801c9ba:	9204      	str	r2, [sp, #16]
 801c9bc:	2201      	movs	r2, #1
 801c9be:	9203      	str	r2, [sp, #12]
 801c9c0:	9302      	str	r3, [sp, #8]
 801c9c2:	230a      	movs	r3, #10
 801c9c4:	9301      	str	r3, [sp, #4]
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	9300      	str	r3, [sp, #0]
 801c9ca:	2301      	movs	r3, #1
 801c9cc:	4602      	mov	r2, r0
 801c9ce:	4629      	mov	r1, r5
 801c9d0:	2001      	movs	r0, #1
 801c9d2:	47a0      	blx	r4
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 801c9d4:	4b0a      	ldr	r3, [pc, #40]	@ (801ca00 <RegionCommonRxBeaconSetup+0xb4>)
 801c9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9d8:	687a      	ldr	r2, [r7, #4]
 801c9da:	68d2      	ldr	r2, [r2, #12]
 801c9dc:	4610      	mov	r0, r2
 801c9de:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	685b      	ldr	r3, [r3, #4]
 801c9e4:	687a      	ldr	r2, [r7, #4]
 801c9e6:	7a52      	ldrb	r2, [r2, #9]
 801c9e8:	9201      	str	r2, [sp, #4]
 801c9ea:	9300      	str	r3, [sp, #0]
 801c9ec:	4b05      	ldr	r3, [pc, #20]	@ (801ca04 <RegionCommonRxBeaconSetup+0xb8>)
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	2100      	movs	r1, #0
 801c9f2:	2002      	movs	r0, #2
 801c9f4:	f007 ffd4 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 801c9f8:	bf00      	nop
 801c9fa:	3710      	adds	r7, #16
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bdb0      	pop	{r4, r5, r7, pc}
 801ca00:	08029818 	.word	0x08029818
 801ca04:	08028bd8 	.word	0x08028bd8

0801ca08 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801ca08:	b590      	push	{r4, r7, lr}
 801ca0a:	b087      	sub	sp, #28
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
 801ca14:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801ca16:	2300      	movs	r3, #0
 801ca18:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801ca1e:	2300      	movs	r3, #0
 801ca20:	757b      	strb	r3, [r7, #21]
 801ca22:	2300      	movs	r3, #0
 801ca24:	753b      	strb	r3, [r7, #20]
 801ca26:	e09c      	b.n	801cb62 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801ca28:	2300      	movs	r3, #0
 801ca2a:	74fb      	strb	r3, [r7, #19]
 801ca2c:	e08f      	b.n	801cb4e <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	685a      	ldr	r2, [r3, #4]
 801ca32:	7d3b      	ldrb	r3, [r7, #20]
 801ca34:	005b      	lsls	r3, r3, #1
 801ca36:	4413      	add	r3, r2
 801ca38:	881b      	ldrh	r3, [r3, #0]
 801ca3a:	461a      	mov	r2, r3
 801ca3c:	7cfb      	ldrb	r3, [r7, #19]
 801ca3e:	fa42 f303 	asr.w	r3, r2, r3
 801ca42:	f003 0301 	and.w	r3, r3, #1
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d07e      	beq.n	801cb48 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	689a      	ldr	r2, [r3, #8]
 801ca4e:	7d79      	ldrb	r1, [r7, #21]
 801ca50:	7cfb      	ldrb	r3, [r7, #19]
 801ca52:	440b      	add	r3, r1
 801ca54:	4619      	mov	r1, r3
 801ca56:	460b      	mov	r3, r1
 801ca58:	005b      	lsls	r3, r3, #1
 801ca5a:	440b      	add	r3, r1
 801ca5c:	009b      	lsls	r3, r3, #2
 801ca5e:	4413      	add	r3, r2
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d06b      	beq.n	801cb3e <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	781b      	ldrb	r3, [r3, #0]
 801ca6a:	f083 0301 	eor.w	r3, r3, #1
 801ca6e:	b2db      	uxtb	r3, r3
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d011      	beq.n	801ca98 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d00d      	beq.n	801ca98 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	695a      	ldr	r2, [r3, #20]
 801ca80:	7d3b      	ldrb	r3, [r7, #20]
 801ca82:	005b      	lsls	r3, r3, #1
 801ca84:	4413      	add	r3, r2
 801ca86:	881b      	ldrh	r3, [r3, #0]
 801ca88:	461a      	mov	r2, r3
 801ca8a:	7cfb      	ldrb	r3, [r7, #19]
 801ca8c:	fa42 f303 	asr.w	r3, r2, r3
 801ca90:	f003 0301 	and.w	r3, r3, #1
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d054      	beq.n	801cb42 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	785b      	ldrb	r3, [r3, #1]
 801ca9c:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	689a      	ldr	r2, [r3, #8]
 801caa2:	7d79      	ldrb	r1, [r7, #21]
 801caa4:	7cfb      	ldrb	r3, [r7, #19]
 801caa6:	440b      	add	r3, r1
 801caa8:	4619      	mov	r1, r3
 801caaa:	460b      	mov	r3, r1
 801caac:	005b      	lsls	r3, r3, #1
 801caae:	440b      	add	r3, r1
 801cab0:	009b      	lsls	r3, r3, #2
 801cab2:	4413      	add	r3, r2
 801cab4:	7a1b      	ldrb	r3, [r3, #8]
 801cab6:	f343 0303 	sbfx	r3, r3, #0, #4
 801caba:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801cabc:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	689a      	ldr	r2, [r3, #8]
 801cac2:	7d79      	ldrb	r1, [r7, #21]
 801cac4:	7cfb      	ldrb	r3, [r7, #19]
 801cac6:	440b      	add	r3, r1
 801cac8:	4619      	mov	r1, r3
 801caca:	460b      	mov	r3, r1
 801cacc:	005b      	lsls	r3, r3, #1
 801cace:	440b      	add	r3, r1
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	4413      	add	r3, r2
 801cad4:	7a1b      	ldrb	r3, [r3, #8]
 801cad6:	f343 1303 	sbfx	r3, r3, #4, #4
 801cada:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801cadc:	461a      	mov	r2, r3
 801cade:	4621      	mov	r1, r4
 801cae0:	f7ff fb89 	bl	801c1f6 <RegionCommonValueInRange>
 801cae4:	4603      	mov	r3, r0
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d02d      	beq.n	801cb46 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	68da      	ldr	r2, [r3, #12]
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	6899      	ldr	r1, [r3, #8]
 801caf2:	7d78      	ldrb	r0, [r7, #21]
 801caf4:	7cfb      	ldrb	r3, [r7, #19]
 801caf6:	4403      	add	r3, r0
 801caf8:	4618      	mov	r0, r3
 801cafa:	4603      	mov	r3, r0
 801cafc:	005b      	lsls	r3, r3, #1
 801cafe:	4403      	add	r3, r0
 801cb00:	009b      	lsls	r3, r3, #2
 801cb02:	440b      	add	r3, r1
 801cb04:	7a5b      	ldrb	r3, [r3, #9]
 801cb06:	4619      	mov	r1, r3
 801cb08:	460b      	mov	r3, r1
 801cb0a:	005b      	lsls	r3, r3, #1
 801cb0c:	440b      	add	r3, r1
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	4413      	add	r3, r2
 801cb12:	7d1b      	ldrb	r3, [r3, #20]
 801cb14:	f083 0301 	eor.w	r3, r3, #1
 801cb18:	b2db      	uxtb	r3, r3
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d003      	beq.n	801cb26 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801cb1e:	7dbb      	ldrb	r3, [r7, #22]
 801cb20:	3301      	adds	r3, #1
 801cb22:	75bb      	strb	r3, [r7, #22]
                    continue;
 801cb24:	e010      	b.n	801cb48 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801cb26:	7dfb      	ldrb	r3, [r7, #23]
 801cb28:	1c5a      	adds	r2, r3, #1
 801cb2a:	75fa      	strb	r2, [r7, #23]
 801cb2c:	461a      	mov	r2, r3
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	4413      	add	r3, r2
 801cb32:	7d79      	ldrb	r1, [r7, #21]
 801cb34:	7cfa      	ldrb	r2, [r7, #19]
 801cb36:	440a      	add	r2, r1
 801cb38:	b2d2      	uxtb	r2, r2
 801cb3a:	701a      	strb	r2, [r3, #0]
 801cb3c:	e004      	b.n	801cb48 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801cb3e:	bf00      	nop
 801cb40:	e002      	b.n	801cb48 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801cb42:	bf00      	nop
 801cb44:	e000      	b.n	801cb48 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801cb46:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801cb48:	7cfb      	ldrb	r3, [r7, #19]
 801cb4a:	3301      	adds	r3, #1
 801cb4c:	74fb      	strb	r3, [r7, #19]
 801cb4e:	7cfb      	ldrb	r3, [r7, #19]
 801cb50:	2b0f      	cmp	r3, #15
 801cb52:	f67f af6c 	bls.w	801ca2e <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801cb56:	7d7b      	ldrb	r3, [r7, #21]
 801cb58:	3310      	adds	r3, #16
 801cb5a:	757b      	strb	r3, [r7, #21]
 801cb5c:	7d3b      	ldrb	r3, [r7, #20]
 801cb5e:	3301      	adds	r3, #1
 801cb60:	753b      	strb	r3, [r7, #20]
 801cb62:	7d7b      	ldrb	r3, [r7, #21]
 801cb64:	b29a      	uxth	r2, r3
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	8a1b      	ldrh	r3, [r3, #16]
 801cb6a:	429a      	cmp	r2, r3
 801cb6c:	f4ff af5c 	bcc.w	801ca28 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	7dfa      	ldrb	r2, [r7, #23]
 801cb74:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801cb76:	683b      	ldr	r3, [r7, #0]
 801cb78:	7dba      	ldrb	r2, [r7, #22]
 801cb7a:	701a      	strb	r2, [r3, #0]
}
 801cb7c:	bf00      	nop
 801cb7e:	371c      	adds	r7, #28
 801cb80:	46bd      	mov	sp, r7
 801cb82:	bd90      	pop	{r4, r7, pc}

0801cb84 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb86:	b08b      	sub	sp, #44	@ 0x2c
 801cb88:	af04      	add	r7, sp, #16
 801cb8a:	60f8      	str	r0, [r7, #12]
 801cb8c:	60b9      	str	r1, [r7, #8]
 801cb8e:	607a      	str	r2, [r7, #4]
 801cb90:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	685b      	ldr	r3, [r3, #4]
 801cb96:	4618      	mov	r0, r3
 801cb98:	f007 fe14 	bl	80247c4 <UTIL_TIMER_GetElapsedTime>
 801cb9c:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	681a      	ldr	r2, [r3, #0]
 801cba2:	697b      	ldr	r3, [r7, #20]
 801cba4:	1ad2      	subs	r2, r2, r3
 801cba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cba8:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801cbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbac:	2201      	movs	r2, #1
 801cbae:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801cbb0:	683b      	ldr	r3, [r7, #0]
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	685b      	ldr	r3, [r3, #4]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d004      	beq.n	801cbc8 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801cbc2:	697a      	ldr	r2, [r7, #20]
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	d32b      	bcc.n	801cc20 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	2200      	movs	r2, #0
 801cbcc:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	69db      	ldr	r3, [r3, #28]
 801cbd2:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801cbd8:	68dd      	ldr	r5, [r3, #12]
 801cbda:	68fb      	ldr	r3, [r7, #12]
 801cbdc:	7a5e      	ldrb	r6, [r3, #9]
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	f893 c008 	ldrb.w	ip, [r3, #8]
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	7d1b      	ldrb	r3, [r3, #20]
 801cbe8:	68fa      	ldr	r2, [r7, #12]
 801cbea:	6992      	ldr	r2, [r2, #24]
 801cbec:	9203      	str	r2, [sp, #12]
 801cbee:	68fa      	ldr	r2, [r7, #12]
 801cbf0:	f10d 0e04 	add.w	lr, sp, #4
 801cbf4:	320c      	adds	r2, #12
 801cbf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cbfa:	e88e 0003 	stmia.w	lr, {r0, r1}
 801cbfe:	9300      	str	r3, [sp, #0]
 801cc00:	4663      	mov	r3, ip
 801cc02:	4632      	mov	r2, r6
 801cc04:	4629      	mov	r1, r5
 801cc06:	4620      	mov	r0, r4
 801cc08:	f7ff fbc6 	bl	801c398 <RegionCommonUpdateBandTimeOff>
 801cc0c:	4602      	mov	r2, r0
 801cc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc10:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	69d8      	ldr	r0, [r3, #28]
 801cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc18:	683a      	ldr	r2, [r7, #0]
 801cc1a:	6879      	ldr	r1, [r7, #4]
 801cc1c:	f7ff fef4 	bl	801ca08 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801cc20:	683b      	ldr	r3, [r7, #0]
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d004      	beq.n	801cc32 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801cc28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801cc2e:	2300      	movs	r3, #0
 801cc30:	e006      	b.n	801cc40 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc34:	781b      	ldrb	r3, [r3, #0]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d001      	beq.n	801cc3e <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801cc3a:	230b      	movs	r3, #11
 801cc3c:	e000      	b.n	801cc40 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801cc3e:	230c      	movs	r3, #12
    }
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	371c      	adds	r7, #28
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc48 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801cc48:	b5b0      	push	{r4, r5, r7, lr}
 801cc4a:	b086      	sub	sp, #24
 801cc4c:	af02      	add	r7, sp, #8
 801cc4e:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	f993 2000 	ldrsb.w	r2, [r3]
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801cc62:	429a      	cmp	r2, r3
 801cc64:	d103      	bne.n	801cc6e <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801cc6c:	e026      	b.n	801ccbc <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801cc6e:	7bfb      	ldrb	r3, [r7, #15]
 801cc70:	3b01      	subs	r3, #1
 801cc72:	b2db      	uxtb	r3, r3
 801cc74:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801cc7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d019      	beq.n	801ccb8 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	78d8      	ldrb	r0, [r3, #3]
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	6859      	ldr	r1, [r3, #4]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801cc98:	687a      	ldr	r2, [r7, #4]
 801cc9a:	6892      	ldr	r2, [r2, #8]
 801cc9c:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801cca0:	9201      	str	r2, [sp, #4]
 801cca2:	9300      	str	r3, [sp, #0]
 801cca4:	462b      	mov	r3, r5
 801cca6:	4622      	mov	r2, r4
 801cca8:	f7ff fa33 	bl	801c112 <RegionCommonChanVerifyDr>
 801ccac:	4603      	mov	r3, r0
 801ccae:	f083 0301 	eor.w	r3, r3, #1
 801ccb2:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d1da      	bne.n	801cc6e <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801ccb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3710      	adds	r7, #16
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bdb0      	pop	{r4, r5, r7, pc}

0801ccc4 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	b083      	sub	sp, #12
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	4603      	mov	r3, r0
 801cccc:	460a      	mov	r2, r1
 801ccce:	71fb      	strb	r3, [r7, #7]
 801ccd0:	4613      	mov	r3, r2
 801ccd2:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801ccd4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801ccd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ccdc:	4293      	cmp	r3, r2
 801ccde:	bfb8      	it	lt
 801cce0:	4613      	movlt	r3, r2
 801cce2:	b25b      	sxtb	r3, r3
}
 801cce4:	4618      	mov	r0, r3
 801cce6:	370c      	adds	r7, #12
 801cce8:	46bd      	mov	sp, r7
 801ccea:	bc80      	pop	{r7}
 801ccec:	4770      	bx	lr
	...

0801ccf0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b083      	sub	sp, #12
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
 801ccf8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	009b      	lsls	r3, r3, #2
 801ccfe:	683a      	ldr	r2, [r7, #0]
 801cd00:	4413      	add	r3, r2
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	4a07      	ldr	r2, [pc, #28]	@ (801cd24 <RegionCommonGetBandwidth+0x34>)
 801cd06:	4293      	cmp	r3, r2
 801cd08:	d004      	beq.n	801cd14 <RegionCommonGetBandwidth+0x24>
 801cd0a:	4a07      	ldr	r2, [pc, #28]	@ (801cd28 <RegionCommonGetBandwidth+0x38>)
 801cd0c:	4293      	cmp	r3, r2
 801cd0e:	d003      	beq.n	801cd18 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801cd10:	2300      	movs	r3, #0
 801cd12:	e002      	b.n	801cd1a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801cd14:	2301      	movs	r3, #1
 801cd16:	e000      	b.n	801cd1a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801cd18:	2302      	movs	r3, #2
    }
}
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	370c      	adds	r7, #12
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bc80      	pop	{r7}
 801cd22:	4770      	bx	lr
 801cd24:	0003d090 	.word	0x0003d090
 801cd28:	0007a120 	.word	0x0007a120

0801cd2c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b086      	sub	sp, #24
 801cd30:	af04      	add	r7, sp, #16
 801cd32:	4603      	mov	r3, r0
 801cd34:	6039      	str	r1, [r7, #0]
 801cd36:	71fb      	strb	r3, [r7, #7]
 801cd38:	4613      	mov	r3, r2
 801cd3a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801cd3c:	79fb      	ldrb	r3, [r7, #7]
 801cd3e:	2b05      	cmp	r3, #5
 801cd40:	d810      	bhi.n	801cd64 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801cd42:	79fb      	ldrb	r3, [r7, #7]
 801cd44:	4a0f      	ldr	r2, [pc, #60]	@ (801cd84 <RegionCommonRxConfigPrint+0x58>)
 801cd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd4a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801cd4e:	9202      	str	r2, [sp, #8]
 801cd50:	683a      	ldr	r2, [r7, #0]
 801cd52:	9201      	str	r2, [sp, #4]
 801cd54:	9300      	str	r3, [sp, #0]
 801cd56:	4b0c      	ldr	r3, [pc, #48]	@ (801cd88 <RegionCommonRxConfigPrint+0x5c>)
 801cd58:	2201      	movs	r2, #1
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	2002      	movs	r0, #2
 801cd5e:	f007 fe1f 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801cd62:	e00a      	b.n	801cd7a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801cd64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cd68:	9301      	str	r3, [sp, #4]
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	9300      	str	r3, [sp, #0]
 801cd6e:	4b07      	ldr	r3, [pc, #28]	@ (801cd8c <RegionCommonRxConfigPrint+0x60>)
 801cd70:	2201      	movs	r2, #1
 801cd72:	2100      	movs	r1, #0
 801cd74:	2002      	movs	r0, #2
 801cd76:	f007 fe13 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 801cd7a:	bf00      	nop
 801cd7c:	3708      	adds	r7, #8
 801cd7e:	46bd      	mov	sp, r7
 801cd80:	bd80      	pop	{r7, pc}
 801cd82:	bf00      	nop
 801cd84:	20000128 	.word	0x20000128
 801cd88:	08028bf8 	.word	0x08028bf8
 801cd8c:	08028c18 	.word	0x08028c18

0801cd90 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b084      	sub	sp, #16
 801cd94:	af02      	add	r7, sp, #8
 801cd96:	6078      	str	r0, [r7, #4]
 801cd98:	460b      	mov	r3, r1
 801cd9a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801cd9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cda0:	9301      	str	r3, [sp, #4]
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	9300      	str	r3, [sp, #0]
 801cda6:	4b05      	ldr	r3, [pc, #20]	@ (801cdbc <RegionCommonTxConfigPrint+0x2c>)
 801cda8:	2201      	movs	r2, #1
 801cdaa:	2100      	movs	r1, #0
 801cdac:	2002      	movs	r0, #2
 801cdae:	f007 fdf7 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
}
 801cdb2:	bf00      	nop
 801cdb4:	3708      	adds	r7, #8
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	bd80      	pop	{r7, pc}
 801cdba:	bf00      	nop
 801cdbc:	08028c34 	.word	0x08028c34

0801cdc0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b082      	sub	sp, #8
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
 801cdc8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801cdca:	4b2d      	ldr	r3, [pc, #180]	@ (801ce80 <VerifyRfFreq+0xc0>)
 801cdcc:	6a1b      	ldr	r3, [r3, #32]
 801cdce:	6878      	ldr	r0, [r7, #4]
 801cdd0:	4798      	blx	r3
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	f083 0301 	eor.w	r3, r3, #1
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d001      	beq.n	801cde2 <VerifyRfFreq+0x22>
    {
        return false;
 801cdde:	2300      	movs	r3, #0
 801cde0:	e04a      	b.n	801ce78 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	4a27      	ldr	r2, [pc, #156]	@ (801ce84 <VerifyRfFreq+0xc4>)
 801cde6:	4293      	cmp	r3, r2
 801cde8:	d307      	bcc.n	801cdfa <VerifyRfFreq+0x3a>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	4a26      	ldr	r2, [pc, #152]	@ (801ce88 <VerifyRfFreq+0xc8>)
 801cdee:	4293      	cmp	r3, r2
 801cdf0:	d803      	bhi.n	801cdfa <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	2202      	movs	r2, #2
 801cdf6:	701a      	strb	r2, [r3, #0]
 801cdf8:	e03d      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	4a22      	ldr	r2, [pc, #136]	@ (801ce88 <VerifyRfFreq+0xc8>)
 801cdfe:	4293      	cmp	r3, r2
 801ce00:	d907      	bls.n	801ce12 <VerifyRfFreq+0x52>
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	4a21      	ldr	r2, [pc, #132]	@ (801ce8c <VerifyRfFreq+0xcc>)
 801ce06:	4293      	cmp	r3, r2
 801ce08:	d803      	bhi.n	801ce12 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801ce0a:	683b      	ldr	r3, [r7, #0]
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	701a      	strb	r2, [r3, #0]
 801ce10:	e031      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	4a1d      	ldr	r2, [pc, #116]	@ (801ce8c <VerifyRfFreq+0xcc>)
 801ce16:	4293      	cmp	r3, r2
 801ce18:	d907      	bls.n	801ce2a <VerifyRfFreq+0x6a>
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	4a1c      	ldr	r2, [pc, #112]	@ (801ce90 <VerifyRfFreq+0xd0>)
 801ce1e:	4293      	cmp	r3, r2
 801ce20:	d803      	bhi.n	801ce2a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801ce22:	683b      	ldr	r3, [r7, #0]
 801ce24:	2201      	movs	r2, #1
 801ce26:	701a      	strb	r2, [r3, #0]
 801ce28:	e025      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	4a19      	ldr	r2, [pc, #100]	@ (801ce94 <VerifyRfFreq+0xd4>)
 801ce2e:	4293      	cmp	r3, r2
 801ce30:	d907      	bls.n	801ce42 <VerifyRfFreq+0x82>
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	4a18      	ldr	r2, [pc, #96]	@ (801ce98 <VerifyRfFreq+0xd8>)
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d803      	bhi.n	801ce42 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	2205      	movs	r2, #5
 801ce3e:	701a      	strb	r2, [r3, #0]
 801ce40:	e019      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	4a15      	ldr	r2, [pc, #84]	@ (801ce9c <VerifyRfFreq+0xdc>)
 801ce46:	4293      	cmp	r3, r2
 801ce48:	d907      	bls.n	801ce5a <VerifyRfFreq+0x9a>
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	4a14      	ldr	r2, [pc, #80]	@ (801cea0 <VerifyRfFreq+0xe0>)
 801ce4e:	4293      	cmp	r3, r2
 801ce50:	d803      	bhi.n	801ce5a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801ce52:	683b      	ldr	r3, [r7, #0]
 801ce54:	2203      	movs	r2, #3
 801ce56:	701a      	strb	r2, [r3, #0]
 801ce58:	e00d      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	4a11      	ldr	r2, [pc, #68]	@ (801cea4 <VerifyRfFreq+0xe4>)
 801ce5e:	4293      	cmp	r3, r2
 801ce60:	d307      	bcc.n	801ce72 <VerifyRfFreq+0xb2>
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	4a10      	ldr	r2, [pc, #64]	@ (801cea8 <VerifyRfFreq+0xe8>)
 801ce66:	4293      	cmp	r3, r2
 801ce68:	d803      	bhi.n	801ce72 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801ce6a:	683b      	ldr	r3, [r7, #0]
 801ce6c:	2204      	movs	r2, #4
 801ce6e:	701a      	strb	r2, [r3, #0]
 801ce70:	e001      	b.n	801ce76 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801ce72:	2300      	movs	r3, #0
 801ce74:	e000      	b.n	801ce78 <VerifyRfFreq+0xb8>
    }
    return true;
 801ce76:	2301      	movs	r3, #1
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3708      	adds	r7, #8
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}
 801ce80:	08029818 	.word	0x08029818
 801ce84:	337055c0 	.word	0x337055c0
 801ce88:	338eda3f 	.word	0x338eda3f
 801ce8c:	33bca100 	.word	0x33bca100
 801ce90:	33c5c8c0 	.word	0x33c5c8c0
 801ce94:	33c74f5f 	.word	0x33c74f5f
 801ce98:	33cef080 	.word	0x33cef080
 801ce9c:	33d1fdbf 	.word	0x33d1fdbf
 801cea0:	33d5ce50 	.word	0x33d5ce50
 801cea4:	33d691a0 	.word	0x33d691a0
 801cea8:	33db2580 	.word	0x33db2580

0801ceac <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801ceac:	b590      	push	{r4, r7, lr}
 801ceae:	b08b      	sub	sp, #44	@ 0x2c
 801ceb0:	af04      	add	r7, sp, #16
 801ceb2:	4603      	mov	r3, r0
 801ceb4:	460a      	mov	r2, r1
 801ceb6:	71fb      	strb	r3, [r7, #7]
 801ceb8:	4613      	mov	r3, r2
 801ceba:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801cebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cec0:	4a1f      	ldr	r2, [pc, #124]	@ (801cf40 <GetTimeOnAir+0x94>)
 801cec2:	5cd3      	ldrb	r3, [r2, r3]
 801cec4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801cec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ceca:	491e      	ldr	r1, [pc, #120]	@ (801cf44 <GetTimeOnAir+0x98>)
 801cecc:	4618      	mov	r0, r3
 801cece:	f7ff ff0f 	bl	801ccf0 <RegionCommonGetBandwidth>
 801ced2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801ced4:	2300      	movs	r3, #0
 801ced6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801ced8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cedc:	2b07      	cmp	r3, #7
 801cede:	d118      	bne.n	801cf12 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801cee0:	4b19      	ldr	r3, [pc, #100]	@ (801cf48 <GetTimeOnAir+0x9c>)
 801cee2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801cee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cee8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ceec:	fb02 f303 	mul.w	r3, r2, r3
 801cef0:	4619      	mov	r1, r3
 801cef2:	88bb      	ldrh	r3, [r7, #4]
 801cef4:	b2db      	uxtb	r3, r3
 801cef6:	2201      	movs	r2, #1
 801cef8:	9203      	str	r2, [sp, #12]
 801cefa:	9302      	str	r3, [sp, #8]
 801cefc:	2300      	movs	r3, #0
 801cefe:	9301      	str	r3, [sp, #4]
 801cf00:	2305      	movs	r3, #5
 801cf02:	9300      	str	r3, [sp, #0]
 801cf04:	2300      	movs	r3, #0
 801cf06:	460a      	mov	r2, r1
 801cf08:	68f9      	ldr	r1, [r7, #12]
 801cf0a:	2000      	movs	r0, #0
 801cf0c:	47a0      	blx	r4
 801cf0e:	6178      	str	r0, [r7, #20]
 801cf10:	e011      	b.n	801cf36 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801cf12:	4b0d      	ldr	r3, [pc, #52]	@ (801cf48 <GetTimeOnAir+0x9c>)
 801cf14:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801cf16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801cf1a:	88bb      	ldrh	r3, [r7, #4]
 801cf1c:	b2db      	uxtb	r3, r3
 801cf1e:	2101      	movs	r1, #1
 801cf20:	9103      	str	r1, [sp, #12]
 801cf22:	9302      	str	r3, [sp, #8]
 801cf24:	2300      	movs	r3, #0
 801cf26:	9301      	str	r3, [sp, #4]
 801cf28:	2308      	movs	r3, #8
 801cf2a:	9300      	str	r3, [sp, #0]
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	68f9      	ldr	r1, [r7, #12]
 801cf30:	2001      	movs	r0, #1
 801cf32:	47a0      	blx	r4
 801cf34:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801cf36:	697b      	ldr	r3, [r7, #20]
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	371c      	adds	r7, #28
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd90      	pop	{r4, r7, pc}
 801cf40:	0802975c 	.word	0x0802975c
 801cf44:	08029764 	.word	0x08029764
 801cf48:	08029818 	.word	0x08029818

0801cf4c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b088      	sub	sp, #32
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801cf54:	2300      	movs	r3, #0
 801cf56:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	781b      	ldrb	r3, [r3, #0]
 801cf5c:	3b01      	subs	r3, #1
 801cf5e:	2b37      	cmp	r3, #55	@ 0x37
 801cf60:	f200 8122 	bhi.w	801d1a8 <RegionEU868GetPhyParam+0x25c>
 801cf64:	a201      	add	r2, pc, #4	@ (adr r2, 801cf6c <RegionEU868GetPhyParam+0x20>)
 801cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf6a:	bf00      	nop
 801cf6c:	0801d04d 	.word	0x0801d04d
 801cf70:	0801d053 	.word	0x0801d053
 801cf74:	0801d1a9 	.word	0x0801d1a9
 801cf78:	0801d1a9 	.word	0x0801d1a9
 801cf7c:	0801d1a9 	.word	0x0801d1a9
 801cf80:	0801d059 	.word	0x0801d059
 801cf84:	0801d1a9 	.word	0x0801d1a9
 801cf88:	0801d093 	.word	0x0801d093
 801cf8c:	0801d1a9 	.word	0x0801d1a9
 801cf90:	0801d099 	.word	0x0801d099
 801cf94:	0801d09f 	.word	0x0801d09f
 801cf98:	0801d0a5 	.word	0x0801d0a5
 801cf9c:	0801d0ab 	.word	0x0801d0ab
 801cfa0:	0801d0bb 	.word	0x0801d0bb
 801cfa4:	0801d0cb 	.word	0x0801d0cb
 801cfa8:	0801d0d1 	.word	0x0801d0d1
 801cfac:	0801d0d9 	.word	0x0801d0d9
 801cfb0:	0801d0e1 	.word	0x0801d0e1
 801cfb4:	0801d0e9 	.word	0x0801d0e9
 801cfb8:	0801d0f1 	.word	0x0801d0f1
 801cfbc:	0801d0f9 	.word	0x0801d0f9
 801cfc0:	0801d10d 	.word	0x0801d10d
 801cfc4:	0801d113 	.word	0x0801d113
 801cfc8:	0801d119 	.word	0x0801d119
 801cfcc:	0801d11f 	.word	0x0801d11f
 801cfd0:	0801d12b 	.word	0x0801d12b
 801cfd4:	0801d137 	.word	0x0801d137
 801cfd8:	0801d13d 	.word	0x0801d13d
 801cfdc:	0801d145 	.word	0x0801d145
 801cfe0:	0801d14b 	.word	0x0801d14b
 801cfe4:	0801d151 	.word	0x0801d151
 801cfe8:	0801d159 	.word	0x0801d159
 801cfec:	0801d05f 	.word	0x0801d05f
 801cff0:	0801d1a9 	.word	0x0801d1a9
 801cff4:	0801d1a9 	.word	0x0801d1a9
 801cff8:	0801d1a9 	.word	0x0801d1a9
 801cffc:	0801d1a9 	.word	0x0801d1a9
 801d000:	0801d1a9 	.word	0x0801d1a9
 801d004:	0801d1a9 	.word	0x0801d1a9
 801d008:	0801d1a9 	.word	0x0801d1a9
 801d00c:	0801d1a9 	.word	0x0801d1a9
 801d010:	0801d1a9 	.word	0x0801d1a9
 801d014:	0801d1a9 	.word	0x0801d1a9
 801d018:	0801d1a9 	.word	0x0801d1a9
 801d01c:	0801d1a9 	.word	0x0801d1a9
 801d020:	0801d1a9 	.word	0x0801d1a9
 801d024:	0801d15f 	.word	0x0801d15f
 801d028:	0801d165 	.word	0x0801d165
 801d02c:	0801d173 	.word	0x0801d173
 801d030:	0801d1a9 	.word	0x0801d1a9
 801d034:	0801d1a9 	.word	0x0801d1a9
 801d038:	0801d179 	.word	0x0801d179
 801d03c:	0801d17f 	.word	0x0801d17f
 801d040:	0801d1a9 	.word	0x0801d1a9
 801d044:	0801d185 	.word	0x0801d185
 801d048:	0801d195 	.word	0x0801d195
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801d04c:	2300      	movs	r3, #0
 801d04e:	61bb      	str	r3, [r7, #24]
            break;
 801d050:	e0ab      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801d052:	2300      	movs	r3, #0
 801d054:	61bb      	str	r3, [r7, #24]
            break;
 801d056:	e0a8      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801d058:	2300      	movs	r3, #0
 801d05a:	61bb      	str	r3, [r7, #24]
            break;
 801d05c:	e0a5      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801d064:	733b      	strb	r3, [r7, #12]
 801d066:	2307      	movs	r3, #7
 801d068:	737b      	strb	r3, [r7, #13]
 801d06a:	2300      	movs	r3, #0
 801d06c:	73bb      	strb	r3, [r7, #14]
 801d06e:	2310      	movs	r3, #16
 801d070:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801d072:	4b51      	ldr	r3, [pc, #324]	@ (801d1b8 <RegionEU868GetPhyParam+0x26c>)
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801d07a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801d07c:	4b4e      	ldr	r3, [pc, #312]	@ (801d1b8 <RegionEU868GetPhyParam+0x26c>)
 801d07e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801d080:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801d082:	f107 030c 	add.w	r3, r7, #12
 801d086:	4618      	mov	r0, r3
 801d088:	f7ff fdde 	bl	801cc48 <RegionCommonGetNextLowerTxDr>
 801d08c:	4603      	mov	r3, r0
 801d08e:	61bb      	str	r3, [r7, #24]
            break;
 801d090:	e08b      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801d092:	2300      	movs	r3, #0
 801d094:	61bb      	str	r3, [r7, #24]
            break;
 801d096:	e088      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801d098:	2300      	movs	r3, #0
 801d09a:	61bb      	str	r3, [r7, #24]
            break;
 801d09c:	e085      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801d09e:	2340      	movs	r3, #64	@ 0x40
 801d0a0:	61bb      	str	r3, [r7, #24]
            break;
 801d0a2:	e082      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801d0a4:	2320      	movs	r3, #32
 801d0a6:	61bb      	str	r3, [r7, #24]
            break;
 801d0a8:	e07f      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d0b0:	461a      	mov	r2, r3
 801d0b2:	4b42      	ldr	r3, [pc, #264]	@ (801d1bc <RegionEU868GetPhyParam+0x270>)
 801d0b4:	5c9b      	ldrb	r3, [r3, r2]
 801d0b6:	61bb      	str	r3, [r7, #24]
            break;
 801d0b8:	e077      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d0c0:	461a      	mov	r2, r3
 801d0c2:	4b3f      	ldr	r3, [pc, #252]	@ (801d1c0 <RegionEU868GetPhyParam+0x274>)
 801d0c4:	5c9b      	ldrb	r3, [r3, r2]
 801d0c6:	61bb      	str	r3, [r7, #24]
            break;
 801d0c8:	e06f      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801d0ca:	2301      	movs	r3, #1
 801d0cc:	61bb      	str	r3, [r7, #24]
            break;
 801d0ce:	e06c      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801d0d0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801d0d4:	61bb      	str	r3, [r7, #24]
            break;
 801d0d6:	e068      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801d0d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d0dc:	61bb      	str	r3, [r7, #24]
            break;
 801d0de:	e064      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801d0e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801d0e4:	61bb      	str	r3, [r7, #24]
            break;
 801d0e6:	e060      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801d0e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d0ec:	61bb      	str	r3, [r7, #24]
            break;
 801d0ee:	e05c      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801d0f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 801d0f4:	61bb      	str	r3, [r7, #24]
            break;
 801d0f6:	e058      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801d0f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d0fc:	4831      	ldr	r0, [pc, #196]	@ (801d1c4 <RegionEU868GetPhyParam+0x278>)
 801d0fe:	f002 fa73 	bl	801f5e8 <randr>
 801d102:	4603      	mov	r3, r0
 801d104:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801d108:	61bb      	str	r3, [r7, #24]
            break;
 801d10a:	e04e      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801d10c:	2300      	movs	r3, #0
 801d10e:	61bb      	str	r3, [r7, #24]
            break;
 801d110:	e04b      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801d112:	4b2d      	ldr	r3, [pc, #180]	@ (801d1c8 <RegionEU868GetPhyParam+0x27c>)
 801d114:	61bb      	str	r3, [r7, #24]
            break;
 801d116:	e048      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801d118:	2300      	movs	r3, #0
 801d11a:	61bb      	str	r3, [r7, #24]
            break;
 801d11c:	e045      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801d11e:	4b26      	ldr	r3, [pc, #152]	@ (801d1b8 <RegionEU868GetPhyParam+0x26c>)
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801d126:	61bb      	str	r3, [r7, #24]
            break;
 801d128:	e03f      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801d12a:	4b23      	ldr	r3, [pc, #140]	@ (801d1b8 <RegionEU868GetPhyParam+0x26c>)
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801d132:	61bb      	str	r3, [r7, #24]
            break;
 801d134:	e039      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801d136:	2310      	movs	r3, #16
 801d138:	61bb      	str	r3, [r7, #24]
            break;
 801d13a:	e036      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801d13c:	4b1e      	ldr	r3, [pc, #120]	@ (801d1b8 <RegionEU868GetPhyParam+0x26c>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	61bb      	str	r3, [r7, #24]
            break;
 801d142:	e032      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801d144:	2300      	movs	r3, #0
 801d146:	61bb      	str	r3, [r7, #24]
            break;
 801d148:	e02f      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801d14a:	2300      	movs	r3, #0
 801d14c:	61bb      	str	r3, [r7, #24]
            break;
 801d14e:	e02c      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801d150:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801d154:	61bb      	str	r3, [r7, #24]
            break;
 801d156:	e028      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801d158:	4b1c      	ldr	r3, [pc, #112]	@ (801d1cc <RegionEU868GetPhyParam+0x280>)
 801d15a:	61bb      	str	r3, [r7, #24]
            break;
 801d15c:	e025      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801d15e:	4b1a      	ldr	r3, [pc, #104]	@ (801d1c8 <RegionEU868GetPhyParam+0x27c>)
 801d160:	61bb      	str	r3, [r7, #24]
            break;
 801d162:	e022      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801d164:	2311      	movs	r3, #17
 801d166:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801d168:	2301      	movs	r3, #1
 801d16a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801d16c:	2300      	movs	r3, #0
 801d16e:	76bb      	strb	r3, [r7, #26]
            break;
 801d170:	e01b      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801d172:	2303      	movs	r3, #3
 801d174:	61bb      	str	r3, [r7, #24]
            break;
 801d176:	e018      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801d178:	4b13      	ldr	r3, [pc, #76]	@ (801d1c8 <RegionEU868GetPhyParam+0x27c>)
 801d17a:	61bb      	str	r3, [r7, #24]
            break;
 801d17c:	e015      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801d17e:	2303      	movs	r3, #3
 801d180:	61bb      	str	r3, [r7, #24]
            break;
 801d182:	e012      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d18a:	461a      	mov	r2, r3
 801d18c:	4b10      	ldr	r3, [pc, #64]	@ (801d1d0 <RegionEU868GetPhyParam+0x284>)
 801d18e:	5c9b      	ldrb	r3, [r3, r2]
 801d190:	61bb      	str	r3, [r7, #24]
            break;
 801d192:	e00a      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d19a:	490e      	ldr	r1, [pc, #56]	@ (801d1d4 <RegionEU868GetPhyParam+0x288>)
 801d19c:	4618      	mov	r0, r3
 801d19e:	f7ff fda7 	bl	801ccf0 <RegionCommonGetBandwidth>
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	61bb      	str	r3, [r7, #24]
            break;
 801d1a6:	e000      	b.n	801d1aa <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 801d1a8:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801d1aa:	69bb      	ldr	r3, [r7, #24]
 801d1ac:	61fb      	str	r3, [r7, #28]
 801d1ae:	69fb      	ldr	r3, [r7, #28]
}
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	3720      	adds	r7, #32
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}
 801d1b8:	20002014 	.word	0x20002014
 801d1bc:	08029784 	.word	0x08029784
 801d1c0:	0802978c 	.word	0x0802978c
 801d1c4:	fffffc18 	.word	0xfffffc18
 801d1c8:	33d3e608 	.word	0x33d3e608
 801d1cc:	4009999a 	.word	0x4009999a
 801d1d0:	0802975c 	.word	0x0802975c
 801d1d4:	08029764 	.word	0x08029764

0801d1d8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801d1d8:	b590      	push	{r4, r7, lr}
 801d1da:	b085      	sub	sp, #20
 801d1dc:	af02      	add	r7, sp, #8
 801d1de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801d1e0:	4b11      	ldr	r3, [pc, #68]	@ (801d228 <RegionEU868SetBandTxDone+0x50>)
 801d1e2:	681a      	ldr	r2, [r3, #0]
 801d1e4:	4b11      	ldr	r3, [pc, #68]	@ (801d22c <RegionEU868SetBandTxDone+0x54>)
 801d1e6:	6819      	ldr	r1, [r3, #0]
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	781b      	ldrb	r3, [r3, #0]
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	005b      	lsls	r3, r3, #1
 801d1f2:	4403      	add	r3, r0
 801d1f4:	009b      	lsls	r3, r3, #2
 801d1f6:	440b      	add	r3, r1
 801d1f8:	3309      	adds	r3, #9
 801d1fa:	781b      	ldrb	r3, [r3, #0]
 801d1fc:	4619      	mov	r1, r3
 801d1fe:	460b      	mov	r3, r1
 801d200:	005b      	lsls	r3, r3, #1
 801d202:	440b      	add	r3, r1
 801d204:	00db      	lsls	r3, r3, #3
 801d206:	18d0      	adds	r0, r2, r3
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	6899      	ldr	r1, [r3, #8]
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	785c      	ldrb	r4, [r3, #1]
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	691a      	ldr	r2, [r3, #16]
 801d214:	9200      	str	r2, [sp, #0]
 801d216:	68db      	ldr	r3, [r3, #12]
 801d218:	4622      	mov	r2, r4
 801d21a:	f7ff f88f 	bl	801c33c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801d21e:	bf00      	nop
 801d220:	370c      	adds	r7, #12
 801d222:	46bd      	mov	sp, r7
 801d224:	bd90      	pop	{r4, r7, pc}
 801d226:	bf00      	nop
 801d228:	20002018 	.word	0x20002018
 801d22c:	20002014 	.word	0x20002014

0801d230 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b0b0      	sub	sp, #192	@ 0xc0
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801d238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d23c:	2290      	movs	r2, #144	@ 0x90
 801d23e:	2100      	movs	r1, #0
 801d240:	4618      	mov	r0, r3
 801d242:	f008 f80c 	bl	802525e <memset>
 801d246:	2364      	movs	r3, #100	@ 0x64
 801d248:	863b      	strh	r3, [r7, #48]	@ 0x30
 801d24a:	2364      	movs	r3, #100	@ 0x64
 801d24c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801d250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d254:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801d258:	230a      	movs	r3, #10
 801d25a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 801d25e:	2364      	movs	r3, #100	@ 0x64
 801d260:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801d264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d268:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	7b1b      	ldrb	r3, [r3, #12]
 801d270:	2b02      	cmp	r3, #2
 801d272:	d05d      	beq.n	801d330 <RegionEU868InitDefaults+0x100>
 801d274:	2b02      	cmp	r3, #2
 801d276:	dc6a      	bgt.n	801d34e <RegionEU868InitDefaults+0x11e>
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d002      	beq.n	801d282 <RegionEU868InitDefaults+0x52>
 801d27c:	2b01      	cmp	r3, #1
 801d27e:	d03e      	beq.n	801d2fe <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801d280:	e065      	b.n	801d34e <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d062      	beq.n	801d350 <RegionEU868InitDefaults+0x120>
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	685b      	ldr	r3, [r3, #4]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d05e      	beq.n	801d350 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	685b      	ldr	r3, [r3, #4]
 801d296:	4a30      	ldr	r2, [pc, #192]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d298:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	689b      	ldr	r3, [r3, #8]
 801d29e:	4a2f      	ldr	r2, [pc, #188]	@ (801d35c <RegionEU868InitDefaults+0x12c>)
 801d2a0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801d2a2:	4b2e      	ldr	r3, [pc, #184]	@ (801d35c <RegionEU868InitDefaults+0x12c>)
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d2aa:	2290      	movs	r2, #144	@ 0x90
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f002 f9b2 	bl	801f616 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801d2b2:	4b29      	ldr	r3, [pc, #164]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	4a2a      	ldr	r2, [pc, #168]	@ (801d360 <RegionEU868InitDefaults+0x130>)
 801d2b8:	ca07      	ldmia	r2, {r0, r1, r2}
 801d2ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801d2be:	4b26      	ldr	r3, [pc, #152]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	4a28      	ldr	r2, [pc, #160]	@ (801d364 <RegionEU868InitDefaults+0x134>)
 801d2c4:	330c      	adds	r3, #12
 801d2c6:	ca07      	ldmia	r2, {r0, r1, r2}
 801d2c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801d2cc:	4b22      	ldr	r3, [pc, #136]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	4a25      	ldr	r2, [pc, #148]	@ (801d368 <RegionEU868InitDefaults+0x138>)
 801d2d2:	3318      	adds	r3, #24
 801d2d4:	ca07      	ldmia	r2, {r0, r1, r2}
 801d2d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801d2da:	4b1f      	ldr	r3, [pc, #124]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	2207      	movs	r2, #7
 801d2e0:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801d2e4:	4b1c      	ldr	r3, [pc, #112]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801d2ec:	4b1a      	ldr	r3, [pc, #104]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801d2f4:	2201      	movs	r2, #1
 801d2f6:	4619      	mov	r1, r3
 801d2f8:	f7fe fffa 	bl	801c2f0 <RegionCommonChanMaskCopy>
 801d2fc:	e028      	b.n	801d350 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801d2fe:	4b16      	ldr	r3, [pc, #88]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	2200      	movs	r2, #0
 801d304:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801d306:	4b14      	ldr	r3, [pc, #80]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	2200      	movs	r2, #0
 801d30c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801d30e:	4b12      	ldr	r3, [pc, #72]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	2200      	movs	r2, #0
 801d314:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801d316:	4b10      	ldr	r3, [pc, #64]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801d31e:	4b0e      	ldr	r3, [pc, #56]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801d326:	2201      	movs	r2, #1
 801d328:	4619      	mov	r1, r3
 801d32a:	f7fe ffe1 	bl	801c2f0 <RegionCommonChanMaskCopy>
            break;
 801d32e:	e00f      	b.n	801d350 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801d330:	4b09      	ldr	r3, [pc, #36]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801d338:	4b07      	ldr	r3, [pc, #28]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801d340:	4b05      	ldr	r3, [pc, #20]	@ (801d358 <RegionEU868InitDefaults+0x128>)
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	430a      	orrs	r2, r1
 801d346:	b292      	uxth	r2, r2
 801d348:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 801d34c:	e000      	b.n	801d350 <RegionEU868InitDefaults+0x120>
            break;
 801d34e:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801d350:	37c0      	adds	r7, #192	@ 0xc0
 801d352:	46bd      	mov	sp, r7
 801d354:	bd80      	pop	{r7, pc}
 801d356:	bf00      	nop
 801d358:	20002014 	.word	0x20002014
 801d35c:	20002018 	.word	0x20002018
 801d360:	08028c50 	.word	0x08028c50
 801d364:	08028c5c 	.word	0x08028c5c
 801d368:	08028c68 	.word	0x08028c68

0801d36c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b084      	sub	sp, #16
 801d370:	af00      	add	r7, sp, #0
 801d372:	6078      	str	r0, [r7, #4]
 801d374:	460b      	mov	r3, r1
 801d376:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801d378:	78fb      	ldrb	r3, [r7, #3]
 801d37a:	2b0f      	cmp	r3, #15
 801d37c:	d86c      	bhi.n	801d458 <RegionEU868Verify+0xec>
 801d37e:	a201      	add	r2, pc, #4	@ (adr r2, 801d384 <RegionEU868Verify+0x18>)
 801d380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d384:	0801d3c5 	.word	0x0801d3c5
 801d388:	0801d459 	.word	0x0801d459
 801d38c:	0801d459 	.word	0x0801d459
 801d390:	0801d459 	.word	0x0801d459
 801d394:	0801d459 	.word	0x0801d459
 801d398:	0801d3dd 	.word	0x0801d3dd
 801d39c:	0801d3fb 	.word	0x0801d3fb
 801d3a0:	0801d419 	.word	0x0801d419
 801d3a4:	0801d459 	.word	0x0801d459
 801d3a8:	0801d437 	.word	0x0801d437
 801d3ac:	0801d437 	.word	0x0801d437
 801d3b0:	0801d459 	.word	0x0801d459
 801d3b4:	0801d459 	.word	0x0801d459
 801d3b8:	0801d459 	.word	0x0801d459
 801d3bc:	0801d459 	.word	0x0801d459
 801d3c0:	0801d455 	.word	0x0801d455
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	f107 020f 	add.w	r2, r7, #15
 801d3d0:	4611      	mov	r1, r2
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7ff fcf4 	bl	801cdc0 <VerifyRfFreq>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	e03e      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	f993 3000 	ldrsb.w	r3, [r3]
 801d3e2:	2207      	movs	r2, #7
 801d3e4:	2100      	movs	r1, #0
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7fe ff05 	bl	801c1f6 <RegionCommonValueInRange>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	bf14      	ite	ne
 801d3f2:	2301      	movne	r3, #1
 801d3f4:	2300      	moveq	r3, #0
 801d3f6:	b2db      	uxtb	r3, r3
 801d3f8:	e02f      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	f993 3000 	ldrsb.w	r3, [r3]
 801d400:	2205      	movs	r2, #5
 801d402:	2100      	movs	r1, #0
 801d404:	4618      	mov	r0, r3
 801d406:	f7fe fef6 	bl	801c1f6 <RegionCommonValueInRange>
 801d40a:	4603      	mov	r3, r0
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	bf14      	ite	ne
 801d410:	2301      	movne	r3, #1
 801d412:	2300      	moveq	r3, #0
 801d414:	b2db      	uxtb	r3, r3
 801d416:	e020      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	f993 3000 	ldrsb.w	r3, [r3]
 801d41e:	2207      	movs	r2, #7
 801d420:	2100      	movs	r1, #0
 801d422:	4618      	mov	r0, r3
 801d424:	f7fe fee7 	bl	801c1f6 <RegionCommonValueInRange>
 801d428:	4603      	mov	r3, r0
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	bf14      	ite	ne
 801d42e:	2301      	movne	r3, #1
 801d430:	2300      	moveq	r3, #0
 801d432:	b2db      	uxtb	r3, r3
 801d434:	e011      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	f993 3000 	ldrsb.w	r3, [r3]
 801d43c:	2207      	movs	r2, #7
 801d43e:	2100      	movs	r1, #0
 801d440:	4618      	mov	r0, r3
 801d442:	f7fe fed8 	bl	801c1f6 <RegionCommonValueInRange>
 801d446:	4603      	mov	r3, r0
 801d448:	2b00      	cmp	r3, #0
 801d44a:	bf14      	ite	ne
 801d44c:	2301      	movne	r3, #1
 801d44e:	2300      	moveq	r3, #0
 801d450:	b2db      	uxtb	r3, r3
 801d452:	e002      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801d454:	2301      	movs	r3, #1
 801d456:	e000      	b.n	801d45a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801d458:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801d45a:	4618      	mov	r0, r3
 801d45c:	3710      	adds	r7, #16
 801d45e:	46bd      	mov	sp, r7
 801d460:	bd80      	pop	{r7, pc}
 801d462:	bf00      	nop

0801d464 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801d464:	b580      	push	{r7, lr}
 801d466:	b08a      	sub	sp, #40	@ 0x28
 801d468:	af00      	add	r7, sp, #0
 801d46a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801d46c:	2350      	movs	r3, #80	@ 0x50
 801d46e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	7a1b      	ldrb	r3, [r3, #8]
 801d476:	2b10      	cmp	r3, #16
 801d478:	d162      	bne.n	801d540 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	685b      	ldr	r3, [r3, #4]
 801d47e:	330f      	adds	r3, #15
 801d480:	781b      	ldrb	r3, [r3, #0]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d15e      	bne.n	801d544 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801d486:	2300      	movs	r3, #0
 801d488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d48c:	2303      	movs	r3, #3
 801d48e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d492:	e050      	b.n	801d536 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801d494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d498:	2b07      	cmp	r3, #7
 801d49a:	d824      	bhi.n	801d4e6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	685a      	ldr	r2, [r3, #4]
 801d4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d4a4:	4413      	add	r3, r2
 801d4a6:	781b      	ldrb	r3, [r3, #0]
 801d4a8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801d4aa:	69ba      	ldr	r2, [r7, #24]
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	6859      	ldr	r1, [r3, #4]
 801d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d4b4:	3301      	adds	r3, #1
 801d4b6:	440b      	add	r3, r1
 801d4b8:	781b      	ldrb	r3, [r3, #0]
 801d4ba:	021b      	lsls	r3, r3, #8
 801d4bc:	4313      	orrs	r3, r2
 801d4be:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801d4c0:	69ba      	ldr	r2, [r7, #24]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	6859      	ldr	r1, [r3, #4]
 801d4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d4ca:	3302      	adds	r3, #2
 801d4cc:	440b      	add	r3, r1
 801d4ce:	781b      	ldrb	r3, [r3, #0]
 801d4d0:	041b      	lsls	r3, r3, #16
 801d4d2:	4313      	orrs	r3, r2
 801d4d4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801d4d6:	69bb      	ldr	r3, [r7, #24]
 801d4d8:	2264      	movs	r2, #100	@ 0x64
 801d4da:	fb02 f303 	mul.w	r3, r2, r3
 801d4de:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	61fb      	str	r3, [r7, #28]
 801d4e4:	e006      	b.n	801d4f4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801d4f4:	69bb      	ldr	r3, [r7, #24]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d00b      	beq.n	801d512 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801d4fa:	f107 0318 	add.w	r3, r7, #24
 801d4fe:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801d500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d504:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801d506:	f107 0310 	add.w	r3, r7, #16
 801d50a:	4618      	mov	r0, r3
 801d50c:	f000 fd14 	bl	801df38 <RegionEU868ChannelAdd>
 801d510:	e007      	b.n	801d522 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801d512:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d516:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801d518:	f107 030c 	add.w	r3, r7, #12
 801d51c:	4618      	mov	r0, r3
 801d51e:	f000 fdad 	bl	801e07c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801d522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d526:	3303      	adds	r3, #3
 801d528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d52c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d530:	3301      	adds	r3, #1
 801d532:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d536:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d53a:	2b0f      	cmp	r3, #15
 801d53c:	d9aa      	bls.n	801d494 <RegionEU868ApplyCFList+0x30>
 801d53e:	e002      	b.n	801d546 <RegionEU868ApplyCFList+0xe2>
        return;
 801d540:	bf00      	nop
 801d542:	e000      	b.n	801d546 <RegionEU868ApplyCFList+0xe2>
        return;
 801d544:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801d546:	3728      	adds	r7, #40	@ 0x28
 801d548:	46bd      	mov	sp, r7
 801d54a:	bd80      	pop	{r7, pc}

0801d54c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b082      	sub	sp, #8
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	791b      	ldrb	r3, [r3, #4]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d002      	beq.n	801d562 <RegionEU868ChanMaskSet+0x16>
 801d55c:	2b01      	cmp	r3, #1
 801d55e:	d00b      	beq.n	801d578 <RegionEU868ChanMaskSet+0x2c>
 801d560:	e015      	b.n	801d58e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801d562:	4b0e      	ldr	r3, [pc, #56]	@ (801d59c <RegionEU868ChanMaskSet+0x50>)
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	2201      	movs	r2, #1
 801d570:	4619      	mov	r1, r3
 801d572:	f7fe febd 	bl	801c2f0 <RegionCommonChanMaskCopy>
            break;
 801d576:	e00c      	b.n	801d592 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801d578:	4b08      	ldr	r3, [pc, #32]	@ (801d59c <RegionEU868ChanMaskSet+0x50>)
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	2201      	movs	r2, #1
 801d586:	4619      	mov	r1, r3
 801d588:	f7fe feb2 	bl	801c2f0 <RegionCommonChanMaskCopy>
            break;
 801d58c:	e001      	b.n	801d592 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801d58e:	2300      	movs	r3, #0
 801d590:	e000      	b.n	801d594 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801d592:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801d594:	4618      	mov	r0, r3
 801d596:	3708      	adds	r7, #8
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd80      	pop	{r7, pc}
 801d59c:	20002014 	.word	0x20002014

0801d5a0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b088      	sub	sp, #32
 801d5a4:	af02      	add	r7, sp, #8
 801d5a6:	60ba      	str	r2, [r7, #8]
 801d5a8:	607b      	str	r3, [r7, #4]
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	73fb      	strb	r3, [r7, #15]
 801d5ae:	460b      	mov	r3, r1
 801d5b0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801d5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5ba:	2b07      	cmp	r3, #7
 801d5bc:	bfa8      	it	ge
 801d5be:	2307      	movge	r3, #7
 801d5c0:	b25a      	sxtb	r2, r3
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d5cc:	491e      	ldr	r1, [pc, #120]	@ (801d648 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f7ff fb8e 	bl	801ccf0 <RegionCommonGetBandwidth>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	b2da      	uxtb	r2, r3
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d5e2:	2b07      	cmp	r3, #7
 801d5e4:	d10a      	bne.n	801d5fc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d5ec:	461a      	mov	r2, r3
 801d5ee:	4b17      	ldr	r3, [pc, #92]	@ (801d64c <RegionEU868ComputeRxWindowParameters+0xac>)
 801d5f0:	5c9b      	ldrb	r3, [r3, r2]
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7ff f8b0 	bl	801c758 <RegionCommonComputeSymbolTimeFsk>
 801d5f8:	6178      	str	r0, [r7, #20]
 801d5fa:	e011      	b.n	801d620 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d602:	461a      	mov	r2, r3
 801d604:	4b11      	ldr	r3, [pc, #68]	@ (801d64c <RegionEU868ComputeRxWindowParameters+0xac>)
 801d606:	5c9a      	ldrb	r2, [r3, r2]
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d60e:	4619      	mov	r1, r3
 801d610:	4b0d      	ldr	r3, [pc, #52]	@ (801d648 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801d612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d616:	4619      	mov	r1, r3
 801d618:	4610      	mov	r0, r2
 801d61a:	f7ff f887 	bl	801c72c <RegionCommonComputeSymbolTimeLoRa>
 801d61e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801d620:	4b0b      	ldr	r3, [pc, #44]	@ (801d650 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801d622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d624:	4798      	blx	r3
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	3308      	adds	r3, #8
 801d62a:	687a      	ldr	r2, [r7, #4]
 801d62c:	320c      	adds	r2, #12
 801d62e:	7bb9      	ldrb	r1, [r7, #14]
 801d630:	9201      	str	r2, [sp, #4]
 801d632:	9300      	str	r3, [sp, #0]
 801d634:	4603      	mov	r3, r0
 801d636:	68ba      	ldr	r2, [r7, #8]
 801d638:	6978      	ldr	r0, [r7, #20]
 801d63a:	f7ff f89d 	bl	801c778 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801d63e:	bf00      	nop
 801d640:	3718      	adds	r7, #24
 801d642:	46bd      	mov	sp, r7
 801d644:	bd80      	pop	{r7, pc}
 801d646:	bf00      	nop
 801d648:	08029764 	.word	0x08029764
 801d64c:	0802975c 	.word	0x0802975c
 801d650:	08029818 	.word	0x08029818

0801d654 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801d654:	b5b0      	push	{r4, r5, r7, lr}
 801d656:	b090      	sub	sp, #64	@ 0x40
 801d658:	af0a      	add	r7, sp, #40	@ 0x28
 801d65a:	6078      	str	r0, [r7, #4]
 801d65c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	785b      	ldrb	r3, [r3, #1]
 801d662:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801d664:	2300      	movs	r3, #0
 801d666:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801d668:	2300      	movs	r3, #0
 801d66a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	685b      	ldr	r3, [r3, #4]
 801d670:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801d672:	4b5a      	ldr	r3, [pc, #360]	@ (801d7dc <RegionEU868RxConfig+0x188>)
 801d674:	685b      	ldr	r3, [r3, #4]
 801d676:	4798      	blx	r3
 801d678:	4603      	mov	r3, r0
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d001      	beq.n	801d682 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801d67e:	2300      	movs	r3, #0
 801d680:	e0a8      	b.n	801d7d4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	7cdb      	ldrb	r3, [r3, #19]
 801d686:	2b00      	cmp	r3, #0
 801d688:	d126      	bne.n	801d6d8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801d68a:	4b55      	ldr	r3, [pc, #340]	@ (801d7e0 <RegionEU868RxConfig+0x18c>)
 801d68c:	681a      	ldr	r2, [r3, #0]
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	781b      	ldrb	r3, [r3, #0]
 801d692:	4619      	mov	r1, r3
 801d694:	460b      	mov	r3, r1
 801d696:	005b      	lsls	r3, r3, #1
 801d698:	440b      	add	r3, r1
 801d69a:	009b      	lsls	r3, r3, #2
 801d69c:	4413      	add	r3, r2
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801d6a2:	4b4f      	ldr	r3, [pc, #316]	@ (801d7e0 <RegionEU868RxConfig+0x18c>)
 801d6a4:	681a      	ldr	r2, [r3, #0]
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	781b      	ldrb	r3, [r3, #0]
 801d6aa:	4619      	mov	r1, r3
 801d6ac:	460b      	mov	r3, r1
 801d6ae:	005b      	lsls	r3, r3, #1
 801d6b0:	440b      	add	r3, r1
 801d6b2:	009b      	lsls	r3, r3, #2
 801d6b4:	4413      	add	r3, r2
 801d6b6:	3304      	adds	r3, #4
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d00c      	beq.n	801d6d8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801d6be:	4b48      	ldr	r3, [pc, #288]	@ (801d7e0 <RegionEU868RxConfig+0x18c>)
 801d6c0:	681a      	ldr	r2, [r3, #0]
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	781b      	ldrb	r3, [r3, #0]
 801d6c6:	4619      	mov	r1, r3
 801d6c8:	460b      	mov	r3, r1
 801d6ca:	005b      	lsls	r3, r3, #1
 801d6cc:	440b      	add	r3, r1
 801d6ce:	009b      	lsls	r3, r3, #2
 801d6d0:	4413      	add	r3, r2
 801d6d2:	3304      	adds	r3, #4
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801d6d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d6dc:	4a41      	ldr	r2, [pc, #260]	@ (801d7e4 <RegionEU868RxConfig+0x190>)
 801d6de:	5cd3      	ldrb	r3, [r2, r3]
 801d6e0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801d6e2:	4b3e      	ldr	r3, [pc, #248]	@ (801d7dc <RegionEU868RxConfig+0x188>)
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	6938      	ldr	r0, [r7, #16]
 801d6e8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801d6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d6ee:	2b07      	cmp	r3, #7
 801d6f0:	d128      	bne.n	801d744 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801d6f6:	4b39      	ldr	r3, [pc, #228]	@ (801d7dc <RegionEU868RxConfig+0x188>)
 801d6f8:	699c      	ldr	r4, [r3, #24]
 801d6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d6fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d702:	fb02 f303 	mul.w	r3, r2, r3
 801d706:	4619      	mov	r1, r3
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	689b      	ldr	r3, [r3, #8]
 801d70c:	b29b      	uxth	r3, r3
 801d70e:	687a      	ldr	r2, [r7, #4]
 801d710:	7c92      	ldrb	r2, [r2, #18]
 801d712:	7df8      	ldrb	r0, [r7, #23]
 801d714:	9209      	str	r2, [sp, #36]	@ 0x24
 801d716:	2200      	movs	r2, #0
 801d718:	9208      	str	r2, [sp, #32]
 801d71a:	2200      	movs	r2, #0
 801d71c:	9207      	str	r2, [sp, #28]
 801d71e:	2200      	movs	r2, #0
 801d720:	9206      	str	r2, [sp, #24]
 801d722:	2201      	movs	r2, #1
 801d724:	9205      	str	r2, [sp, #20]
 801d726:	2200      	movs	r2, #0
 801d728:	9204      	str	r2, [sp, #16]
 801d72a:	2200      	movs	r2, #0
 801d72c:	9203      	str	r2, [sp, #12]
 801d72e:	9302      	str	r3, [sp, #8]
 801d730:	2305      	movs	r3, #5
 801d732:	9301      	str	r3, [sp, #4]
 801d734:	4b2c      	ldr	r3, [pc, #176]	@ (801d7e8 <RegionEU868RxConfig+0x194>)
 801d736:	9300      	str	r3, [sp, #0]
 801d738:	2300      	movs	r3, #0
 801d73a:	460a      	mov	r2, r1
 801d73c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801d740:	47a0      	blx	r4
 801d742:	e024      	b.n	801d78e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801d744:	2301      	movs	r3, #1
 801d746:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801d748:	4b24      	ldr	r3, [pc, #144]	@ (801d7dc <RegionEU868RxConfig+0x188>)
 801d74a:	699c      	ldr	r4, [r3, #24]
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	789b      	ldrb	r3, [r3, #2]
 801d750:	461d      	mov	r5, r3
 801d752:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	689b      	ldr	r3, [r3, #8]
 801d75a:	b29b      	uxth	r3, r3
 801d75c:	687a      	ldr	r2, [r7, #4]
 801d75e:	7c92      	ldrb	r2, [r2, #18]
 801d760:	7df8      	ldrb	r0, [r7, #23]
 801d762:	9209      	str	r2, [sp, #36]	@ 0x24
 801d764:	2201      	movs	r2, #1
 801d766:	9208      	str	r2, [sp, #32]
 801d768:	2200      	movs	r2, #0
 801d76a:	9207      	str	r2, [sp, #28]
 801d76c:	2200      	movs	r2, #0
 801d76e:	9206      	str	r2, [sp, #24]
 801d770:	2200      	movs	r2, #0
 801d772:	9205      	str	r2, [sp, #20]
 801d774:	2200      	movs	r2, #0
 801d776:	9204      	str	r2, [sp, #16]
 801d778:	2200      	movs	r2, #0
 801d77a:	9203      	str	r2, [sp, #12]
 801d77c:	9302      	str	r3, [sp, #8]
 801d77e:	2308      	movs	r3, #8
 801d780:	9301      	str	r3, [sp, #4]
 801d782:	2300      	movs	r3, #0
 801d784:	9300      	str	r3, [sp, #0]
 801d786:	2301      	movs	r3, #1
 801d788:	460a      	mov	r2, r1
 801d78a:	4629      	mov	r1, r5
 801d78c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	7c5b      	ldrb	r3, [r3, #17]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d005      	beq.n	801d7a2 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801d796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d79a:	4a14      	ldr	r2, [pc, #80]	@ (801d7ec <RegionEU868RxConfig+0x198>)
 801d79c:	5cd3      	ldrb	r3, [r2, r3]
 801d79e:	75bb      	strb	r3, [r7, #22]
 801d7a0:	e004      	b.n	801d7ac <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801d7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d7a6:	4a12      	ldr	r2, [pc, #72]	@ (801d7f0 <RegionEU868RxConfig+0x19c>)
 801d7a8:	5cd3      	ldrb	r3, [r2, r3]
 801d7aa:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801d7ac:	4b0b      	ldr	r3, [pc, #44]	@ (801d7dc <RegionEU868RxConfig+0x188>)
 801d7ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d7b0:	7dba      	ldrb	r2, [r7, #22]
 801d7b2:	320d      	adds	r2, #13
 801d7b4:	b2d1      	uxtb	r1, r2
 801d7b6:	7dfa      	ldrb	r2, [r7, #23]
 801d7b8:	4610      	mov	r0, r2
 801d7ba:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	7cdb      	ldrb	r3, [r3, #19]
 801d7c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801d7c4:	6939      	ldr	r1, [r7, #16]
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7ff fab0 	bl	801cd2c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801d7cc:	683b      	ldr	r3, [r7, #0]
 801d7ce:	7bfa      	ldrb	r2, [r7, #15]
 801d7d0:	701a      	strb	r2, [r3, #0]
    return true;
 801d7d2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	3718      	adds	r7, #24
 801d7d8:	46bd      	mov	sp, r7
 801d7da:	bdb0      	pop	{r4, r5, r7, pc}
 801d7dc:	08029818 	.word	0x08029818
 801d7e0:	20002014 	.word	0x20002014
 801d7e4:	0802975c 	.word	0x0802975c
 801d7e8:	00014585 	.word	0x00014585
 801d7ec:	0802978c 	.word	0x0802978c
 801d7f0:	08029784 	.word	0x08029784

0801d7f4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801d7f4:	b590      	push	{r4, r7, lr}
 801d7f6:	b093      	sub	sp, #76	@ 0x4c
 801d7f8:	af0a      	add	r7, sp, #40	@ 0x28
 801d7fa:	60f8      	str	r0, [r7, #12]
 801d7fc:	60b9      	str	r1, [r7, #8]
 801d7fe:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d806:	461a      	mov	r2, r3
 801d808:	4b5d      	ldr	r3, [pc, #372]	@ (801d980 <RegionEU868TxConfig+0x18c>)
 801d80a:	5c9b      	ldrb	r3, [r3, r2]
 801d80c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801d814:	4b5b      	ldr	r3, [pc, #364]	@ (801d984 <RegionEU868TxConfig+0x190>)
 801d816:	681a      	ldr	r2, [r3, #0]
 801d818:	4b5b      	ldr	r3, [pc, #364]	@ (801d988 <RegionEU868TxConfig+0x194>)
 801d81a:	6819      	ldr	r1, [r3, #0]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	781b      	ldrb	r3, [r3, #0]
 801d820:	461c      	mov	r4, r3
 801d822:	4623      	mov	r3, r4
 801d824:	005b      	lsls	r3, r3, #1
 801d826:	4423      	add	r3, r4
 801d828:	009b      	lsls	r3, r3, #2
 801d82a:	440b      	add	r3, r1
 801d82c:	3309      	adds	r3, #9
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	4619      	mov	r1, r3
 801d832:	460b      	mov	r3, r1
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	440b      	add	r3, r1
 801d838:	00db      	lsls	r3, r3, #3
 801d83a:	4413      	add	r3, r2
 801d83c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801d840:	4619      	mov	r1, r3
 801d842:	f7ff fa3f 	bl	801ccc4 <RegionCommonLimitTxPower>
 801d846:	4603      	mov	r3, r0
 801d848:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d850:	494e      	ldr	r1, [pc, #312]	@ (801d98c <RegionEU868TxConfig+0x198>)
 801d852:	4618      	mov	r0, r3
 801d854:	f7ff fa4c 	bl	801ccf0 <RegionCommonGetBandwidth>
 801d858:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801d85a:	2300      	movs	r3, #0
 801d85c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	6859      	ldr	r1, [r3, #4]
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	689a      	ldr	r2, [r3, #8]
 801d866:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801d86a:	4618      	mov	r0, r3
 801d86c:	f7ff f83c 	bl	801c8e8 <RegionCommonComputeTxPower>
 801d870:	4603      	mov	r3, r0
 801d872:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801d874:	4b46      	ldr	r3, [pc, #280]	@ (801d990 <RegionEU868TxConfig+0x19c>)
 801d876:	68da      	ldr	r2, [r3, #12]
 801d878:	4b43      	ldr	r3, [pc, #268]	@ (801d988 <RegionEU868TxConfig+0x194>)
 801d87a:	6819      	ldr	r1, [r3, #0]
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	781b      	ldrb	r3, [r3, #0]
 801d880:	4618      	mov	r0, r3
 801d882:	4603      	mov	r3, r0
 801d884:	005b      	lsls	r3, r3, #1
 801d886:	4403      	add	r3, r0
 801d888:	009b      	lsls	r3, r3, #2
 801d88a:	440b      	add	r3, r1
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	4618      	mov	r0, r3
 801d890:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d898:	2b07      	cmp	r3, #7
 801d89a:	d124      	bne.n	801d8e6 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801d89c:	2300      	movs	r3, #0
 801d89e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801d8a0:	4b3b      	ldr	r3, [pc, #236]	@ (801d990 <RegionEU868TxConfig+0x19c>)
 801d8a2:	69dc      	ldr	r4, [r3, #28]
 801d8a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d8a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d8ac:	fb02 f303 	mul.w	r3, r2, r3
 801d8b0:	461a      	mov	r2, r3
 801d8b2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801d8b6:	7ff8      	ldrb	r0, [r7, #31]
 801d8b8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801d8bc:	9308      	str	r3, [sp, #32]
 801d8be:	2300      	movs	r3, #0
 801d8c0:	9307      	str	r3, [sp, #28]
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	9306      	str	r3, [sp, #24]
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	9305      	str	r3, [sp, #20]
 801d8ca:	2301      	movs	r3, #1
 801d8cc:	9304      	str	r3, [sp, #16]
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	9303      	str	r3, [sp, #12]
 801d8d2:	2305      	movs	r3, #5
 801d8d4:	9302      	str	r3, [sp, #8]
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	9301      	str	r3, [sp, #4]
 801d8da:	9200      	str	r2, [sp, #0]
 801d8dc:	69bb      	ldr	r3, [r7, #24]
 801d8de:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801d8e2:	47a0      	blx	r4
 801d8e4:	e01d      	b.n	801d922 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801d8e6:	2301      	movs	r3, #1
 801d8e8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801d8ea:	4b29      	ldr	r3, [pc, #164]	@ (801d990 <RegionEU868TxConfig+0x19c>)
 801d8ec:	69dc      	ldr	r4, [r3, #28]
 801d8ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d8f2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801d8f6:	7ff8      	ldrb	r0, [r7, #31]
 801d8f8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801d8fc:	9208      	str	r2, [sp, #32]
 801d8fe:	2200      	movs	r2, #0
 801d900:	9207      	str	r2, [sp, #28]
 801d902:	2200      	movs	r2, #0
 801d904:	9206      	str	r2, [sp, #24]
 801d906:	2200      	movs	r2, #0
 801d908:	9205      	str	r2, [sp, #20]
 801d90a:	2201      	movs	r2, #1
 801d90c:	9204      	str	r2, [sp, #16]
 801d90e:	2200      	movs	r2, #0
 801d910:	9203      	str	r2, [sp, #12]
 801d912:	2208      	movs	r2, #8
 801d914:	9202      	str	r2, [sp, #8]
 801d916:	2201      	movs	r2, #1
 801d918:	9201      	str	r2, [sp, #4]
 801d91a:	9300      	str	r3, [sp, #0]
 801d91c:	69bb      	ldr	r3, [r7, #24]
 801d91e:	2200      	movs	r2, #0
 801d920:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801d922:	4b19      	ldr	r3, [pc, #100]	@ (801d988 <RegionEU868TxConfig+0x194>)
 801d924:	681a      	ldr	r2, [r3, #0]
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	781b      	ldrb	r3, [r3, #0]
 801d92a:	4619      	mov	r1, r3
 801d92c:	460b      	mov	r3, r1
 801d92e:	005b      	lsls	r3, r3, #1
 801d930:	440b      	add	r3, r1
 801d932:	009b      	lsls	r3, r3, #2
 801d934:	4413      	add	r3, r2
 801d936:	681a      	ldr	r2, [r3, #0]
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d93e:	4619      	mov	r1, r3
 801d940:	4610      	mov	r0, r2
 801d942:	f7ff fa25 	bl	801cd90 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	899b      	ldrh	r3, [r3, #12]
 801d950:	4619      	mov	r1, r3
 801d952:	4610      	mov	r0, r2
 801d954:	f7ff faaa 	bl	801ceac <GetTimeOnAir>
 801d958:	4602      	mov	r2, r0
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801d95e:	4b0c      	ldr	r3, [pc, #48]	@ (801d990 <RegionEU868TxConfig+0x19c>)
 801d960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d962:	68fa      	ldr	r2, [r7, #12]
 801d964:	8992      	ldrh	r2, [r2, #12]
 801d966:	b2d1      	uxtb	r1, r2
 801d968:	7ffa      	ldrb	r2, [r7, #31]
 801d96a:	4610      	mov	r0, r2
 801d96c:	4798      	blx	r3

    *txPower = txPowerLimited;
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	7f7a      	ldrb	r2, [r7, #29]
 801d972:	701a      	strb	r2, [r3, #0]
    return true;
 801d974:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801d976:	4618      	mov	r0, r3
 801d978:	3724      	adds	r7, #36	@ 0x24
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bd90      	pop	{r4, r7, pc}
 801d97e:	bf00      	nop
 801d980:	0802975c 	.word	0x0802975c
 801d984:	20002018 	.word	0x20002018
 801d988:	20002014 	.word	0x20002014
 801d98c:	08029764 	.word	0x08029764
 801d990:	08029818 	.word	0x08029818

0801d994 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801d994:	b590      	push	{r4, r7, lr}
 801d996:	b093      	sub	sp, #76	@ 0x4c
 801d998:	af00      	add	r7, sp, #0
 801d99a:	60f8      	str	r0, [r7, #12]
 801d99c:	60b9      	str	r1, [r7, #8]
 801d99e:	607a      	str	r2, [r7, #4]
 801d9a0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801d9a2:	2307      	movs	r3, #7
 801d9a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801d9a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801d9ac:	2200      	movs	r2, #0
 801d9ae:	601a      	str	r2, [r3, #0]
 801d9b0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801d9be:	2300      	movs	r3, #0
 801d9c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801d9c2:	e085      	b.n	801dad0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	685a      	ldr	r2, [r3, #4]
 801d9c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801d9cc:	4413      	add	r3, r2
 801d9ce:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801d9d2:	4611      	mov	r1, r2
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7fe fdcf 	bl	801c578 <RegionCommonParseLinkAdrReq>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801d9e0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d07b      	beq.n	801dae0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801d9e8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801d9ec:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801d9f0:	4413      	add	r3, r2
 801d9f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801d9f6:	2307      	movs	r3, #7
 801d9f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801d9fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801da00:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801da02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801da06:	2b00      	cmp	r3, #0
 801da08:	d109      	bne.n	801da1e <RegionEU868LinkAdrReq+0x8a>
 801da0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d106      	bne.n	801da1e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801da10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801da14:	f023 0301 	bic.w	r3, r3, #1
 801da18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801da1c:	e058      	b.n	801dad0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801da1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801da22:	2b00      	cmp	r3, #0
 801da24:	d003      	beq.n	801da2e <RegionEU868LinkAdrReq+0x9a>
 801da26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801da2a:	2b05      	cmp	r3, #5
 801da2c:	d903      	bls.n	801da36 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801da2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801da32:	2b06      	cmp	r3, #6
 801da34:	d906      	bls.n	801da44 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801da36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801da3a:	f023 0301 	bic.w	r3, r3, #1
 801da3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801da42:	e045      	b.n	801dad0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801da44:	2300      	movs	r3, #0
 801da46:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801da4a:	e03d      	b.n	801dac8 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801da4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801da50:	2b06      	cmp	r3, #6
 801da52:	d118      	bne.n	801da86 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801da54:	4b5f      	ldr	r3, [pc, #380]	@ (801dbd4 <RegionEU868LinkAdrReq+0x240>)
 801da56:	6819      	ldr	r1, [r3, #0]
 801da58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801da5c:	4613      	mov	r3, r2
 801da5e:	005b      	lsls	r3, r3, #1
 801da60:	4413      	add	r3, r2
 801da62:	009b      	lsls	r3, r3, #2
 801da64:	440b      	add	r3, r1
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d028      	beq.n	801dabe <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801da6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801da70:	2201      	movs	r2, #1
 801da72:	fa02 f303 	lsl.w	r3, r2, r3
 801da76:	b21a      	sxth	r2, r3
 801da78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801da7a:	b21b      	sxth	r3, r3
 801da7c:	4313      	orrs	r3, r2
 801da7e:	b21b      	sxth	r3, r3
 801da80:	b29b      	uxth	r3, r3
 801da82:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801da84:	e01b      	b.n	801dabe <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801da86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801da88:	461a      	mov	r2, r3
 801da8a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801da8e:	fa42 f303 	asr.w	r3, r2, r3
 801da92:	f003 0301 	and.w	r3, r3, #1
 801da96:	2b00      	cmp	r3, #0
 801da98:	d011      	beq.n	801dabe <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801da9a:	4b4e      	ldr	r3, [pc, #312]	@ (801dbd4 <RegionEU868LinkAdrReq+0x240>)
 801da9c:	6819      	ldr	r1, [r3, #0]
 801da9e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801daa2:	4613      	mov	r3, r2
 801daa4:	005b      	lsls	r3, r3, #1
 801daa6:	4413      	add	r3, r2
 801daa8:	009b      	lsls	r3, r3, #2
 801daaa:	440b      	add	r3, r1
 801daac:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d105      	bne.n	801dabe <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801dab2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801dab6:	f023 0301 	bic.w	r3, r3, #1
 801daba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801dabe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801dac2:	3301      	adds	r3, #1
 801dac4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801dac8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801dacc:	2b0f      	cmp	r3, #15
 801dace:	d9bd      	bls.n	801da4c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	7a1b      	ldrb	r3, [r3, #8]
 801dad4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801dad8:	429a      	cmp	r2, r3
 801dada:	f4ff af73 	bcc.w	801d9c4 <RegionEU868LinkAdrReq+0x30>
 801dade:	e000      	b.n	801dae2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801dae0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801dae2:	2302      	movs	r3, #2
 801dae4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	7a5b      	ldrb	r3, [r3, #9]
 801daec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801daf0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7ff fa29 	bl	801cf4c <RegionEU868GetPhyParam>
 801dafa:	4603      	mov	r3, r0
 801dafc:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801dafe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801db02:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	7a9b      	ldrb	r3, [r3, #10]
 801db08:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801db0a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801db0e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801db10:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801db14:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801db16:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801db1a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801db22:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801db2a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	7b5b      	ldrb	r3, [r3, #13]
 801db30:	b25b      	sxtb	r3, r3
 801db32:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801db34:	2310      	movs	r3, #16
 801db36:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801db38:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801db3c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db40:	b25b      	sxtb	r3, r3
 801db42:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801db46:	2307      	movs	r3, #7
 801db48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801db4c:	4b21      	ldr	r3, [pc, #132]	@ (801dbd4 <RegionEU868LinkAdrReq+0x240>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801db52:	2307      	movs	r3, #7
 801db54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801db58:	2300      	movs	r3, #0
 801db5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801db64:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801db68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801db6c:	1c9a      	adds	r2, r3, #2
 801db6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801db72:	1c59      	adds	r1, r3, #1
 801db74:	f107 0010 	add.w	r0, r7, #16
 801db78:	4623      	mov	r3, r4
 801db7a:	f7fe fd4e 	bl	801c61a <RegionCommonLinkAdrReqVerifyParams>
 801db7e:	4603      	mov	r3, r0
 801db80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801db84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801db88:	2b07      	cmp	r3, #7
 801db8a:	d10d      	bne.n	801dba8 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801db8c:	4b11      	ldr	r3, [pc, #68]	@ (801dbd4 <RegionEU868LinkAdrReq+0x240>)
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801db94:	220c      	movs	r2, #12
 801db96:	2100      	movs	r1, #0
 801db98:	4618      	mov	r0, r3
 801db9a:	f001 fd77 	bl	801f68c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801db9e:	4b0d      	ldr	r3, [pc, #52]	@ (801dbd4 <RegionEU868LinkAdrReq+0x240>)
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801dba4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801dba8:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801dbac:	68bb      	ldr	r3, [r7, #8]
 801dbae:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801dbb0:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801dbb8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801dbbc:	683b      	ldr	r3, [r7, #0]
 801dbbe:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801dbc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dbc2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801dbc6:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801dbc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801dbcc:	4618      	mov	r0, r3
 801dbce:	374c      	adds	r7, #76	@ 0x4c
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	bd90      	pop	{r4, r7, pc}
 801dbd4:	20002014 	.word	0x20002014

0801dbd8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b084      	sub	sp, #16
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801dbe0:	2307      	movs	r3, #7
 801dbe2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	685b      	ldr	r3, [r3, #4]
 801dbec:	f107 020e 	add.w	r2, r7, #14
 801dbf0:	4611      	mov	r1, r2
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f7ff f8e4 	bl	801cdc0 <VerifyRfFreq>
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	f083 0301 	eor.w	r3, r3, #1
 801dbfe:	b2db      	uxtb	r3, r3
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d003      	beq.n	801dc0c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801dc04:	7bfb      	ldrb	r3, [r7, #15]
 801dc06:	f023 0301 	bic.w	r3, r3, #1
 801dc0a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	f993 3000 	ldrsb.w	r3, [r3]
 801dc12:	2207      	movs	r2, #7
 801dc14:	2100      	movs	r1, #0
 801dc16:	4618      	mov	r0, r3
 801dc18:	f7fe faed 	bl	801c1f6 <RegionCommonValueInRange>
 801dc1c:	4603      	mov	r3, r0
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d103      	bne.n	801dc2a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801dc22:	7bfb      	ldrb	r3, [r7, #15]
 801dc24:	f023 0302 	bic.w	r3, r3, #2
 801dc28:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dc30:	2205      	movs	r2, #5
 801dc32:	2100      	movs	r1, #0
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7fe fade 	bl	801c1f6 <RegionCommonValueInRange>
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d103      	bne.n	801dc48 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801dc40:	7bfb      	ldrb	r3, [r7, #15]
 801dc42:	f023 0304 	bic.w	r3, r3, #4
 801dc46:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	3710      	adds	r7, #16
 801dc4e:	46bd      	mov	sp, r7
 801dc50:	bd80      	pop	{r7, pc}
	...

0801dc54 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b086      	sub	sp, #24
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801dc5c:	2303      	movs	r3, #3
 801dc5e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d114      	bne.n	801dc94 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801dc70:	b2db      	uxtb	r3, r3
 801dc72:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801dc74:	f107 0308 	add.w	r3, r7, #8
 801dc78:	4618      	mov	r0, r3
 801dc7a:	f000 f9ff 	bl	801e07c <RegionEU868ChannelsRemove>
 801dc7e:	4603      	mov	r3, r0
 801dc80:	f083 0301 	eor.w	r3, r3, #1
 801dc84:	b2db      	uxtb	r3, r3
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d03b      	beq.n	801dd02 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801dc8a:	7dfb      	ldrb	r3, [r7, #23]
 801dc8c:	f023 0303 	bic.w	r3, r3, #3
 801dc90:	75fb      	strb	r3, [r7, #23]
 801dc92:	e036      	b.n	801dd02 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801dca4:	f107 030c 	add.w	r3, r7, #12
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f000 f945 	bl	801df38 <RegionEU868ChannelAdd>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	2b06      	cmp	r3, #6
 801dcb2:	d820      	bhi.n	801dcf6 <RegionEU868NewChannelReq+0xa2>
 801dcb4:	a201      	add	r2, pc, #4	@ (adr r2, 801dcbc <RegionEU868NewChannelReq+0x68>)
 801dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcba:	bf00      	nop
 801dcbc:	0801dd01 	.word	0x0801dd01
 801dcc0:	0801dcf7 	.word	0x0801dcf7
 801dcc4:	0801dcf7 	.word	0x0801dcf7
 801dcc8:	0801dcf7 	.word	0x0801dcf7
 801dccc:	0801dcd9 	.word	0x0801dcd9
 801dcd0:	0801dce3 	.word	0x0801dce3
 801dcd4:	0801dced 	.word	0x0801dced
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801dcd8:	7dfb      	ldrb	r3, [r7, #23]
 801dcda:	f023 0301 	bic.w	r3, r3, #1
 801dcde:	75fb      	strb	r3, [r7, #23]
                break;
 801dce0:	e00f      	b.n	801dd02 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801dce2:	7dfb      	ldrb	r3, [r7, #23]
 801dce4:	f023 0302 	bic.w	r3, r3, #2
 801dce8:	75fb      	strb	r3, [r7, #23]
                break;
 801dcea:	e00a      	b.n	801dd02 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801dcec:	7dfb      	ldrb	r3, [r7, #23]
 801dcee:	f023 0303 	bic.w	r3, r3, #3
 801dcf2:	75fb      	strb	r3, [r7, #23]
                break;
 801dcf4:	e005      	b.n	801dd02 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801dcf6:	7dfb      	ldrb	r3, [r7, #23]
 801dcf8:	f023 0303 	bic.w	r3, r3, #3
 801dcfc:	75fb      	strb	r3, [r7, #23]
                break;
 801dcfe:	e000      	b.n	801dd02 <RegionEU868NewChannelReq+0xae>
                break;
 801dd00:	bf00      	nop
            }
        }
    }

    return status;
 801dd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dd06:	4618      	mov	r0, r3
 801dd08:	3718      	adds	r7, #24
 801dd0a:	46bd      	mov	sp, r7
 801dd0c:	bd80      	pop	{r7, pc}
 801dd0e:	bf00      	nop

0801dd10 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801dd10:	b480      	push	{r7}
 801dd12:	b083      	sub	sp, #12
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801dd18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	370c      	adds	r7, #12
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bc80      	pop	{r7}
 801dd24:	4770      	bx	lr
	...

0801dd28 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801dd28:	b580      	push	{r7, lr}
 801dd2a:	b084      	sub	sp, #16
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801dd30:	2303      	movs	r3, #3
 801dd32:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801dd34:	2300      	movs	r3, #0
 801dd36:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	2b0f      	cmp	r3, #15
 801dd3e:	d901      	bls.n	801dd44 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 801dd40:	2300      	movs	r3, #0
 801dd42:	e035      	b.n	801ddb0 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	685b      	ldr	r3, [r3, #4]
 801dd48:	f107 020e 	add.w	r2, r7, #14
 801dd4c:	4611      	mov	r1, r2
 801dd4e:	4618      	mov	r0, r3
 801dd50:	f7ff f836 	bl	801cdc0 <VerifyRfFreq>
 801dd54:	4603      	mov	r3, r0
 801dd56:	f083 0301 	eor.w	r3, r3, #1
 801dd5a:	b2db      	uxtb	r3, r3
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d003      	beq.n	801dd68 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801dd60:	7bfb      	ldrb	r3, [r7, #15]
 801dd62:	f023 0301 	bic.w	r3, r3, #1
 801dd66:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801dd68:	4b13      	ldr	r3, [pc, #76]	@ (801ddb8 <RegionEU868DlChannelReq+0x90>)
 801dd6a:	681a      	ldr	r2, [r3, #0]
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	781b      	ldrb	r3, [r3, #0]
 801dd70:	4619      	mov	r1, r3
 801dd72:	460b      	mov	r3, r1
 801dd74:	005b      	lsls	r3, r3, #1
 801dd76:	440b      	add	r3, r1
 801dd78:	009b      	lsls	r3, r3, #2
 801dd7a:	4413      	add	r3, r2
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d103      	bne.n	801dd8a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801dd82:	7bfb      	ldrb	r3, [r7, #15]
 801dd84:	f023 0302 	bic.w	r3, r3, #2
 801dd88:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801dd8a:	7bfb      	ldrb	r3, [r7, #15]
 801dd8c:	2b03      	cmp	r3, #3
 801dd8e:	d10d      	bne.n	801ddac <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801dd90:	4b09      	ldr	r3, [pc, #36]	@ (801ddb8 <RegionEU868DlChannelReq+0x90>)
 801dd92:	6819      	ldr	r1, [r3, #0]
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	781b      	ldrb	r3, [r3, #0]
 801dd98:	4618      	mov	r0, r3
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	685a      	ldr	r2, [r3, #4]
 801dd9e:	4603      	mov	r3, r0
 801dda0:	005b      	lsls	r3, r3, #1
 801dda2:	4403      	add	r3, r0
 801dda4:	009b      	lsls	r3, r3, #2
 801dda6:	440b      	add	r3, r1
 801dda8:	3304      	adds	r3, #4
 801ddaa:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801ddac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	3710      	adds	r7, #16
 801ddb4:	46bd      	mov	sp, r7
 801ddb6:	bd80      	pop	{r7, pc}
 801ddb8:	20002014 	.word	0x20002014

0801ddbc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801ddbc:	b480      	push	{r7}
 801ddbe:	b083      	sub	sp, #12
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	460a      	mov	r2, r1
 801ddc6:	71fb      	strb	r3, [r7, #7]
 801ddc8:	4613      	mov	r3, r2
 801ddca:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801ddcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	370c      	adds	r7, #12
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	bc80      	pop	{r7}
 801ddd8:	4770      	bx	lr
	...

0801dddc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b09a      	sub	sp, #104	@ 0x68
 801dde0:	af02      	add	r7, sp, #8
 801dde2:	60f8      	str	r0, [r7, #12]
 801dde4:	60b9      	str	r1, [r7, #8]
 801dde6:	607a      	str	r2, [r7, #4]
 801dde8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801ddea:	2300      	movs	r3, #0
 801ddec:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801ddf0:	2300      	movs	r3, #0
 801ddf2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ddfa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801ddfe:	2200      	movs	r2, #0
 801de00:	601a      	str	r2, [r3, #0]
 801de02:	605a      	str	r2, [r3, #4]
 801de04:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801de06:	230c      	movs	r3, #12
 801de08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801de0c:	2307      	movs	r3, #7
 801de0e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801de10:	4b47      	ldr	r3, [pc, #284]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801de18:	2201      	movs	r2, #1
 801de1a:	2100      	movs	r1, #0
 801de1c:	4618      	mov	r0, r3
 801de1e:	f7fe fa3b 	bl	801c298 <RegionCommonCountChannels>
 801de22:	4603      	mov	r3, r0
 801de24:	2b00      	cmp	r3, #0
 801de26:	d10a      	bne.n	801de3e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801de28:	4b41      	ldr	r3, [pc, #260]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801de30:	4b3f      	ldr	r3, [pc, #252]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	f042 0207 	orr.w	r2, r2, #7
 801de38:	b292      	uxth	r2, r2
 801de3a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	7a5b      	ldrb	r3, [r3, #9]
 801de42:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801de4a:	b2db      	uxtb	r3, r3
 801de4c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801de4e:	4b38      	ldr	r3, [pc, #224]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801de56:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801de58:	4b35      	ldr	r3, [pc, #212]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801de5e:	4b35      	ldr	r3, [pc, #212]	@ (801df34 <RegionEU868NextChannel+0x158>)
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801de64:	2310      	movs	r3, #16
 801de66:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801de68:	f107 0312 	add.w	r3, r7, #18
 801de6c:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	685b      	ldr	r3, [r3, #4]
 801de78:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	7a9b      	ldrb	r3, [r3, #10]
 801de7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801de82:	2306      	movs	r3, #6
 801de84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801de88:	68fa      	ldr	r2, [r7, #12]
 801de8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801de8e:	320c      	adds	r2, #12
 801de90:	e892 0003 	ldmia.w	r2, {r0, r1}
 801de94:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	7d1b      	ldrb	r3, [r3, #20]
 801de9c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	8adb      	ldrh	r3, [r3, #22]
 801deaa:	4619      	mov	r1, r3
 801deac:	4610      	mov	r0, r2
 801deae:	f7fe fffd 	bl	801ceac <GetTimeOnAir>
 801deb2:	4603      	mov	r3, r0
 801deb4:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801deb6:	f107 0314 	add.w	r3, r7, #20
 801deba:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801debc:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801dec0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801dec4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	9301      	str	r3, [sp, #4]
 801decc:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801ded0:	9300      	str	r3, [sp, #0]
 801ded2:	460b      	mov	r3, r1
 801ded4:	6839      	ldr	r1, [r7, #0]
 801ded6:	f7fe fe55 	bl	801cb84 <RegionCommonIdentifyChannels>
 801deda:	4603      	mov	r3, r0
 801dedc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801dee0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	d10e      	bne.n	801df06 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801dee8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801deec:	3b01      	subs	r3, #1
 801deee:	4619      	mov	r1, r3
 801def0:	2000      	movs	r0, #0
 801def2:	f001 fb79 	bl	801f5e8 <randr>
 801def6:	4603      	mov	r3, r0
 801def8:	3360      	adds	r3, #96	@ 0x60
 801defa:	443b      	add	r3, r7
 801defc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801df00:	68bb      	ldr	r3, [r7, #8]
 801df02:	701a      	strb	r2, [r3, #0]
 801df04:	e00e      	b.n	801df24 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801df06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801df0a:	2b0c      	cmp	r3, #12
 801df0c:	d10a      	bne.n	801df24 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801df0e:	4b08      	ldr	r3, [pc, #32]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801df16:	4b06      	ldr	r3, [pc, #24]	@ (801df30 <RegionEU868NextChannel+0x154>)
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	f042 0207 	orr.w	r2, r2, #7
 801df1e:	b292      	uxth	r2, r2
 801df20:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801df24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801df28:	4618      	mov	r0, r3
 801df2a:	3760      	adds	r7, #96	@ 0x60
 801df2c:	46bd      	mov	sp, r7
 801df2e:	bd80      	pop	{r7, pc}
 801df30:	20002014 	.word	0x20002014
 801df34:	20002018 	.word	0x20002018

0801df38 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801df38:	b580      	push	{r7, lr}
 801df3a:	b084      	sub	sp, #16
 801df3c:	af00      	add	r7, sp, #0
 801df3e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801df40:	2300      	movs	r3, #0
 801df42:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801df44:	2300      	movs	r3, #0
 801df46:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801df48:	2300      	movs	r3, #0
 801df4a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	791b      	ldrb	r3, [r3, #4]
 801df50:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801df52:	7b7b      	ldrb	r3, [r7, #13]
 801df54:	2b02      	cmp	r3, #2
 801df56:	d801      	bhi.n	801df5c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801df58:	2306      	movs	r3, #6
 801df5a:	e089      	b.n	801e070 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801df5c:	7b7b      	ldrb	r3, [r7, #13]
 801df5e:	2b0f      	cmp	r3, #15
 801df60:	d901      	bls.n	801df66 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801df62:	2303      	movs	r3, #3
 801df64:	e084      	b.n	801e070 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	7a1b      	ldrb	r3, [r3, #8]
 801df6c:	f343 0303 	sbfx	r3, r3, #0, #4
 801df70:	b25b      	sxtb	r3, r3
 801df72:	2207      	movs	r2, #7
 801df74:	2100      	movs	r1, #0
 801df76:	4618      	mov	r0, r3
 801df78:	f7fe f93d 	bl	801c1f6 <RegionCommonValueInRange>
 801df7c:	4603      	mov	r3, r0
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d101      	bne.n	801df86 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801df82:	2301      	movs	r3, #1
 801df84:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	7a1b      	ldrb	r3, [r3, #8]
 801df8c:	f343 1303 	sbfx	r3, r3, #4, #4
 801df90:	b25b      	sxtb	r3, r3
 801df92:	2207      	movs	r2, #7
 801df94:	2100      	movs	r1, #0
 801df96:	4618      	mov	r0, r3
 801df98:	f7fe f92d 	bl	801c1f6 <RegionCommonValueInRange>
 801df9c:	4603      	mov	r3, r0
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d101      	bne.n	801dfa6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801dfa2:	2301      	movs	r3, #1
 801dfa4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	7a1b      	ldrb	r3, [r3, #8]
 801dfac:	f343 0303 	sbfx	r3, r3, #0, #4
 801dfb0:	b25a      	sxtb	r2, r3
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	7a1b      	ldrb	r3, [r3, #8]
 801dfb8:	f343 1303 	sbfx	r3, r3, #4, #4
 801dfbc:	b25b      	sxtb	r3, r3
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	dd01      	ble.n	801dfc6 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801dfc2:	2301      	movs	r3, #1
 801dfc4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801dfc6:	7bbb      	ldrb	r3, [r7, #14]
 801dfc8:	f083 0301 	eor.w	r3, r3, #1
 801dfcc:	b2db      	uxtb	r3, r3
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d010      	beq.n	801dff4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	f107 020c 	add.w	r2, r7, #12
 801dfdc:	4611      	mov	r1, r2
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f7fe feee 	bl	801cdc0 <VerifyRfFreq>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	f083 0301 	eor.w	r3, r3, #1
 801dfea:	b2db      	uxtb	r3, r3
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d001      	beq.n	801dff4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801dff0:	2301      	movs	r3, #1
 801dff2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801dff4:	7bfb      	ldrb	r3, [r7, #15]
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d004      	beq.n	801e004 <RegionEU868ChannelAdd+0xcc>
 801dffa:	7bbb      	ldrb	r3, [r7, #14]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d001      	beq.n	801e004 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801e000:	2306      	movs	r3, #6
 801e002:	e035      	b.n	801e070 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801e004:	7bfb      	ldrb	r3, [r7, #15]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d001      	beq.n	801e00e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801e00a:	2305      	movs	r3, #5
 801e00c:	e030      	b.n	801e070 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801e00e:	7bbb      	ldrb	r3, [r7, #14]
 801e010:	2b00      	cmp	r3, #0
 801e012:	d001      	beq.n	801e018 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801e014:	2304      	movs	r3, #4
 801e016:	e02b      	b.n	801e070 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801e018:	4b17      	ldr	r3, [pc, #92]	@ (801e078 <RegionEU868ChannelAdd+0x140>)
 801e01a:	6819      	ldr	r1, [r3, #0]
 801e01c:	7b7a      	ldrb	r2, [r7, #13]
 801e01e:	4613      	mov	r3, r2
 801e020:	005b      	lsls	r3, r3, #1
 801e022:	4413      	add	r3, r2
 801e024:	009b      	lsls	r3, r3, #2
 801e026:	18c8      	adds	r0, r1, r3
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	220c      	movs	r2, #12
 801e02e:	4619      	mov	r1, r3
 801e030:	f001 faf1 	bl	801f616 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801e034:	4b10      	ldr	r3, [pc, #64]	@ (801e078 <RegionEU868ChannelAdd+0x140>)
 801e036:	6819      	ldr	r1, [r3, #0]
 801e038:	7b7a      	ldrb	r2, [r7, #13]
 801e03a:	7b38      	ldrb	r0, [r7, #12]
 801e03c:	4613      	mov	r3, r2
 801e03e:	005b      	lsls	r3, r3, #1
 801e040:	4413      	add	r3, r2
 801e042:	009b      	lsls	r3, r3, #2
 801e044:	440b      	add	r3, r1
 801e046:	3309      	adds	r3, #9
 801e048:	4602      	mov	r2, r0
 801e04a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801e04c:	4b0a      	ldr	r3, [pc, #40]	@ (801e078 <RegionEU868ChannelAdd+0x140>)
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 801e054:	b21a      	sxth	r2, r3
 801e056:	7b7b      	ldrb	r3, [r7, #13]
 801e058:	2101      	movs	r1, #1
 801e05a:	fa01 f303 	lsl.w	r3, r1, r3
 801e05e:	b21b      	sxth	r3, r3
 801e060:	4313      	orrs	r3, r2
 801e062:	b21a      	sxth	r2, r3
 801e064:	4b04      	ldr	r3, [pc, #16]	@ (801e078 <RegionEU868ChannelAdd+0x140>)
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	b292      	uxth	r2, r2
 801e06a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 801e06e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801e070:	4618      	mov	r0, r3
 801e072:	3710      	adds	r7, #16
 801e074:	46bd      	mov	sp, r7
 801e076:	bd80      	pop	{r7, pc}
 801e078:	20002014 	.word	0x20002014

0801e07c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b086      	sub	sp, #24
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	781b      	ldrb	r3, [r3, #0]
 801e088:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801e08a:	7dfb      	ldrb	r3, [r7, #23]
 801e08c:	2b02      	cmp	r3, #2
 801e08e:	d801      	bhi.n	801e094 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801e090:	2300      	movs	r3, #0
 801e092:	e016      	b.n	801e0c2 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801e094:	4b0d      	ldr	r3, [pc, #52]	@ (801e0cc <RegionEU868ChannelsRemove+0x50>)
 801e096:	6819      	ldr	r1, [r3, #0]
 801e098:	7dfa      	ldrb	r2, [r7, #23]
 801e09a:	4613      	mov	r3, r2
 801e09c:	005b      	lsls	r3, r3, #1
 801e09e:	4413      	add	r3, r2
 801e0a0:	009b      	lsls	r3, r3, #2
 801e0a2:	440b      	add	r3, r1
 801e0a4:	461a      	mov	r2, r3
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	6013      	str	r3, [r2, #0]
 801e0aa:	6053      	str	r3, [r2, #4]
 801e0ac:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801e0ae:	4b07      	ldr	r3, [pc, #28]	@ (801e0cc <RegionEU868ChannelsRemove+0x50>)
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801e0b6:	7df9      	ldrb	r1, [r7, #23]
 801e0b8:	2210      	movs	r2, #16
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	f7fe f8b8 	bl	801c230 <RegionCommonChanDisable>
 801e0c0:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	3718      	adds	r7, #24
 801e0c6:	46bd      	mov	sp, r7
 801e0c8:	bd80      	pop	{r7, pc}
 801e0ca:	bf00      	nop
 801e0cc:	20002014 	.word	0x20002014

0801e0d0 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801e0d0:	b480      	push	{r7}
 801e0d2:	b085      	sub	sp, #20
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	71fb      	strb	r3, [r7, #7]
 801e0da:	460b      	mov	r3, r1
 801e0dc:	71bb      	strb	r3, [r7, #6]
 801e0de:	4613      	mov	r3, r2
 801e0e0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801e0e2:	79ba      	ldrb	r2, [r7, #6]
 801e0e4:	797b      	ldrb	r3, [r7, #5]
 801e0e6:	1ad3      	subs	r3, r2, r3
 801e0e8:	b2db      	uxtb	r3, r3
 801e0ea:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801e0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	da01      	bge.n	801e0f8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801e0f8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	3714      	adds	r7, #20
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bc80      	pop	{r7}
 801e102:	4770      	bx	lr

0801e104 <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b088      	sub	sp, #32
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
 801e10c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 801e10e:	4b0e      	ldr	r3, [pc, #56]	@ (801e148 <RegionEU868RxBeaconSetup+0x44>)
 801e110:	60fb      	str	r3, [r7, #12]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	689b      	ldr	r3, [r3, #8]
 801e116:	613b      	str	r3, [r7, #16]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 801e118:	2311      	movs	r3, #17
 801e11a:	753b      	strb	r3, [r7, #20]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
 801e11c:	2303      	movs	r3, #3
 801e11e:	757b      	strb	r3, [r7, #21]
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 801e120:	2300      	movs	r3, #0
 801e122:	75bb      	strb	r3, [r7, #22]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	61bb      	str	r3, [r7, #24]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	881b      	ldrh	r3, [r3, #0]
 801e12e:	83bb      	strh	r3, [r7, #28]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 801e130:	f107 030c 	add.w	r3, r7, #12
 801e134:	4618      	mov	r0, r3
 801e136:	f7fe fc09 	bl	801c94c <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 801e13a:	683b      	ldr	r3, [r7, #0]
 801e13c:	2203      	movs	r2, #3
 801e13e:	701a      	strb	r2, [r3, #0]
#endif /* REGION_EU868 */
}
 801e140:	bf00      	nop
 801e142:	3720      	adds	r7, #32
 801e144:	46bd      	mov	sp, r7
 801e146:	bd80      	pop	{r7, pc}
 801e148:	0802975c 	.word	0x0802975c

0801e14c <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b084      	sub	sp, #16
 801e150:	af00      	add	r7, sp, #0
 801e152:	603b      	str	r3, [r7, #0]
 801e154:	4603      	mov	r3, r0
 801e156:	71fb      	strb	r3, [r7, #7]
 801e158:	460b      	mov	r3, r1
 801e15a:	71bb      	strb	r3, [r7, #6]
 801e15c:	4613      	mov	r3, r2
 801e15e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801e160:	79fb      	ldrb	r3, [r7, #7]
 801e162:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801e164:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801e168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e16c:	4611      	mov	r1, r2
 801e16e:	4618      	mov	r0, r3
 801e170:	f7fe fda8 	bl	801ccc4 <RegionCommonLimitTxPower>
 801e174:	4603      	mov	r3, r0
 801e176:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801e178:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801e17c:	2b04      	cmp	r3, #4
 801e17e:	d106      	bne.n	801e18e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801e180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e184:	2b02      	cmp	r3, #2
 801e186:	bfb8      	it	lt
 801e188:	2302      	movlt	r3, #2
 801e18a:	73fb      	strb	r3, [r7, #15]
 801e18c:	e00d      	b.n	801e1aa <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801e18e:	2204      	movs	r2, #4
 801e190:	2100      	movs	r1, #0
 801e192:	6838      	ldr	r0, [r7, #0]
 801e194:	f7fe f880 	bl	801c298 <RegionCommonCountChannels>
 801e198:	4603      	mov	r3, r0
 801e19a:	2b31      	cmp	r3, #49	@ 0x31
 801e19c:	d805      	bhi.n	801e1aa <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801e19e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1a2:	2b05      	cmp	r3, #5
 801e1a4:	bfb8      	it	lt
 801e1a6:	2305      	movlt	r3, #5
 801e1a8:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801e1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e1ae:	4618      	mov	r0, r3
 801e1b0:	3710      	adds	r7, #16
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	bd80      	pop	{r7, pc}
	...

0801e1b8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801e1c0:	4b18      	ldr	r3, [pc, #96]	@ (801e224 <VerifyRfFreq+0x6c>)
 801e1c2:	6a1b      	ldr	r3, [r3, #32]
 801e1c4:	6878      	ldr	r0, [r7, #4]
 801e1c6:	4798      	blx	r3
 801e1c8:	4603      	mov	r3, r0
 801e1ca:	f083 0301 	eor.w	r3, r3, #1
 801e1ce:	b2db      	uxtb	r3, r3
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d001      	beq.n	801e1d8 <VerifyRfFreq+0x20>
    {
        return false;
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	e021      	b.n	801e21c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	4a13      	ldr	r2, [pc, #76]	@ (801e228 <VerifyRfFreq+0x70>)
 801e1dc:	4293      	cmp	r3, r2
 801e1de:	d910      	bls.n	801e202 <VerifyRfFreq+0x4a>
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	4a12      	ldr	r2, [pc, #72]	@ (801e22c <VerifyRfFreq+0x74>)
 801e1e4:	4293      	cmp	r3, r2
 801e1e6:	d80c      	bhi.n	801e202 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801e1e8:	687a      	ldr	r2, [r7, #4]
 801e1ea:	4b11      	ldr	r3, [pc, #68]	@ (801e230 <VerifyRfFreq+0x78>)
 801e1ec:	4413      	add	r3, r2
 801e1ee:	4a11      	ldr	r2, [pc, #68]	@ (801e234 <VerifyRfFreq+0x7c>)
 801e1f0:	fba2 1203 	umull	r1, r2, r2, r3
 801e1f4:	0c92      	lsrs	r2, r2, #18
 801e1f6:	4910      	ldr	r1, [pc, #64]	@ (801e238 <VerifyRfFreq+0x80>)
 801e1f8:	fb01 f202 	mul.w	r2, r1, r2
 801e1fc:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801e1fe:	2a00      	cmp	r2, #0
 801e200:	d001      	beq.n	801e206 <VerifyRfFreq+0x4e>
    {
        return false;
 801e202:	2300      	movs	r3, #0
 801e204:	e00a      	b.n	801e21c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	4a0c      	ldr	r2, [pc, #48]	@ (801e23c <VerifyRfFreq+0x84>)
 801e20a:	4293      	cmp	r3, r2
 801e20c:	d903      	bls.n	801e216 <VerifyRfFreq+0x5e>
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	4a06      	ldr	r2, [pc, #24]	@ (801e22c <VerifyRfFreq+0x74>)
 801e212:	4293      	cmp	r3, r2
 801e214:	d901      	bls.n	801e21a <VerifyRfFreq+0x62>
    {
        return false;
 801e216:	2300      	movs	r3, #0
 801e218:	e000      	b.n	801e21c <VerifyRfFreq+0x64>
    }
    return true;
 801e21a:	2301      	movs	r3, #1
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	3708      	adds	r7, #8
 801e220:	46bd      	mov	sp, r7
 801e222:	bd80      	pop	{r7, pc}
 801e224:	08029818 	.word	0x08029818
 801e228:	3708709f 	.word	0x3708709f
 801e22c:	374886e0 	.word	0x374886e0
 801e230:	c8f78f60 	.word	0xc8f78f60
 801e234:	6fd91d85 	.word	0x6fd91d85
 801e238:	000927c0 	.word	0x000927c0
 801e23c:	35c8015f 	.word	0x35c8015f

0801e240 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801e240:	b590      	push	{r4, r7, lr}
 801e242:	b089      	sub	sp, #36	@ 0x24
 801e244:	af04      	add	r7, sp, #16
 801e246:	4603      	mov	r3, r0
 801e248:	460a      	mov	r2, r1
 801e24a:	71fb      	strb	r3, [r7, #7]
 801e24c:	4613      	mov	r3, r2
 801e24e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801e250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e254:	4a0f      	ldr	r2, [pc, #60]	@ (801e294 <GetTimeOnAir+0x54>)
 801e256:	5cd3      	ldrb	r3, [r2, r3]
 801e258:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801e25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e25e:	490e      	ldr	r1, [pc, #56]	@ (801e298 <GetTimeOnAir+0x58>)
 801e260:	4618      	mov	r0, r3
 801e262:	f7fe fd45 	bl	801ccf0 <RegionCommonGetBandwidth>
 801e266:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801e268:	4b0c      	ldr	r3, [pc, #48]	@ (801e29c <GetTimeOnAir+0x5c>)
 801e26a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801e26c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801e270:	88bb      	ldrh	r3, [r7, #4]
 801e272:	b2db      	uxtb	r3, r3
 801e274:	2101      	movs	r1, #1
 801e276:	9103      	str	r1, [sp, #12]
 801e278:	9302      	str	r3, [sp, #8]
 801e27a:	2300      	movs	r3, #0
 801e27c:	9301      	str	r3, [sp, #4]
 801e27e:	2308      	movs	r3, #8
 801e280:	9300      	str	r3, [sp, #0]
 801e282:	2301      	movs	r3, #1
 801e284:	68b9      	ldr	r1, [r7, #8]
 801e286:	2001      	movs	r0, #1
 801e288:	47a0      	blx	r4
 801e28a:	4603      	mov	r3, r0
}
 801e28c:	4618      	mov	r0, r3
 801e28e:	3714      	adds	r7, #20
 801e290:	46bd      	mov	sp, r7
 801e292:	bd90      	pop	{r4, r7, pc}
 801e294:	08029794 	.word	0x08029794
 801e298:	080297a4 	.word	0x080297a4
 801e29c:	08029818 	.word	0x08029818

0801e2a0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b088      	sub	sp, #32
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801e2a8:	2300      	movs	r3, #0
 801e2aa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	781b      	ldrb	r3, [r3, #0]
 801e2b0:	3b01      	subs	r3, #1
 801e2b2:	2b37      	cmp	r3, #55	@ 0x37
 801e2b4:	f200 8136 	bhi.w	801e524 <RegionUS915GetPhyParam+0x284>
 801e2b8:	a201      	add	r2, pc, #4	@ (adr r2, 801e2c0 <RegionUS915GetPhyParam+0x20>)
 801e2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e2be:	bf00      	nop
 801e2c0:	0801e3a1 	.word	0x0801e3a1
 801e2c4:	0801e3a7 	.word	0x0801e3a7
 801e2c8:	0801e525 	.word	0x0801e525
 801e2cc:	0801e525 	.word	0x0801e525
 801e2d0:	0801e525 	.word	0x0801e525
 801e2d4:	0801e3ad 	.word	0x0801e3ad
 801e2d8:	0801e525 	.word	0x0801e525
 801e2dc:	0801e3e7 	.word	0x0801e3e7
 801e2e0:	0801e525 	.word	0x0801e525
 801e2e4:	0801e3ed 	.word	0x0801e3ed
 801e2e8:	0801e3f3 	.word	0x0801e3f3
 801e2ec:	0801e3f9 	.word	0x0801e3f9
 801e2f0:	0801e3ff 	.word	0x0801e3ff
 801e2f4:	0801e40f 	.word	0x0801e40f
 801e2f8:	0801e41f 	.word	0x0801e41f
 801e2fc:	0801e425 	.word	0x0801e425
 801e300:	0801e42d 	.word	0x0801e42d
 801e304:	0801e435 	.word	0x0801e435
 801e308:	0801e43d 	.word	0x0801e43d
 801e30c:	0801e445 	.word	0x0801e445
 801e310:	0801e44d 	.word	0x0801e44d
 801e314:	0801e461 	.word	0x0801e461
 801e318:	0801e467 	.word	0x0801e467
 801e31c:	0801e46d 	.word	0x0801e46d
 801e320:	0801e473 	.word	0x0801e473
 801e324:	0801e47f 	.word	0x0801e47f
 801e328:	0801e48b 	.word	0x0801e48b
 801e32c:	0801e491 	.word	0x0801e491
 801e330:	0801e499 	.word	0x0801e499
 801e334:	0801e49f 	.word	0x0801e49f
 801e338:	0801e4a5 	.word	0x0801e4a5
 801e33c:	0801e4ab 	.word	0x0801e4ab
 801e340:	0801e3b3 	.word	0x0801e3b3
 801e344:	0801e525 	.word	0x0801e525
 801e348:	0801e525 	.word	0x0801e525
 801e34c:	0801e525 	.word	0x0801e525
 801e350:	0801e525 	.word	0x0801e525
 801e354:	0801e525 	.word	0x0801e525
 801e358:	0801e525 	.word	0x0801e525
 801e35c:	0801e525 	.word	0x0801e525
 801e360:	0801e525 	.word	0x0801e525
 801e364:	0801e525 	.word	0x0801e525
 801e368:	0801e525 	.word	0x0801e525
 801e36c:	0801e525 	.word	0x0801e525
 801e370:	0801e525 	.word	0x0801e525
 801e374:	0801e525 	.word	0x0801e525
 801e378:	0801e4b3 	.word	0x0801e4b3
 801e37c:	0801e4c7 	.word	0x0801e4c7
 801e380:	0801e4d5 	.word	0x0801e4d5
 801e384:	0801e4db 	.word	0x0801e4db
 801e388:	0801e525 	.word	0x0801e525
 801e38c:	0801e4e1 	.word	0x0801e4e1
 801e390:	0801e4f5 	.word	0x0801e4f5
 801e394:	0801e4fb 	.word	0x0801e4fb
 801e398:	0801e501 	.word	0x0801e501
 801e39c:	0801e511 	.word	0x0801e511
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801e3a0:	2308      	movs	r3, #8
 801e3a2:	61bb      	str	r3, [r7, #24]
            break;
 801e3a4:	e0bf      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	61bb      	str	r3, [r7, #24]
            break;
 801e3aa:	e0bc      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	61bb      	str	r3, [r7, #24]
            break;
 801e3b0:	e0b9      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801e3b8:	733b      	strb	r3, [r7, #12]
 801e3ba:	2304      	movs	r3, #4
 801e3bc:	737b      	strb	r3, [r7, #13]
 801e3be:	2300      	movs	r3, #0
 801e3c0:	73bb      	strb	r3, [r7, #14]
 801e3c2:	2348      	movs	r3, #72	@ 0x48
 801e3c4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801e3c6:	4b5b      	ldr	r3, [pc, #364]	@ (801e534 <RegionUS915GetPhyParam+0x294>)
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801e3ce:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801e3d0:	4b58      	ldr	r3, [pc, #352]	@ (801e534 <RegionUS915GetPhyParam+0x294>)
 801e3d2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801e3d4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801e3d6:	f107 030c 	add.w	r3, r7, #12
 801e3da:	4618      	mov	r0, r3
 801e3dc:	f7fe fc34 	bl	801cc48 <RegionCommonGetNextLowerTxDr>
 801e3e0:	4603      	mov	r3, r0
 801e3e2:	61bb      	str	r3, [r7, #24]
            break;
 801e3e4:	e09f      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	61bb      	str	r3, [r7, #24]
            break;
 801e3ea:	e09c      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	61bb      	str	r3, [r7, #24]
            break;
 801e3f0:	e099      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801e3f2:	2340      	movs	r3, #64	@ 0x40
 801e3f4:	61bb      	str	r3, [r7, #24]
            break;
 801e3f6:	e096      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801e3f8:	2320      	movs	r3, #32
 801e3fa:	61bb      	str	r3, [r7, #24]
            break;
 801e3fc:	e093      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e404:	461a      	mov	r2, r3
 801e406:	4b4c      	ldr	r3, [pc, #304]	@ (801e538 <RegionUS915GetPhyParam+0x298>)
 801e408:	5c9b      	ldrb	r3, [r3, r2]
 801e40a:	61bb      	str	r3, [r7, #24]
            break;
 801e40c:	e08b      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e414:	461a      	mov	r2, r3
 801e416:	4b49      	ldr	r3, [pc, #292]	@ (801e53c <RegionUS915GetPhyParam+0x29c>)
 801e418:	5c9b      	ldrb	r3, [r3, r2]
 801e41a:	61bb      	str	r3, [r7, #24]
            break;
 801e41c:	e083      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801e41e:	2300      	movs	r3, #0
 801e420:	61bb      	str	r3, [r7, #24]
            break;
 801e422:	e080      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801e424:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801e428:	61bb      	str	r3, [r7, #24]
            break;
 801e42a:	e07c      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801e42c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801e430:	61bb      	str	r3, [r7, #24]
            break;
 801e432:	e078      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801e434:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801e438:	61bb      	str	r3, [r7, #24]
            break;
 801e43a:	e074      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801e43c:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e440:	61bb      	str	r3, [r7, #24]
            break;
 801e442:	e070      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801e444:	f241 7370 	movw	r3, #6000	@ 0x1770
 801e448:	61bb      	str	r3, [r7, #24]
            break;
 801e44a:	e06c      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801e44c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801e450:	483b      	ldr	r0, [pc, #236]	@ (801e540 <RegionUS915GetPhyParam+0x2a0>)
 801e452:	f001 f8c9 	bl	801f5e8 <randr>
 801e456:	4603      	mov	r3, r0
 801e458:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801e45c:	61bb      	str	r3, [r7, #24]
            break;
 801e45e:	e062      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801e460:	2300      	movs	r3, #0
 801e462:	61bb      	str	r3, [r7, #24]
            break;
 801e464:	e05f      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801e466:	4b37      	ldr	r3, [pc, #220]	@ (801e544 <RegionUS915GetPhyParam+0x2a4>)
 801e468:	61bb      	str	r3, [r7, #24]
            break;
 801e46a:	e05c      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801e46c:	2308      	movs	r3, #8
 801e46e:	61bb      	str	r3, [r7, #24]
            break;
 801e470:	e059      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801e472:	4b30      	ldr	r3, [pc, #192]	@ (801e534 <RegionUS915GetPhyParam+0x294>)
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801e47a:	61bb      	str	r3, [r7, #24]
            break;
 801e47c:	e053      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801e47e:	4b2d      	ldr	r3, [pc, #180]	@ (801e534 <RegionUS915GetPhyParam+0x294>)
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801e486:	61bb      	str	r3, [r7, #24]
            break;
 801e488:	e04d      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801e48a:	2348      	movs	r3, #72	@ 0x48
 801e48c:	61bb      	str	r3, [r7, #24]
            break;
 801e48e:	e04a      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801e490:	4b28      	ldr	r3, [pc, #160]	@ (801e534 <RegionUS915GetPhyParam+0x294>)
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	61bb      	str	r3, [r7, #24]
            break;
 801e496:	e046      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801e498:	2300      	movs	r3, #0
 801e49a:	61bb      	str	r3, [r7, #24]
            break;
 801e49c:	e043      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801e49e:	2300      	movs	r3, #0
 801e4a0:	61bb      	str	r3, [r7, #24]
            break;
 801e4a2:	e040      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801e4a4:	4b28      	ldr	r3, [pc, #160]	@ (801e548 <RegionUS915GetPhyParam+0x2a8>)
 801e4a6:	61bb      	str	r3, [r7, #24]
            break;
 801e4a8:	e03d      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801e4aa:	f04f 0300 	mov.w	r3, #0
 801e4ae:	61bb      	str	r3, [r7, #24]
            break;
 801e4b0:	e039      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	791b      	ldrb	r3, [r3, #4]
 801e4b6:	4a25      	ldr	r2, [pc, #148]	@ (801e54c <RegionUS915GetPhyParam+0x2ac>)
 801e4b8:	4922      	ldr	r1, [pc, #136]	@ (801e544 <RegionUS915GetPhyParam+0x2a4>)
 801e4ba:	4618      	mov	r0, r3
 801e4bc:	f7fd fcc7 	bl	801be4e <RegionBaseUSCalcDownlinkFrequency>
 801e4c0:	4603      	mov	r3, r0
 801e4c2:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801e4c4:	e02f      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801e4c6:	2317      	movs	r3, #23
 801e4c8:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801e4ca:	2304      	movs	r3, #4
 801e4cc:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801e4ce:	2303      	movs	r3, #3
 801e4d0:	76bb      	strb	r3, [r7, #26]
            break;
 801e4d2:	e028      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801e4d4:	2308      	movs	r3, #8
 801e4d6:	61bb      	str	r3, [r7, #24]
            break;
 801e4d8:	e025      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801e4da:	2308      	movs	r3, #8
 801e4dc:	61bb      	str	r3, [r7, #24]
            break;
 801e4de:	e022      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	791b      	ldrb	r3, [r3, #4]
 801e4e4:	4a19      	ldr	r2, [pc, #100]	@ (801e54c <RegionUS915GetPhyParam+0x2ac>)
 801e4e6:	4917      	ldr	r1, [pc, #92]	@ (801e544 <RegionUS915GetPhyParam+0x2a4>)
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f7fd fcb0 	bl	801be4e <RegionBaseUSCalcDownlinkFrequency>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801e4f2:	e018      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801e4f4:	2308      	movs	r3, #8
 801e4f6:	61bb      	str	r3, [r7, #24]
            break;
 801e4f8:	e015      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801e4fa:	2308      	movs	r3, #8
 801e4fc:	61bb      	str	r3, [r7, #24]
            break;
 801e4fe:	e012      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e506:	461a      	mov	r2, r3
 801e508:	4b11      	ldr	r3, [pc, #68]	@ (801e550 <RegionUS915GetPhyParam+0x2b0>)
 801e50a:	5c9b      	ldrb	r3, [r3, r2]
 801e50c:	61bb      	str	r3, [r7, #24]
            break;
 801e50e:	e00a      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e516:	490f      	ldr	r1, [pc, #60]	@ (801e554 <RegionUS915GetPhyParam+0x2b4>)
 801e518:	4618      	mov	r0, r3
 801e51a:	f7fe fbe9 	bl	801ccf0 <RegionCommonGetBandwidth>
 801e51e:	4603      	mov	r3, r0
 801e520:	61bb      	str	r3, [r7, #24]
            break;
 801e522:	e000      	b.n	801e526 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801e524:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801e526:	69bb      	ldr	r3, [r7, #24]
 801e528:	61fb      	str	r3, [r7, #28]
 801e52a:	69fb      	ldr	r3, [r7, #28]
}
 801e52c:	4618      	mov	r0, r3
 801e52e:	3720      	adds	r7, #32
 801e530:	46bd      	mov	sp, r7
 801e532:	bd80      	pop	{r7, pc}
 801e534:	20002020 	.word	0x20002020
 801e538:	080297f8 	.word	0x080297f8
 801e53c:	08029808 	.word	0x08029808
 801e540:	fffffc18 	.word	0xfffffc18
 801e544:	370870a0 	.word	0x370870a0
 801e548:	4200999a 	.word	0x4200999a
 801e54c:	000927c0 	.word	0x000927c0
 801e550:	08029794 	.word	0x08029794
 801e554:	080297a4 	.word	0x080297a4

0801e558 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801e558:	b590      	push	{r4, r7, lr}
 801e55a:	b085      	sub	sp, #20
 801e55c:	af02      	add	r7, sp, #8
 801e55e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801e560:	4b11      	ldr	r3, [pc, #68]	@ (801e5a8 <RegionUS915SetBandTxDone+0x50>)
 801e562:	681a      	ldr	r2, [r3, #0]
 801e564:	4b11      	ldr	r3, [pc, #68]	@ (801e5ac <RegionUS915SetBandTxDone+0x54>)
 801e566:	6819      	ldr	r1, [r3, #0]
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	781b      	ldrb	r3, [r3, #0]
 801e56c:	4618      	mov	r0, r3
 801e56e:	4603      	mov	r3, r0
 801e570:	005b      	lsls	r3, r3, #1
 801e572:	4403      	add	r3, r0
 801e574:	009b      	lsls	r3, r3, #2
 801e576:	440b      	add	r3, r1
 801e578:	3309      	adds	r3, #9
 801e57a:	781b      	ldrb	r3, [r3, #0]
 801e57c:	4619      	mov	r1, r3
 801e57e:	460b      	mov	r3, r1
 801e580:	005b      	lsls	r3, r3, #1
 801e582:	440b      	add	r3, r1
 801e584:	00db      	lsls	r3, r3, #3
 801e586:	18d0      	adds	r0, r2, r3
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	6899      	ldr	r1, [r3, #8]
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	785c      	ldrb	r4, [r3, #1]
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	691a      	ldr	r2, [r3, #16]
 801e594:	9200      	str	r2, [sp, #0]
 801e596:	68db      	ldr	r3, [r3, #12]
 801e598:	4622      	mov	r2, r4
 801e59a:	f7fd fecf 	bl	801c33c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801e59e:	bf00      	nop
 801e5a0:	370c      	adds	r7, #12
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	bd90      	pop	{r4, r7, pc}
 801e5a6:	bf00      	nop
 801e5a8:	20002024 	.word	0x20002024
 801e5ac:	20002020 	.word	0x20002020

0801e5b0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801e5b0:	b580      	push	{r7, lr}
 801e5b2:	b08a      	sub	sp, #40	@ 0x28
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801e5b8:	2301      	movs	r3, #1
 801e5ba:	81bb      	strh	r3, [r7, #12]
 801e5bc:	2300      	movs	r3, #0
 801e5be:	73bb      	strb	r3, [r7, #14]
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	613b      	str	r3, [r7, #16]
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	617b      	str	r3, [r7, #20]
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	61bb      	str	r3, [r7, #24]
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	61fb      	str	r3, [r7, #28]
 801e5d0:	2300      	movs	r3, #0
 801e5d2:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	7b1b      	ldrb	r3, [r3, #12]
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d007      	beq.n	801e5ee <RegionUS915InitDefaults+0x3e>
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	f2c0 8104 	blt.w	801e7ec <RegionUS915InitDefaults+0x23c>
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	2b01      	cmp	r3, #1
 801e5e8:	f200 8100 	bhi.w	801e7ec <RegionUS915InitDefaults+0x23c>
 801e5ec:	e0ce      	b.n	801e78c <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	f000 80fc 	beq.w	801e7f0 <RegionUS915InitDefaults+0x240>
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	685b      	ldr	r3, [r3, #4]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	f000 80f7 	beq.w	801e7f0 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	4a7c      	ldr	r2, [pc, #496]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e608:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	685b      	ldr	r3, [r3, #4]
 801e60e:	4a7b      	ldr	r2, [pc, #492]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e610:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	689b      	ldr	r3, [r3, #8]
 801e616:	4a7a      	ldr	r2, [pc, #488]	@ (801e800 <RegionUS915InitDefaults+0x250>)
 801e618:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801e61a:	4b77      	ldr	r3, [pc, #476]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	2200      	movs	r2, #0
 801e620:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801e622:	4b75      	ldr	r3, [pc, #468]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	2200      	movs	r2, #0
 801e628:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801e62a:	4b75      	ldr	r3, [pc, #468]	@ (801e800 <RegionUS915InitDefaults+0x250>)
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	f107 010c 	add.w	r1, r7, #12
 801e632:	2218      	movs	r2, #24
 801e634:	4618      	mov	r0, r3
 801e636:	f000 ffee 	bl	801f616 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801e63a:	2300      	movs	r3, #0
 801e63c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e640:	e02e      	b.n	801e6a0 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801e642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e646:	4a6f      	ldr	r2, [pc, #444]	@ (801e804 <RegionUS915InitDefaults+0x254>)
 801e648:	fb03 f202 	mul.w	r2, r3, r2
 801e64c:	4b6e      	ldr	r3, [pc, #440]	@ (801e808 <RegionUS915InitDefaults+0x258>)
 801e64e:	4413      	add	r3, r2
 801e650:	4a6a      	ldr	r2, [pc, #424]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e652:	6811      	ldr	r1, [r2, #0]
 801e654:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801e658:	4618      	mov	r0, r3
 801e65a:	4613      	mov	r3, r2
 801e65c:	005b      	lsls	r3, r3, #1
 801e65e:	4413      	add	r3, r2
 801e660:	009b      	lsls	r3, r3, #2
 801e662:	440b      	add	r3, r1
 801e664:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801e666:	4b65      	ldr	r3, [pc, #404]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e668:	6819      	ldr	r1, [r3, #0]
 801e66a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801e66e:	4613      	mov	r3, r2
 801e670:	005b      	lsls	r3, r3, #1
 801e672:	4413      	add	r3, r2
 801e674:	009b      	lsls	r3, r3, #2
 801e676:	440b      	add	r3, r1
 801e678:	3308      	adds	r3, #8
 801e67a:	2230      	movs	r2, #48	@ 0x30
 801e67c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801e67e:	4b5f      	ldr	r3, [pc, #380]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e680:	6819      	ldr	r1, [r3, #0]
 801e682:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801e686:	4613      	mov	r3, r2
 801e688:	005b      	lsls	r3, r3, #1
 801e68a:	4413      	add	r3, r2
 801e68c:	009b      	lsls	r3, r3, #2
 801e68e:	440b      	add	r3, r1
 801e690:	3309      	adds	r3, #9
 801e692:	2200      	movs	r2, #0
 801e694:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801e696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e69a:	3301      	adds	r3, #1
 801e69c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e6a4:	2b3f      	cmp	r3, #63	@ 0x3f
 801e6a6:	d9cc      	bls.n	801e642 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801e6a8:	2340      	movs	r3, #64	@ 0x40
 801e6aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801e6ae:	e02f      	b.n	801e710 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801e6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801e6b4:	3b40      	subs	r3, #64	@ 0x40
 801e6b6:	4a55      	ldr	r2, [pc, #340]	@ (801e80c <RegionUS915InitDefaults+0x25c>)
 801e6b8:	fb03 f202 	mul.w	r2, r3, r2
 801e6bc:	4b54      	ldr	r3, [pc, #336]	@ (801e810 <RegionUS915InitDefaults+0x260>)
 801e6be:	4413      	add	r3, r2
 801e6c0:	4a4e      	ldr	r2, [pc, #312]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e6c2:	6811      	ldr	r1, [r2, #0]
 801e6c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	4613      	mov	r3, r2
 801e6cc:	005b      	lsls	r3, r3, #1
 801e6ce:	4413      	add	r3, r2
 801e6d0:	009b      	lsls	r3, r3, #2
 801e6d2:	440b      	add	r3, r1
 801e6d4:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801e6d6:	4b49      	ldr	r3, [pc, #292]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e6d8:	6819      	ldr	r1, [r3, #0]
 801e6da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801e6de:	4613      	mov	r3, r2
 801e6e0:	005b      	lsls	r3, r3, #1
 801e6e2:	4413      	add	r3, r2
 801e6e4:	009b      	lsls	r3, r3, #2
 801e6e6:	440b      	add	r3, r1
 801e6e8:	3308      	adds	r3, #8
 801e6ea:	2244      	movs	r2, #68	@ 0x44
 801e6ec:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801e6ee:	4b43      	ldr	r3, [pc, #268]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e6f0:	6819      	ldr	r1, [r3, #0]
 801e6f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801e6f6:	4613      	mov	r3, r2
 801e6f8:	005b      	lsls	r3, r3, #1
 801e6fa:	4413      	add	r3, r2
 801e6fc:	009b      	lsls	r3, r3, #2
 801e6fe:	440b      	add	r3, r1
 801e700:	3309      	adds	r3, #9
 801e702:	2200      	movs	r2, #0
 801e704:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801e706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801e70a:	3301      	adds	r3, #1
 801e70c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801e710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801e714:	2b47      	cmp	r3, #71	@ 0x47
 801e716:	d9cb      	bls.n	801e6b0 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801e718:	4b38      	ldr	r3, [pc, #224]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e720:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801e724:	4b35      	ldr	r3, [pc, #212]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e72c:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801e730:	4b32      	ldr	r3, [pc, #200]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e738:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801e73c:	4b2f      	ldr	r3, [pc, #188]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e744:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801e748:	4b2c      	ldr	r3, [pc, #176]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	22ff      	movs	r2, #255	@ 0xff
 801e74e:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801e752:	4b2a      	ldr	r3, [pc, #168]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	2200      	movs	r2, #0
 801e758:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801e75c:	4b27      	ldr	r3, [pc, #156]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801e764:	4b25      	ldr	r3, [pc, #148]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801e76c:	2206      	movs	r2, #6
 801e76e:	4619      	mov	r1, r3
 801e770:	f7fd fdbe 	bl	801c2f0 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801e774:	4b20      	ldr	r3, [pc, #128]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	4618      	mov	r0, r3
 801e77a:	4b20      	ldr	r3, [pc, #128]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801e782:	2206      	movs	r2, #6
 801e784:	4619      	mov	r1, r3
 801e786:	f7fd fdb3 	bl	801c2f0 <RegionCommonChanMaskCopy>
            break;
 801e78a:	e032      	b.n	801e7f2 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801e78c:	4b1b      	ldr	r3, [pc, #108]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801e794:	4b19      	ldr	r3, [pc, #100]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801e79c:	2206      	movs	r2, #6
 801e79e:	4619      	mov	r1, r3
 801e7a0:	f7fd fda6 	bl	801c2f0 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801e7aa:	e01a      	b.n	801e7e2 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801e7ac:	4b12      	ldr	r3, [pc, #72]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801e7b4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801e7b8:	4b10      	ldr	r3, [pc, #64]	@ (801e7fc <RegionUS915InitDefaults+0x24c>)
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801e7c0:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e7c4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801e7c8:	4b0b      	ldr	r3, [pc, #44]	@ (801e7f8 <RegionUS915InitDefaults+0x248>)
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801e7d0:	4001      	ands	r1, r0
 801e7d2:	b289      	uxth	r1, r1
 801e7d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801e7d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801e7dc:	3301      	adds	r3, #1
 801e7de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801e7e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801e7e6:	2b05      	cmp	r3, #5
 801e7e8:	d9e0      	bls.n	801e7ac <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801e7ea:	e002      	b.n	801e7f2 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801e7ec:	bf00      	nop
 801e7ee:	e000      	b.n	801e7f2 <RegionUS915InitDefaults+0x242>
                return;
 801e7f0:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801e7f2:	3728      	adds	r7, #40	@ 0x28
 801e7f4:	46bd      	mov	sp, r7
 801e7f6:	bd80      	pop	{r7, pc}
 801e7f8:	2000201c 	.word	0x2000201c
 801e7fc:	20002020 	.word	0x20002020
 801e800:	20002024 	.word	0x20002024
 801e804:	00030d40 	.word	0x00030d40
 801e808:	35c80160 	.word	0x35c80160
 801e80c:	00186a00 	.word	0x00186a00
 801e810:	35d2afc0 	.word	0x35d2afc0

0801e814 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b082      	sub	sp, #8
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
 801e81c:	460b      	mov	r3, r1
 801e81e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801e820:	78fb      	ldrb	r3, [r7, #3]
 801e822:	2b0f      	cmp	r3, #15
 801e824:	d867      	bhi.n	801e8f6 <RegionUS915Verify+0xe2>
 801e826:	a201      	add	r2, pc, #4	@ (adr r2, 801e82c <RegionUS915Verify+0x18>)
 801e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e82c:	0801e86d 	.word	0x0801e86d
 801e830:	0801e8f7 	.word	0x0801e8f7
 801e834:	0801e8f7 	.word	0x0801e8f7
 801e838:	0801e8f7 	.word	0x0801e8f7
 801e83c:	0801e8f7 	.word	0x0801e8f7
 801e840:	0801e87b 	.word	0x0801e87b
 801e844:	0801e899 	.word	0x0801e899
 801e848:	0801e8b7 	.word	0x0801e8b7
 801e84c:	0801e8f7 	.word	0x0801e8f7
 801e850:	0801e8d5 	.word	0x0801e8d5
 801e854:	0801e8d5 	.word	0x0801e8d5
 801e858:	0801e8f7 	.word	0x0801e8f7
 801e85c:	0801e8f7 	.word	0x0801e8f7
 801e860:	0801e8f7 	.word	0x0801e8f7
 801e864:	0801e8f7 	.word	0x0801e8f7
 801e868:	0801e8f3 	.word	0x0801e8f3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	4618      	mov	r0, r3
 801e872:	f7ff fca1 	bl	801e1b8 <VerifyRfFreq>
 801e876:	4603      	mov	r3, r0
 801e878:	e03e      	b.n	801e8f8 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	f993 3000 	ldrsb.w	r3, [r3]
 801e880:	2204      	movs	r2, #4
 801e882:	2100      	movs	r1, #0
 801e884:	4618      	mov	r0, r3
 801e886:	f7fd fcb6 	bl	801c1f6 <RegionCommonValueInRange>
 801e88a:	4603      	mov	r3, r0
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	bf14      	ite	ne
 801e890:	2301      	movne	r3, #1
 801e892:	2300      	moveq	r3, #0
 801e894:	b2db      	uxtb	r3, r3
 801e896:	e02f      	b.n	801e8f8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	f993 3000 	ldrsb.w	r3, [r3]
 801e89e:	2205      	movs	r2, #5
 801e8a0:	2100      	movs	r1, #0
 801e8a2:	4618      	mov	r0, r3
 801e8a4:	f7fd fca7 	bl	801c1f6 <RegionCommonValueInRange>
 801e8a8:	4603      	mov	r3, r0
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	bf14      	ite	ne
 801e8ae:	2301      	movne	r3, #1
 801e8b0:	2300      	moveq	r3, #0
 801e8b2:	b2db      	uxtb	r3, r3
 801e8b4:	e020      	b.n	801e8f8 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	f993 3000 	ldrsb.w	r3, [r3]
 801e8bc:	220d      	movs	r2, #13
 801e8be:	2108      	movs	r1, #8
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	f7fd fc98 	bl	801c1f6 <RegionCommonValueInRange>
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	bf14      	ite	ne
 801e8cc:	2301      	movne	r3, #1
 801e8ce:	2300      	moveq	r3, #0
 801e8d0:	b2db      	uxtb	r3, r3
 801e8d2:	e011      	b.n	801e8f8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	f993 3000 	ldrsb.w	r3, [r3]
 801e8da:	220e      	movs	r2, #14
 801e8dc:	2100      	movs	r1, #0
 801e8de:	4618      	mov	r0, r3
 801e8e0:	f7fd fc89 	bl	801c1f6 <RegionCommonValueInRange>
 801e8e4:	4603      	mov	r3, r0
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	bf14      	ite	ne
 801e8ea:	2301      	movne	r3, #1
 801e8ec:	2300      	moveq	r3, #0
 801e8ee:	b2db      	uxtb	r3, r3
 801e8f0:	e002      	b.n	801e8f8 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801e8f2:	2300      	movs	r3, #0
 801e8f4:	e000      	b.n	801e8f8 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801e8f6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801e8f8:	4618      	mov	r0, r3
 801e8fa:	3708      	adds	r7, #8
 801e8fc:	46bd      	mov	sp, r7
 801e8fe:	bd80      	pop	{r7, pc}

0801e900 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801e900:	b480      	push	{r7}
 801e902:	b085      	sub	sp, #20
 801e904:	af00      	add	r7, sp, #0
 801e906:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	7a1b      	ldrb	r3, [r3, #8]
 801e90c:	2b10      	cmp	r3, #16
 801e90e:	d15e      	bne.n	801e9ce <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	685b      	ldr	r3, [r3, #4]
 801e914:	330f      	adds	r3, #15
 801e916:	781b      	ldrb	r3, [r3, #0]
 801e918:	2b01      	cmp	r3, #1
 801e91a:	d15a      	bne.n	801e9d2 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801e91c:	2300      	movs	r3, #0
 801e91e:	73fb      	strb	r3, [r7, #15]
 801e920:	2300      	movs	r3, #0
 801e922:	73bb      	strb	r3, [r7, #14]
 801e924:	e04f      	b.n	801e9c6 <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	685a      	ldr	r2, [r3, #4]
 801e92a:	7bbb      	ldrb	r3, [r7, #14]
 801e92c:	4413      	add	r3, r2
 801e92e:	7819      	ldrb	r1, [r3, #0]
 801e930:	4b2a      	ldr	r3, [pc, #168]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	7bfa      	ldrb	r2, [r7, #15]
 801e936:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e93a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801e93e:	4b27      	ldr	r3, [pc, #156]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	7bfa      	ldrb	r2, [r7, #15]
 801e944:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e948:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	685a      	ldr	r2, [r3, #4]
 801e950:	7bbb      	ldrb	r3, [r7, #14]
 801e952:	3301      	adds	r3, #1
 801e954:	4413      	add	r3, r2
 801e956:	781b      	ldrb	r3, [r3, #0]
 801e958:	021b      	lsls	r3, r3, #8
 801e95a:	b299      	uxth	r1, r3
 801e95c:	4b1f      	ldr	r3, [pc, #124]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	7bfa      	ldrb	r2, [r7, #15]
 801e962:	4301      	orrs	r1, r0
 801e964:	b289      	uxth	r1, r1
 801e966:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e96a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801e96e:	7bfb      	ldrb	r3, [r7, #15]
 801e970:	2b04      	cmp	r3, #4
 801e972:	d10f      	bne.n	801e994 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801e974:	4b19      	ldr	r3, [pc, #100]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	7bfa      	ldrb	r2, [r7, #15]
 801e97a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e97e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801e982:	4b16      	ldr	r3, [pc, #88]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	7bfa      	ldrb	r2, [r7, #15]
 801e988:	b2c9      	uxtb	r1, r1
 801e98a:	b289      	uxth	r1, r1
 801e98c:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e990:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801e994:	4b12      	ldr	r3, [pc, #72]	@ (801e9e0 <RegionUS915ApplyCFList+0xe0>)
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	7bfa      	ldrb	r2, [r7, #15]
 801e99a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801e99e:	4b0f      	ldr	r3, [pc, #60]	@ (801e9dc <RegionUS915ApplyCFList+0xdc>)
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	7bfa      	ldrb	r2, [r7, #15]
 801e9a4:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801e9a8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801e9ac:	4b0c      	ldr	r3, [pc, #48]	@ (801e9e0 <RegionUS915ApplyCFList+0xe0>)
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	7bfa      	ldrb	r2, [r7, #15]
 801e9b2:	4001      	ands	r1, r0
 801e9b4:	b289      	uxth	r1, r1
 801e9b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801e9ba:	7bfb      	ldrb	r3, [r7, #15]
 801e9bc:	3301      	adds	r3, #1
 801e9be:	73fb      	strb	r3, [r7, #15]
 801e9c0:	7bbb      	ldrb	r3, [r7, #14]
 801e9c2:	3302      	adds	r3, #2
 801e9c4:	73bb      	strb	r3, [r7, #14]
 801e9c6:	7bfb      	ldrb	r3, [r7, #15]
 801e9c8:	2b04      	cmp	r3, #4
 801e9ca:	d9ac      	bls.n	801e926 <RegionUS915ApplyCFList+0x26>
 801e9cc:	e002      	b.n	801e9d4 <RegionUS915ApplyCFList+0xd4>
        return;
 801e9ce:	bf00      	nop
 801e9d0:	e000      	b.n	801e9d4 <RegionUS915ApplyCFList+0xd4>
        return;
 801e9d2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801e9d4:	3714      	adds	r7, #20
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	bc80      	pop	{r7}
 801e9da:	4770      	bx	lr
 801e9dc:	20002020 	.word	0x20002020
 801e9e0:	2000201c 	.word	0x2000201c

0801e9e4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801e9e4:	b580      	push	{r7, lr}
 801e9e6:	b084      	sub	sp, #16
 801e9e8:	af00      	add	r7, sp, #0
 801e9ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	2204      	movs	r2, #4
 801e9f2:	2100      	movs	r1, #0
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	f7fd fc4f 	bl	801c298 <RegionCommonCountChannels>
 801e9fa:	4603      	mov	r3, r0
 801e9fc:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801e9fe:	7bbb      	ldrb	r3, [r7, #14]
 801ea00:	2b01      	cmp	r3, #1
 801ea02:	d804      	bhi.n	801ea0e <RegionUS915ChanMaskSet+0x2a>
 801ea04:	7bbb      	ldrb	r3, [r7, #14]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d001      	beq.n	801ea0e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	e04a      	b.n	801eaa4 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	791b      	ldrb	r3, [r3, #4]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d002      	beq.n	801ea1c <RegionUS915ChanMaskSet+0x38>
 801ea16:	2b01      	cmp	r3, #1
 801ea18:	d036      	beq.n	801ea88 <RegionUS915ChanMaskSet+0xa4>
 801ea1a:	e040      	b.n	801ea9e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ea1c:	4b23      	ldr	r3, [pc, #140]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	2206      	movs	r2, #6
 801ea2a:	4619      	mov	r1, r3
 801ea2c:	f7fd fc60 	bl	801c2f0 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801ea30:	4b1e      	ldr	r3, [pc, #120]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 801ea38:	4b1c      	ldr	r3, [pc, #112]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	b2d2      	uxtb	r2, r2
 801ea3e:	b292      	uxth	r2, r2
 801ea40:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801ea44:	4b19      	ldr	r3, [pc, #100]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea46:	681b      	ldr	r3, [r3, #0]
 801ea48:	2200      	movs	r2, #0
 801ea4a:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ea4e:	2300      	movs	r3, #0
 801ea50:	73fb      	strb	r3, [r7, #15]
 801ea52:	e015      	b.n	801ea80 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ea54:	4b16      	ldr	r3, [pc, #88]	@ (801eab0 <RegionUS915ChanMaskSet+0xcc>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	7bfa      	ldrb	r2, [r7, #15]
 801ea5a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ea5e:	4b13      	ldr	r3, [pc, #76]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	7bfa      	ldrb	r2, [r7, #15]
 801ea64:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801ea68:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ea6c:	4b10      	ldr	r3, [pc, #64]	@ (801eab0 <RegionUS915ChanMaskSet+0xcc>)
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	7bfa      	ldrb	r2, [r7, #15]
 801ea72:	4001      	ands	r1, r0
 801ea74:	b289      	uxth	r1, r1
 801ea76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ea7a:	7bfb      	ldrb	r3, [r7, #15]
 801ea7c:	3301      	adds	r3, #1
 801ea7e:	73fb      	strb	r3, [r7, #15]
 801ea80:	7bfb      	ldrb	r3, [r7, #15]
 801ea82:	2b05      	cmp	r3, #5
 801ea84:	d9e6      	bls.n	801ea54 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801ea86:	e00c      	b.n	801eaa2 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ea88:	4b08      	ldr	r3, [pc, #32]	@ (801eaac <RegionUS915ChanMaskSet+0xc8>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	2206      	movs	r2, #6
 801ea96:	4619      	mov	r1, r3
 801ea98:	f7fd fc2a 	bl	801c2f0 <RegionCommonChanMaskCopy>
            break;
 801ea9c:	e001      	b.n	801eaa2 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801ea9e:	2300      	movs	r3, #0
 801eaa0:	e000      	b.n	801eaa4 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801eaa2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	3710      	adds	r7, #16
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}
 801eaac:	20002020 	.word	0x20002020
 801eab0:	2000201c 	.word	0x2000201c

0801eab4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801eab4:	b580      	push	{r7, lr}
 801eab6:	b088      	sub	sp, #32
 801eab8:	af02      	add	r7, sp, #8
 801eaba:	60ba      	str	r2, [r7, #8]
 801eabc:	607b      	str	r3, [r7, #4]
 801eabe:	4603      	mov	r3, r0
 801eac0:	73fb      	strb	r3, [r7, #15]
 801eac2:	460b      	mov	r3, r1
 801eac4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801eac6:	2300      	movs	r3, #0
 801eac8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801eaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801eace:	2b0d      	cmp	r3, #13
 801ead0:	bfa8      	it	ge
 801ead2:	230d      	movge	r3, #13
 801ead4:	b25a      	sxtb	r2, r3
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801eae0:	4916      	ldr	r1, [pc, #88]	@ (801eb3c <RegionUS915ComputeRxWindowParameters+0x88>)
 801eae2:	4618      	mov	r0, r3
 801eae4:	f7fe f904 	bl	801ccf0 <RegionCommonGetBandwidth>
 801eae8:	4603      	mov	r3, r0
 801eaea:	b2da      	uxtb	r2, r3
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801eaf6:	461a      	mov	r2, r3
 801eaf8:	4b11      	ldr	r3, [pc, #68]	@ (801eb40 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801eafa:	5c9a      	ldrb	r2, [r3, r2]
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801eb02:	4619      	mov	r1, r3
 801eb04:	4b0d      	ldr	r3, [pc, #52]	@ (801eb3c <RegionUS915ComputeRxWindowParameters+0x88>)
 801eb06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb0a:	4619      	mov	r1, r3
 801eb0c:	4610      	mov	r0, r2
 801eb0e:	f7fd fe0d 	bl	801c72c <RegionCommonComputeSymbolTimeLoRa>
 801eb12:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801eb14:	4b0b      	ldr	r3, [pc, #44]	@ (801eb44 <RegionUS915ComputeRxWindowParameters+0x90>)
 801eb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801eb18:	4798      	blx	r3
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	3308      	adds	r3, #8
 801eb1e:	687a      	ldr	r2, [r7, #4]
 801eb20:	320c      	adds	r2, #12
 801eb22:	7bb9      	ldrb	r1, [r7, #14]
 801eb24:	9201      	str	r2, [sp, #4]
 801eb26:	9300      	str	r3, [sp, #0]
 801eb28:	4603      	mov	r3, r0
 801eb2a:	68ba      	ldr	r2, [r7, #8]
 801eb2c:	6978      	ldr	r0, [r7, #20]
 801eb2e:	f7fd fe23 	bl	801c778 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801eb32:	bf00      	nop
 801eb34:	3718      	adds	r7, #24
 801eb36:	46bd      	mov	sp, r7
 801eb38:	bd80      	pop	{r7, pc}
 801eb3a:	bf00      	nop
 801eb3c:	080297a4 	.word	0x080297a4
 801eb40:	08029794 	.word	0x08029794
 801eb44:	08029818 	.word	0x08029818

0801eb48 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801eb48:	b590      	push	{r4, r7, lr}
 801eb4a:	b091      	sub	sp, #68	@ 0x44
 801eb4c:	af0a      	add	r7, sp, #40	@ 0x28
 801eb4e:	6078      	str	r0, [r7, #4]
 801eb50:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	785b      	ldrb	r3, [r3, #1]
 801eb56:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801eb58:	2300      	movs	r3, #0
 801eb5a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	685b      	ldr	r3, [r3, #4]
 801eb64:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801eb66:	4b34      	ldr	r3, [pc, #208]	@ (801ec38 <RegionUS915RxConfig+0xf0>)
 801eb68:	685b      	ldr	r3, [r3, #4]
 801eb6a:	4798      	blx	r3
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d001      	beq.n	801eb76 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801eb72:	2300      	movs	r3, #0
 801eb74:	e05c      	b.n	801ec30 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	7cdb      	ldrb	r3, [r3, #19]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d109      	bne.n	801eb92 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	781b      	ldrb	r3, [r3, #0]
 801eb82:	f003 0307 	and.w	r3, r3, #7
 801eb86:	4a2d      	ldr	r2, [pc, #180]	@ (801ec3c <RegionUS915RxConfig+0xf4>)
 801eb88:	fb03 f202 	mul.w	r2, r3, r2
 801eb8c:	4b2c      	ldr	r3, [pc, #176]	@ (801ec40 <RegionUS915RxConfig+0xf8>)
 801eb8e:	4413      	add	r3, r2
 801eb90:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801eb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801eb96:	4a2b      	ldr	r2, [pc, #172]	@ (801ec44 <RegionUS915RxConfig+0xfc>)
 801eb98:	5cd3      	ldrb	r3, [r2, r3]
 801eb9a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801eb9c:	4b26      	ldr	r3, [pc, #152]	@ (801ec38 <RegionUS915RxConfig+0xf0>)
 801eb9e:	68db      	ldr	r3, [r3, #12]
 801eba0:	6938      	ldr	r0, [r7, #16]
 801eba2:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801eba4:	4b24      	ldr	r3, [pc, #144]	@ (801ec38 <RegionUS915RxConfig+0xf0>)
 801eba6:	699c      	ldr	r4, [r3, #24]
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	789b      	ldrb	r3, [r3, #2]
 801ebac:	4618      	mov	r0, r3
 801ebae:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	689b      	ldr	r3, [r3, #8]
 801ebb6:	b29b      	uxth	r3, r3
 801ebb8:	687a      	ldr	r2, [r7, #4]
 801ebba:	7c92      	ldrb	r2, [r2, #18]
 801ebbc:	9209      	str	r2, [sp, #36]	@ 0x24
 801ebbe:	2201      	movs	r2, #1
 801ebc0:	9208      	str	r2, [sp, #32]
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	9207      	str	r2, [sp, #28]
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	9206      	str	r2, [sp, #24]
 801ebca:	2200      	movs	r2, #0
 801ebcc:	9205      	str	r2, [sp, #20]
 801ebce:	2200      	movs	r2, #0
 801ebd0:	9204      	str	r2, [sp, #16]
 801ebd2:	2200      	movs	r2, #0
 801ebd4:	9203      	str	r2, [sp, #12]
 801ebd6:	9302      	str	r3, [sp, #8]
 801ebd8:	2308      	movs	r3, #8
 801ebda:	9301      	str	r3, [sp, #4]
 801ebdc:	2300      	movs	r3, #0
 801ebde:	9300      	str	r3, [sp, #0]
 801ebe0:	2301      	movs	r3, #1
 801ebe2:	460a      	mov	r2, r1
 801ebe4:	4601      	mov	r1, r0
 801ebe6:	2001      	movs	r0, #1
 801ebe8:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	7c5b      	ldrb	r3, [r3, #17]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d005      	beq.n	801ebfe <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801ebf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ebf6:	4a14      	ldr	r2, [pc, #80]	@ (801ec48 <RegionUS915RxConfig+0x100>)
 801ebf8:	5cd3      	ldrb	r3, [r2, r3]
 801ebfa:	75fb      	strb	r3, [r7, #23]
 801ebfc:	e004      	b.n	801ec08 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801ebfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ec02:	4a12      	ldr	r2, [pc, #72]	@ (801ec4c <RegionUS915RxConfig+0x104>)
 801ec04:	5cd3      	ldrb	r3, [r2, r3]
 801ec06:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801ec08:	4b0b      	ldr	r3, [pc, #44]	@ (801ec38 <RegionUS915RxConfig+0xf0>)
 801ec0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec0c:	7dfa      	ldrb	r2, [r7, #23]
 801ec0e:	320d      	adds	r2, #13
 801ec10:	b2d2      	uxtb	r2, r2
 801ec12:	4611      	mov	r1, r2
 801ec14:	2001      	movs	r0, #1
 801ec16:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	7cdb      	ldrb	r3, [r3, #19]
 801ec1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ec20:	6939      	ldr	r1, [r7, #16]
 801ec22:	4618      	mov	r0, r3
 801ec24:	f7fe f882 	bl	801cd2c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801ec28:	683b      	ldr	r3, [r7, #0]
 801ec2a:	7bfa      	ldrb	r2, [r7, #15]
 801ec2c:	701a      	strb	r2, [r3, #0]
    return true;
 801ec2e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ec30:	4618      	mov	r0, r3
 801ec32:	371c      	adds	r7, #28
 801ec34:	46bd      	mov	sp, r7
 801ec36:	bd90      	pop	{r4, r7, pc}
 801ec38:	08029818 	.word	0x08029818
 801ec3c:	000927c0 	.word	0x000927c0
 801ec40:	370870a0 	.word	0x370870a0
 801ec44:	08029794 	.word	0x08029794
 801ec48:	08029808 	.word	0x08029808
 801ec4c:	080297f8 	.word	0x080297f8

0801ec50 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ec50:	b590      	push	{r4, r7, lr}
 801ec52:	b093      	sub	sp, #76	@ 0x4c
 801ec54:	af0a      	add	r7, sp, #40	@ 0x28
 801ec56:	60f8      	str	r0, [r7, #12]
 801ec58:	60b9      	str	r1, [r7, #8]
 801ec5a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ec5c:	68fb      	ldr	r3, [r7, #12]
 801ec5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ec62:	461a      	mov	r2, r3
 801ec64:	4b49      	ldr	r3, [pc, #292]	@ (801ed8c <RegionUS915TxConfig+0x13c>)
 801ec66:	5c9b      	ldrb	r3, [r3, r2]
 801ec68:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ec70:	4b47      	ldr	r3, [pc, #284]	@ (801ed90 <RegionUS915TxConfig+0x140>)
 801ec72:	681a      	ldr	r2, [r3, #0]
 801ec74:	4b47      	ldr	r3, [pc, #284]	@ (801ed94 <RegionUS915TxConfig+0x144>)
 801ec76:	6819      	ldr	r1, [r3, #0]
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	781b      	ldrb	r3, [r3, #0]
 801ec7c:	461c      	mov	r4, r3
 801ec7e:	4623      	mov	r3, r4
 801ec80:	005b      	lsls	r3, r3, #1
 801ec82:	4423      	add	r3, r4
 801ec84:	009b      	lsls	r3, r3, #2
 801ec86:	440b      	add	r3, r1
 801ec88:	3309      	adds	r3, #9
 801ec8a:	781b      	ldrb	r3, [r3, #0]
 801ec8c:	4619      	mov	r1, r3
 801ec8e:	460b      	mov	r3, r1
 801ec90:	005b      	lsls	r3, r3, #1
 801ec92:	440b      	add	r3, r1
 801ec94:	00db      	lsls	r3, r3, #3
 801ec96:	4413      	add	r3, r2
 801ec98:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ec9c:	68fb      	ldr	r3, [r7, #12]
 801ec9e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801eca2:	4b3c      	ldr	r3, [pc, #240]	@ (801ed94 <RegionUS915TxConfig+0x144>)
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801ecaa:	f7ff fa4f 	bl	801e14c <LimitTxPower>
 801ecae:	4603      	mov	r3, r0
 801ecb0:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ecb8:	4937      	ldr	r1, [pc, #220]	@ (801ed98 <RegionUS915TxConfig+0x148>)
 801ecba:	4618      	mov	r0, r3
 801ecbc:	f7fe f818 	bl	801ccf0 <RegionCommonGetBandwidth>
 801ecc0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ecc6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ecca:	f04f 0200 	mov.w	r2, #0
 801ecce:	4933      	ldr	r1, [pc, #204]	@ (801ed9c <RegionUS915TxConfig+0x14c>)
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	f7fd fe09 	bl	801c8e8 <RegionCommonComputeTxPower>
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ecda:	4b31      	ldr	r3, [pc, #196]	@ (801eda0 <RegionUS915TxConfig+0x150>)
 801ecdc:	68da      	ldr	r2, [r3, #12]
 801ecde:	4b2d      	ldr	r3, [pc, #180]	@ (801ed94 <RegionUS915TxConfig+0x144>)
 801ece0:	6819      	ldr	r1, [r3, #0]
 801ece2:	68fb      	ldr	r3, [r7, #12]
 801ece4:	781b      	ldrb	r3, [r3, #0]
 801ece6:	4618      	mov	r0, r3
 801ece8:	4603      	mov	r3, r0
 801ecea:	005b      	lsls	r3, r3, #1
 801ecec:	4403      	add	r3, r0
 801ecee:	009b      	lsls	r3, r3, #2
 801ecf0:	440b      	add	r3, r1
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801ecf8:	4b29      	ldr	r3, [pc, #164]	@ (801eda0 <RegionUS915TxConfig+0x150>)
 801ecfa:	69dc      	ldr	r4, [r3, #28]
 801ecfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ed00:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801ed04:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801ed08:	9208      	str	r2, [sp, #32]
 801ed0a:	2200      	movs	r2, #0
 801ed0c:	9207      	str	r2, [sp, #28]
 801ed0e:	2200      	movs	r2, #0
 801ed10:	9206      	str	r2, [sp, #24]
 801ed12:	2200      	movs	r2, #0
 801ed14:	9205      	str	r2, [sp, #20]
 801ed16:	2201      	movs	r2, #1
 801ed18:	9204      	str	r2, [sp, #16]
 801ed1a:	2200      	movs	r2, #0
 801ed1c:	9203      	str	r2, [sp, #12]
 801ed1e:	2208      	movs	r2, #8
 801ed20:	9202      	str	r2, [sp, #8]
 801ed22:	2201      	movs	r2, #1
 801ed24:	9201      	str	r2, [sp, #4]
 801ed26:	9300      	str	r3, [sp, #0]
 801ed28:	69bb      	ldr	r3, [r7, #24]
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	2001      	movs	r0, #1
 801ed2e:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801ed30:	4b18      	ldr	r3, [pc, #96]	@ (801ed94 <RegionUS915TxConfig+0x144>)
 801ed32:	681a      	ldr	r2, [r3, #0]
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	781b      	ldrb	r3, [r3, #0]
 801ed38:	4619      	mov	r1, r3
 801ed3a:	460b      	mov	r3, r1
 801ed3c:	005b      	lsls	r3, r3, #1
 801ed3e:	440b      	add	r3, r1
 801ed40:	009b      	lsls	r3, r3, #2
 801ed42:	4413      	add	r3, r2
 801ed44:	681a      	ldr	r2, [r3, #0]
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ed4c:	4619      	mov	r1, r3
 801ed4e:	4610      	mov	r0, r2
 801ed50:	f7fe f81e 	bl	801cd90 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801ed54:	4b12      	ldr	r3, [pc, #72]	@ (801eda0 <RegionUS915TxConfig+0x150>)
 801ed56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ed58:	68fa      	ldr	r2, [r7, #12]
 801ed5a:	8992      	ldrh	r2, [r2, #12]
 801ed5c:	b2d2      	uxtb	r2, r2
 801ed5e:	4611      	mov	r1, r2
 801ed60:	2001      	movs	r0, #1
 801ed62:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	899b      	ldrh	r3, [r3, #12]
 801ed6e:	4619      	mov	r1, r3
 801ed70:	4610      	mov	r0, r2
 801ed72:	f7ff fa65 	bl	801e240 <GetTimeOnAir>
 801ed76:	4602      	mov	r2, r0
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801ed7c:	68bb      	ldr	r3, [r7, #8]
 801ed7e:	7fba      	ldrb	r2, [r7, #30]
 801ed80:	701a      	strb	r2, [r3, #0]
    return true;
 801ed82:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ed84:	4618      	mov	r0, r3
 801ed86:	3724      	adds	r7, #36	@ 0x24
 801ed88:	46bd      	mov	sp, r7
 801ed8a:	bd90      	pop	{r4, r7, pc}
 801ed8c:	08029794 	.word	0x08029794
 801ed90:	20002024 	.word	0x20002024
 801ed94:	20002020 	.word	0x20002020
 801ed98:	080297a4 	.word	0x080297a4
 801ed9c:	41f00000 	.word	0x41f00000
 801eda0:	08029818 	.word	0x08029818

0801eda4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801eda4:	b590      	push	{r4, r7, lr}
 801eda6:	b097      	sub	sp, #92	@ 0x5c
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	60f8      	str	r0, [r7, #12]
 801edac:	60b9      	str	r1, [r7, #8]
 801edae:	607a      	str	r2, [r7, #4]
 801edb0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801edb2:	2307      	movs	r3, #7
 801edb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801edb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801edbc:	2200      	movs	r2, #0
 801edbe:	601a      	str	r2, [r3, #0]
 801edc0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801edc2:	2300      	movs	r3, #0
 801edc4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 801edc8:	2300      	movs	r3, #0
 801edca:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801edce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801edd2:	2200      	movs	r2, #0
 801edd4:	601a      	str	r2, [r3, #0]
 801edd6:	605a      	str	r2, [r3, #4]
 801edd8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801edda:	4b97      	ldr	r3, [pc, #604]	@ (801f038 <RegionUS915LinkAdrReq+0x294>)
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 801ede2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ede6:	2206      	movs	r2, #6
 801ede8:	4618      	mov	r0, r3
 801edea:	f7fd fa81 	bl	801c2f0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801edee:	e11b      	b.n	801f028 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	685a      	ldr	r2, [r3, #4]
 801edf4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801edf8:	4413      	add	r3, r2
 801edfa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801edfe:	4611      	mov	r1, r2
 801ee00:	4618      	mov	r0, r3
 801ee02:	f7fd fbb9 	bl	801c578 <RegionCommonParseLinkAdrReq>
 801ee06:	4603      	mov	r3, r0
 801ee08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 801ee0c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	f000 8113 	beq.w	801f03c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801ee16:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801ee1a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801ee1e:	4413      	add	r3, r2
 801ee20:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801ee24:	2307      	movs	r3, #7
 801ee26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801ee2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801ee2e:	2b06      	cmp	r3, #6
 801ee30:	d116      	bne.n	801ee60 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801ee32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ee36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 801ee3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ee3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 801ee42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ee46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 801ee4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ee4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ee52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801ee56:	b2db      	uxtb	r3, r3
 801ee58:	b29b      	uxth	r3, r3
 801ee5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801ee5e:	e0e3      	b.n	801f028 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801ee60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801ee64:	2b07      	cmp	r3, #7
 801ee66:	d112      	bne.n	801ee8e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801ee68:	2300      	movs	r3, #0
 801ee6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 801ee6e:	2300      	movs	r3, #0
 801ee70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 801ee74:	2300      	movs	r3, #0
 801ee76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 801ee7a:	2300      	movs	r3, #0
 801ee7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ee80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801ee84:	b2db      	uxtb	r3, r3
 801ee86:	b29b      	uxth	r3, r3
 801ee88:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801ee8c:	e0cc      	b.n	801f028 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801ee8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801ee92:	2b05      	cmp	r3, #5
 801ee94:	f040 80bf 	bne.w	801f016 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801ee98:	2301      	movs	r3, #1
 801ee9a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801ee9e:	2300      	movs	r3, #0
 801eea0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801eea4:	2300      	movs	r3, #0
 801eea6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801eeaa:	e0ae      	b.n	801f00a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801eeac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801eeb0:	b2da      	uxtb	r2, r3
 801eeb2:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801eeb6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801eeba:	fa01 f303 	lsl.w	r3, r1, r3
 801eebe:	4013      	ands	r3, r2
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d04d      	beq.n	801ef60 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801eec4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801eec8:	f003 0301 	and.w	r3, r3, #1
 801eecc:	b2db      	uxtb	r3, r3
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d120      	bne.n	801ef14 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801eed2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801eed6:	005b      	lsls	r3, r3, #1
 801eed8:	3358      	adds	r3, #88	@ 0x58
 801eeda:	443b      	add	r3, r7
 801eedc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801eee0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801eee4:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 801eee8:	b292      	uxth	r2, r2
 801eeea:	005b      	lsls	r3, r3, #1
 801eeec:	3358      	adds	r3, #88	@ 0x58
 801eeee:	443b      	add	r3, r7
 801eef0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801eef4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801eef8:	b21a      	sxth	r2, r3
 801eefa:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801eefe:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801ef02:	fa01 f303 	lsl.w	r3, r1, r3
 801ef06:	b21b      	sxth	r3, r3
 801ef08:	4313      	orrs	r3, r2
 801ef0a:	b21b      	sxth	r3, r3
 801ef0c:	b29b      	uxth	r3, r3
 801ef0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801ef12:	e075      	b.n	801f000 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801ef14:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801ef18:	005b      	lsls	r3, r3, #1
 801ef1a:	3358      	adds	r3, #88	@ 0x58
 801ef1c:	443b      	add	r3, r7
 801ef1e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ef22:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801ef26:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 801ef2a:	b292      	uxth	r2, r2
 801ef2c:	005b      	lsls	r3, r3, #1
 801ef2e:	3358      	adds	r3, #88	@ 0x58
 801ef30:	443b      	add	r3, r7
 801ef32:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801ef36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801ef3a:	b21a      	sxth	r2, r3
 801ef3c:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801ef40:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801ef44:	fa01 f303 	lsl.w	r3, r1, r3
 801ef48:	b21b      	sxth	r3, r3
 801ef4a:	4313      	orrs	r3, r2
 801ef4c:	b21b      	sxth	r3, r3
 801ef4e:	b29b      	uxth	r3, r3
 801ef50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801ef54:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801ef58:	3301      	adds	r3, #1
 801ef5a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 801ef5e:	e04f      	b.n	801f000 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801ef60:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801ef64:	f003 0301 	and.w	r3, r3, #1
 801ef68:	b2db      	uxtb	r3, r3
 801ef6a:	2b00      	cmp	r3, #0
 801ef6c:	d122      	bne.n	801efb4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801ef6e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801ef72:	005b      	lsls	r3, r3, #1
 801ef74:	3358      	adds	r3, #88	@ 0x58
 801ef76:	443b      	add	r3, r7
 801ef78:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ef7c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801ef80:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801ef84:	b292      	uxth	r2, r2
 801ef86:	005b      	lsls	r3, r3, #1
 801ef88:	3358      	adds	r3, #88	@ 0x58
 801ef8a:	443b      	add	r3, r7
 801ef8c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ef90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801ef94:	b21a      	sxth	r2, r3
 801ef96:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801ef9a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801ef9e:	fa01 f303 	lsl.w	r3, r1, r3
 801efa2:	b21b      	sxth	r3, r3
 801efa4:	43db      	mvns	r3, r3
 801efa6:	b21b      	sxth	r3, r3
 801efa8:	4013      	ands	r3, r2
 801efaa:	b21b      	sxth	r3, r3
 801efac:	b29b      	uxth	r3, r3
 801efae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801efb2:	e025      	b.n	801f000 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801efb4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801efb8:	005b      	lsls	r3, r3, #1
 801efba:	3358      	adds	r3, #88	@ 0x58
 801efbc:	443b      	add	r3, r7
 801efbe:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801efc2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801efc6:	b2d2      	uxtb	r2, r2
 801efc8:	b292      	uxth	r2, r2
 801efca:	005b      	lsls	r3, r3, #1
 801efcc:	3358      	adds	r3, #88	@ 0x58
 801efce:	443b      	add	r3, r7
 801efd0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801efd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801efd8:	b21a      	sxth	r2, r3
 801efda:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801efde:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801efe2:	fa01 f303 	lsl.w	r3, r1, r3
 801efe6:	b21b      	sxth	r3, r3
 801efe8:	43db      	mvns	r3, r3
 801efea:	b21b      	sxth	r3, r3
 801efec:	4013      	ands	r3, r2
 801efee:	b21b      	sxth	r3, r3
 801eff0:	b29b      	uxth	r3, r3
 801eff2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801eff6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801effa:	3301      	adds	r3, #1
 801effc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801f000:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801f004:	3301      	adds	r3, #1
 801f006:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801f00a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801f00e:	2b07      	cmp	r3, #7
 801f010:	f67f af4c 	bls.w	801eeac <RegionUS915LinkAdrReq+0x108>
 801f014:	e008      	b.n	801f028 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801f016:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801f01a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 801f01e:	005b      	lsls	r3, r3, #1
 801f020:	3358      	adds	r3, #88	@ 0x58
 801f022:	443b      	add	r3, r7
 801f024:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	7a1b      	ldrb	r3, [r3, #8]
 801f02c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801f030:	429a      	cmp	r2, r3
 801f032:	f4ff aedd 	bcc.w	801edf0 <RegionUS915LinkAdrReq+0x4c>
 801f036:	e002      	b.n	801f03e <RegionUS915LinkAdrReq+0x29a>
 801f038:	20002020 	.word	0x20002020
            break; // break loop, since no more request has been found
 801f03c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801f03e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801f042:	2b03      	cmp	r3, #3
 801f044:	dc0f      	bgt.n	801f066 <RegionUS915LinkAdrReq+0x2c2>
 801f046:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801f04a:	2204      	movs	r2, #4
 801f04c:	2100      	movs	r1, #0
 801f04e:	4618      	mov	r0, r3
 801f050:	f7fd f922 	bl	801c298 <RegionCommonCountChannels>
 801f054:	4603      	mov	r3, r0
 801f056:	2b01      	cmp	r3, #1
 801f058:	d805      	bhi.n	801f066 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801f05a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801f05e:	f023 0301 	bic.w	r3, r3, #1
 801f062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801f066:	2302      	movs	r3, #2
 801f068:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	7a5b      	ldrb	r3, [r3, #9]
 801f070:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801f074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801f078:	4618      	mov	r0, r3
 801f07a:	f7ff f911 	bl	801e2a0 <RegionUS915GetPhyParam>
 801f07e:	4603      	mov	r3, r0
 801f080:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 801f082:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801f086:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	7a9b      	ldrb	r3, [r3, #10]
 801f08c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801f08e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801f092:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801f094:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 801f098:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801f09a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801f09e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801f0a6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801f0ae:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	7b5b      	ldrb	r3, [r3, #13]
 801f0b4:	b25b      	sxtb	r3, r3
 801f0b6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801f0b8:	2348      	movs	r3, #72	@ 0x48
 801f0ba:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801f0be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801f0c2:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801f0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0c6:	b25b      	sxtb	r3, r3
 801f0c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801f0cc:	2304      	movs	r3, #4
 801f0ce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801f0d2:	4b3f      	ldr	r3, [pc, #252]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801f0d8:	230e      	movs	r3, #14
 801f0da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801f0de:	2300      	movs	r3, #0
 801f0e0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801f0ea:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 801f0ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801f0f2:	1c9a      	adds	r2, r3, #2
 801f0f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801f0f8:	1c59      	adds	r1, r3, #1
 801f0fa:	f107 0014 	add.w	r0, r7, #20
 801f0fe:	4623      	mov	r3, r4
 801f100:	f7fd fa8b 	bl	801c61a <RegionCommonLinkAdrReqVerifyParams>
 801f104:	4603      	mov	r3, r0
 801f106:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801f10a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801f10e:	2b07      	cmp	r3, #7
 801f110:	d147      	bne.n	801f1a2 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801f112:	4b2f      	ldr	r3, [pc, #188]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801f11a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801f11e:	2206      	movs	r2, #6
 801f120:	4618      	mov	r0, r3
 801f122:	f7fd f8e5 	bl	801c2f0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801f126:	4b2b      	ldr	r3, [pc, #172]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	8819      	ldrh	r1, [r3, #0]
 801f12c:	4b28      	ldr	r3, [pc, #160]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801f134:	4b27      	ldr	r3, [pc, #156]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	400a      	ands	r2, r1
 801f13a:	b292      	uxth	r2, r2
 801f13c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801f13e:	4b25      	ldr	r3, [pc, #148]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	8859      	ldrh	r1, [r3, #2]
 801f144:	4b22      	ldr	r3, [pc, #136]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 801f14c:	4b21      	ldr	r3, [pc, #132]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	400a      	ands	r2, r1
 801f152:	b292      	uxth	r2, r2
 801f154:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801f156:	4b1f      	ldr	r3, [pc, #124]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	8899      	ldrh	r1, [r3, #4]
 801f15c:	4b1c      	ldr	r3, [pc, #112]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 801f164:	4b1b      	ldr	r3, [pc, #108]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	400a      	ands	r2, r1
 801f16a:	b292      	uxth	r2, r2
 801f16c:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801f16e:	4b19      	ldr	r3, [pc, #100]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	88d9      	ldrh	r1, [r3, #6]
 801f174:	4b16      	ldr	r3, [pc, #88]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f176:	681b      	ldr	r3, [r3, #0]
 801f178:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 801f17c:	4b15      	ldr	r3, [pc, #84]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	400a      	ands	r2, r1
 801f182:	b292      	uxth	r2, r2
 801f184:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801f186:	4b12      	ldr	r3, [pc, #72]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f188:	681a      	ldr	r2, [r3, #0]
 801f18a:	4b12      	ldr	r3, [pc, #72]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 801f192:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801f194:	4b0e      	ldr	r3, [pc, #56]	@ (801f1d0 <RegionUS915LinkAdrReq+0x42c>)
 801f196:	681a      	ldr	r2, [r3, #0]
 801f198:	4b0e      	ldr	r3, [pc, #56]	@ (801f1d4 <RegionUS915LinkAdrReq+0x430>)
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 801f1a0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801f1a2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801f1a6:	68bb      	ldr	r3, [r7, #8]
 801f1a8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801f1aa:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801f1b2:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 801f1b6:	683b      	ldr	r3, [r7, #0]
 801f1b8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801f1ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f1bc:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801f1c0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801f1c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 801f1c6:	4618      	mov	r0, r3
 801f1c8:	375c      	adds	r7, #92	@ 0x5c
 801f1ca:	46bd      	mov	sp, r7
 801f1cc:	bd90      	pop	{r4, r7, pc}
 801f1ce:	bf00      	nop
 801f1d0:	20002020 	.word	0x20002020
 801f1d4:	2000201c 	.word	0x2000201c

0801f1d8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801f1d8:	b580      	push	{r7, lr}
 801f1da:	b084      	sub	sp, #16
 801f1dc:	af00      	add	r7, sp, #0
 801f1de:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801f1e0:	2307      	movs	r3, #7
 801f1e2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	685b      	ldr	r3, [r3, #4]
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	f7fe ffe5 	bl	801e1b8 <VerifyRfFreq>
 801f1ee:	4603      	mov	r3, r0
 801f1f0:	f083 0301 	eor.w	r3, r3, #1
 801f1f4:	b2db      	uxtb	r3, r3
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d003      	beq.n	801f202 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801f1fa:	7bfb      	ldrb	r3, [r7, #15]
 801f1fc:	f023 0301 	bic.w	r3, r3, #1
 801f200:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	f993 3000 	ldrsb.w	r3, [r3]
 801f208:	220d      	movs	r2, #13
 801f20a:	2108      	movs	r1, #8
 801f20c:	4618      	mov	r0, r3
 801f20e:	f7fc fff2 	bl	801c1f6 <RegionCommonValueInRange>
 801f212:	4603      	mov	r3, r0
 801f214:	2b00      	cmp	r3, #0
 801f216:	d103      	bne.n	801f220 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801f218:	7bfb      	ldrb	r3, [r7, #15]
 801f21a:	f023 0302 	bic.w	r3, r3, #2
 801f21e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	f993 3000 	ldrsb.w	r3, [r3]
 801f226:	2207      	movs	r2, #7
 801f228:	2105      	movs	r1, #5
 801f22a:	4618      	mov	r0, r3
 801f22c:	f7fc ffe3 	bl	801c1f6 <RegionCommonValueInRange>
 801f230:	4603      	mov	r3, r0
 801f232:	2b01      	cmp	r3, #1
 801f234:	d004      	beq.n	801f240 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801f23c:	2b0d      	cmp	r3, #13
 801f23e:	dd03      	ble.n	801f248 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801f240:	7bfb      	ldrb	r3, [r7, #15]
 801f242:	f023 0302 	bic.w	r3, r3, #2
 801f246:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801f24e:	2203      	movs	r2, #3
 801f250:	2100      	movs	r1, #0
 801f252:	4618      	mov	r0, r3
 801f254:	f7fc ffcf 	bl	801c1f6 <RegionCommonValueInRange>
 801f258:	4603      	mov	r3, r0
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d103      	bne.n	801f266 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801f25e:	7bfb      	ldrb	r3, [r7, #15]
 801f260:	f023 0304 	bic.w	r3, r3, #4
 801f264:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801f266:	7bfb      	ldrb	r3, [r7, #15]
}
 801f268:	4618      	mov	r0, r3
 801f26a:	3710      	adds	r7, #16
 801f26c:	46bd      	mov	sp, r7
 801f26e:	bd80      	pop	{r7, pc}

0801f270 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801f270:	b480      	push	{r7}
 801f272:	b083      	sub	sp, #12
 801f274:	af00      	add	r7, sp, #0
 801f276:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801f278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f27c:	4618      	mov	r0, r3
 801f27e:	370c      	adds	r7, #12
 801f280:	46bd      	mov	sp, r7
 801f282:	bc80      	pop	{r7}
 801f284:	4770      	bx	lr

0801f286 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801f286:	b480      	push	{r7}
 801f288:	b083      	sub	sp, #12
 801f28a:	af00      	add	r7, sp, #0
 801f28c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801f28e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f292:	4618      	mov	r0, r3
 801f294:	370c      	adds	r7, #12
 801f296:	46bd      	mov	sp, r7
 801f298:	bc80      	pop	{r7}
 801f29a:	4770      	bx	lr

0801f29c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801f29c:	b480      	push	{r7}
 801f29e:	b083      	sub	sp, #12
 801f2a0:	af00      	add	r7, sp, #0
 801f2a2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801f2a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	370c      	adds	r7, #12
 801f2ac:	46bd      	mov	sp, r7
 801f2ae:	bc80      	pop	{r7}
 801f2b0:	4770      	bx	lr
	...

0801f2b4 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801f2b4:	b480      	push	{r7}
 801f2b6:	b083      	sub	sp, #12
 801f2b8:	af00      	add	r7, sp, #0
 801f2ba:	4603      	mov	r3, r0
 801f2bc:	460a      	mov	r2, r1
 801f2be:	71fb      	strb	r3, [r7, #7]
 801f2c0:	4613      	mov	r3, r2
 801f2c2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801f2c4:	79bb      	ldrb	r3, [r7, #6]
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d106      	bne.n	801f2d8 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801f2ca:	4b13      	ldr	r3, [pc, #76]	@ (801f318 <RegionUS915AlternateDr+0x64>)
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	7b5a      	ldrb	r2, [r3, #13]
 801f2d0:	3201      	adds	r2, #1
 801f2d2:	b2d2      	uxtb	r2, r2
 801f2d4:	735a      	strb	r2, [r3, #13]
 801f2d6:	e005      	b.n	801f2e4 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801f2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801f318 <RegionUS915AlternateDr+0x64>)
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	7b5a      	ldrb	r2, [r3, #13]
 801f2de:	3a01      	subs	r2, #1
 801f2e0:	b2d2      	uxtb	r2, r2
 801f2e2:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801f2e4:	4b0c      	ldr	r3, [pc, #48]	@ (801f318 <RegionUS915AlternateDr+0x64>)
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	7b5a      	ldrb	r2, [r3, #13]
 801f2ea:	4b0c      	ldr	r3, [pc, #48]	@ (801f31c <RegionUS915AlternateDr+0x68>)
 801f2ec:	fba3 1302 	umull	r1, r3, r3, r2
 801f2f0:	0859      	lsrs	r1, r3, #1
 801f2f2:	460b      	mov	r3, r1
 801f2f4:	00db      	lsls	r3, r3, #3
 801f2f6:	440b      	add	r3, r1
 801f2f8:	1ad3      	subs	r3, r2, r3
 801f2fa:	b2db      	uxtb	r3, r3
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d102      	bne.n	801f306 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801f300:	2304      	movs	r3, #4
 801f302:	71fb      	strb	r3, [r7, #7]
 801f304:	e001      	b.n	801f30a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801f306:	2300      	movs	r3, #0
 801f308:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801f30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801f30e:	4618      	mov	r0, r3
 801f310:	370c      	adds	r7, #12
 801f312:	46bd      	mov	sp, r7
 801f314:	bc80      	pop	{r7}
 801f316:	4770      	bx	lr
 801f318:	2000201c 	.word	0x2000201c
 801f31c:	38e38e39 	.word	0x38e38e39

0801f320 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801f320:	b580      	push	{r7, lr}
 801f322:	b0a8      	sub	sp, #160	@ 0xa0
 801f324:	af02      	add	r7, sp, #8
 801f326:	60f8      	str	r0, [r7, #12]
 801f328:	60b9      	str	r1, [r7, #8]
 801f32a:	607a      	str	r2, [r7, #4]
 801f32c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801f32e:	2300      	movs	r3, #0
 801f330:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 801f334:	2300      	movs	r3, #0
 801f336:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801f33a:	2300      	movs	r3, #0
 801f33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f33e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801f342:	2244      	movs	r2, #68	@ 0x44
 801f344:	2100      	movs	r1, #0
 801f346:	4618      	mov	r0, r3
 801f348:	f005 ff89 	bl	802525e <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801f34c:	230c      	movs	r3, #12
 801f34e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801f352:	4b67      	ldr	r3, [pc, #412]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	2204      	movs	r2, #4
 801f358:	2100      	movs	r1, #0
 801f35a:	4618      	mov	r0, r3
 801f35c:	f7fc ff9c 	bl	801c298 <RegionCommonCountChannels>
 801f360:	4603      	mov	r3, r0
 801f362:	2b00      	cmp	r3, #0
 801f364:	d10e      	bne.n	801f384 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801f366:	4b62      	ldr	r3, [pc, #392]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f368:	681b      	ldr	r3, [r3, #0]
 801f36a:	4618      	mov	r0, r3
 801f36c:	4b61      	ldr	r3, [pc, #388]	@ (801f4f4 <RegionUS915NextChannel+0x1d4>)
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801f374:	2204      	movs	r2, #4
 801f376:	4619      	mov	r1, r3
 801f378:	f7fc ffba 	bl	801c2f0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801f37c:	4b5c      	ldr	r3, [pc, #368]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	2200      	movs	r2, #0
 801f382:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801f384:	68fb      	ldr	r3, [r7, #12]
 801f386:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801f38a:	2b03      	cmp	r3, #3
 801f38c:	dd0c      	ble.n	801f3a8 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801f38e:	4b58      	ldr	r3, [pc, #352]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	891b      	ldrh	r3, [r3, #8]
 801f394:	b2db      	uxtb	r3, r3
 801f396:	2b00      	cmp	r3, #0
 801f398:	d106      	bne.n	801f3a8 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801f39a:	4b56      	ldr	r3, [pc, #344]	@ (801f4f4 <RegionUS915NextChannel+0x1d4>)
 801f39c:	681a      	ldr	r2, [r3, #0]
 801f39e:	4b54      	ldr	r3, [pc, #336]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 801f3a6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	7a5b      	ldrb	r3, [r3, #9]
 801f3ac:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801f3b4:	b2db      	uxtb	r3, r3
 801f3b6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801f3b8:	4b4d      	ldr	r3, [pc, #308]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801f3be:	4b4d      	ldr	r3, [pc, #308]	@ (801f4f4 <RegionUS915NextChannel+0x1d4>)
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801f3c4:	4b4c      	ldr	r3, [pc, #304]	@ (801f4f8 <RegionUS915NextChannel+0x1d8>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801f3ca:	2348      	movs	r3, #72	@ 0x48
 801f3cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 801f3ce:	2300      	movs	r3, #0
 801f3d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	685b      	ldr	r3, [r3, #4]
 801f3dc:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	7a9b      	ldrb	r3, [r3, #10]
 801f3e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801f3e6:	2301      	movs	r3, #1
 801f3e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801f3ec:	f107 0314 	add.w	r3, r7, #20
 801f3f0:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801f3f2:	68fa      	ldr	r2, [r7, #12]
 801f3f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801f3f8:	320c      	adds	r2, #12
 801f3fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f3fe:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801f402:	68fb      	ldr	r3, [r7, #12]
 801f404:	7d1b      	ldrb	r3, [r3, #20]
 801f406:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801f410:	68fb      	ldr	r3, [r7, #12]
 801f412:	8adb      	ldrh	r3, [r3, #22]
 801f414:	4619      	mov	r1, r3
 801f416:	4610      	mov	r0, r2
 801f418:	f7fe ff12 	bl	801e240 <GetTimeOnAir>
 801f41c:	4603      	mov	r3, r0
 801f41e:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801f420:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 801f424:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801f428:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	9301      	str	r3, [sp, #4]
 801f430:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801f434:	9300      	str	r3, [sp, #0]
 801f436:	460b      	mov	r3, r1
 801f438:	6839      	ldr	r1, [r7, #0]
 801f43a:	f7fd fba3 	bl	801cb84 <RegionCommonIdentifyChannels>
 801f43e:	4603      	mov	r3, r0
 801f440:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801f444:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d14a      	bne.n	801f4e2 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801f44c:	68fb      	ldr	r3, [r7, #12]
 801f44e:	7a5b      	ldrb	r3, [r3, #9]
 801f450:	2b00      	cmp	r3, #0
 801f452:	d00e      	beq.n	801f472 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801f454:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 801f458:	3b01      	subs	r3, #1
 801f45a:	4619      	mov	r1, r3
 801f45c:	2000      	movs	r0, #0
 801f45e:	f000 f8c3 	bl	801f5e8 <randr>
 801f462:	4603      	mov	r3, r0
 801f464:	3398      	adds	r3, #152	@ 0x98
 801f466:	443b      	add	r3, r7
 801f468:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801f46c:	68bb      	ldr	r3, [r7, #8]
 801f46e:	701a      	strb	r2, [r3, #0]
 801f470:	e02e      	b.n	801f4d0 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d10e      	bne.n	801f49a <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801f47c:	4b1c      	ldr	r3, [pc, #112]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801f482:	4b1b      	ldr	r3, [pc, #108]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f484:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801f486:	330c      	adds	r3, #12
 801f488:	68ba      	ldr	r2, [r7, #8]
 801f48a:	4619      	mov	r1, r3
 801f48c:	f7fc fc6e 	bl	801bd6c <RegionBaseUSComputeNext125kHzJoinChannel>
 801f490:	4603      	mov	r3, r0
 801f492:	2b03      	cmp	r3, #3
 801f494:	d11c      	bne.n	801f4d0 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801f496:	2303      	movs	r3, #3
 801f498:	e025      	b.n	801f4e6 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801f49a:	2300      	movs	r3, #0
 801f49c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801f4a0:	e004      	b.n	801f4ac <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801f4a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801f4a6:	3301      	adds	r3, #1
 801f4a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801f4ac:	4b10      	ldr	r3, [pc, #64]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	891b      	ldrh	r3, [r3, #8]
 801f4b2:	b2da      	uxtb	r2, r3
 801f4b4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801f4b8:	fa42 f303 	asr.w	r3, r2, r3
 801f4bc:	f003 0301 	and.w	r3, r3, #1
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d0ee      	beq.n	801f4a2 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801f4c4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801f4c8:	3340      	adds	r3, #64	@ 0x40
 801f4ca:	b2da      	uxtb	r2, r3
 801f4cc:	68bb      	ldr	r3, [r7, #8]
 801f4ce:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801f4d0:	4b07      	ldr	r3, [pc, #28]	@ (801f4f0 <RegionUS915NextChannel+0x1d0>)
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	68bb      	ldr	r3, [r7, #8]
 801f4d8:	781b      	ldrb	r3, [r3, #0]
 801f4da:	2248      	movs	r2, #72	@ 0x48
 801f4dc:	4619      	mov	r1, r3
 801f4de:	f7fc fea7 	bl	801c230 <RegionCommonChanDisable>
    }
    return status;
 801f4e2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	3798      	adds	r7, #152	@ 0x98
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	bd80      	pop	{r7, pc}
 801f4ee:	bf00      	nop
 801f4f0:	2000201c 	.word	0x2000201c
 801f4f4:	20002020 	.word	0x20002020
 801f4f8:	20002024 	.word	0x20002024

0801f4fc <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801f4fc:	b480      	push	{r7}
 801f4fe:	b085      	sub	sp, #20
 801f500:	af00      	add	r7, sp, #0
 801f502:	4603      	mov	r3, r0
 801f504:	71fb      	strb	r3, [r7, #7]
 801f506:	460b      	mov	r3, r1
 801f508:	71bb      	strb	r3, [r7, #6]
 801f50a:	4613      	mov	r3, r2
 801f50c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801f50e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801f512:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801f516:	4909      	ldr	r1, [pc, #36]	@ (801f53c <RegionUS915ApplyDrOffset+0x40>)
 801f518:	0092      	lsls	r2, r2, #2
 801f51a:	440a      	add	r2, r1
 801f51c:	4413      	add	r3, r2
 801f51e:	781b      	ldrb	r3, [r3, #0]
 801f520:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801f522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f526:	2b00      	cmp	r3, #0
 801f528:	da01      	bge.n	801f52e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801f52a:	2300      	movs	r3, #0
 801f52c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801f52e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801f530:	4618      	mov	r0, r3
 801f532:	3714      	adds	r7, #20
 801f534:	46bd      	mov	sp, r7
 801f536:	bc80      	pop	{r7}
 801f538:	4770      	bx	lr
 801f53a:	bf00      	nop
 801f53c:	080297e4 	.word	0x080297e4

0801f540 <RegionUS915RxBeaconSetup>:

void RegionUS915RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801f540:	b580      	push	{r7, lr}
 801f542:	b088      	sub	sp, #32
 801f544:	af00      	add	r7, sp, #0
 801f546:	6078      	str	r0, [r7, #4]
 801f548:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesUS915;
 801f54a:	4b0e      	ldr	r3, [pc, #56]	@ (801f584 <RegionUS915RxBeaconSetup+0x44>)
 801f54c:	60fb      	str	r3, [r7, #12]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	689b      	ldr	r3, [r3, #8]
 801f552:	613b      	str	r3, [r7, #16]
    regionCommonRxBeaconSetup.BeaconSize = US915_BEACON_SIZE;
 801f554:	2317      	movs	r3, #23
 801f556:	753b      	strb	r3, [r7, #20]
    regionCommonRxBeaconSetup.BeaconDatarate = US915_BEACON_CHANNEL_DR;
 801f558:	2308      	movs	r3, #8
 801f55a:	757b      	strb	r3, [r7, #21]
    regionCommonRxBeaconSetup.BeaconChannelBW = US915_BEACON_CHANNEL_BW;
 801f55c:	2302      	movs	r3, #2
 801f55e:	75bb      	strb	r3, [r7, #22]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	685b      	ldr	r3, [r3, #4]
 801f564:	61bb      	str	r3, [r7, #24]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	881b      	ldrh	r3, [r3, #0]
 801f56a:	83bb      	strh	r3, [r7, #28]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 801f56c:	f107 030c 	add.w	r3, r7, #12
 801f570:	4618      	mov	r0, r3
 801f572:	f7fd f9eb 	bl	801c94c <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = US915_BEACON_CHANNEL_DR;
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	2208      	movs	r2, #8
 801f57a:	701a      	strb	r2, [r3, #0]
#endif /* REGION_US915 */
}
 801f57c:	bf00      	nop
 801f57e:	3720      	adds	r7, #32
 801f580:	46bd      	mov	sp, r7
 801f582:	bd80      	pop	{r7, pc}
 801f584:	08029794 	.word	0x08029794

0801f588 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801f588:	b480      	push	{r7}
 801f58a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801f58c:	4b0d      	ldr	r3, [pc, #52]	@ (801f5c4 <rand1+0x3c>)
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	4a0d      	ldr	r2, [pc, #52]	@ (801f5c8 <rand1+0x40>)
 801f592:	fb02 f303 	mul.w	r3, r2, r3
 801f596:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801f59a:	3339      	adds	r3, #57	@ 0x39
 801f59c:	4a09      	ldr	r2, [pc, #36]	@ (801f5c4 <rand1+0x3c>)
 801f59e:	6013      	str	r3, [r2, #0]
 801f5a0:	4b08      	ldr	r3, [pc, #32]	@ (801f5c4 <rand1+0x3c>)
 801f5a2:	681a      	ldr	r2, [r3, #0]
 801f5a4:	2303      	movs	r3, #3
 801f5a6:	fba3 1302 	umull	r1, r3, r3, r2
 801f5aa:	1ad1      	subs	r1, r2, r3
 801f5ac:	0849      	lsrs	r1, r1, #1
 801f5ae:	440b      	add	r3, r1
 801f5b0:	0f99      	lsrs	r1, r3, #30
 801f5b2:	460b      	mov	r3, r1
 801f5b4:	07db      	lsls	r3, r3, #31
 801f5b6:	1a5b      	subs	r3, r3, r1
 801f5b8:	1ad1      	subs	r1, r2, r3
 801f5ba:	460b      	mov	r3, r1
}
 801f5bc:	4618      	mov	r0, r3
 801f5be:	46bd      	mov	sp, r7
 801f5c0:	bc80      	pop	{r7}
 801f5c2:	4770      	bx	lr
 801f5c4:	20000140 	.word	0x20000140
 801f5c8:	41c64e6d 	.word	0x41c64e6d

0801f5cc <srand1>:

void srand1( uint32_t seed )
{
 801f5cc:	b480      	push	{r7}
 801f5ce:	b083      	sub	sp, #12
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	6078      	str	r0, [r7, #4]
    next = seed;
 801f5d4:	4a03      	ldr	r2, [pc, #12]	@ (801f5e4 <srand1+0x18>)
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	6013      	str	r3, [r2, #0]
}
 801f5da:	bf00      	nop
 801f5dc:	370c      	adds	r7, #12
 801f5de:	46bd      	mov	sp, r7
 801f5e0:	bc80      	pop	{r7}
 801f5e2:	4770      	bx	lr
 801f5e4:	20000140 	.word	0x20000140

0801f5e8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801f5e8:	b580      	push	{r7, lr}
 801f5ea:	b082      	sub	sp, #8
 801f5ec:	af00      	add	r7, sp, #0
 801f5ee:	6078      	str	r0, [r7, #4]
 801f5f0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801f5f2:	f7ff ffc9 	bl	801f588 <rand1>
 801f5f6:	4602      	mov	r2, r0
 801f5f8:	6839      	ldr	r1, [r7, #0]
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	1acb      	subs	r3, r1, r3
 801f5fe:	3301      	adds	r3, #1
 801f600:	fb92 f1f3 	sdiv	r1, r2, r3
 801f604:	fb01 f303 	mul.w	r3, r1, r3
 801f608:	1ad2      	subs	r2, r2, r3
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	4413      	add	r3, r2
}
 801f60e:	4618      	mov	r0, r3
 801f610:	3708      	adds	r7, #8
 801f612:	46bd      	mov	sp, r7
 801f614:	bd80      	pop	{r7, pc}

0801f616 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801f616:	b480      	push	{r7}
 801f618:	b085      	sub	sp, #20
 801f61a:	af00      	add	r7, sp, #0
 801f61c:	60f8      	str	r0, [r7, #12]
 801f61e:	60b9      	str	r1, [r7, #8]
 801f620:	4613      	mov	r3, r2
 801f622:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801f624:	e007      	b.n	801f636 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801f626:	68ba      	ldr	r2, [r7, #8]
 801f628:	1c53      	adds	r3, r2, #1
 801f62a:	60bb      	str	r3, [r7, #8]
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	1c59      	adds	r1, r3, #1
 801f630:	60f9      	str	r1, [r7, #12]
 801f632:	7812      	ldrb	r2, [r2, #0]
 801f634:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801f636:	88fb      	ldrh	r3, [r7, #6]
 801f638:	1e5a      	subs	r2, r3, #1
 801f63a:	80fa      	strh	r2, [r7, #6]
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d1f2      	bne.n	801f626 <memcpy1+0x10>
    }
}
 801f640:	bf00      	nop
 801f642:	bf00      	nop
 801f644:	3714      	adds	r7, #20
 801f646:	46bd      	mov	sp, r7
 801f648:	bc80      	pop	{r7}
 801f64a:	4770      	bx	lr

0801f64c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801f64c:	b480      	push	{r7}
 801f64e:	b085      	sub	sp, #20
 801f650:	af00      	add	r7, sp, #0
 801f652:	60f8      	str	r0, [r7, #12]
 801f654:	60b9      	str	r1, [r7, #8]
 801f656:	4613      	mov	r3, r2
 801f658:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801f65a:	88fb      	ldrh	r3, [r7, #6]
 801f65c:	3b01      	subs	r3, #1
 801f65e:	68fa      	ldr	r2, [r7, #12]
 801f660:	4413      	add	r3, r2
 801f662:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801f664:	e007      	b.n	801f676 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801f666:	68ba      	ldr	r2, [r7, #8]
 801f668:	1c53      	adds	r3, r2, #1
 801f66a:	60bb      	str	r3, [r7, #8]
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	1e59      	subs	r1, r3, #1
 801f670:	60f9      	str	r1, [r7, #12]
 801f672:	7812      	ldrb	r2, [r2, #0]
 801f674:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801f676:	88fb      	ldrh	r3, [r7, #6]
 801f678:	1e5a      	subs	r2, r3, #1
 801f67a:	80fa      	strh	r2, [r7, #6]
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	d1f2      	bne.n	801f666 <memcpyr+0x1a>
    }
}
 801f680:	bf00      	nop
 801f682:	bf00      	nop
 801f684:	3714      	adds	r7, #20
 801f686:	46bd      	mov	sp, r7
 801f688:	bc80      	pop	{r7}
 801f68a:	4770      	bx	lr

0801f68c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801f68c:	b480      	push	{r7}
 801f68e:	b083      	sub	sp, #12
 801f690:	af00      	add	r7, sp, #0
 801f692:	6078      	str	r0, [r7, #4]
 801f694:	460b      	mov	r3, r1
 801f696:	70fb      	strb	r3, [r7, #3]
 801f698:	4613      	mov	r3, r2
 801f69a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801f69c:	e004      	b.n	801f6a8 <memset1+0x1c>
    {
        *dst++ = value;
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	1c5a      	adds	r2, r3, #1
 801f6a2:	607a      	str	r2, [r7, #4]
 801f6a4:	78fa      	ldrb	r2, [r7, #3]
 801f6a6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801f6a8:	883b      	ldrh	r3, [r7, #0]
 801f6aa:	1e5a      	subs	r2, r3, #1
 801f6ac:	803a      	strh	r2, [r7, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d1f5      	bne.n	801f69e <memset1+0x12>
    }
}
 801f6b2:	bf00      	nop
 801f6b4:	bf00      	nop
 801f6b6:	370c      	adds	r7, #12
 801f6b8:	46bd      	mov	sp, r7
 801f6ba:	bc80      	pop	{r7}
 801f6bc:	4770      	bx	lr
	...

0801f6c0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801f6c0:	b480      	push	{r7}
 801f6c2:	b085      	sub	sp, #20
 801f6c4:	af00      	add	r7, sp, #0
 801f6c6:	6078      	str	r0, [r7, #4]
 801f6c8:	460b      	mov	r3, r1
 801f6ca:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801f6cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f6d0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	d101      	bne.n	801f6dc <Crc32+0x1c>
    {
        return 0;
 801f6d8:	2300      	movs	r3, #0
 801f6da:	e026      	b.n	801f72a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801f6dc:	2300      	movs	r3, #0
 801f6de:	817b      	strh	r3, [r7, #10]
 801f6e0:	e01d      	b.n	801f71e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801f6e2:	897b      	ldrh	r3, [r7, #10]
 801f6e4:	687a      	ldr	r2, [r7, #4]
 801f6e6:	4413      	add	r3, r2
 801f6e8:	781b      	ldrb	r3, [r3, #0]
 801f6ea:	461a      	mov	r2, r3
 801f6ec:	68fb      	ldr	r3, [r7, #12]
 801f6ee:	4053      	eors	r3, r2
 801f6f0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	813b      	strh	r3, [r7, #8]
 801f6f6:	e00c      	b.n	801f712 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	085a      	lsrs	r2, r3, #1
 801f6fc:	68fb      	ldr	r3, [r7, #12]
 801f6fe:	f003 0301 	and.w	r3, r3, #1
 801f702:	425b      	negs	r3, r3
 801f704:	490b      	ldr	r1, [pc, #44]	@ (801f734 <Crc32+0x74>)
 801f706:	400b      	ands	r3, r1
 801f708:	4053      	eors	r3, r2
 801f70a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801f70c:	893b      	ldrh	r3, [r7, #8]
 801f70e:	3301      	adds	r3, #1
 801f710:	813b      	strh	r3, [r7, #8]
 801f712:	893b      	ldrh	r3, [r7, #8]
 801f714:	2b07      	cmp	r3, #7
 801f716:	d9ef      	bls.n	801f6f8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801f718:	897b      	ldrh	r3, [r7, #10]
 801f71a:	3301      	adds	r3, #1
 801f71c:	817b      	strh	r3, [r7, #10]
 801f71e:	897a      	ldrh	r2, [r7, #10]
 801f720:	887b      	ldrh	r3, [r7, #2]
 801f722:	429a      	cmp	r2, r3
 801f724:	d3dd      	bcc.n	801f6e2 <Crc32+0x22>
        }
    }

    return ~crc;
 801f726:	68fb      	ldr	r3, [r7, #12]
 801f728:	43db      	mvns	r3, r3
}
 801f72a:	4618      	mov	r0, r3
 801f72c:	3714      	adds	r7, #20
 801f72e:	46bd      	mov	sp, r7
 801f730:	bc80      	pop	{r7}
 801f732:	4770      	bx	lr
 801f734:	edb88320 	.word	0xedb88320

0801f738 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801f738:	b580      	push	{r7, lr}
 801f73a:	b084      	sub	sp, #16
 801f73c:	af02      	add	r7, sp, #8
 801f73e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801f740:	4a24      	ldr	r2, [pc, #144]	@ (801f7d4 <RadioInit+0x9c>)
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801f746:	4b24      	ldr	r3, [pc, #144]	@ (801f7d8 <RadioInit+0xa0>)
 801f748:	2200      	movs	r2, #0
 801f74a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801f74c:	4b22      	ldr	r3, [pc, #136]	@ (801f7d8 <RadioInit+0xa0>)
 801f74e:	2200      	movs	r2, #0
 801f750:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801f752:	4b21      	ldr	r3, [pc, #132]	@ (801f7d8 <RadioInit+0xa0>)
 801f754:	2200      	movs	r2, #0
 801f756:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801f758:	4b1f      	ldr	r3, [pc, #124]	@ (801f7d8 <RadioInit+0xa0>)
 801f75a:	2200      	movs	r2, #0
 801f75c:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801f75e:	481f      	ldr	r0, [pc, #124]	@ (801f7dc <RadioInit+0xa4>)
 801f760:	f001 ffc0 	bl	80216e4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801f764:	4b1c      	ldr	r3, [pc, #112]	@ (801f7d8 <RadioInit+0xa0>)
 801f766:	2200      	movs	r2, #0
 801f768:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801f76a:	4b1b      	ldr	r3, [pc, #108]	@ (801f7d8 <RadioInit+0xa0>)
 801f76c:	2200      	movs	r2, #0
 801f76e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801f770:	f002 fa54 	bl	8021c1c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801f774:	2100      	movs	r1, #0
 801f776:	2000      	movs	r0, #0
 801f778:	f002 fe20 	bl	80223bc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801f77c:	2204      	movs	r2, #4
 801f77e:	2100      	movs	r1, #0
 801f780:	2001      	movs	r0, #1
 801f782:	f002 fbdd 	bl	8021f40 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801f786:	2300      	movs	r3, #0
 801f788:	2200      	movs	r2, #0
 801f78a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801f78e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f792:	f002 fb0d 	bl	8021db0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801f796:	f000 fe99 	bl	80204cc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801f79a:	2300      	movs	r3, #0
 801f79c:	9300      	str	r3, [sp, #0]
 801f79e:	4b10      	ldr	r3, [pc, #64]	@ (801f7e0 <RadioInit+0xa8>)
 801f7a0:	2200      	movs	r2, #0
 801f7a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f7a6:	480f      	ldr	r0, [pc, #60]	@ (801f7e4 <RadioInit+0xac>)
 801f7a8:	f004 fe3c 	bl	8024424 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801f7ac:	2300      	movs	r3, #0
 801f7ae:	9300      	str	r3, [sp, #0]
 801f7b0:	4b0d      	ldr	r3, [pc, #52]	@ (801f7e8 <RadioInit+0xb0>)
 801f7b2:	2200      	movs	r2, #0
 801f7b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f7b8:	480c      	ldr	r0, [pc, #48]	@ (801f7ec <RadioInit+0xb4>)
 801f7ba:	f004 fe33 	bl	8024424 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801f7be:	4809      	ldr	r0, [pc, #36]	@ (801f7e4 <RadioInit+0xac>)
 801f7c0:	f004 fed4 	bl	802456c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801f7c4:	4809      	ldr	r0, [pc, #36]	@ (801f7ec <RadioInit+0xb4>)
 801f7c6:	f004 fed1 	bl	802456c <UTIL_TIMER_Stop>
}
 801f7ca:	bf00      	nop
 801f7cc:	3708      	adds	r7, #8
 801f7ce:	46bd      	mov	sp, r7
 801f7d0:	bd80      	pop	{r7, pc}
 801f7d2:	bf00      	nop
 801f7d4:	20002128 	.word	0x20002128
 801f7d8:	2000212c 	.word	0x2000212c
 801f7dc:	080208c1 	.word	0x080208c1
 801f7e0:	08020849 	.word	0x08020849
 801f7e4:	20002188 	.word	0x20002188
 801f7e8:	0802085d 	.word	0x0802085d
 801f7ec:	200021a0 	.word	0x200021a0

0801f7f0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801f7f0:	b580      	push	{r7, lr}
 801f7f2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801f7f4:	f001 ffbe 	bl	8021774 <SUBGRF_GetOperatingMode>
 801f7f8:	4603      	mov	r3, r0
 801f7fa:	2b07      	cmp	r3, #7
 801f7fc:	d00a      	beq.n	801f814 <RadioGetStatus+0x24>
 801f7fe:	2b07      	cmp	r3, #7
 801f800:	dc0a      	bgt.n	801f818 <RadioGetStatus+0x28>
 801f802:	2b04      	cmp	r3, #4
 801f804:	d002      	beq.n	801f80c <RadioGetStatus+0x1c>
 801f806:	2b05      	cmp	r3, #5
 801f808:	d002      	beq.n	801f810 <RadioGetStatus+0x20>
 801f80a:	e005      	b.n	801f818 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801f80c:	2302      	movs	r3, #2
 801f80e:	e004      	b.n	801f81a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801f810:	2301      	movs	r3, #1
 801f812:	e002      	b.n	801f81a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801f814:	2303      	movs	r3, #3
 801f816:	e000      	b.n	801f81a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801f818:	2300      	movs	r3, #0
    }
}
 801f81a:	4618      	mov	r0, r3
 801f81c:	bd80      	pop	{r7, pc}
	...

0801f820 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801f820:	b580      	push	{r7, lr}
 801f822:	b082      	sub	sp, #8
 801f824:	af00      	add	r7, sp, #0
 801f826:	4603      	mov	r3, r0
 801f828:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801f82a:	4a2a      	ldr	r2, [pc, #168]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f82c:	79fb      	ldrb	r3, [r7, #7]
 801f82e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801f830:	79fb      	ldrb	r3, [r7, #7]
 801f832:	4618      	mov	r0, r3
 801f834:	f003 f995 	bl	8022b62 <RFW_SetRadioModem>
    switch( modem )
 801f838:	79fb      	ldrb	r3, [r7, #7]
 801f83a:	2b05      	cmp	r3, #5
 801f83c:	d80e      	bhi.n	801f85c <RadioSetModem+0x3c>
 801f83e:	a201      	add	r2, pc, #4	@ (adr r2, 801f844 <RadioSetModem+0x24>)
 801f840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f844:	0801f86b 	.word	0x0801f86b
 801f848:	0801f879 	.word	0x0801f879
 801f84c:	0801f85d 	.word	0x0801f85d
 801f850:	0801f89f 	.word	0x0801f89f
 801f854:	0801f8ad 	.word	0x0801f8ad
 801f858:	0801f8bb 	.word	0x0801f8bb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801f85c:	2003      	movs	r0, #3
 801f85e:	f002 fb49 	bl	8021ef4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801f862:	4b1c      	ldr	r3, [pc, #112]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f864:	2200      	movs	r2, #0
 801f866:	735a      	strb	r2, [r3, #13]
        break;
 801f868:	e02f      	b.n	801f8ca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801f86a:	2000      	movs	r0, #0
 801f86c:	f002 fb42 	bl	8021ef4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801f870:	4b18      	ldr	r3, [pc, #96]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f872:	2200      	movs	r2, #0
 801f874:	735a      	strb	r2, [r3, #13]
        break;
 801f876:	e028      	b.n	801f8ca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801f878:	2001      	movs	r0, #1
 801f87a:	f002 fb3b 	bl	8021ef4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801f87e:	4b15      	ldr	r3, [pc, #84]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f880:	7b5a      	ldrb	r2, [r3, #13]
 801f882:	4b14      	ldr	r3, [pc, #80]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f884:	7b1b      	ldrb	r3, [r3, #12]
 801f886:	429a      	cmp	r2, r3
 801f888:	d01e      	beq.n	801f8c8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801f88a:	4b12      	ldr	r3, [pc, #72]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f88c:	7b1a      	ldrb	r2, [r3, #12]
 801f88e:	4b11      	ldr	r3, [pc, #68]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f890:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801f892:	4b10      	ldr	r3, [pc, #64]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f894:	7b5b      	ldrb	r3, [r3, #13]
 801f896:	4618      	mov	r0, r3
 801f898:	f000 ffa0 	bl	80207dc <RadioSetPublicNetwork>
        }
        break;
 801f89c:	e014      	b.n	801f8c8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801f89e:	2002      	movs	r0, #2
 801f8a0:	f002 fb28 	bl	8021ef4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801f8a4:	4b0b      	ldr	r3, [pc, #44]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f8a6:	2200      	movs	r2, #0
 801f8a8:	735a      	strb	r2, [r3, #13]
        break;
 801f8aa:	e00e      	b.n	801f8ca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801f8ac:	2002      	movs	r0, #2
 801f8ae:	f002 fb21 	bl	8021ef4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801f8b2:	4b08      	ldr	r3, [pc, #32]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f8b4:	2200      	movs	r2, #0
 801f8b6:	735a      	strb	r2, [r3, #13]
        break;
 801f8b8:	e007      	b.n	801f8ca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	f002 fb1a 	bl	8021ef4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801f8c0:	4b04      	ldr	r3, [pc, #16]	@ (801f8d4 <RadioSetModem+0xb4>)
 801f8c2:	2200      	movs	r2, #0
 801f8c4:	735a      	strb	r2, [r3, #13]
        break;
 801f8c6:	e000      	b.n	801f8ca <RadioSetModem+0xaa>
        break;
 801f8c8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801f8ca:	bf00      	nop
 801f8cc:	3708      	adds	r7, #8
 801f8ce:	46bd      	mov	sp, r7
 801f8d0:	bd80      	pop	{r7, pc}
 801f8d2:	bf00      	nop
 801f8d4:	2000212c 	.word	0x2000212c

0801f8d8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	b082      	sub	sp, #8
 801f8dc:	af00      	add	r7, sp, #0
 801f8de:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801f8e0:	6878      	ldr	r0, [r7, #4]
 801f8e2:	f002 fac1 	bl	8021e68 <SUBGRF_SetRfFrequency>
}
 801f8e6:	bf00      	nop
 801f8e8:	3708      	adds	r7, #8
 801f8ea:	46bd      	mov	sp, r7
 801f8ec:	bd80      	pop	{r7, pc}

0801f8ee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801f8ee:	b580      	push	{r7, lr}
 801f8f0:	b090      	sub	sp, #64	@ 0x40
 801f8f2:	af0a      	add	r7, sp, #40	@ 0x28
 801f8f4:	60f8      	str	r0, [r7, #12]
 801f8f6:	60b9      	str	r1, [r7, #8]
 801f8f8:	603b      	str	r3, [r7, #0]
 801f8fa:	4613      	mov	r3, r2
 801f8fc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801f8fe:	2301      	movs	r3, #1
 801f900:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801f902:	2300      	movs	r3, #0
 801f904:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801f906:	2300      	movs	r3, #0
 801f908:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801f90a:	f000 fdf2 	bl	80204f2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801f90e:	2000      	movs	r0, #0
 801f910:	f7ff ff86 	bl	801f820 <RadioSetModem>

    RadioSetChannel( freq );
 801f914:	68f8      	ldr	r0, [r7, #12]
 801f916:	f7ff ffdf 	bl	801f8d8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801f91a:	2301      	movs	r3, #1
 801f91c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f91e:	2300      	movs	r3, #0
 801f920:	9308      	str	r3, [sp, #32]
 801f922:	2300      	movs	r3, #0
 801f924:	9307      	str	r3, [sp, #28]
 801f926:	2300      	movs	r3, #0
 801f928:	9306      	str	r3, [sp, #24]
 801f92a:	2300      	movs	r3, #0
 801f92c:	9305      	str	r3, [sp, #20]
 801f92e:	2300      	movs	r3, #0
 801f930:	9304      	str	r3, [sp, #16]
 801f932:	2300      	movs	r3, #0
 801f934:	9303      	str	r3, [sp, #12]
 801f936:	2300      	movs	r3, #0
 801f938:	9302      	str	r3, [sp, #8]
 801f93a:	2303      	movs	r3, #3
 801f93c:	9301      	str	r3, [sp, #4]
 801f93e:	68bb      	ldr	r3, [r7, #8]
 801f940:	9300      	str	r3, [sp, #0]
 801f942:	2300      	movs	r3, #0
 801f944:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801f948:	68b9      	ldr	r1, [r7, #8]
 801f94a:	2000      	movs	r0, #0
 801f94c:	f000 f83c 	bl	801f9c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801f950:	2000      	movs	r0, #0
 801f952:	f000 fdd5 	bl	8020500 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801f956:	f000 ff6f 	bl	8020838 <RadioGetWakeupTime>
 801f95a:	4603      	mov	r3, r0
 801f95c:	4618      	mov	r0, r3
 801f95e:	f7e2 fcc7 	bl	80022f0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801f962:	f004 ff1d 	bl	80247a0 <UTIL_TIMER_GetCurrentTime>
 801f966:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801f968:	e00d      	b.n	801f986 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801f96a:	2000      	movs	r0, #0
 801f96c:	f000 feb6 	bl	80206dc <RadioRssi>
 801f970:	4603      	mov	r3, r0
 801f972:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801f974:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f97c:	429a      	cmp	r2, r3
 801f97e:	dd02      	ble.n	801f986 <RadioIsChannelFree+0x98>
        {
            status = false;
 801f980:	2300      	movs	r3, #0
 801f982:	75fb      	strb	r3, [r7, #23]
            break;
 801f984:	e006      	b.n	801f994 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801f986:	6938      	ldr	r0, [r7, #16]
 801f988:	f004 ff1c 	bl	80247c4 <UTIL_TIMER_GetElapsedTime>
 801f98c:	4602      	mov	r2, r0
 801f98e:	683b      	ldr	r3, [r7, #0]
 801f990:	4293      	cmp	r3, r2
 801f992:	d8ea      	bhi.n	801f96a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801f994:	f000 fdad 	bl	80204f2 <RadioStandby>

    return status;
 801f998:	7dfb      	ldrb	r3, [r7, #23]
}
 801f99a:	4618      	mov	r0, r3
 801f99c:	3718      	adds	r7, #24
 801f99e:	46bd      	mov	sp, r7
 801f9a0:	bd80      	pop	{r7, pc}

0801f9a2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801f9a2:	b580      	push	{r7, lr}
 801f9a4:	b082      	sub	sp, #8
 801f9a6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801f9a8:	2300      	movs	r3, #0
 801f9aa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801f9ac:	2300      	movs	r3, #0
 801f9ae:	2200      	movs	r2, #0
 801f9b0:	2100      	movs	r1, #0
 801f9b2:	2000      	movs	r0, #0
 801f9b4:	f002 f9fc 	bl	8021db0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801f9b8:	f001 ffad 	bl	8021916 <SUBGRF_GetRandom>
 801f9bc:	6078      	str	r0, [r7, #4]

    return rnd;
 801f9be:	687b      	ldr	r3, [r7, #4]
}
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	3708      	adds	r7, #8
 801f9c4:	46bd      	mov	sp, r7
 801f9c6:	bd80      	pop	{r7, pc}

0801f9c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801f9c8:	b580      	push	{r7, lr}
 801f9ca:	b08a      	sub	sp, #40	@ 0x28
 801f9cc:	af00      	add	r7, sp, #0
 801f9ce:	60b9      	str	r1, [r7, #8]
 801f9d0:	607a      	str	r2, [r7, #4]
 801f9d2:	461a      	mov	r2, r3
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	73fb      	strb	r3, [r7, #15]
 801f9d8:	4613      	mov	r3, r2
 801f9da:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801f9dc:	4ab9      	ldr	r2, [pc, #740]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801f9de:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801f9e2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801f9e4:	f003 f87b 	bl	8022ade <RFW_DeInit>
    if( rxContinuous == true )
 801f9e8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d001      	beq.n	801f9f4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801f9f0:	2300      	movs	r3, #0
 801f9f2:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 801f9f4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d004      	beq.n	801fa06 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801f9fc:	4ab2      	ldr	r2, [pc, #712]	@ (801fcc8 <RadioSetRxConfig+0x300>)
 801f9fe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801fa02:	7013      	strb	r3, [r2, #0]
 801fa04:	e002      	b.n	801fa0c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801fa06:	4bb0      	ldr	r3, [pc, #704]	@ (801fcc8 <RadioSetRxConfig+0x300>)
 801fa08:	22ff      	movs	r2, #255	@ 0xff
 801fa0a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801fa0c:	7bfb      	ldrb	r3, [r7, #15]
 801fa0e:	2b05      	cmp	r3, #5
 801fa10:	d009      	beq.n	801fa26 <RadioSetRxConfig+0x5e>
 801fa12:	2b05      	cmp	r3, #5
 801fa14:	f300 81d7 	bgt.w	801fdc6 <RadioSetRxConfig+0x3fe>
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	f000 80bf 	beq.w	801fb9c <RadioSetRxConfig+0x1d4>
 801fa1e:	2b01      	cmp	r3, #1
 801fa20:	f000 8124 	beq.w	801fc6c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801fa24:	e1cf      	b.n	801fdc6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801fa26:	2001      	movs	r0, #1
 801fa28:	f002 f8ba 	bl	8021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801fa2c:	4ba5      	ldr	r3, [pc, #660]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa2e:	2200      	movs	r2, #0
 801fa30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801fa34:	4aa3      	ldr	r2, [pc, #652]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801fa3a:	4ba2      	ldr	r3, [pc, #648]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa3c:	2209      	movs	r2, #9
 801fa3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801fa42:	4ba0      	ldr	r3, [pc, #640]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801fa48:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801fa4a:	68b8      	ldr	r0, [r7, #8]
 801fa4c:	f002 ff7a 	bl	8022944 <SUBGRF_GetFskBandwidthRegValue>
 801fa50:	4603      	mov	r3, r0
 801fa52:	461a      	mov	r2, r3
 801fa54:	4b9b      	ldr	r3, [pc, #620]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801fa5a:	4b9a      	ldr	r3, [pc, #616]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa5c:	2200      	movs	r2, #0
 801fa5e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801fa60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801fa62:	00db      	lsls	r3, r3, #3
 801fa64:	b29a      	uxth	r2, r3
 801fa66:	4b97      	ldr	r3, [pc, #604]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa68:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801fa6a:	4b96      	ldr	r3, [pc, #600]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa6c:	2200      	movs	r2, #0
 801fa6e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801fa70:	4b94      	ldr	r3, [pc, #592]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa72:	2210      	movs	r2, #16
 801fa74:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801fa76:	4b93      	ldr	r3, [pc, #588]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa78:	2200      	movs	r2, #0
 801fa7a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801fa7c:	4b91      	ldr	r3, [pc, #580]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa7e:	2200      	movs	r2, #0
 801fa80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801fa82:	4b91      	ldr	r3, [pc, #580]	@ (801fcc8 <RadioSetRxConfig+0x300>)
 801fa84:	781a      	ldrb	r2, [r3, #0]
 801fa86:	4b8f      	ldr	r3, [pc, #572]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa88:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801fa8a:	4b8e      	ldr	r3, [pc, #568]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa8c:	2201      	movs	r2, #1
 801fa8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801fa90:	4b8c      	ldr	r3, [pc, #560]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fa92:	2200      	movs	r2, #0
 801fa94:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801fa96:	2005      	movs	r0, #5
 801fa98:	f7ff fec2 	bl	801f820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801fa9c:	488b      	ldr	r0, [pc, #556]	@ (801fccc <RadioSetRxConfig+0x304>)
 801fa9e:	f002 fb1d 	bl	80220dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801faa2:	488b      	ldr	r0, [pc, #556]	@ (801fcd0 <RadioSetRxConfig+0x308>)
 801faa4:	f002 fbec 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801faa8:	4a8a      	ldr	r2, [pc, #552]	@ (801fcd4 <RadioSetRxConfig+0x30c>)
 801faaa:	f107 031c 	add.w	r3, r7, #28
 801faae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fab2:	e883 0003 	stmia.w	r3, {r0, r1}
 801fab6:	f107 031c 	add.w	r3, r7, #28
 801faba:	4618      	mov	r0, r3
 801fabc:	f001 fea9 	bl	8021812 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801fac0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801fac4:	f001 fef4 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801fac8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801facc:	f000 fe24 	bl	8020718 <RadioRead>
 801fad0:	4603      	mov	r3, r0
 801fad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 801fad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fada:	f023 0310 	bic.w	r3, r3, #16
 801fade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801fae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fae6:	4619      	mov	r1, r3
 801fae8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801faec:	f000 fe02 	bl	80206f4 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801faf0:	2104      	movs	r1, #4
 801faf2:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 801faf6:	f000 fdfd 	bl	80206f4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801fafa:	f640 009b 	movw	r0, #2203	@ 0x89b
 801fafe:	f000 fe0b 	bl	8020718 <RadioRead>
 801fb02:	4603      	mov	r3, r0
 801fb04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801fb08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb0c:	f023 031c 	bic.w	r3, r3, #28
 801fb10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801fb14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb18:	f043 0308 	orr.w	r3, r3, #8
 801fb1c:	b2db      	uxtb	r3, r3
 801fb1e:	4619      	mov	r1, r3
 801fb20:	f640 009b 	movw	r0, #2203	@ 0x89b
 801fb24:	f000 fde6 	bl	80206f4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801fb28:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801fb2c:	f000 fdf4 	bl	8020718 <RadioRead>
 801fb30:	4603      	mov	r3, r0
 801fb32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801fb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb3a:	f023 0318 	bic.w	r3, r3, #24
 801fb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801fb42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb46:	f043 0318 	orr.w	r3, r3, #24
 801fb4a:	b2db      	uxtb	r3, r3
 801fb4c:	4619      	mov	r1, r3
 801fb4e:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801fb52:	f000 fdcf 	bl	80206f4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801fb56:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801fb5a:	f000 fddd 	bl	8020718 <RadioRead>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801fb64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fb6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801fb70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fb74:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 801fb78:	b2db      	uxtb	r3, r3
 801fb7a:	4619      	mov	r1, r3
 801fb7c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801fb80:	f000 fdb8 	bl	80206f4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801fb84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801fb86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801fb8a:	fb02 f303 	mul.w	r3, r2, r3
 801fb8e:	461a      	mov	r2, r3
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	fbb2 f3f3 	udiv	r3, r2, r3
 801fb96:	4a4b      	ldr	r2, [pc, #300]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fb98:	6093      	str	r3, [r2, #8]
            break;
 801fb9a:	e115      	b.n	801fdc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801fb9c:	2000      	movs	r0, #0
 801fb9e:	f001 ffff 	bl	8021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801fba2:	4b48      	ldr	r3, [pc, #288]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fba4:	2200      	movs	r2, #0
 801fba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801fbaa:	4a46      	ldr	r2, [pc, #280]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801fbb0:	4b44      	ldr	r3, [pc, #272]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbb2:	220b      	movs	r2, #11
 801fbb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801fbb8:	68b8      	ldr	r0, [r7, #8]
 801fbba:	f002 fec3 	bl	8022944 <SUBGRF_GetFskBandwidthRegValue>
 801fbbe:	4603      	mov	r3, r0
 801fbc0:	461a      	mov	r2, r3
 801fbc2:	4b40      	ldr	r3, [pc, #256]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801fbc8:	4b3e      	ldr	r3, [pc, #248]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbca:	2200      	movs	r2, #0
 801fbcc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801fbce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801fbd0:	00db      	lsls	r3, r3, #3
 801fbd2:	b29a      	uxth	r2, r3
 801fbd4:	4b3b      	ldr	r3, [pc, #236]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbd6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801fbd8:	4b3a      	ldr	r3, [pc, #232]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbda:	2204      	movs	r2, #4
 801fbdc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801fbde:	4b39      	ldr	r3, [pc, #228]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbe0:	2218      	movs	r2, #24
 801fbe2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801fbe4:	4b37      	ldr	r3, [pc, #220]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbe6:	2200      	movs	r2, #0
 801fbe8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801fbea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801fbee:	f083 0301 	eor.w	r3, r3, #1
 801fbf2:	b2db      	uxtb	r3, r3
 801fbf4:	461a      	mov	r2, r3
 801fbf6:	4b33      	ldr	r3, [pc, #204]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fbf8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801fbfa:	4b33      	ldr	r3, [pc, #204]	@ (801fcc8 <RadioSetRxConfig+0x300>)
 801fbfc:	781a      	ldrb	r2, [r3, #0]
 801fbfe:	4b31      	ldr	r3, [pc, #196]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc00:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801fc02:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d003      	beq.n	801fc12 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801fc0a:	4b2e      	ldr	r3, [pc, #184]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc0c:	22f2      	movs	r2, #242	@ 0xf2
 801fc0e:	75da      	strb	r2, [r3, #23]
 801fc10:	e002      	b.n	801fc18 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801fc12:	4b2c      	ldr	r3, [pc, #176]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc14:	2201      	movs	r2, #1
 801fc16:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801fc18:	4b2a      	ldr	r3, [pc, #168]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc1a:	2201      	movs	r2, #1
 801fc1c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801fc1e:	f000 fc68 	bl	80204f2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801fc22:	2000      	movs	r0, #0
 801fc24:	f7ff fdfc 	bl	801f820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801fc28:	4828      	ldr	r0, [pc, #160]	@ (801fccc <RadioSetRxConfig+0x304>)
 801fc2a:	f002 fa57 	bl	80220dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801fc2e:	4828      	ldr	r0, [pc, #160]	@ (801fcd0 <RadioSetRxConfig+0x308>)
 801fc30:	f002 fb26 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801fc34:	4a28      	ldr	r2, [pc, #160]	@ (801fcd8 <RadioSetRxConfig+0x310>)
 801fc36:	f107 0314 	add.w	r3, r7, #20
 801fc3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fc3e:	e883 0003 	stmia.w	r3, {r0, r1}
 801fc42:	f107 0314 	add.w	r3, r7, #20
 801fc46:	4618      	mov	r0, r3
 801fc48:	f001 fde3 	bl	8021812 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801fc4c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801fc50:	f001 fe2e 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801fc54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801fc56:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801fc5a:	fb02 f303 	mul.w	r3, r2, r3
 801fc5e:	461a      	mov	r2, r3
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc66:	4a17      	ldr	r2, [pc, #92]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc68:	6093      	str	r3, [r2, #8]
            break;
 801fc6a:	e0ad      	b.n	801fdc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801fc6c:	2000      	movs	r0, #0
 801fc6e:	f001 ff97 	bl	8021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801fc72:	4b14      	ldr	r3, [pc, #80]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc74:	2201      	movs	r2, #1
 801fc76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	b2da      	uxtb	r2, r3
 801fc7e:	4b11      	ldr	r3, [pc, #68]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801fc84:	4a15      	ldr	r2, [pc, #84]	@ (801fcdc <RadioSetRxConfig+0x314>)
 801fc86:	68bb      	ldr	r3, [r7, #8]
 801fc88:	4413      	add	r3, r2
 801fc8a:	781a      	ldrb	r2, [r3, #0]
 801fc8c:	4b0d      	ldr	r3, [pc, #52]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801fc92:	4a0c      	ldr	r2, [pc, #48]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fc94:	7bbb      	ldrb	r3, [r7, #14]
 801fc96:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801fc9a:	68bb      	ldr	r3, [r7, #8]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d105      	bne.n	801fcac <RadioSetRxConfig+0x2e4>
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	2b0b      	cmp	r3, #11
 801fca4:	d008      	beq.n	801fcb8 <RadioSetRxConfig+0x2f0>
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	2b0c      	cmp	r3, #12
 801fcaa:	d005      	beq.n	801fcb8 <RadioSetRxConfig+0x2f0>
 801fcac:	68bb      	ldr	r3, [r7, #8]
 801fcae:	2b01      	cmp	r3, #1
 801fcb0:	d116      	bne.n	801fce0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	2b0c      	cmp	r3, #12
 801fcb6:	d113      	bne.n	801fce0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801fcb8:	4b02      	ldr	r3, [pc, #8]	@ (801fcc4 <RadioSetRxConfig+0x2fc>)
 801fcba:	2201      	movs	r2, #1
 801fcbc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801fcc0:	e012      	b.n	801fce8 <RadioSetRxConfig+0x320>
 801fcc2:	bf00      	nop
 801fcc4:	2000212c 	.word	0x2000212c
 801fcc8:	20000144 	.word	0x20000144
 801fccc:	20002164 	.word	0x20002164
 801fcd0:	2000213a 	.word	0x2000213a
 801fcd4:	08028c74 	.word	0x08028c74
 801fcd8:	08028c7c 	.word	0x08028c7c
 801fcdc:	080298a4 	.word	0x080298a4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801fce0:	4b3b      	ldr	r3, [pc, #236]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fce2:	2200      	movs	r2, #0
 801fce4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801fce8:	4b39      	ldr	r3, [pc, #228]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fcea:	2201      	movs	r2, #1
 801fcec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801fcee:	4b38      	ldr	r3, [pc, #224]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fcf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801fcf4:	2b05      	cmp	r3, #5
 801fcf6:	d004      	beq.n	801fd02 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801fcf8:	4b35      	ldr	r3, [pc, #212]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fcfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801fcfe:	2b06      	cmp	r3, #6
 801fd00:	d10a      	bne.n	801fd18 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801fd02:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801fd04:	2b0b      	cmp	r3, #11
 801fd06:	d803      	bhi.n	801fd10 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801fd08:	4b31      	ldr	r3, [pc, #196]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd0a:	220c      	movs	r2, #12
 801fd0c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801fd0e:	e006      	b.n	801fd1e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801fd10:	4a2f      	ldr	r2, [pc, #188]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd12:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801fd14:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801fd16:	e002      	b.n	801fd1e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801fd18:	4a2d      	ldr	r2, [pc, #180]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd1a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801fd1c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801fd1e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801fd22:	4b2b      	ldr	r3, [pc, #172]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd24:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801fd26:	4b2b      	ldr	r3, [pc, #172]	@ (801fdd4 <RadioSetRxConfig+0x40c>)
 801fd28:	781a      	ldrb	r2, [r3, #0]
 801fd2a:	4b29      	ldr	r3, [pc, #164]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd2c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801fd2e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801fd32:	4b27      	ldr	r3, [pc, #156]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd34:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801fd38:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801fd3c:	4b24      	ldr	r3, [pc, #144]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801fd42:	f000 fbd6 	bl	80204f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801fd46:	2001      	movs	r0, #1
 801fd48:	f7ff fd6a 	bl	801f820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801fd4c:	4822      	ldr	r0, [pc, #136]	@ (801fdd8 <RadioSetRxConfig+0x410>)
 801fd4e:	f002 f9c5 	bl	80220dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801fd52:	4822      	ldr	r0, [pc, #136]	@ (801fddc <RadioSetRxConfig+0x414>)
 801fd54:	f002 fa94 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801fd58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801fd5a:	b2db      	uxtb	r3, r3
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	f001 ff2e 	bl	8021bbe <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801fd62:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801fd66:	f002 fbe7 	bl	8022538 <SUBGRF_ReadRegister>
 801fd6a:	4603      	mov	r3, r0
 801fd6c:	f003 0301 	and.w	r3, r3, #1
 801fd70:	b2db      	uxtb	r3, r3
 801fd72:	4619      	mov	r1, r3
 801fd74:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801fd78:	f002 fbca 	bl	8022510 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801fd7c:	4b14      	ldr	r3, [pc, #80]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fd7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801fd82:	2b01      	cmp	r3, #1
 801fd84:	d10d      	bne.n	801fda2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801fd86:	f240 7036 	movw	r0, #1846	@ 0x736
 801fd8a:	f002 fbd5 	bl	8022538 <SUBGRF_ReadRegister>
 801fd8e:	4603      	mov	r3, r0
 801fd90:	f023 0304 	bic.w	r3, r3, #4
 801fd94:	b2db      	uxtb	r3, r3
 801fd96:	4619      	mov	r1, r3
 801fd98:	f240 7036 	movw	r0, #1846	@ 0x736
 801fd9c:	f002 fbb8 	bl	8022510 <SUBGRF_WriteRegister>
 801fda0:	e00c      	b.n	801fdbc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801fda2:	f240 7036 	movw	r0, #1846	@ 0x736
 801fda6:	f002 fbc7 	bl	8022538 <SUBGRF_ReadRegister>
 801fdaa:	4603      	mov	r3, r0
 801fdac:	f043 0304 	orr.w	r3, r3, #4
 801fdb0:	b2db      	uxtb	r3, r3
 801fdb2:	4619      	mov	r1, r3
 801fdb4:	f240 7036 	movw	r0, #1846	@ 0x736
 801fdb8:	f002 fbaa 	bl	8022510 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801fdbc:	4b04      	ldr	r3, [pc, #16]	@ (801fdd0 <RadioSetRxConfig+0x408>)
 801fdbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801fdc2:	609a      	str	r2, [r3, #8]
            break;
 801fdc4:	e000      	b.n	801fdc8 <RadioSetRxConfig+0x400>
            break;
 801fdc6:	bf00      	nop
    }
}
 801fdc8:	bf00      	nop
 801fdca:	3728      	adds	r7, #40	@ 0x28
 801fdcc:	46bd      	mov	sp, r7
 801fdce:	bd80      	pop	{r7, pc}
 801fdd0:	2000212c 	.word	0x2000212c
 801fdd4:	20000144 	.word	0x20000144
 801fdd8:	20002164 	.word	0x20002164
 801fddc:	2000213a 	.word	0x2000213a

0801fde0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801fde0:	b580      	push	{r7, lr}
 801fde2:	b086      	sub	sp, #24
 801fde4:	af00      	add	r7, sp, #0
 801fde6:	60ba      	str	r2, [r7, #8]
 801fde8:	607b      	str	r3, [r7, #4]
 801fdea:	4603      	mov	r3, r0
 801fdec:	73fb      	strb	r3, [r7, #15]
 801fdee:	460b      	mov	r3, r1
 801fdf0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801fdf2:	f002 fe74 	bl	8022ade <RFW_DeInit>
    switch( modem )
 801fdf6:	7bfb      	ldrb	r3, [r7, #15]
 801fdf8:	2b04      	cmp	r3, #4
 801fdfa:	f000 80c7 	beq.w	801ff8c <RadioSetTxConfig+0x1ac>
 801fdfe:	2b04      	cmp	r3, #4
 801fe00:	f300 80d6 	bgt.w	801ffb0 <RadioSetTxConfig+0x1d0>
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d002      	beq.n	801fe0e <RadioSetTxConfig+0x2e>
 801fe08:	2b01      	cmp	r3, #1
 801fe0a:	d059      	beq.n	801fec0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801fe0c:	e0d0      	b.n	801ffb0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801fe0e:	4b77      	ldr	r3, [pc, #476]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe10:	2200      	movs	r2, #0
 801fe12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801fe16:	4a75      	ldr	r2, [pc, #468]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe18:	6a3b      	ldr	r3, [r7, #32]
 801fe1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801fe1c:	4b73      	ldr	r3, [pc, #460]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe1e:	220b      	movs	r2, #11
 801fe20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801fe24:	6878      	ldr	r0, [r7, #4]
 801fe26:	f002 fd8d 	bl	8022944 <SUBGRF_GetFskBandwidthRegValue>
 801fe2a:	4603      	mov	r3, r0
 801fe2c:	461a      	mov	r2, r3
 801fe2e:	4b6f      	ldr	r3, [pc, #444]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801fe34:	4a6d      	ldr	r2, [pc, #436]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe36:	68bb      	ldr	r3, [r7, #8]
 801fe38:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801fe3a:	4b6c      	ldr	r3, [pc, #432]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801fe40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801fe42:	00db      	lsls	r3, r3, #3
 801fe44:	b29a      	uxth	r2, r3
 801fe46:	4b69      	ldr	r3, [pc, #420]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe48:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801fe4a:	4b68      	ldr	r3, [pc, #416]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe4c:	2204      	movs	r2, #4
 801fe4e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801fe50:	4b66      	ldr	r3, [pc, #408]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe52:	2218      	movs	r2, #24
 801fe54:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801fe56:	4b65      	ldr	r3, [pc, #404]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe58:	2200      	movs	r2, #0
 801fe5a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801fe5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801fe60:	f083 0301 	eor.w	r3, r3, #1
 801fe64:	b2db      	uxtb	r3, r3
 801fe66:	461a      	mov	r2, r3
 801fe68:	4b60      	ldr	r3, [pc, #384]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe6a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801fe6c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d003      	beq.n	801fe7c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801fe74:	4b5d      	ldr	r3, [pc, #372]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe76:	22f2      	movs	r2, #242	@ 0xf2
 801fe78:	75da      	strb	r2, [r3, #23]
 801fe7a:	e002      	b.n	801fe82 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801fe7c:	4b5b      	ldr	r3, [pc, #364]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe7e:	2201      	movs	r2, #1
 801fe80:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801fe82:	4b5a      	ldr	r3, [pc, #360]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fe84:	2201      	movs	r2, #1
 801fe86:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801fe88:	f000 fb33 	bl	80204f2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801fe8c:	2000      	movs	r0, #0
 801fe8e:	f7ff fcc7 	bl	801f820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801fe92:	4857      	ldr	r0, [pc, #348]	@ (801fff0 <RadioSetTxConfig+0x210>)
 801fe94:	f002 f922 	bl	80220dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801fe98:	4856      	ldr	r0, [pc, #344]	@ (801fff4 <RadioSetTxConfig+0x214>)
 801fe9a:	f002 f9f1 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801fe9e:	4a56      	ldr	r2, [pc, #344]	@ (801fff8 <RadioSetTxConfig+0x218>)
 801fea0:	f107 0310 	add.w	r3, r7, #16
 801fea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fea8:	e883 0003 	stmia.w	r3, {r0, r1}
 801feac:	f107 0310 	add.w	r3, r7, #16
 801feb0:	4618      	mov	r0, r3
 801feb2:	f001 fcae 	bl	8021812 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801feb6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801feba:	f001 fcf9 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
            break;
 801febe:	e078      	b.n	801ffb2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801fec0:	4b4a      	ldr	r3, [pc, #296]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fec2:	2201      	movs	r2, #1
 801fec4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801fec8:	6a3b      	ldr	r3, [r7, #32]
 801feca:	b2da      	uxtb	r2, r3
 801fecc:	4b47      	ldr	r3, [pc, #284]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801fed2:	4a4a      	ldr	r2, [pc, #296]	@ (801fffc <RadioSetTxConfig+0x21c>)
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	4413      	add	r3, r2
 801fed8:	781a      	ldrb	r2, [r3, #0]
 801feda:	4b44      	ldr	r3, [pc, #272]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fedc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801fee0:	4a42      	ldr	r2, [pc, #264]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801fee2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fee6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d105      	bne.n	801fefc <RadioSetTxConfig+0x11c>
 801fef0:	6a3b      	ldr	r3, [r7, #32]
 801fef2:	2b0b      	cmp	r3, #11
 801fef4:	d008      	beq.n	801ff08 <RadioSetTxConfig+0x128>
 801fef6:	6a3b      	ldr	r3, [r7, #32]
 801fef8:	2b0c      	cmp	r3, #12
 801fefa:	d005      	beq.n	801ff08 <RadioSetTxConfig+0x128>
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	2b01      	cmp	r3, #1
 801ff00:	d107      	bne.n	801ff12 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ff02:	6a3b      	ldr	r3, [r7, #32]
 801ff04:	2b0c      	cmp	r3, #12
 801ff06:	d104      	bne.n	801ff12 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ff08:	4b38      	ldr	r3, [pc, #224]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff0a:	2201      	movs	r2, #1
 801ff0c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801ff10:	e003      	b.n	801ff1a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ff12:	4b36      	ldr	r3, [pc, #216]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff14:	2200      	movs	r2, #0
 801ff16:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ff1a:	4b34      	ldr	r3, [pc, #208]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff1c:	2201      	movs	r2, #1
 801ff1e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ff20:	4b32      	ldr	r3, [pc, #200]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801ff26:	2b05      	cmp	r3, #5
 801ff28:	d004      	beq.n	801ff34 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801ff2a:	4b30      	ldr	r3, [pc, #192]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ff30:	2b06      	cmp	r3, #6
 801ff32:	d10a      	bne.n	801ff4a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801ff34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ff36:	2b0b      	cmp	r3, #11
 801ff38:	d803      	bhi.n	801ff42 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801ff3a:	4b2c      	ldr	r3, [pc, #176]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff3c:	220c      	movs	r2, #12
 801ff3e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801ff40:	e006      	b.n	801ff50 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801ff42:	4a2a      	ldr	r2, [pc, #168]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ff46:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801ff48:	e002      	b.n	801ff50 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801ff4a:	4a28      	ldr	r2, [pc, #160]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ff4e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801ff50:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ff54:	4b25      	ldr	r3, [pc, #148]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff56:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ff58:	4b29      	ldr	r3, [pc, #164]	@ (8020000 <RadioSetTxConfig+0x220>)
 801ff5a:	781a      	ldrb	r2, [r3, #0]
 801ff5c:	4b23      	ldr	r3, [pc, #140]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff5e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801ff60:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801ff64:	4b21      	ldr	r3, [pc, #132]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff66:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801ff6a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801ff6e:	4b1f      	ldr	r3, [pc, #124]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801ff74:	f000 fabd 	bl	80204f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801ff78:	2001      	movs	r0, #1
 801ff7a:	f7ff fc51 	bl	801f820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ff7e:	481c      	ldr	r0, [pc, #112]	@ (801fff0 <RadioSetTxConfig+0x210>)
 801ff80:	f002 f8ac 	bl	80220dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ff84:	481b      	ldr	r0, [pc, #108]	@ (801fff4 <RadioSetTxConfig+0x214>)
 801ff86:	f002 f97b 	bl	8022280 <SUBGRF_SetPacketParams>
            break;
 801ff8a:	e012      	b.n	801ffb2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801ff8c:	2004      	movs	r0, #4
 801ff8e:	f7ff fc47 	bl	801f820 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ff92:	4b16      	ldr	r3, [pc, #88]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff94:	2202      	movs	r2, #2
 801ff96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801ff9a:	4a14      	ldr	r2, [pc, #80]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ff9c:	6a3b      	ldr	r3, [r7, #32]
 801ff9e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ffa0:	4b12      	ldr	r3, [pc, #72]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ffa2:	2216      	movs	r2, #22
 801ffa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ffa8:	4811      	ldr	r0, [pc, #68]	@ (801fff0 <RadioSetTxConfig+0x210>)
 801ffaa:	f002 f897 	bl	80220dc <SUBGRF_SetModulationParams>
            break;
 801ffae:	e000      	b.n	801ffb2 <RadioSetTxConfig+0x1d2>
            break;
 801ffb0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ffb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ffb6:	4618      	mov	r0, r3
 801ffb8:	f002 fbc6 	bl	8022748 <SUBGRF_SetRfTxPower>
 801ffbc:	4603      	mov	r3, r0
 801ffbe:	461a      	mov	r2, r3
 801ffc0:	4b0a      	ldr	r3, [pc, #40]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ffc2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ffc6:	210e      	movs	r1, #14
 801ffc8:	f640 101f 	movw	r0, #2335	@ 0x91f
 801ffcc:	f002 faa0 	bl	8022510 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ffd0:	4b06      	ldr	r3, [pc, #24]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ffd2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801ffd6:	4618      	mov	r0, r3
 801ffd8:	f002 fd95 	bl	8022b06 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ffdc:	4a03      	ldr	r2, [pc, #12]	@ (801ffec <RadioSetTxConfig+0x20c>)
 801ffde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ffe0:	6053      	str	r3, [r2, #4]
}
 801ffe2:	bf00      	nop
 801ffe4:	3718      	adds	r7, #24
 801ffe6:	46bd      	mov	sp, r7
 801ffe8:	bd80      	pop	{r7, pc}
 801ffea:	bf00      	nop
 801ffec:	2000212c 	.word	0x2000212c
 801fff0:	20002164 	.word	0x20002164
 801fff4:	2000213a 	.word	0x2000213a
 801fff8:	08028c7c 	.word	0x08028c7c
 801fffc:	080298a4 	.word	0x080298a4
 8020000:	20000144 	.word	0x20000144

08020004 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8020004:	b480      	push	{r7}
 8020006:	b083      	sub	sp, #12
 8020008:	af00      	add	r7, sp, #0
 802000a:	6078      	str	r0, [r7, #4]
    return true;
 802000c:	2301      	movs	r3, #1
}
 802000e:	4618      	mov	r0, r3
 8020010:	370c      	adds	r7, #12
 8020012:	46bd      	mov	sp, r7
 8020014:	bc80      	pop	{r7}
 8020016:	4770      	bx	lr

08020018 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8020018:	b480      	push	{r7}
 802001a:	b085      	sub	sp, #20
 802001c:	af00      	add	r7, sp, #0
 802001e:	4603      	mov	r3, r0
 8020020:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8020022:	2300      	movs	r3, #0
 8020024:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8020026:	79fb      	ldrb	r3, [r7, #7]
 8020028:	2b0a      	cmp	r3, #10
 802002a:	d83e      	bhi.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
 802002c:	a201      	add	r2, pc, #4	@ (adr r2, 8020034 <RadioGetLoRaBandwidthInHz+0x1c>)
 802002e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020032:	bf00      	nop
 8020034:	08020061 	.word	0x08020061
 8020038:	08020071 	.word	0x08020071
 802003c:	08020081 	.word	0x08020081
 8020040:	08020091 	.word	0x08020091
 8020044:	08020099 	.word	0x08020099
 8020048:	0802009f 	.word	0x0802009f
 802004c:	080200a5 	.word	0x080200a5
 8020050:	080200ab 	.word	0x080200ab
 8020054:	08020069 	.word	0x08020069
 8020058:	08020079 	.word	0x08020079
 802005c:	08020089 	.word	0x08020089
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8020060:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8020064:	60fb      	str	r3, [r7, #12]
        break;
 8020066:	e020      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8020068:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 802006c:	60fb      	str	r3, [r7, #12]
        break;
 802006e:	e01c      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8020070:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8020074:	60fb      	str	r3, [r7, #12]
        break;
 8020076:	e018      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8020078:	f245 1361 	movw	r3, #20833	@ 0x5161
 802007c:	60fb      	str	r3, [r7, #12]
        break;
 802007e:	e014      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8020080:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8020084:	60fb      	str	r3, [r7, #12]
        break;
 8020086:	e010      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8020088:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 802008c:	60fb      	str	r3, [r7, #12]
        break;
 802008e:	e00c      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8020090:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8020094:	60fb      	str	r3, [r7, #12]
        break;
 8020096:	e008      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8020098:	4b07      	ldr	r3, [pc, #28]	@ (80200b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 802009a:	60fb      	str	r3, [r7, #12]
        break;
 802009c:	e005      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 802009e:	4b07      	ldr	r3, [pc, #28]	@ (80200bc <RadioGetLoRaBandwidthInHz+0xa4>)
 80200a0:	60fb      	str	r3, [r7, #12]
        break;
 80200a2:	e002      	b.n	80200aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80200a4:	4b06      	ldr	r3, [pc, #24]	@ (80200c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80200a6:	60fb      	str	r3, [r7, #12]
        break;
 80200a8:	bf00      	nop
    }

    return bandwidthInHz;
 80200aa:	68fb      	ldr	r3, [r7, #12]
}
 80200ac:	4618      	mov	r0, r3
 80200ae:	3714      	adds	r7, #20
 80200b0:	46bd      	mov	sp, r7
 80200b2:	bc80      	pop	{r7}
 80200b4:	4770      	bx	lr
 80200b6:	bf00      	nop
 80200b8:	0001e848 	.word	0x0001e848
 80200bc:	0003d090 	.word	0x0003d090
 80200c0:	0007a120 	.word	0x0007a120

080200c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80200c4:	b480      	push	{r7}
 80200c6:	b083      	sub	sp, #12
 80200c8:	af00      	add	r7, sp, #0
 80200ca:	6078      	str	r0, [r7, #4]
 80200cc:	4608      	mov	r0, r1
 80200ce:	4611      	mov	r1, r2
 80200d0:	461a      	mov	r2, r3
 80200d2:	4603      	mov	r3, r0
 80200d4:	70fb      	strb	r3, [r7, #3]
 80200d6:	460b      	mov	r3, r1
 80200d8:	803b      	strh	r3, [r7, #0]
 80200da:	4613      	mov	r3, r2
 80200dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80200de:	883b      	ldrh	r3, [r7, #0]
 80200e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80200e2:	78ba      	ldrb	r2, [r7, #2]
 80200e4:	f082 0201 	eor.w	r2, r2, #1
 80200e8:	b2d2      	uxtb	r2, r2
 80200ea:	2a00      	cmp	r2, #0
 80200ec:	d001      	beq.n	80200f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80200ee:	2208      	movs	r2, #8
 80200f0:	e000      	b.n	80200f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80200f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80200f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80200f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80200fa:	7c3b      	ldrb	r3, [r7, #16]
 80200fc:	7d39      	ldrb	r1, [r7, #20]
 80200fe:	2900      	cmp	r1, #0
 8020100:	d001      	beq.n	8020106 <RadioGetGfskTimeOnAirNumerator+0x42>
 8020102:	2102      	movs	r1, #2
 8020104:	e000      	b.n	8020108 <RadioGetGfskTimeOnAirNumerator+0x44>
 8020106:	2100      	movs	r1, #0
 8020108:	440b      	add	r3, r1
 802010a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 802010c:	4413      	add	r3, r2
}
 802010e:	4618      	mov	r0, r3
 8020110:	370c      	adds	r7, #12
 8020112:	46bd      	mov	sp, r7
 8020114:	bc80      	pop	{r7}
 8020116:	4770      	bx	lr

08020118 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8020118:	b480      	push	{r7}
 802011a:	b08b      	sub	sp, #44	@ 0x2c
 802011c:	af00      	add	r7, sp, #0
 802011e:	60f8      	str	r0, [r7, #12]
 8020120:	60b9      	str	r1, [r7, #8]
 8020122:	4611      	mov	r1, r2
 8020124:	461a      	mov	r2, r3
 8020126:	460b      	mov	r3, r1
 8020128:	71fb      	strb	r3, [r7, #7]
 802012a:	4613      	mov	r3, r2
 802012c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 802012e:	79fb      	ldrb	r3, [r7, #7]
 8020130:	3304      	adds	r3, #4
 8020132:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8020134:	2300      	movs	r3, #0
 8020136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 802013a:	68bb      	ldr	r3, [r7, #8]
 802013c:	2b05      	cmp	r3, #5
 802013e:	d002      	beq.n	8020146 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8020140:	68bb      	ldr	r3, [r7, #8]
 8020142:	2b06      	cmp	r3, #6
 8020144:	d104      	bne.n	8020150 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8020146:	88bb      	ldrh	r3, [r7, #4]
 8020148:	2b0b      	cmp	r3, #11
 802014a:	d801      	bhi.n	8020150 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 802014c:	230c      	movs	r3, #12
 802014e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8020150:	68fb      	ldr	r3, [r7, #12]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d105      	bne.n	8020162 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8020156:	68bb      	ldr	r3, [r7, #8]
 8020158:	2b0b      	cmp	r3, #11
 802015a:	d008      	beq.n	802016e <RadioGetLoRaTimeOnAirNumerator+0x56>
 802015c:	68bb      	ldr	r3, [r7, #8]
 802015e:	2b0c      	cmp	r3, #12
 8020160:	d005      	beq.n	802016e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	2b01      	cmp	r3, #1
 8020166:	d105      	bne.n	8020174 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8020168:	68bb      	ldr	r3, [r7, #8]
 802016a:	2b0c      	cmp	r3, #12
 802016c:	d102      	bne.n	8020174 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 802016e:	2301      	movs	r3, #1
 8020170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8020174:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8020178:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 802017a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802017e:	2a00      	cmp	r2, #0
 8020180:	d001      	beq.n	8020186 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8020182:	2210      	movs	r2, #16
 8020184:	e000      	b.n	8020188 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8020186:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8020188:	4413      	add	r3, r2
 802018a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 802018c:	68bb      	ldr	r3, [r7, #8]
 802018e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8020190:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8020192:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8020196:	2a00      	cmp	r2, #0
 8020198:	d001      	beq.n	802019e <RadioGetLoRaTimeOnAirNumerator+0x86>
 802019a:	2200      	movs	r2, #0
 802019c:	e000      	b.n	80201a0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 802019e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80201a0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80201a2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80201a4:	68bb      	ldr	r3, [r7, #8]
 80201a6:	2b06      	cmp	r3, #6
 80201a8:	d803      	bhi.n	80201b2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80201aa:	68bb      	ldr	r3, [r7, #8]
 80201ac:	009b      	lsls	r3, r3, #2
 80201ae:	623b      	str	r3, [r7, #32]
 80201b0:	e00e      	b.n	80201d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80201b2:	69fb      	ldr	r3, [r7, #28]
 80201b4:	3308      	adds	r3, #8
 80201b6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80201b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d004      	beq.n	80201ca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80201c0:	68bb      	ldr	r3, [r7, #8]
 80201c2:	3b02      	subs	r3, #2
 80201c4:	009b      	lsls	r3, r3, #2
 80201c6:	623b      	str	r3, [r7, #32]
 80201c8:	e002      	b.n	80201d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80201ca:	68bb      	ldr	r3, [r7, #8]
 80201cc:	009b      	lsls	r3, r3, #2
 80201ce:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80201d0:	69fb      	ldr	r3, [r7, #28]
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	da01      	bge.n	80201da <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80201d6:	2300      	movs	r3, #0
 80201d8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80201da:	69fa      	ldr	r2, [r7, #28]
 80201dc:	6a3b      	ldr	r3, [r7, #32]
 80201de:	4413      	add	r3, r2
 80201e0:	1e5a      	subs	r2, r3, #1
 80201e2:	6a3b      	ldr	r3, [r7, #32]
 80201e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80201e8:	697a      	ldr	r2, [r7, #20]
 80201ea:	fb03 f202 	mul.w	r2, r3, r2
 80201ee:	88bb      	ldrh	r3, [r7, #4]
 80201f0:	4413      	add	r3, r2
    int32_t intermediate =
 80201f2:	330c      	adds	r3, #12
 80201f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80201f6:	68bb      	ldr	r3, [r7, #8]
 80201f8:	2b06      	cmp	r3, #6
 80201fa:	d802      	bhi.n	8020202 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80201fc:	69bb      	ldr	r3, [r7, #24]
 80201fe:	3302      	adds	r3, #2
 8020200:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8020202:	69bb      	ldr	r3, [r7, #24]
 8020204:	009b      	lsls	r3, r3, #2
 8020206:	1c5a      	adds	r2, r3, #1
 8020208:	68bb      	ldr	r3, [r7, #8]
 802020a:	3b02      	subs	r3, #2
 802020c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8020210:	4618      	mov	r0, r3
 8020212:	372c      	adds	r7, #44	@ 0x2c
 8020214:	46bd      	mov	sp, r7
 8020216:	bc80      	pop	{r7}
 8020218:	4770      	bx	lr
	...

0802021c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 802021c:	b580      	push	{r7, lr}
 802021e:	b08a      	sub	sp, #40	@ 0x28
 8020220:	af04      	add	r7, sp, #16
 8020222:	60b9      	str	r1, [r7, #8]
 8020224:	607a      	str	r2, [r7, #4]
 8020226:	461a      	mov	r2, r3
 8020228:	4603      	mov	r3, r0
 802022a:	73fb      	strb	r3, [r7, #15]
 802022c:	4613      	mov	r3, r2
 802022e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8020230:	2300      	movs	r3, #0
 8020232:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8020234:	2301      	movs	r3, #1
 8020236:	613b      	str	r3, [r7, #16]

    switch( modem )
 8020238:	7bfb      	ldrb	r3, [r7, #15]
 802023a:	2b00      	cmp	r3, #0
 802023c:	d002      	beq.n	8020244 <RadioTimeOnAir+0x28>
 802023e:	2b01      	cmp	r3, #1
 8020240:	d017      	beq.n	8020272 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8020242:	e035      	b.n	80202b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8020244:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8020248:	8c3a      	ldrh	r2, [r7, #32]
 802024a:	7bb9      	ldrb	r1, [r7, #14]
 802024c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8020250:	9301      	str	r3, [sp, #4]
 8020252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8020256:	9300      	str	r3, [sp, #0]
 8020258:	4603      	mov	r3, r0
 802025a:	6878      	ldr	r0, [r7, #4]
 802025c:	f7ff ff32 	bl	80200c4 <RadioGetGfskTimeOnAirNumerator>
 8020260:	4603      	mov	r3, r0
 8020262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020266:	fb02 f303 	mul.w	r3, r2, r3
 802026a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	613b      	str	r3, [r7, #16]
        break;
 8020270:	e01e      	b.n	80202b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8020272:	8c39      	ldrh	r1, [r7, #32]
 8020274:	7bba      	ldrb	r2, [r7, #14]
 8020276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 802027a:	9302      	str	r3, [sp, #8]
 802027c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8020280:	9301      	str	r3, [sp, #4]
 8020282:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8020286:	9300      	str	r3, [sp, #0]
 8020288:	460b      	mov	r3, r1
 802028a:	6879      	ldr	r1, [r7, #4]
 802028c:	68b8      	ldr	r0, [r7, #8]
 802028e:	f7ff ff43 	bl	8020118 <RadioGetLoRaTimeOnAirNumerator>
 8020292:	4603      	mov	r3, r0
 8020294:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020298:	fb02 f303 	mul.w	r3, r2, r3
 802029c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 802029e:	4a0a      	ldr	r2, [pc, #40]	@ (80202c8 <RadioTimeOnAir+0xac>)
 80202a0:	68bb      	ldr	r3, [r7, #8]
 80202a2:	4413      	add	r3, r2
 80202a4:	781b      	ldrb	r3, [r3, #0]
 80202a6:	4618      	mov	r0, r3
 80202a8:	f7ff feb6 	bl	8020018 <RadioGetLoRaBandwidthInHz>
 80202ac:	6138      	str	r0, [r7, #16]
        break;
 80202ae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80202b0:	697a      	ldr	r2, [r7, #20]
 80202b2:	693b      	ldr	r3, [r7, #16]
 80202b4:	4413      	add	r3, r2
 80202b6:	1e5a      	subs	r2, r3, #1
 80202b8:	693b      	ldr	r3, [r7, #16]
 80202ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80202be:	4618      	mov	r0, r3
 80202c0:	3718      	adds	r7, #24
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd80      	pop	{r7, pc}
 80202c6:	bf00      	nop
 80202c8:	080298a4 	.word	0x080298a4

080202cc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80202cc:	b580      	push	{r7, lr}
 80202ce:	b084      	sub	sp, #16
 80202d0:	af00      	add	r7, sp, #0
 80202d2:	6078      	str	r0, [r7, #4]
 80202d4:	460b      	mov	r3, r1
 80202d6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80202d8:	2300      	movs	r3, #0
 80202da:	2200      	movs	r2, #0
 80202dc:	f240 2101 	movw	r1, #513	@ 0x201
 80202e0:	f240 2001 	movw	r0, #513	@ 0x201
 80202e4:	f001 fd64 	bl	8021db0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80202e8:	4b73      	ldr	r3, [pc, #460]	@ (80204b8 <RadioSend+0x1ec>)
 80202ea:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80202ee:	2101      	movs	r1, #1
 80202f0:	4618      	mov	r0, r3
 80202f2:	f002 fa01 	bl	80226f8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80202f6:	4b70      	ldr	r3, [pc, #448]	@ (80204b8 <RadioSend+0x1ec>)
 80202f8:	781b      	ldrb	r3, [r3, #0]
 80202fa:	2b01      	cmp	r3, #1
 80202fc:	d112      	bne.n	8020324 <RadioSend+0x58>
 80202fe:	4b6e      	ldr	r3, [pc, #440]	@ (80204b8 <RadioSend+0x1ec>)
 8020300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8020304:	2b06      	cmp	r3, #6
 8020306:	d10d      	bne.n	8020324 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8020308:	f640 0089 	movw	r0, #2185	@ 0x889
 802030c:	f002 f914 	bl	8022538 <SUBGRF_ReadRegister>
 8020310:	4603      	mov	r3, r0
 8020312:	f023 0304 	bic.w	r3, r3, #4
 8020316:	b2db      	uxtb	r3, r3
 8020318:	4619      	mov	r1, r3
 802031a:	f640 0089 	movw	r0, #2185	@ 0x889
 802031e:	f002 f8f7 	bl	8022510 <SUBGRF_WriteRegister>
 8020322:	e00c      	b.n	802033e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8020324:	f640 0089 	movw	r0, #2185	@ 0x889
 8020328:	f002 f906 	bl	8022538 <SUBGRF_ReadRegister>
 802032c:	4603      	mov	r3, r0
 802032e:	f043 0304 	orr.w	r3, r3, #4
 8020332:	b2db      	uxtb	r3, r3
 8020334:	4619      	mov	r1, r3
 8020336:	f640 0089 	movw	r0, #2185	@ 0x889
 802033a:	f002 f8e9 	bl	8022510 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 802033e:	4b5e      	ldr	r3, [pc, #376]	@ (80204b8 <RadioSend+0x1ec>)
 8020340:	781b      	ldrb	r3, [r3, #0]
 8020342:	2b04      	cmp	r3, #4
 8020344:	f200 80a8 	bhi.w	8020498 <RadioSend+0x1cc>
 8020348:	a201      	add	r2, pc, #4	@ (adr r2, 8020350 <RadioSend+0x84>)
 802034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802034e:	bf00      	nop
 8020350:	0802037f 	.word	0x0802037f
 8020354:	08020365 	.word	0x08020365
 8020358:	0802037f 	.word	0x0802037f
 802035c:	080203e1 	.word	0x080203e1
 8020360:	08020401 	.word	0x08020401
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8020364:	4a54      	ldr	r2, [pc, #336]	@ (80204b8 <RadioSend+0x1ec>)
 8020366:	78fb      	ldrb	r3, [r7, #3]
 8020368:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 802036a:	4854      	ldr	r0, [pc, #336]	@ (80204bc <RadioSend+0x1f0>)
 802036c:	f001 ff88 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8020370:	78fb      	ldrb	r3, [r7, #3]
 8020372:	2200      	movs	r2, #0
 8020374:	4619      	mov	r1, r3
 8020376:	6878      	ldr	r0, [r7, #4]
 8020378:	f001 fa38 	bl	80217ec <SUBGRF_SendPayload>
            break;
 802037c:	e08d      	b.n	802049a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 802037e:	f002 fbb4 	bl	8022aea <RFW_Is_Init>
 8020382:	4603      	mov	r3, r0
 8020384:	2b01      	cmp	r3, #1
 8020386:	d11e      	bne.n	80203c6 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8020388:	f107 020d 	add.w	r2, r7, #13
 802038c:	78fb      	ldrb	r3, [r7, #3]
 802038e:	4619      	mov	r1, r3
 8020390:	6878      	ldr	r0, [r7, #4]
 8020392:	f002 fbc2 	bl	8022b1a <RFW_TransmitInit>
 8020396:	4603      	mov	r3, r0
 8020398:	2b00      	cmp	r3, #0
 802039a:	d10c      	bne.n	80203b6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 802039c:	7b7a      	ldrb	r2, [r7, #13]
 802039e:	4b46      	ldr	r3, [pc, #280]	@ (80204b8 <RadioSend+0x1ec>)
 80203a0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80203a2:	4846      	ldr	r0, [pc, #280]	@ (80204bc <RadioSend+0x1f0>)
 80203a4:	f001 ff6c 	bl	8022280 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80203a8:	7b7b      	ldrb	r3, [r7, #13]
 80203aa:	2200      	movs	r2, #0
 80203ac:	4619      	mov	r1, r3
 80203ae:	6878      	ldr	r0, [r7, #4]
 80203b0:	f001 fa1c 	bl	80217ec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80203b4:	e071      	b.n	802049a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80203b6:	4b42      	ldr	r3, [pc, #264]	@ (80204c0 <RadioSend+0x1f4>)
 80203b8:	2201      	movs	r2, #1
 80203ba:	2100      	movs	r1, #0
 80203bc:	2002      	movs	r0, #2
 80203be:	f004 faef 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80203c2:	2303      	movs	r3, #3
 80203c4:	e073      	b.n	80204ae <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80203c6:	4a3c      	ldr	r2, [pc, #240]	@ (80204b8 <RadioSend+0x1ec>)
 80203c8:	78fb      	ldrb	r3, [r7, #3]
 80203ca:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80203cc:	483b      	ldr	r0, [pc, #236]	@ (80204bc <RadioSend+0x1f0>)
 80203ce:	f001 ff57 	bl	8022280 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80203d2:	78fb      	ldrb	r3, [r7, #3]
 80203d4:	2200      	movs	r2, #0
 80203d6:	4619      	mov	r1, r3
 80203d8:	6878      	ldr	r0, [r7, #4]
 80203da:	f001 fa07 	bl	80217ec <SUBGRF_SendPayload>
            break;
 80203de:	e05c      	b.n	802049a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80203e0:	4b35      	ldr	r3, [pc, #212]	@ (80204b8 <RadioSend+0x1ec>)
 80203e2:	2202      	movs	r2, #2
 80203e4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80203e6:	4a34      	ldr	r2, [pc, #208]	@ (80204b8 <RadioSend+0x1ec>)
 80203e8:	78fb      	ldrb	r3, [r7, #3]
 80203ea:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80203ec:	4833      	ldr	r0, [pc, #204]	@ (80204bc <RadioSend+0x1f0>)
 80203ee:	f001 ff47 	bl	8022280 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80203f2:	78fb      	ldrb	r3, [r7, #3]
 80203f4:	2200      	movs	r2, #0
 80203f6:	4619      	mov	r1, r3
 80203f8:	6878      	ldr	r0, [r7, #4]
 80203fa:	f001 f9f7 	bl	80217ec <SUBGRF_SendPayload>
            break;
 80203fe:	e04c      	b.n	802049a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8020400:	78fb      	ldrb	r3, [r7, #3]
 8020402:	461a      	mov	r2, r3
 8020404:	6879      	ldr	r1, [r7, #4]
 8020406:	482f      	ldr	r0, [pc, #188]	@ (80204c4 <RadioSend+0x1f8>)
 8020408:	f000 fcca 	bl	8020da0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 802040c:	4b2a      	ldr	r3, [pc, #168]	@ (80204b8 <RadioSend+0x1ec>)
 802040e:	2202      	movs	r2, #2
 8020410:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8020412:	78fb      	ldrb	r3, [r7, #3]
 8020414:	3301      	adds	r3, #1
 8020416:	b2da      	uxtb	r2, r3
 8020418:	4b27      	ldr	r3, [pc, #156]	@ (80204b8 <RadioSend+0x1ec>)
 802041a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 802041c:	4827      	ldr	r0, [pc, #156]	@ (80204bc <RadioSend+0x1f0>)
 802041e:	f001 ff2f 	bl	8022280 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8020422:	2100      	movs	r1, #0
 8020424:	20f1      	movs	r0, #241	@ 0xf1
 8020426:	f000 f965 	bl	80206f4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 802042a:	2100      	movs	r1, #0
 802042c:	20f0      	movs	r0, #240	@ 0xf0
 802042e:	f000 f961 	bl	80206f4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8020432:	4b21      	ldr	r3, [pc, #132]	@ (80204b8 <RadioSend+0x1ec>)
 8020434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020436:	2b64      	cmp	r3, #100	@ 0x64
 8020438:	d108      	bne.n	802044c <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 802043a:	2170      	movs	r1, #112	@ 0x70
 802043c:	20f3      	movs	r0, #243	@ 0xf3
 802043e:	f000 f959 	bl	80206f4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8020442:	211d      	movs	r1, #29
 8020444:	20f2      	movs	r0, #242	@ 0xf2
 8020446:	f000 f955 	bl	80206f4 <RadioWrite>
 802044a:	e007      	b.n	802045c <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 802044c:	21e1      	movs	r1, #225	@ 0xe1
 802044e:	20f3      	movs	r0, #243	@ 0xf3
 8020450:	f000 f950 	bl	80206f4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8020454:	2104      	movs	r1, #4
 8020456:	20f2      	movs	r0, #242	@ 0xf2
 8020458:	f000 f94c 	bl	80206f4 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 802045c:	78fb      	ldrb	r3, [r7, #3]
 802045e:	b29b      	uxth	r3, r3
 8020460:	00db      	lsls	r3, r3, #3
 8020462:	b29b      	uxth	r3, r3
 8020464:	3302      	adds	r3, #2
 8020466:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8020468:	89fb      	ldrh	r3, [r7, #14]
 802046a:	0a1b      	lsrs	r3, r3, #8
 802046c:	b29b      	uxth	r3, r3
 802046e:	b2db      	uxtb	r3, r3
 8020470:	4619      	mov	r1, r3
 8020472:	20f4      	movs	r0, #244	@ 0xf4
 8020474:	f000 f93e 	bl	80206f4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8020478:	89fb      	ldrh	r3, [r7, #14]
 802047a:	b2db      	uxtb	r3, r3
 802047c:	4619      	mov	r1, r3
 802047e:	20f5      	movs	r0, #245	@ 0xf5
 8020480:	f000 f938 	bl	80206f4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8020484:	78fb      	ldrb	r3, [r7, #3]
 8020486:	3301      	adds	r3, #1
 8020488:	b2db      	uxtb	r3, r3
 802048a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 802048e:	4619      	mov	r1, r3
 8020490:	480c      	ldr	r0, [pc, #48]	@ (80204c4 <RadioSend+0x1f8>)
 8020492:	f001 f9ab 	bl	80217ec <SUBGRF_SendPayload>
            break;
 8020496:	e000      	b.n	802049a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8020498:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 802049a:	4b07      	ldr	r3, [pc, #28]	@ (80204b8 <RadioSend+0x1ec>)
 802049c:	685b      	ldr	r3, [r3, #4]
 802049e:	4619      	mov	r1, r3
 80204a0:	4809      	ldr	r0, [pc, #36]	@ (80204c8 <RadioSend+0x1fc>)
 80204a2:	f004 f8d3 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80204a6:	4808      	ldr	r0, [pc, #32]	@ (80204c8 <RadioSend+0x1fc>)
 80204a8:	f003 fff2 	bl	8024490 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80204ac:	2300      	movs	r3, #0
}
 80204ae:	4618      	mov	r0, r3
 80204b0:	3710      	adds	r7, #16
 80204b2:	46bd      	mov	sp, r7
 80204b4:	bd80      	pop	{r7, pc}
 80204b6:	bf00      	nop
 80204b8:	2000212c 	.word	0x2000212c
 80204bc:	2000213a 	.word	0x2000213a
 80204c0:	08028c84 	.word	0x08028c84
 80204c4:	20002028 	.word	0x20002028
 80204c8:	20002188 	.word	0x20002188

080204cc <RadioSleep>:

static void RadioSleep( void )
{
 80204cc:	b580      	push	{r7, lr}
 80204ce:	b082      	sub	sp, #8
 80204d0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80204d2:	2300      	movs	r3, #0
 80204d4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80204d6:	793b      	ldrb	r3, [r7, #4]
 80204d8:	f043 0304 	orr.w	r3, r3, #4
 80204dc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80204de:	7938      	ldrb	r0, [r7, #4]
 80204e0:	f001 fa60 	bl	80219a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80204e4:	2002      	movs	r0, #2
 80204e6:	f7e1 ff03 	bl	80022f0 <HAL_Delay>
}
 80204ea:	bf00      	nop
 80204ec:	3708      	adds	r7, #8
 80204ee:	46bd      	mov	sp, r7
 80204f0:	bd80      	pop	{r7, pc}

080204f2 <RadioStandby>:

static void RadioStandby( void )
{
 80204f2:	b580      	push	{r7, lr}
 80204f4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80204f6:	2000      	movs	r0, #0
 80204f8:	f001 fa86 	bl	8021a08 <SUBGRF_SetStandby>
}
 80204fc:	bf00      	nop
 80204fe:	bd80      	pop	{r7, pc}

08020500 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8020500:	b580      	push	{r7, lr}
 8020502:	b082      	sub	sp, #8
 8020504:	af00      	add	r7, sp, #0
 8020506:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8020508:	f002 faef 	bl	8022aea <RFW_Is_Init>
 802050c:	4603      	mov	r3, r0
 802050e:	2b01      	cmp	r3, #1
 8020510:	d102      	bne.n	8020518 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8020512:	f002 fb12 	bl	8022b3a <RFW_ReceiveInit>
 8020516:	e007      	b.n	8020528 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8020518:	2300      	movs	r3, #0
 802051a:	2200      	movs	r2, #0
 802051c:	f240 2162 	movw	r1, #610	@ 0x262
 8020520:	f240 2062 	movw	r0, #610	@ 0x262
 8020524:	f001 fc44 	bl	8021db0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	2b00      	cmp	r3, #0
 802052c:	d006      	beq.n	802053c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 802052e:	6879      	ldr	r1, [r7, #4]
 8020530:	4811      	ldr	r0, [pc, #68]	@ (8020578 <RadioRx+0x78>)
 8020532:	f004 f88b 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8020536:	4810      	ldr	r0, [pc, #64]	@ (8020578 <RadioRx+0x78>)
 8020538:	f003 ffaa 	bl	8024490 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 802053c:	4b0f      	ldr	r3, [pc, #60]	@ (802057c <RadioRx+0x7c>)
 802053e:	2200      	movs	r2, #0
 8020540:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8020542:	4b0e      	ldr	r3, [pc, #56]	@ (802057c <RadioRx+0x7c>)
 8020544:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8020548:	2100      	movs	r1, #0
 802054a:	4618      	mov	r0, r3
 802054c:	f002 f8d4 	bl	80226f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8020550:	4b0a      	ldr	r3, [pc, #40]	@ (802057c <RadioRx+0x7c>)
 8020552:	785b      	ldrb	r3, [r3, #1]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d004      	beq.n	8020562 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8020558:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 802055c:	f001 fa90 	bl	8021a80 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8020560:	e005      	b.n	802056e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8020562:	4b06      	ldr	r3, [pc, #24]	@ (802057c <RadioRx+0x7c>)
 8020564:	689b      	ldr	r3, [r3, #8]
 8020566:	019b      	lsls	r3, r3, #6
 8020568:	4618      	mov	r0, r3
 802056a:	f001 fa89 	bl	8021a80 <SUBGRF_SetRx>
}
 802056e:	bf00      	nop
 8020570:	3708      	adds	r7, #8
 8020572:	46bd      	mov	sp, r7
 8020574:	bd80      	pop	{r7, pc}
 8020576:	bf00      	nop
 8020578:	200021a0 	.word	0x200021a0
 802057c:	2000212c 	.word	0x2000212c

08020580 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8020580:	b580      	push	{r7, lr}
 8020582:	b082      	sub	sp, #8
 8020584:	af00      	add	r7, sp, #0
 8020586:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8020588:	f002 faaf 	bl	8022aea <RFW_Is_Init>
 802058c:	4603      	mov	r3, r0
 802058e:	2b01      	cmp	r3, #1
 8020590:	d102      	bne.n	8020598 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8020592:	f002 fad2 	bl	8022b3a <RFW_ReceiveInit>
 8020596:	e007      	b.n	80205a8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8020598:	2300      	movs	r3, #0
 802059a:	2200      	movs	r2, #0
 802059c:	f240 2162 	movw	r1, #610	@ 0x262
 80205a0:	f240 2062 	movw	r0, #610	@ 0x262
 80205a4:	f001 fc04 	bl	8021db0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d006      	beq.n	80205bc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80205ae:	6879      	ldr	r1, [r7, #4]
 80205b0:	4811      	ldr	r0, [pc, #68]	@ (80205f8 <RadioRxBoosted+0x78>)
 80205b2:	f004 f84b 	bl	802464c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80205b6:	4810      	ldr	r0, [pc, #64]	@ (80205f8 <RadioRxBoosted+0x78>)
 80205b8:	f003 ff6a 	bl	8024490 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80205bc:	4b0f      	ldr	r3, [pc, #60]	@ (80205fc <RadioRxBoosted+0x7c>)
 80205be:	2200      	movs	r2, #0
 80205c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80205c2:	4b0e      	ldr	r3, [pc, #56]	@ (80205fc <RadioRxBoosted+0x7c>)
 80205c4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80205c8:	2100      	movs	r1, #0
 80205ca:	4618      	mov	r0, r3
 80205cc:	f002 f894 	bl	80226f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80205d0:	4b0a      	ldr	r3, [pc, #40]	@ (80205fc <RadioRxBoosted+0x7c>)
 80205d2:	785b      	ldrb	r3, [r3, #1]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d004      	beq.n	80205e2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80205d8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80205dc:	f001 fa70 	bl	8021ac0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80205e0:	e005      	b.n	80205ee <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80205e2:	4b06      	ldr	r3, [pc, #24]	@ (80205fc <RadioRxBoosted+0x7c>)
 80205e4:	689b      	ldr	r3, [r3, #8]
 80205e6:	019b      	lsls	r3, r3, #6
 80205e8:	4618      	mov	r0, r3
 80205ea:	f001 fa69 	bl	8021ac0 <SUBGRF_SetRxBoosted>
}
 80205ee:	bf00      	nop
 80205f0:	3708      	adds	r7, #8
 80205f2:	46bd      	mov	sp, r7
 80205f4:	bd80      	pop	{r7, pc}
 80205f6:	bf00      	nop
 80205f8:	200021a0 	.word	0x200021a0
 80205fc:	2000212c 	.word	0x2000212c

08020600 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8020600:	b580      	push	{r7, lr}
 8020602:	b082      	sub	sp, #8
 8020604:	af00      	add	r7, sp, #0
 8020606:	6078      	str	r0, [r7, #4]
 8020608:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	005a      	lsls	r2, r3, #1
 802060e:	683b      	ldr	r3, [r7, #0]
 8020610:	4413      	add	r3, r2
 8020612:	4a0c      	ldr	r2, [pc, #48]	@ (8020644 <RadioSetRxDutyCycle+0x44>)
 8020614:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8020616:	2300      	movs	r3, #0
 8020618:	2200      	movs	r2, #0
 802061a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802061e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8020622:	f001 fbc5 	bl	8021db0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8020626:	4b07      	ldr	r3, [pc, #28]	@ (8020644 <RadioSetRxDutyCycle+0x44>)
 8020628:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 802062c:	2100      	movs	r1, #0
 802062e:	4618      	mov	r0, r3
 8020630:	f002 f862 	bl	80226f8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8020634:	6839      	ldr	r1, [r7, #0]
 8020636:	6878      	ldr	r0, [r7, #4]
 8020638:	f001 fa66 	bl	8021b08 <SUBGRF_SetRxDutyCycle>
}
 802063c:	bf00      	nop
 802063e:	3708      	adds	r7, #8
 8020640:	46bd      	mov	sp, r7
 8020642:	bd80      	pop	{r7, pc}
 8020644:	2000212c 	.word	0x2000212c

08020648 <RadioStartCad>:

static void RadioStartCad( void )
{
 8020648:	b580      	push	{r7, lr}
 802064a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 802064c:	4b09      	ldr	r3, [pc, #36]	@ (8020674 <RadioStartCad+0x2c>)
 802064e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8020652:	2100      	movs	r1, #0
 8020654:	4618      	mov	r0, r3
 8020656:	f002 f84f 	bl	80226f8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 802065a:	2300      	movs	r3, #0
 802065c:	2200      	movs	r2, #0
 802065e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8020662:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8020666:	f001 fba3 	bl	8021db0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 802066a:	f001 fa79 	bl	8021b60 <SUBGRF_SetCad>
}
 802066e:	bf00      	nop
 8020670:	bd80      	pop	{r7, pc}
 8020672:	bf00      	nop
 8020674:	2000212c 	.word	0x2000212c

08020678 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8020678:	b580      	push	{r7, lr}
 802067a:	b084      	sub	sp, #16
 802067c:	af00      	add	r7, sp, #0
 802067e:	6078      	str	r0, [r7, #4]
 8020680:	460b      	mov	r3, r1
 8020682:	70fb      	strb	r3, [r7, #3]
 8020684:	4613      	mov	r3, r2
 8020686:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8020688:	883b      	ldrh	r3, [r7, #0]
 802068a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802068e:	fb02 f303 	mul.w	r3, r2, r3
 8020692:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8020694:	6878      	ldr	r0, [r7, #4]
 8020696:	f001 fbe7 	bl	8021e68 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 802069a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802069e:	4618      	mov	r0, r3
 80206a0:	f002 f852 	bl	8022748 <SUBGRF_SetRfTxPower>
 80206a4:	4603      	mov	r3, r0
 80206a6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80206a8:	210e      	movs	r1, #14
 80206aa:	f640 101f 	movw	r0, #2335	@ 0x91f
 80206ae:	f001 ff2f 	bl	8022510 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80206b2:	7afb      	ldrb	r3, [r7, #11]
 80206b4:	2101      	movs	r1, #1
 80206b6:	4618      	mov	r0, r3
 80206b8:	f002 f81e 	bl	80226f8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80206bc:	f001 fa5e 	bl	8021b7c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80206c0:	68f9      	ldr	r1, [r7, #12]
 80206c2:	4805      	ldr	r0, [pc, #20]	@ (80206d8 <RadioSetTxContinuousWave+0x60>)
 80206c4:	f003 ffc2 	bl	802464c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80206c8:	4803      	ldr	r0, [pc, #12]	@ (80206d8 <RadioSetTxContinuousWave+0x60>)
 80206ca:	f003 fee1 	bl	8024490 <UTIL_TIMER_Start>
}
 80206ce:	bf00      	nop
 80206d0:	3710      	adds	r7, #16
 80206d2:	46bd      	mov	sp, r7
 80206d4:	bd80      	pop	{r7, pc}
 80206d6:	bf00      	nop
 80206d8:	20002188 	.word	0x20002188

080206dc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80206dc:	b580      	push	{r7, lr}
 80206de:	b082      	sub	sp, #8
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	4603      	mov	r3, r0
 80206e4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80206e6:	f001 fe80 	bl	80223ea <SUBGRF_GetRssiInst>
 80206ea:	4603      	mov	r3, r0
}
 80206ec:	4618      	mov	r0, r3
 80206ee:	3708      	adds	r7, #8
 80206f0:	46bd      	mov	sp, r7
 80206f2:	bd80      	pop	{r7, pc}

080206f4 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	b082      	sub	sp, #8
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	4603      	mov	r3, r0
 80206fc:	460a      	mov	r2, r1
 80206fe:	80fb      	strh	r3, [r7, #6]
 8020700:	4613      	mov	r3, r2
 8020702:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8020704:	797a      	ldrb	r2, [r7, #5]
 8020706:	88fb      	ldrh	r3, [r7, #6]
 8020708:	4611      	mov	r1, r2
 802070a:	4618      	mov	r0, r3
 802070c:	f001 ff00 	bl	8022510 <SUBGRF_WriteRegister>
}
 8020710:	bf00      	nop
 8020712:	3708      	adds	r7, #8
 8020714:	46bd      	mov	sp, r7
 8020716:	bd80      	pop	{r7, pc}

08020718 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8020718:	b580      	push	{r7, lr}
 802071a:	b082      	sub	sp, #8
 802071c:	af00      	add	r7, sp, #0
 802071e:	4603      	mov	r3, r0
 8020720:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8020722:	88fb      	ldrh	r3, [r7, #6]
 8020724:	4618      	mov	r0, r3
 8020726:	f001 ff07 	bl	8022538 <SUBGRF_ReadRegister>
 802072a:	4603      	mov	r3, r0
}
 802072c:	4618      	mov	r0, r3
 802072e:	3708      	adds	r7, #8
 8020730:	46bd      	mov	sp, r7
 8020732:	bd80      	pop	{r7, pc}

08020734 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8020734:	b580      	push	{r7, lr}
 8020736:	b082      	sub	sp, #8
 8020738:	af00      	add	r7, sp, #0
 802073a:	4603      	mov	r3, r0
 802073c:	6039      	str	r1, [r7, #0]
 802073e:	80fb      	strh	r3, [r7, #6]
 8020740:	4613      	mov	r3, r2
 8020742:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8020744:	797b      	ldrb	r3, [r7, #5]
 8020746:	b29a      	uxth	r2, r3
 8020748:	88fb      	ldrh	r3, [r7, #6]
 802074a:	6839      	ldr	r1, [r7, #0]
 802074c:	4618      	mov	r0, r3
 802074e:	f001 ff07 	bl	8022560 <SUBGRF_WriteRegisters>
}
 8020752:	bf00      	nop
 8020754:	3708      	adds	r7, #8
 8020756:	46bd      	mov	sp, r7
 8020758:	bd80      	pop	{r7, pc}

0802075a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 802075a:	b580      	push	{r7, lr}
 802075c:	b082      	sub	sp, #8
 802075e:	af00      	add	r7, sp, #0
 8020760:	4603      	mov	r3, r0
 8020762:	6039      	str	r1, [r7, #0]
 8020764:	80fb      	strh	r3, [r7, #6]
 8020766:	4613      	mov	r3, r2
 8020768:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 802076a:	797b      	ldrb	r3, [r7, #5]
 802076c:	b29a      	uxth	r2, r3
 802076e:	88fb      	ldrh	r3, [r7, #6]
 8020770:	6839      	ldr	r1, [r7, #0]
 8020772:	4618      	mov	r0, r3
 8020774:	f001 ff16 	bl	80225a4 <SUBGRF_ReadRegisters>
}
 8020778:	bf00      	nop
 802077a:	3708      	adds	r7, #8
 802077c:	46bd      	mov	sp, r7
 802077e:	bd80      	pop	{r7, pc}

08020780 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b082      	sub	sp, #8
 8020784:	af00      	add	r7, sp, #0
 8020786:	4603      	mov	r3, r0
 8020788:	460a      	mov	r2, r1
 802078a:	71fb      	strb	r3, [r7, #7]
 802078c:	4613      	mov	r3, r2
 802078e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8020790:	79fb      	ldrb	r3, [r7, #7]
 8020792:	2b01      	cmp	r3, #1
 8020794:	d10a      	bne.n	80207ac <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8020796:	4a0e      	ldr	r2, [pc, #56]	@ (80207d0 <RadioSetMaxPayloadLength+0x50>)
 8020798:	79bb      	ldrb	r3, [r7, #6]
 802079a:	7013      	strb	r3, [r2, #0]
 802079c:	4b0c      	ldr	r3, [pc, #48]	@ (80207d0 <RadioSetMaxPayloadLength+0x50>)
 802079e:	781a      	ldrb	r2, [r3, #0]
 80207a0:	4b0c      	ldr	r3, [pc, #48]	@ (80207d4 <RadioSetMaxPayloadLength+0x54>)
 80207a2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80207a4:	480c      	ldr	r0, [pc, #48]	@ (80207d8 <RadioSetMaxPayloadLength+0x58>)
 80207a6:	f001 fd6b 	bl	8022280 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80207aa:	e00d      	b.n	80207c8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80207ac:	4b09      	ldr	r3, [pc, #36]	@ (80207d4 <RadioSetMaxPayloadLength+0x54>)
 80207ae:	7d5b      	ldrb	r3, [r3, #21]
 80207b0:	2b01      	cmp	r3, #1
 80207b2:	d109      	bne.n	80207c8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80207b4:	4a06      	ldr	r2, [pc, #24]	@ (80207d0 <RadioSetMaxPayloadLength+0x50>)
 80207b6:	79bb      	ldrb	r3, [r7, #6]
 80207b8:	7013      	strb	r3, [r2, #0]
 80207ba:	4b05      	ldr	r3, [pc, #20]	@ (80207d0 <RadioSetMaxPayloadLength+0x50>)
 80207bc:	781a      	ldrb	r2, [r3, #0]
 80207be:	4b05      	ldr	r3, [pc, #20]	@ (80207d4 <RadioSetMaxPayloadLength+0x54>)
 80207c0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80207c2:	4805      	ldr	r0, [pc, #20]	@ (80207d8 <RadioSetMaxPayloadLength+0x58>)
 80207c4:	f001 fd5c 	bl	8022280 <SUBGRF_SetPacketParams>
}
 80207c8:	bf00      	nop
 80207ca:	3708      	adds	r7, #8
 80207cc:	46bd      	mov	sp, r7
 80207ce:	bd80      	pop	{r7, pc}
 80207d0:	20000144 	.word	0x20000144
 80207d4:	2000212c 	.word	0x2000212c
 80207d8:	2000213a 	.word	0x2000213a

080207dc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	b082      	sub	sp, #8
 80207e0:	af00      	add	r7, sp, #0
 80207e2:	4603      	mov	r3, r0
 80207e4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80207e6:	4a13      	ldr	r2, [pc, #76]	@ (8020834 <RadioSetPublicNetwork+0x58>)
 80207e8:	79fb      	ldrb	r3, [r7, #7]
 80207ea:	7313      	strb	r3, [r2, #12]
 80207ec:	4b11      	ldr	r3, [pc, #68]	@ (8020834 <RadioSetPublicNetwork+0x58>)
 80207ee:	7b1a      	ldrb	r2, [r3, #12]
 80207f0:	4b10      	ldr	r3, [pc, #64]	@ (8020834 <RadioSetPublicNetwork+0x58>)
 80207f2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80207f4:	2001      	movs	r0, #1
 80207f6:	f7ff f813 	bl	801f820 <RadioSetModem>
    if( enable == true )
 80207fa:	79fb      	ldrb	r3, [r7, #7]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d00a      	beq.n	8020816 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8020800:	2134      	movs	r1, #52	@ 0x34
 8020802:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8020806:	f001 fe83 	bl	8022510 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 802080a:	2144      	movs	r1, #68	@ 0x44
 802080c:	f240 7041 	movw	r0, #1857	@ 0x741
 8020810:	f001 fe7e 	bl	8022510 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8020814:	e009      	b.n	802082a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8020816:	2114      	movs	r1, #20
 8020818:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 802081c:	f001 fe78 	bl	8022510 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8020820:	2124      	movs	r1, #36	@ 0x24
 8020822:	f240 7041 	movw	r0, #1857	@ 0x741
 8020826:	f001 fe73 	bl	8022510 <SUBGRF_WriteRegister>
}
 802082a:	bf00      	nop
 802082c:	3708      	adds	r7, #8
 802082e:	46bd      	mov	sp, r7
 8020830:	bd80      	pop	{r7, pc}
 8020832:	bf00      	nop
 8020834:	2000212c 	.word	0x2000212c

08020838 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8020838:	b580      	push	{r7, lr}
 802083a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 802083c:	f001 ffb8 	bl	80227b0 <SUBGRF_GetRadioWakeUpTime>
 8020840:	4603      	mov	r3, r0
 8020842:	3303      	adds	r3, #3
}
 8020844:	4618      	mov	r0, r3
 8020846:	bd80      	pop	{r7, pc}

08020848 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8020848:	b580      	push	{r7, lr}
 802084a:	b082      	sub	sp, #8
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8020850:	f000 f80e 	bl	8020870 <RadioOnTxTimeoutProcess>
}
 8020854:	bf00      	nop
 8020856:	3708      	adds	r7, #8
 8020858:	46bd      	mov	sp, r7
 802085a:	bd80      	pop	{r7, pc}

0802085c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 802085c:	b580      	push	{r7, lr}
 802085e:	b082      	sub	sp, #8
 8020860:	af00      	add	r7, sp, #0
 8020862:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8020864:	f000 f818 	bl	8020898 <RadioOnRxTimeoutProcess>
}
 8020868:	bf00      	nop
 802086a:	3708      	adds	r7, #8
 802086c:	46bd      	mov	sp, r7
 802086e:	bd80      	pop	{r7, pc}

08020870 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8020870:	b580      	push	{r7, lr}
 8020872:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8020874:	4b07      	ldr	r3, [pc, #28]	@ (8020894 <RadioOnTxTimeoutProcess+0x24>)
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	2b00      	cmp	r3, #0
 802087a:	d008      	beq.n	802088e <RadioOnTxTimeoutProcess+0x1e>
 802087c:	4b05      	ldr	r3, [pc, #20]	@ (8020894 <RadioOnTxTimeoutProcess+0x24>)
 802087e:	681b      	ldr	r3, [r3, #0]
 8020880:	685b      	ldr	r3, [r3, #4]
 8020882:	2b00      	cmp	r3, #0
 8020884:	d003      	beq.n	802088e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8020886:	4b03      	ldr	r3, [pc, #12]	@ (8020894 <RadioOnTxTimeoutProcess+0x24>)
 8020888:	681b      	ldr	r3, [r3, #0]
 802088a:	685b      	ldr	r3, [r3, #4]
 802088c:	4798      	blx	r3
    }
}
 802088e:	bf00      	nop
 8020890:	bd80      	pop	{r7, pc}
 8020892:	bf00      	nop
 8020894:	20002128 	.word	0x20002128

08020898 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8020898:	b580      	push	{r7, lr}
 802089a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 802089c:	4b07      	ldr	r3, [pc, #28]	@ (80208bc <RadioOnRxTimeoutProcess+0x24>)
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d008      	beq.n	80208b6 <RadioOnRxTimeoutProcess+0x1e>
 80208a4:	4b05      	ldr	r3, [pc, #20]	@ (80208bc <RadioOnRxTimeoutProcess+0x24>)
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	68db      	ldr	r3, [r3, #12]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d003      	beq.n	80208b6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80208ae:	4b03      	ldr	r3, [pc, #12]	@ (80208bc <RadioOnRxTimeoutProcess+0x24>)
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	68db      	ldr	r3, [r3, #12]
 80208b4:	4798      	blx	r3
    }
}
 80208b6:	bf00      	nop
 80208b8:	bd80      	pop	{r7, pc}
 80208ba:	bf00      	nop
 80208bc:	20002128 	.word	0x20002128

080208c0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b082      	sub	sp, #8
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	4603      	mov	r3, r0
 80208c8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80208ca:	4a05      	ldr	r2, [pc, #20]	@ (80208e0 <RadioOnDioIrq+0x20>)
 80208cc:	88fb      	ldrh	r3, [r7, #6]
 80208ce:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80208d2:	f000 f807 	bl	80208e4 <RadioIrqProcess>
}
 80208d6:	bf00      	nop
 80208d8:	3708      	adds	r7, #8
 80208da:	46bd      	mov	sp, r7
 80208dc:	bd80      	pop	{r7, pc}
 80208de:	bf00      	nop
 80208e0:	2000212c 	.word	0x2000212c

080208e4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80208e4:	b5b0      	push	{r4, r5, r7, lr}
 80208e6:	b082      	sub	sp, #8
 80208e8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80208ea:	2300      	movs	r3, #0
 80208ec:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80208ee:	2300      	movs	r3, #0
 80208f0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80208f2:	4ba8      	ldr	r3, [pc, #672]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 80208f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80208f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80208fc:	f000 810d 	beq.w	8020b1a <RadioIrqProcess+0x236>
 8020900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020904:	f300 81e8 	bgt.w	8020cd8 <RadioIrqProcess+0x3f4>
 8020908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802090c:	f000 80f1 	beq.w	8020af2 <RadioIrqProcess+0x20e>
 8020910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020914:	f300 81e0 	bgt.w	8020cd8 <RadioIrqProcess+0x3f4>
 8020918:	2b80      	cmp	r3, #128	@ 0x80
 802091a:	f000 80d6 	beq.w	8020aca <RadioIrqProcess+0x1e6>
 802091e:	2b80      	cmp	r3, #128	@ 0x80
 8020920:	f300 81da 	bgt.w	8020cd8 <RadioIrqProcess+0x3f4>
 8020924:	2b20      	cmp	r3, #32
 8020926:	dc49      	bgt.n	80209bc <RadioIrqProcess+0xd8>
 8020928:	2b00      	cmp	r3, #0
 802092a:	f340 81d5 	ble.w	8020cd8 <RadioIrqProcess+0x3f4>
 802092e:	3b01      	subs	r3, #1
 8020930:	2b1f      	cmp	r3, #31
 8020932:	f200 81d1 	bhi.w	8020cd8 <RadioIrqProcess+0x3f4>
 8020936:	a201      	add	r2, pc, #4	@ (adr r2, 802093c <RadioIrqProcess+0x58>)
 8020938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802093c:	080209c5 	.word	0x080209c5
 8020940:	080209ff 	.word	0x080209ff
 8020944:	08020cd9 	.word	0x08020cd9
 8020948:	08020bb5 	.word	0x08020bb5
 802094c:	08020cd9 	.word	0x08020cd9
 8020950:	08020cd9 	.word	0x08020cd9
 8020954:	08020cd9 	.word	0x08020cd9
 8020958:	08020c31 	.word	0x08020c31
 802095c:	08020cd9 	.word	0x08020cd9
 8020960:	08020cd9 	.word	0x08020cd9
 8020964:	08020cd9 	.word	0x08020cd9
 8020968:	08020cd9 	.word	0x08020cd9
 802096c:	08020cd9 	.word	0x08020cd9
 8020970:	08020cd9 	.word	0x08020cd9
 8020974:	08020cd9 	.word	0x08020cd9
 8020978:	08020c4d 	.word	0x08020c4d
 802097c:	08020cd9 	.word	0x08020cd9
 8020980:	08020cd9 	.word	0x08020cd9
 8020984:	08020cd9 	.word	0x08020cd9
 8020988:	08020cd9 	.word	0x08020cd9
 802098c:	08020cd9 	.word	0x08020cd9
 8020990:	08020cd9 	.word	0x08020cd9
 8020994:	08020cd9 	.word	0x08020cd9
 8020998:	08020cd9 	.word	0x08020cd9
 802099c:	08020cd9 	.word	0x08020cd9
 80209a0:	08020cd9 	.word	0x08020cd9
 80209a4:	08020cd9 	.word	0x08020cd9
 80209a8:	08020cd9 	.word	0x08020cd9
 80209ac:	08020cd9 	.word	0x08020cd9
 80209b0:	08020cd9 	.word	0x08020cd9
 80209b4:	08020cd9 	.word	0x08020cd9
 80209b8:	08020c5b 	.word	0x08020c5b
 80209bc:	2b40      	cmp	r3, #64	@ 0x40
 80209be:	f000 816d 	beq.w	8020c9c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80209c2:	e189      	b.n	8020cd8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80209c4:	4874      	ldr	r0, [pc, #464]	@ (8020b98 <RadioIrqProcess+0x2b4>)
 80209c6:	f003 fdd1 	bl	802456c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80209ca:	2000      	movs	r0, #0
 80209cc:	f001 f81c 	bl	8021a08 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80209d0:	f002 f892 	bl	8022af8 <RFW_Is_LongPacketModeEnabled>
 80209d4:	4603      	mov	r3, r0
 80209d6:	2b01      	cmp	r3, #1
 80209d8:	d101      	bne.n	80209de <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80209da:	f002 f8b6 	bl	8022b4a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80209de:	4b6f      	ldr	r3, [pc, #444]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	f000 817a 	beq.w	8020cdc <RadioIrqProcess+0x3f8>
 80209e8:	4b6c      	ldr	r3, [pc, #432]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	f000 8174 	beq.w	8020cdc <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80209f4:	4b69      	ldr	r3, [pc, #420]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	4798      	blx	r3
        break;
 80209fc:	e16e      	b.n	8020cdc <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80209fe:	4868      	ldr	r0, [pc, #416]	@ (8020ba0 <RadioIrqProcess+0x2bc>)
 8020a00:	f003 fdb4 	bl	802456c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8020a04:	4b63      	ldr	r3, [pc, #396]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020a06:	785b      	ldrb	r3, [r3, #1]
 8020a08:	f083 0301 	eor.w	r3, r3, #1
 8020a0c:	b2db      	uxtb	r3, r3
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d014      	beq.n	8020a3c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8020a12:	2000      	movs	r0, #0
 8020a14:	f000 fff8 	bl	8021a08 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8020a18:	2100      	movs	r1, #0
 8020a1a:	f640 1002 	movw	r0, #2306	@ 0x902
 8020a1e:	f001 fd77 	bl	8022510 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8020a22:	f640 1044 	movw	r0, #2372	@ 0x944
 8020a26:	f001 fd87 	bl	8022538 <SUBGRF_ReadRegister>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	f043 0302 	orr.w	r3, r3, #2
 8020a30:	b2db      	uxtb	r3, r3
 8020a32:	4619      	mov	r1, r3
 8020a34:	f640 1044 	movw	r0, #2372	@ 0x944
 8020a38:	f001 fd6a 	bl	8022510 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8020a3c:	1dfb      	adds	r3, r7, #7
 8020a3e:	22ff      	movs	r2, #255	@ 0xff
 8020a40:	4619      	mov	r1, r3
 8020a42:	4858      	ldr	r0, [pc, #352]	@ (8020ba4 <RadioIrqProcess+0x2c0>)
 8020a44:	f000 feb0 	bl	80217a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8020a48:	4857      	ldr	r0, [pc, #348]	@ (8020ba8 <RadioIrqProcess+0x2c4>)
 8020a4a:	f001 fd0f 	bl	802246c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8020a4e:	4b53      	ldr	r3, [pc, #332]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	f000 8144 	beq.w	8020ce0 <RadioIrqProcess+0x3fc>
 8020a58:	4b50      	ldr	r3, [pc, #320]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	689b      	ldr	r3, [r3, #8]
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	f000 813e 	beq.w	8020ce0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8020a64:	4b4b      	ldr	r3, [pc, #300]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020a66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8020a6a:	2b01      	cmp	r3, #1
 8020a6c:	d10e      	bne.n	8020a8c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8020a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	689c      	ldr	r4, [r3, #8]
 8020a74:	79fb      	ldrb	r3, [r7, #7]
 8020a76:	4619      	mov	r1, r3
 8020a78:	4b46      	ldr	r3, [pc, #280]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020a7a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8020a7e:	461a      	mov	r2, r3
 8020a80:	4b44      	ldr	r3, [pc, #272]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020a82:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8020a86:	4847      	ldr	r0, [pc, #284]	@ (8020ba4 <RadioIrqProcess+0x2c0>)
 8020a88:	47a0      	blx	r4
                break;
 8020a8a:	e01d      	b.n	8020ac8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8020a8c:	4b41      	ldr	r3, [pc, #260]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020a90:	463a      	mov	r2, r7
 8020a92:	4611      	mov	r1, r2
 8020a94:	4618      	mov	r0, r3
 8020a96:	f001 ff7d 	bl	8022994 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8020a9a:	4b40      	ldr	r3, [pc, #256]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	689c      	ldr	r4, [r3, #8]
 8020aa0:	79fb      	ldrb	r3, [r7, #7]
 8020aa2:	4619      	mov	r1, r3
 8020aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8020b94 <RadioIrqProcess+0x2b0>)
 8020aa6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8020aaa:	4618      	mov	r0, r3
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8020ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8020bac <RadioIrqProcess+0x2c8>)
 8020ab4:	fb82 5203 	smull	r5, r2, r2, r3
 8020ab8:	1192      	asrs	r2, r2, #6
 8020aba:	17db      	asrs	r3, r3, #31
 8020abc:	1ad3      	subs	r3, r2, r3
 8020abe:	b25b      	sxtb	r3, r3
 8020ac0:	4602      	mov	r2, r0
 8020ac2:	4838      	ldr	r0, [pc, #224]	@ (8020ba4 <RadioIrqProcess+0x2c0>)
 8020ac4:	47a0      	blx	r4
                break;
 8020ac6:	bf00      	nop
        break;
 8020ac8:	e10a      	b.n	8020ce0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8020aca:	2000      	movs	r0, #0
 8020acc:	f000 ff9c 	bl	8021a08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8020ad0:	4b32      	ldr	r3, [pc, #200]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	f000 8105 	beq.w	8020ce4 <RadioIrqProcess+0x400>
 8020ada:	4b30      	ldr	r3, [pc, #192]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	699b      	ldr	r3, [r3, #24]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	f000 80ff 	beq.w	8020ce4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8020ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	699b      	ldr	r3, [r3, #24]
 8020aec:	2000      	movs	r0, #0
 8020aee:	4798      	blx	r3
        break;
 8020af0:	e0f8      	b.n	8020ce4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8020af2:	2000      	movs	r0, #0
 8020af4:	f000 ff88 	bl	8021a08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8020af8:	4b28      	ldr	r3, [pc, #160]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	f000 80f3 	beq.w	8020ce8 <RadioIrqProcess+0x404>
 8020b02:	4b26      	ldr	r3, [pc, #152]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	699b      	ldr	r3, [r3, #24]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f000 80ed 	beq.w	8020ce8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8020b0e:	4b23      	ldr	r3, [pc, #140]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	699b      	ldr	r3, [r3, #24]
 8020b14:	2001      	movs	r0, #1
 8020b16:	4798      	blx	r3
        break;
 8020b18:	e0e6      	b.n	8020ce8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8020b1a:	4b25      	ldr	r3, [pc, #148]	@ (8020bb0 <RadioIrqProcess+0x2cc>)
 8020b1c:	2201      	movs	r2, #1
 8020b1e:	2100      	movs	r1, #0
 8020b20:	2002      	movs	r0, #2
 8020b22:	f003 ff3d 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8020b26:	f000 fe25 	bl	8021774 <SUBGRF_GetOperatingMode>
 8020b2a:	4603      	mov	r3, r0
 8020b2c:	2b04      	cmp	r3, #4
 8020b2e:	d115      	bne.n	8020b5c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8020b30:	4819      	ldr	r0, [pc, #100]	@ (8020b98 <RadioIrqProcess+0x2b4>)
 8020b32:	f003 fd1b 	bl	802456c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8020b36:	2000      	movs	r0, #0
 8020b38:	f000 ff66 	bl	8021a08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8020b3c:	4b17      	ldr	r3, [pc, #92]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	f000 80d3 	beq.w	8020cec <RadioIrqProcess+0x408>
 8020b46:	4b15      	ldr	r3, [pc, #84]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	685b      	ldr	r3, [r3, #4]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	f000 80cd 	beq.w	8020cec <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8020b52:	4b12      	ldr	r3, [pc, #72]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	685b      	ldr	r3, [r3, #4]
 8020b58:	4798      	blx	r3
        break;
 8020b5a:	e0c7      	b.n	8020cec <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8020b5c:	f000 fe0a 	bl	8021774 <SUBGRF_GetOperatingMode>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b05      	cmp	r3, #5
 8020b64:	f040 80c2 	bne.w	8020cec <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8020b68:	480d      	ldr	r0, [pc, #52]	@ (8020ba0 <RadioIrqProcess+0x2bc>)
 8020b6a:	f003 fcff 	bl	802456c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8020b6e:	2000      	movs	r0, #0
 8020b70:	f000 ff4a 	bl	8021a08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8020b74:	4b09      	ldr	r3, [pc, #36]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	f000 80b7 	beq.w	8020cec <RadioIrqProcess+0x408>
 8020b7e:	4b07      	ldr	r3, [pc, #28]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	68db      	ldr	r3, [r3, #12]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	f000 80b1 	beq.w	8020cec <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8020b8a:	4b04      	ldr	r3, [pc, #16]	@ (8020b9c <RadioIrqProcess+0x2b8>)
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	68db      	ldr	r3, [r3, #12]
 8020b90:	4798      	blx	r3
        break;
 8020b92:	e0ab      	b.n	8020cec <RadioIrqProcess+0x408>
 8020b94:	2000212c 	.word	0x2000212c
 8020b98:	20002188 	.word	0x20002188
 8020b9c:	20002128 	.word	0x20002128
 8020ba0:	200021a0 	.word	0x200021a0
 8020ba4:	20002028 	.word	0x20002028
 8020ba8:	20002150 	.word	0x20002150
 8020bac:	10624dd3 	.word	0x10624dd3
 8020bb0:	08028c9c 	.word	0x08028c9c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8020bb4:	4b54      	ldr	r3, [pc, #336]	@ (8020d08 <RadioIrqProcess+0x424>)
 8020bb6:	2201      	movs	r2, #1
 8020bb8:	2100      	movs	r1, #0
 8020bba:	2002      	movs	r0, #2
 8020bbc:	f003 fef0 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8020bc0:	4b52      	ldr	r3, [pc, #328]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	f000 8093 	beq.w	8020cf0 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8020bca:	4a51      	ldr	r2, [pc, #324]	@ (8020d10 <RadioIrqProcess+0x42c>)
 8020bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020bd0:	0c1b      	lsrs	r3, r3, #16
 8020bd2:	b2db      	uxtb	r3, r3
 8020bd4:	4619      	mov	r1, r3
 8020bd6:	f640 1003 	movw	r0, #2307	@ 0x903
 8020bda:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8020bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8020d10 <RadioIrqProcess+0x42c>)
 8020bde:	4b4b      	ldr	r3, [pc, #300]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020be2:	0a1b      	lsrs	r3, r3, #8
 8020be4:	b2db      	uxtb	r3, r3
 8020be6:	4619      	mov	r1, r3
 8020be8:	f640 1004 	movw	r0, #2308	@ 0x904
 8020bec:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8020bee:	4a48      	ldr	r2, [pc, #288]	@ (8020d10 <RadioIrqProcess+0x42c>)
 8020bf0:	4b46      	ldr	r3, [pc, #280]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020bf4:	b2db      	uxtb	r3, r3
 8020bf6:	4619      	mov	r1, r3
 8020bf8:	f640 1005 	movw	r0, #2309	@ 0x905
 8020bfc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8020bfe:	4c44      	ldr	r4, [pc, #272]	@ (8020d10 <RadioIrqProcess+0x42c>)
 8020c00:	4b44      	ldr	r3, [pc, #272]	@ (8020d14 <RadioIrqProcess+0x430>)
 8020c02:	f640 1002 	movw	r0, #2306	@ 0x902
 8020c06:	4798      	blx	r3
 8020c08:	4603      	mov	r3, r0
 8020c0a:	f043 0301 	orr.w	r3, r3, #1
 8020c0e:	b2db      	uxtb	r3, r3
 8020c10:	4619      	mov	r1, r3
 8020c12:	f640 1002 	movw	r0, #2306	@ 0x902
 8020c16:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8020c18:	4b3c      	ldr	r3, [pc, #240]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8020c1e:	2300      	movs	r3, #0
 8020c20:	2200      	movs	r2, #0
 8020c22:	f240 2162 	movw	r1, #610	@ 0x262
 8020c26:	f240 2062 	movw	r0, #610	@ 0x262
 8020c2a:	f001 f8c1 	bl	8021db0 <SUBGRF_SetDioIrqParams>
        break;
 8020c2e:	e05f      	b.n	8020cf0 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8020c30:	4b39      	ldr	r3, [pc, #228]	@ (8020d18 <RadioIrqProcess+0x434>)
 8020c32:	2201      	movs	r2, #1
 8020c34:	2100      	movs	r1, #0
 8020c36:	2002      	movs	r0, #2
 8020c38:	f003 feb2 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8020c3c:	f001 ff55 	bl	8022aea <RFW_Is_Init>
 8020c40:	4603      	mov	r3, r0
 8020c42:	2b01      	cmp	r3, #1
 8020c44:	d156      	bne.n	8020cf4 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8020c46:	f001 ff86 	bl	8022b56 <RFW_ReceivePayload>
        break;
 8020c4a:	e053      	b.n	8020cf4 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8020c4c:	4b33      	ldr	r3, [pc, #204]	@ (8020d1c <RadioIrqProcess+0x438>)
 8020c4e:	2201      	movs	r2, #1
 8020c50:	2100      	movs	r1, #0
 8020c52:	2002      	movs	r0, #2
 8020c54:	f003 fea4 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8020c58:	e051      	b.n	8020cfe <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8020c5a:	4831      	ldr	r0, [pc, #196]	@ (8020d20 <RadioIrqProcess+0x43c>)
 8020c5c:	f003 fc86 	bl	802456c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8020c60:	4b2a      	ldr	r3, [pc, #168]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020c62:	785b      	ldrb	r3, [r3, #1]
 8020c64:	f083 0301 	eor.w	r3, r3, #1
 8020c68:	b2db      	uxtb	r3, r3
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	d002      	beq.n	8020c74 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8020c6e:	2000      	movs	r0, #0
 8020c70:	f000 feca 	bl	8021a08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8020c74:	4b2b      	ldr	r3, [pc, #172]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d03d      	beq.n	8020cf8 <RadioIrqProcess+0x414>
 8020c7c:	4b29      	ldr	r3, [pc, #164]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	68db      	ldr	r3, [r3, #12]
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d038      	beq.n	8020cf8 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8020c86:	4b27      	ldr	r3, [pc, #156]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	68db      	ldr	r3, [r3, #12]
 8020c8c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8020c8e:	4b26      	ldr	r3, [pc, #152]	@ (8020d28 <RadioIrqProcess+0x444>)
 8020c90:	2201      	movs	r2, #1
 8020c92:	2100      	movs	r1, #0
 8020c94:	2002      	movs	r0, #2
 8020c96:	f003 fe83 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8020c9a:	e02d      	b.n	8020cf8 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8020c9c:	4b23      	ldr	r3, [pc, #140]	@ (8020d2c <RadioIrqProcess+0x448>)
 8020c9e:	2201      	movs	r2, #1
 8020ca0:	2100      	movs	r1, #0
 8020ca2:	2002      	movs	r0, #2
 8020ca4:	f003 fe7c 	bl	80249a0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8020ca8:	4b18      	ldr	r3, [pc, #96]	@ (8020d0c <RadioIrqProcess+0x428>)
 8020caa:	785b      	ldrb	r3, [r3, #1]
 8020cac:	f083 0301 	eor.w	r3, r3, #1
 8020cb0:	b2db      	uxtb	r3, r3
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d002      	beq.n	8020cbc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8020cb6:	2000      	movs	r0, #0
 8020cb8:	f000 fea6 	bl	8021a08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8020cbc:	4b19      	ldr	r3, [pc, #100]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d01b      	beq.n	8020cfc <RadioIrqProcess+0x418>
 8020cc4:	4b17      	ldr	r3, [pc, #92]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020cc6:	681b      	ldr	r3, [r3, #0]
 8020cc8:	691b      	ldr	r3, [r3, #16]
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	d016      	beq.n	8020cfc <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8020cce:	4b15      	ldr	r3, [pc, #84]	@ (8020d24 <RadioIrqProcess+0x440>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	691b      	ldr	r3, [r3, #16]
 8020cd4:	4798      	blx	r3
        break;
 8020cd6:	e011      	b.n	8020cfc <RadioIrqProcess+0x418>
        break;
 8020cd8:	bf00      	nop
 8020cda:	e010      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cdc:	bf00      	nop
 8020cde:	e00e      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020ce0:	bf00      	nop
 8020ce2:	e00c      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020ce4:	bf00      	nop
 8020ce6:	e00a      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020ce8:	bf00      	nop
 8020cea:	e008      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cec:	bf00      	nop
 8020cee:	e006      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cf0:	bf00      	nop
 8020cf2:	e004      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cf4:	bf00      	nop
 8020cf6:	e002      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cf8:	bf00      	nop
 8020cfa:	e000      	b.n	8020cfe <RadioIrqProcess+0x41a>
        break;
 8020cfc:	bf00      	nop
    }
}
 8020cfe:	bf00      	nop
 8020d00:	3708      	adds	r7, #8
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bdb0      	pop	{r4, r5, r7, pc}
 8020d06:	bf00      	nop
 8020d08:	08028cb0 	.word	0x08028cb0
 8020d0c:	2000212c 	.word	0x2000212c
 8020d10:	080206f5 	.word	0x080206f5
 8020d14:	08020719 	.word	0x08020719
 8020d18:	08028cbc 	.word	0x08028cbc
 8020d1c:	08028cc8 	.word	0x08028cc8
 8020d20:	200021a0 	.word	0x200021a0
 8020d24:	20002128 	.word	0x20002128
 8020d28:	08028cd4 	.word	0x08028cd4
 8020d2c:	08028ce0 	.word	0x08028ce0

08020d30 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8020d30:	b580      	push	{r7, lr}
 8020d32:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8020d34:	4b09      	ldr	r3, [pc, #36]	@ (8020d5c <RadioTxPrbs+0x2c>)
 8020d36:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8020d3a:	2101      	movs	r1, #1
 8020d3c:	4618      	mov	r0, r3
 8020d3e:	f001 fcdb 	bl	80226f8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8020d42:	4b07      	ldr	r3, [pc, #28]	@ (8020d60 <RadioTxPrbs+0x30>)
 8020d44:	212d      	movs	r1, #45	@ 0x2d
 8020d46:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8020d4a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8020d4c:	f000 ff1f 	bl	8021b8e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8020d50:	4804      	ldr	r0, [pc, #16]	@ (8020d64 <RadioTxPrbs+0x34>)
 8020d52:	f000 fe75 	bl	8021a40 <SUBGRF_SetTx>
}
 8020d56:	bf00      	nop
 8020d58:	bd80      	pop	{r7, pc}
 8020d5a:	bf00      	nop
 8020d5c:	2000212c 	.word	0x2000212c
 8020d60:	080206f5 	.word	0x080206f5
 8020d64:	000fffff 	.word	0x000fffff

08020d68 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8020d68:	b580      	push	{r7, lr}
 8020d6a:	b084      	sub	sp, #16
 8020d6c:	af00      	add	r7, sp, #0
 8020d6e:	4603      	mov	r3, r0
 8020d70:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8020d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d76:	4618      	mov	r0, r3
 8020d78:	f001 fce6 	bl	8022748 <SUBGRF_SetRfTxPower>
 8020d7c:	4603      	mov	r3, r0
 8020d7e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8020d80:	210e      	movs	r1, #14
 8020d82:	f640 101f 	movw	r0, #2335	@ 0x91f
 8020d86:	f001 fbc3 	bl	8022510 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8020d8a:	7bfb      	ldrb	r3, [r7, #15]
 8020d8c:	2101      	movs	r1, #1
 8020d8e:	4618      	mov	r0, r3
 8020d90:	f001 fcb2 	bl	80226f8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8020d94:	f000 fef2 	bl	8021b7c <SUBGRF_SetTxContinuousWave>
}
 8020d98:	bf00      	nop
 8020d9a:	3710      	adds	r7, #16
 8020d9c:	46bd      	mov	sp, r7
 8020d9e:	bd80      	pop	{r7, pc}

08020da0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8020da0:	b480      	push	{r7}
 8020da2:	b089      	sub	sp, #36	@ 0x24
 8020da4:	af00      	add	r7, sp, #0
 8020da6:	60f8      	str	r0, [r7, #12]
 8020da8:	60b9      	str	r1, [r7, #8]
 8020daa:	4613      	mov	r3, r2
 8020dac:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8020dae:	2300      	movs	r3, #0
 8020db0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8020db2:	2300      	movs	r3, #0
 8020db4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8020db6:	2300      	movs	r3, #0
 8020db8:	61bb      	str	r3, [r7, #24]
 8020dba:	e011      	b.n	8020de0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8020dbc:	69bb      	ldr	r3, [r7, #24]
 8020dbe:	68ba      	ldr	r2, [r7, #8]
 8020dc0:	4413      	add	r3, r2
 8020dc2:	781a      	ldrb	r2, [r3, #0]
 8020dc4:	69bb      	ldr	r3, [r7, #24]
 8020dc6:	68b9      	ldr	r1, [r7, #8]
 8020dc8:	440b      	add	r3, r1
 8020dca:	43d2      	mvns	r2, r2
 8020dcc:	b2d2      	uxtb	r2, r2
 8020dce:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8020dd0:	69bb      	ldr	r3, [r7, #24]
 8020dd2:	68fa      	ldr	r2, [r7, #12]
 8020dd4:	4413      	add	r3, r2
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8020dda:	69bb      	ldr	r3, [r7, #24]
 8020ddc:	3301      	adds	r3, #1
 8020dde:	61bb      	str	r3, [r7, #24]
 8020de0:	79fb      	ldrb	r3, [r7, #7]
 8020de2:	69ba      	ldr	r2, [r7, #24]
 8020de4:	429a      	cmp	r2, r3
 8020de6:	dbe9      	blt.n	8020dbc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8020de8:	2300      	movs	r3, #0
 8020dea:	61bb      	str	r3, [r7, #24]
 8020dec:	e049      	b.n	8020e82 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8020dee:	69bb      	ldr	r3, [r7, #24]
 8020df0:	425a      	negs	r2, r3
 8020df2:	f003 0307 	and.w	r3, r3, #7
 8020df6:	f002 0207 	and.w	r2, r2, #7
 8020dfa:	bf58      	it	pl
 8020dfc:	4253      	negpl	r3, r2
 8020dfe:	b2db      	uxtb	r3, r3
 8020e00:	f1c3 0307 	rsb	r3, r3, #7
 8020e04:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8020e06:	69bb      	ldr	r3, [r7, #24]
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	da00      	bge.n	8020e0e <payload_integration+0x6e>
 8020e0c:	3307      	adds	r3, #7
 8020e0e:	10db      	asrs	r3, r3, #3
 8020e10:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8020e12:	69bb      	ldr	r3, [r7, #24]
 8020e14:	3301      	adds	r3, #1
 8020e16:	425a      	negs	r2, r3
 8020e18:	f003 0307 	and.w	r3, r3, #7
 8020e1c:	f002 0207 	and.w	r2, r2, #7
 8020e20:	bf58      	it	pl
 8020e22:	4253      	negpl	r3, r2
 8020e24:	b2db      	uxtb	r3, r3
 8020e26:	f1c3 0307 	rsb	r3, r3, #7
 8020e2a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8020e2c:	69bb      	ldr	r3, [r7, #24]
 8020e2e:	3301      	adds	r3, #1
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	da00      	bge.n	8020e36 <payload_integration+0x96>
 8020e34:	3307      	adds	r3, #7
 8020e36:	10db      	asrs	r3, r3, #3
 8020e38:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8020e3a:	7dbb      	ldrb	r3, [r7, #22]
 8020e3c:	68ba      	ldr	r2, [r7, #8]
 8020e3e:	4413      	add	r3, r2
 8020e40:	781b      	ldrb	r3, [r3, #0]
 8020e42:	461a      	mov	r2, r3
 8020e44:	7dfb      	ldrb	r3, [r7, #23]
 8020e46:	fa42 f303 	asr.w	r3, r2, r3
 8020e4a:	b2db      	uxtb	r3, r3
 8020e4c:	f003 0301 	and.w	r3, r3, #1
 8020e50:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8020e52:	7ffa      	ldrb	r2, [r7, #31]
 8020e54:	7cfb      	ldrb	r3, [r7, #19]
 8020e56:	4053      	eors	r3, r2
 8020e58:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8020e5a:	7d3b      	ldrb	r3, [r7, #20]
 8020e5c:	68fa      	ldr	r2, [r7, #12]
 8020e5e:	4413      	add	r3, r2
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	b25a      	sxtb	r2, r3
 8020e64:	7ff9      	ldrb	r1, [r7, #31]
 8020e66:	7d7b      	ldrb	r3, [r7, #21]
 8020e68:	fa01 f303 	lsl.w	r3, r1, r3
 8020e6c:	b25b      	sxtb	r3, r3
 8020e6e:	4313      	orrs	r3, r2
 8020e70:	b259      	sxtb	r1, r3
 8020e72:	7d3b      	ldrb	r3, [r7, #20]
 8020e74:	68fa      	ldr	r2, [r7, #12]
 8020e76:	4413      	add	r3, r2
 8020e78:	b2ca      	uxtb	r2, r1
 8020e7a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8020e7c:	69bb      	ldr	r3, [r7, #24]
 8020e7e:	3301      	adds	r3, #1
 8020e80:	61bb      	str	r3, [r7, #24]
 8020e82:	79fb      	ldrb	r3, [r7, #7]
 8020e84:	00db      	lsls	r3, r3, #3
 8020e86:	69ba      	ldr	r2, [r7, #24]
 8020e88:	429a      	cmp	r2, r3
 8020e8a:	dbb0      	blt.n	8020dee <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8020e8c:	7ffb      	ldrb	r3, [r7, #31]
 8020e8e:	01db      	lsls	r3, r3, #7
 8020e90:	b25a      	sxtb	r2, r3
 8020e92:	7ffb      	ldrb	r3, [r7, #31]
 8020e94:	019b      	lsls	r3, r3, #6
 8020e96:	b25b      	sxtb	r3, r3
 8020e98:	4313      	orrs	r3, r2
 8020e9a:	b25b      	sxtb	r3, r3
 8020e9c:	7ffa      	ldrb	r2, [r7, #31]
 8020e9e:	2a00      	cmp	r2, #0
 8020ea0:	d101      	bne.n	8020ea6 <payload_integration+0x106>
 8020ea2:	2220      	movs	r2, #32
 8020ea4:	e000      	b.n	8020ea8 <payload_integration+0x108>
 8020ea6:	2200      	movs	r2, #0
 8020ea8:	4313      	orrs	r3, r2
 8020eaa:	b259      	sxtb	r1, r3
 8020eac:	79fb      	ldrb	r3, [r7, #7]
 8020eae:	68fa      	ldr	r2, [r7, #12]
 8020eb0:	4413      	add	r3, r2
 8020eb2:	b2ca      	uxtb	r2, r1
 8020eb4:	701a      	strb	r2, [r3, #0]
}
 8020eb6:	bf00      	nop
 8020eb8:	3724      	adds	r7, #36	@ 0x24
 8020eba:	46bd      	mov	sp, r7
 8020ebc:	bc80      	pop	{r7}
 8020ebe:	4770      	bx	lr

08020ec0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8020ec0:	b580      	push	{r7, lr}
 8020ec2:	b08c      	sub	sp, #48	@ 0x30
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	60b9      	str	r1, [r7, #8]
 8020ec8:	607a      	str	r2, [r7, #4]
 8020eca:	603b      	str	r3, [r7, #0]
 8020ecc:	4603      	mov	r3, r0
 8020ece:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	623b      	str	r3, [r7, #32]
 8020ed8:	2300      	movs	r3, #0
 8020eda:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8020edc:	f001 fdff 	bl	8022ade <RFW_DeInit>

    if( rxContinuous != 0 )
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d001      	beq.n	8020eea <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	bf14      	ite	ne
 8020ef0:	2301      	movne	r3, #1
 8020ef2:	2300      	moveq	r3, #0
 8020ef4:	b2da      	uxtb	r2, r3
 8020ef6:	4ba3      	ldr	r3, [pc, #652]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020ef8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8020efa:	7bfb      	ldrb	r3, [r7, #15]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d003      	beq.n	8020f08 <RadioSetRxGenericConfig+0x48>
 8020f00:	2b01      	cmp	r3, #1
 8020f02:	f000 80dc 	beq.w	80210be <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8020f06:	e194      	b.n	8021232 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8020f08:	68bb      	ldr	r3, [r7, #8]
 8020f0a:	689b      	ldr	r3, [r3, #8]
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d003      	beq.n	8020f18 <RadioSetRxGenericConfig+0x58>
 8020f10:	68bb      	ldr	r3, [r7, #8]
 8020f12:	68db      	ldr	r3, [r3, #12]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d102      	bne.n	8020f1e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8020f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020f1c:	e18a      	b.n	8021234 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8020f1e:	68bb      	ldr	r3, [r7, #8]
 8020f20:	7f9b      	ldrb	r3, [r3, #30]
 8020f22:	2b08      	cmp	r3, #8
 8020f24:	d902      	bls.n	8020f2c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8020f26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020f2a:	e183      	b.n	8021234 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8020f2c:	68bb      	ldr	r3, [r7, #8]
 8020f2e:	6919      	ldr	r1, [r3, #16]
 8020f30:	68bb      	ldr	r3, [r7, #8]
 8020f32:	7f9b      	ldrb	r3, [r3, #30]
 8020f34:	461a      	mov	r2, r3
 8020f36:	f107 0320 	add.w	r3, r7, #32
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f001 fec2 	bl	8022cc4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8020f40:	68bb      	ldr	r3, [r7, #8]
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	2b00      	cmp	r3, #0
 8020f46:	bf14      	ite	ne
 8020f48:	2301      	movne	r3, #1
 8020f4a:	2300      	moveq	r3, #0
 8020f4c:	b2db      	uxtb	r3, r3
 8020f4e:	4618      	mov	r0, r3
 8020f50:	f000 fe26 	bl	8021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8020f54:	4b8b      	ldr	r3, [pc, #556]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f56:	2200      	movs	r2, #0
 8020f58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8020f5c:	68bb      	ldr	r3, [r7, #8]
 8020f5e:	689b      	ldr	r3, [r3, #8]
 8020f60:	4a88      	ldr	r2, [pc, #544]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f62:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8020f64:	68bb      	ldr	r3, [r7, #8]
 8020f66:	f893 2020 	ldrb.w	r2, [r3, #32]
 8020f6a:	4b86      	ldr	r3, [pc, #536]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8020f70:	68bb      	ldr	r3, [r7, #8]
 8020f72:	685b      	ldr	r3, [r3, #4]
 8020f74:	4618      	mov	r0, r3
 8020f76:	f001 fce5 	bl	8022944 <SUBGRF_GetFskBandwidthRegValue>
 8020f7a:	4603      	mov	r3, r0
 8020f7c:	461a      	mov	r2, r3
 8020f7e:	4b81      	ldr	r3, [pc, #516]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8020f84:	4b7f      	ldr	r3, [pc, #508]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f86:	2200      	movs	r2, #0
 8020f88:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8020f8a:	68bb      	ldr	r3, [r7, #8]
 8020f8c:	68db      	ldr	r3, [r3, #12]
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	00db      	lsls	r3, r3, #3
 8020f92:	b29a      	uxth	r2, r3
 8020f94:	4b7b      	ldr	r3, [pc, #492]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f96:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8020f98:	68bb      	ldr	r3, [r7, #8]
 8020f9a:	7fda      	ldrb	r2, [r3, #31]
 8020f9c:	4b79      	ldr	r3, [pc, #484]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020f9e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8020fa0:	68bb      	ldr	r3, [r7, #8]
 8020fa2:	7f9b      	ldrb	r3, [r3, #30]
 8020fa4:	00db      	lsls	r3, r3, #3
 8020fa6:	b2da      	uxtb	r2, r3
 8020fa8:	4b76      	ldr	r3, [pc, #472]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020faa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8020fac:	68bb      	ldr	r3, [r7, #8]
 8020fae:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8020fb2:	4b74      	ldr	r3, [pc, #464]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020fb4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8020fb6:	68bb      	ldr	r3, [r7, #8]
 8020fb8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d105      	bne.n	8020fcc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8020fc0:	68bb      	ldr	r3, [r7, #8]
 8020fc2:	695b      	ldr	r3, [r3, #20]
 8020fc4:	b2da      	uxtb	r2, r3
 8020fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020fc8:	759a      	strb	r2, [r3, #22]
 8020fca:	e00b      	b.n	8020fe4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8020fcc:	68bb      	ldr	r3, [r7, #8]
 8020fce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8020fd2:	2b02      	cmp	r3, #2
 8020fd4:	d103      	bne.n	8020fde <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8020fd6:	4b6b      	ldr	r3, [pc, #428]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020fd8:	22ff      	movs	r2, #255	@ 0xff
 8020fda:	759a      	strb	r2, [r3, #22]
 8020fdc:	e002      	b.n	8020fe4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8020fde:	4b69      	ldr	r3, [pc, #420]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8020fe0:	22ff      	movs	r2, #255	@ 0xff
 8020fe2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8020fe4:	68bb      	ldr	r3, [r7, #8]
 8020fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8020fea:	2b02      	cmp	r3, #2
 8020fec:	d004      	beq.n	8020ff8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8020fee:	68bb      	ldr	r3, [r7, #8]
 8020ff0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8020ff4:	2b02      	cmp	r3, #2
 8020ff6:	d12d      	bne.n	8021054 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8020ff8:	68bb      	ldr	r3, [r7, #8]
 8020ffa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8020ffe:	2bf1      	cmp	r3, #241	@ 0xf1
 8021000:	d00c      	beq.n	802101c <RadioSetRxGenericConfig+0x15c>
 8021002:	68bb      	ldr	r3, [r7, #8]
 8021004:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8021008:	2bf2      	cmp	r3, #242	@ 0xf2
 802100a:	d007      	beq.n	802101c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 802100c:	68bb      	ldr	r3, [r7, #8]
 802100e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8021012:	2b01      	cmp	r3, #1
 8021014:	d002      	beq.n	802101c <RadioSetRxGenericConfig+0x15c>
                return -1;
 8021016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802101a:	e10b      	b.n	8021234 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 802101c:	2300      	movs	r3, #0
 802101e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8021020:	68bb      	ldr	r3, [r7, #8]
 8021022:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8021024:	4b58      	ldr	r3, [pc, #352]	@ (8021188 <RadioSetRxGenericConfig+0x2c8>)
 8021026:	6819      	ldr	r1, [r3, #0]
 8021028:	f107 0314 	add.w	r3, r7, #20
 802102c:	4a57      	ldr	r2, [pc, #348]	@ (802118c <RadioSetRxGenericConfig+0x2cc>)
 802102e:	4618      	mov	r0, r3
 8021030:	f001 fd48 	bl	8022ac4 <RFW_Init>
 8021034:	4603      	mov	r3, r0
 8021036:	2b00      	cmp	r3, #0
 8021038:	d002      	beq.n	8021040 <RadioSetRxGenericConfig+0x180>
                return -1;
 802103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802103e:	e0f9      	b.n	8021234 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8021040:	4b50      	ldr	r3, [pc, #320]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021042:	2200      	movs	r2, #0
 8021044:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8021046:	4b4f      	ldr	r3, [pc, #316]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021048:	2201      	movs	r2, #1
 802104a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 802104c:	4b4d      	ldr	r3, [pc, #308]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 802104e:	2200      	movs	r2, #0
 8021050:	755a      	strb	r2, [r3, #21]
        {
 8021052:	e00e      	b.n	8021072 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 802105a:	4b4a      	ldr	r3, [pc, #296]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 802105c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 802105e:	68bb      	ldr	r3, [r7, #8]
 8021060:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8021064:	4b47      	ldr	r3, [pc, #284]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021066:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8021068:	68bb      	ldr	r3, [r7, #8]
 802106a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 802106e:	4b45      	ldr	r3, [pc, #276]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021070:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8021072:	f7ff fa3e 	bl	80204f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8021076:	2000      	movs	r0, #0
 8021078:	f7fe fbd2 	bl	801f820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 802107c:	4844      	ldr	r0, [pc, #272]	@ (8021190 <RadioSetRxGenericConfig+0x2d0>)
 802107e:	f001 f82d 	bl	80220dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8021082:	4844      	ldr	r0, [pc, #272]	@ (8021194 <RadioSetRxGenericConfig+0x2d4>)
 8021084:	f001 f8fc 	bl	8022280 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8021088:	f107 0320 	add.w	r3, r7, #32
 802108c:	4618      	mov	r0, r3
 802108e:	f000 fbc0 	bl	8021812 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	8b9b      	ldrh	r3, [r3, #28]
 8021096:	4618      	mov	r0, r3
 8021098:	f000 fc0a 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 802109c:	68bb      	ldr	r3, [r7, #8]
 802109e:	8b1b      	ldrh	r3, [r3, #24]
 80210a0:	4618      	mov	r0, r3
 80210a2:	f000 fbe5 	bl	8021870 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80210a6:	683b      	ldr	r3, [r7, #0]
 80210a8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80210ac:	fb03 f202 	mul.w	r2, r3, r2
 80210b0:	68bb      	ldr	r3, [r7, #8]
 80210b2:	689b      	ldr	r3, [r3, #8]
 80210b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80210b8:	4a32      	ldr	r2, [pc, #200]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 80210ba:	6093      	str	r3, [r2, #8]
        break;
 80210bc:	e0b9      	b.n	8021232 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80210be:	68bb      	ldr	r3, [r7, #8]
 80210c0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d102      	bne.n	80210cc <RadioSetRxGenericConfig+0x20c>
            return -1;
 80210c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80210ca:	e0b3      	b.n	8021234 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80210cc:	68bb      	ldr	r3, [r7, #8]
 80210ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80210d2:	2b01      	cmp	r3, #1
 80210d4:	d104      	bne.n	80210e0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80210d6:	68bb      	ldr	r3, [r7, #8]
 80210d8:	695b      	ldr	r3, [r3, #20]
 80210da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80210de:	e002      	b.n	80210e6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80210e0:	23ff      	movs	r3, #255	@ 0xff
 80210e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	bf14      	ite	ne
 80210ee:	2301      	movne	r3, #1
 80210f0:	2300      	moveq	r3, #0
 80210f2:	b2db      	uxtb	r3, r3
 80210f4:	4618      	mov	r0, r3
 80210f6:	f000 fd53 	bl	8021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80210fa:	683b      	ldr	r3, [r7, #0]
 80210fc:	b2db      	uxtb	r3, r3
 80210fe:	4618      	mov	r0, r3
 8021100:	f000 fd5d 	bl	8021bbe <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8021104:	4b1f      	ldr	r3, [pc, #124]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021106:	2201      	movs	r2, #1
 8021108:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 802110c:	68bb      	ldr	r3, [r7, #8]
 802110e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8021112:	4b1c      	ldr	r3, [pc, #112]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8021118:	68bb      	ldr	r3, [r7, #8]
 802111a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 802111e:	4b19      	ldr	r3, [pc, #100]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8021124:	68bb      	ldr	r3, [r7, #8]
 8021126:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 802112a:	4b16      	ldr	r3, [pc, #88]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 802112c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8021130:	68bb      	ldr	r3, [r7, #8]
 8021132:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8021136:	2b02      	cmp	r3, #2
 8021138:	d010      	beq.n	802115c <RadioSetRxGenericConfig+0x29c>
 802113a:	2b02      	cmp	r3, #2
 802113c:	dc2c      	bgt.n	8021198 <RadioSetRxGenericConfig+0x2d8>
 802113e:	2b00      	cmp	r3, #0
 8021140:	d002      	beq.n	8021148 <RadioSetRxGenericConfig+0x288>
 8021142:	2b01      	cmp	r3, #1
 8021144:	d005      	beq.n	8021152 <RadioSetRxGenericConfig+0x292>
            break;
 8021146:	e027      	b.n	8021198 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8021148:	4b0e      	ldr	r3, [pc, #56]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 802114a:	2200      	movs	r2, #0
 802114c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8021150:	e023      	b.n	802119a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8021152:	4b0c      	ldr	r3, [pc, #48]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021154:	2201      	movs	r2, #1
 8021156:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 802115a:	e01e      	b.n	802119a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 802115c:	68bb      	ldr	r3, [r7, #8]
 802115e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021162:	2b0b      	cmp	r3, #11
 8021164:	d004      	beq.n	8021170 <RadioSetRxGenericConfig+0x2b0>
 8021166:	68bb      	ldr	r3, [r7, #8]
 8021168:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802116c:	2b0c      	cmp	r3, #12
 802116e:	d104      	bne.n	802117a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8021170:	4b04      	ldr	r3, [pc, #16]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 8021172:	2201      	movs	r2, #1
 8021174:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8021178:	e00f      	b.n	802119a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 802117a:	4b02      	ldr	r3, [pc, #8]	@ (8021184 <RadioSetRxGenericConfig+0x2c4>)
 802117c:	2200      	movs	r2, #0
 802117e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8021182:	e00a      	b.n	802119a <RadioSetRxGenericConfig+0x2da>
 8021184:	2000212c 	.word	0x2000212c
 8021188:	20002128 	.word	0x20002128
 802118c:	200021a0 	.word	0x200021a0
 8021190:	20002164 	.word	0x20002164
 8021194:	2000213a 	.word	0x2000213a
            break;
 8021198:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 802119a:	4b28      	ldr	r3, [pc, #160]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 802119c:	2201      	movs	r2, #1
 802119e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80211a0:	68bb      	ldr	r3, [r7, #8]
 80211a2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80211a4:	4b25      	ldr	r3, [pc, #148]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80211a8:	68bb      	ldr	r3, [r7, #8]
 80211aa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80211ae:	4b23      	ldr	r3, [pc, #140]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80211b2:	4a22      	ldr	r2, [pc, #136]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80211b8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80211ba:	68bb      	ldr	r3, [r7, #8]
 80211bc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80211c0:	4b1e      	ldr	r3, [pc, #120]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211c2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80211c6:	68bb      	ldr	r3, [r7, #8]
 80211c8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80211cc:	4b1b      	ldr	r3, [pc, #108]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80211d2:	f7ff f98e 	bl	80204f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80211d6:	2001      	movs	r0, #1
 80211d8:	f7fe fb22 	bl	801f820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80211dc:	4818      	ldr	r0, [pc, #96]	@ (8021240 <RadioSetRxGenericConfig+0x380>)
 80211de:	f000 ff7d 	bl	80220dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80211e2:	4818      	ldr	r0, [pc, #96]	@ (8021244 <RadioSetRxGenericConfig+0x384>)
 80211e4:	f001 f84c 	bl	8022280 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80211e8:	4b14      	ldr	r3, [pc, #80]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 80211ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80211ee:	2b01      	cmp	r3, #1
 80211f0:	d10d      	bne.n	802120e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80211f2:	f240 7036 	movw	r0, #1846	@ 0x736
 80211f6:	f001 f99f 	bl	8022538 <SUBGRF_ReadRegister>
 80211fa:	4603      	mov	r3, r0
 80211fc:	f023 0304 	bic.w	r3, r3, #4
 8021200:	b2db      	uxtb	r3, r3
 8021202:	4619      	mov	r1, r3
 8021204:	f240 7036 	movw	r0, #1846	@ 0x736
 8021208:	f001 f982 	bl	8022510 <SUBGRF_WriteRegister>
 802120c:	e00c      	b.n	8021228 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 802120e:	f240 7036 	movw	r0, #1846	@ 0x736
 8021212:	f001 f991 	bl	8022538 <SUBGRF_ReadRegister>
 8021216:	4603      	mov	r3, r0
 8021218:	f043 0304 	orr.w	r3, r3, #4
 802121c:	b2db      	uxtb	r3, r3
 802121e:	4619      	mov	r1, r3
 8021220:	f240 7036 	movw	r0, #1846	@ 0x736
 8021224:	f001 f974 	bl	8022510 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8021228:	4b04      	ldr	r3, [pc, #16]	@ (802123c <RadioSetRxGenericConfig+0x37c>)
 802122a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802122e:	609a      	str	r2, [r3, #8]
        break;
 8021230:	bf00      	nop
    }
    return status;
 8021232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8021234:	4618      	mov	r0, r3
 8021236:	3730      	adds	r7, #48	@ 0x30
 8021238:	46bd      	mov	sp, r7
 802123a:	bd80      	pop	{r7, pc}
 802123c:	2000212c 	.word	0x2000212c
 8021240:	20002164 	.word	0x20002164
 8021244:	2000213a 	.word	0x2000213a

08021248 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b08e      	sub	sp, #56	@ 0x38
 802124c:	af00      	add	r7, sp, #0
 802124e:	60b9      	str	r1, [r7, #8]
 8021250:	607b      	str	r3, [r7, #4]
 8021252:	4603      	mov	r3, r0
 8021254:	73fb      	strb	r3, [r7, #15]
 8021256:	4613      	mov	r3, r2
 8021258:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 802125a:	2300      	movs	r3, #0
 802125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802125e:	2300      	movs	r3, #0
 8021260:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8021262:	f001 fc3c 	bl	8022ade <RFW_DeInit>
    switch( modem )
 8021266:	7bfb      	ldrb	r3, [r7, #15]
 8021268:	2b03      	cmp	r3, #3
 802126a:	f200 8204 	bhi.w	8021676 <RadioSetTxGenericConfig+0x42e>
 802126e:	a201      	add	r2, pc, #4	@ (adr r2, 8021274 <RadioSetTxGenericConfig+0x2c>)
 8021270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021274:	080213f9 	.word	0x080213f9
 8021278:	08021541 	.word	0x08021541
 802127c:	08021639 	.word	0x08021639
 8021280:	08021285 	.word	0x08021285
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8021284:	68bb      	ldr	r3, [r7, #8]
 8021286:	7c9b      	ldrb	r3, [r3, #18]
 8021288:	2b08      	cmp	r3, #8
 802128a:	d902      	bls.n	8021292 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 802128c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021290:	e206      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8021292:	68bb      	ldr	r3, [r7, #8]
 8021294:	6899      	ldr	r1, [r3, #8]
 8021296:	68bb      	ldr	r3, [r7, #8]
 8021298:	7c9b      	ldrb	r3, [r3, #18]
 802129a:	461a      	mov	r2, r3
 802129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80212a0:	4618      	mov	r0, r3
 80212a2:	f001 fd0f 	bl	8022cc4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80212a6:	68bb      	ldr	r3, [r7, #8]
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d102      	bne.n	80212b4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80212ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80212b2:	e1f5      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80212b4:	68bb      	ldr	r3, [r7, #8]
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80212bc:	4293      	cmp	r3, r2
 80212be:	d813      	bhi.n	80212e8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80212c0:	2302      	movs	r3, #2
 80212c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80212c6:	4b99      	ldr	r3, [pc, #612]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212c8:	2203      	movs	r2, #3
 80212ca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80212cc:	4b97      	ldr	r3, [pc, #604]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212ce:	2203      	movs	r2, #3
 80212d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80212d4:	68bb      	ldr	r3, [r7, #8]
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	4a94      	ldr	r2, [pc, #592]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212da:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80212dc:	68bb      	ldr	r3, [r7, #8]
 80212de:	7cda      	ldrb	r2, [r3, #19]
 80212e0:	4b92      	ldr	r3, [pc, #584]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80212e6:	e017      	b.n	8021318 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80212e8:	2300      	movs	r3, #0
 80212ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80212ee:	4b8f      	ldr	r3, [pc, #572]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212f0:	2200      	movs	r2, #0
 80212f2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80212f4:	4b8d      	ldr	r3, [pc, #564]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80212f6:	2200      	movs	r2, #0
 80212f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80212fc:	68bb      	ldr	r3, [r7, #8]
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	4a8a      	ldr	r2, [pc, #552]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021302:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8021304:	68bb      	ldr	r3, [r7, #8]
 8021306:	7cda      	ldrb	r2, [r3, #19]
 8021308:	4b88      	ldr	r3, [pc, #544]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802130a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 802130e:	68bb      	ldr	r3, [r7, #8]
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	089b      	lsrs	r3, r3, #2
 8021314:	4a85      	ldr	r2, [pc, #532]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021316:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8021318:	68bb      	ldr	r3, [r7, #8]
 802131a:	685b      	ldr	r3, [r3, #4]
 802131c:	b29b      	uxth	r3, r3
 802131e:	00db      	lsls	r3, r3, #3
 8021320:	b29a      	uxth	r2, r3
 8021322:	4b82      	ldr	r3, [pc, #520]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021324:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8021326:	4b81      	ldr	r3, [pc, #516]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021328:	2204      	movs	r2, #4
 802132a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 802132c:	68bb      	ldr	r3, [r7, #8]
 802132e:	7c9b      	ldrb	r3, [r3, #18]
 8021330:	00db      	lsls	r3, r3, #3
 8021332:	b2da      	uxtb	r2, r3
 8021334:	4b7d      	ldr	r3, [pc, #500]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021336:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8021338:	4b7c      	ldr	r3, [pc, #496]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802133a:	2200      	movs	r2, #0
 802133c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 802133e:	68bb      	ldr	r3, [r7, #8]
 8021340:	7d9b      	ldrb	r3, [r3, #22]
 8021342:	2b02      	cmp	r3, #2
 8021344:	d003      	beq.n	802134e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8021346:	68bb      	ldr	r3, [r7, #8]
 8021348:	7d1b      	ldrb	r3, [r3, #20]
 802134a:	2b02      	cmp	r3, #2
 802134c:	d12b      	bne.n	80213a6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 802134e:	68bb      	ldr	r3, [r7, #8]
 8021350:	7d5b      	ldrb	r3, [r3, #21]
 8021352:	2bf1      	cmp	r3, #241	@ 0xf1
 8021354:	d00a      	beq.n	802136c <RadioSetTxGenericConfig+0x124>
 8021356:	68bb      	ldr	r3, [r7, #8]
 8021358:	7d5b      	ldrb	r3, [r3, #21]
 802135a:	2bf2      	cmp	r3, #242	@ 0xf2
 802135c:	d006      	beq.n	802136c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 802135e:	68bb      	ldr	r3, [r7, #8]
 8021360:	7d5b      	ldrb	r3, [r3, #21]
 8021362:	2b01      	cmp	r3, #1
 8021364:	d002      	beq.n	802136c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8021366:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802136a:	e199      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 802136c:	68bb      	ldr	r3, [r7, #8]
 802136e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8021370:	2301      	movs	r3, #1
 8021372:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8021376:	4b6e      	ldr	r3, [pc, #440]	@ (8021530 <RadioSetTxGenericConfig+0x2e8>)
 8021378:	6819      	ldr	r1, [r3, #0]
 802137a:	f107 0320 	add.w	r3, r7, #32
 802137e:	4a6d      	ldr	r2, [pc, #436]	@ (8021534 <RadioSetTxGenericConfig+0x2ec>)
 8021380:	4618      	mov	r0, r3
 8021382:	f001 fb9f 	bl	8022ac4 <RFW_Init>
 8021386:	4603      	mov	r3, r0
 8021388:	2b00      	cmp	r3, #0
 802138a:	d002      	beq.n	8021392 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 802138c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021390:	e186      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8021392:	4b66      	ldr	r3, [pc, #408]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021394:	2200      	movs	r2, #0
 8021396:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8021398:	4b64      	ldr	r3, [pc, #400]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802139a:	2201      	movs	r2, #1
 802139c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 802139e:	4b63      	ldr	r3, [pc, #396]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80213a0:	2200      	movs	r2, #0
 80213a2:	755a      	strb	r2, [r3, #21]
        {
 80213a4:	e00b      	b.n	80213be <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80213a6:	68bb      	ldr	r3, [r7, #8]
 80213a8:	7d5a      	ldrb	r2, [r3, #21]
 80213aa:	4b60      	ldr	r3, [pc, #384]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80213ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80213ae:	68bb      	ldr	r3, [r7, #8]
 80213b0:	7d9a      	ldrb	r2, [r3, #22]
 80213b2:	4b5e      	ldr	r3, [pc, #376]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80213b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80213b6:	68bb      	ldr	r3, [r7, #8]
 80213b8:	7d1a      	ldrb	r2, [r3, #20]
 80213ba:	4b5c      	ldr	r3, [pc, #368]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80213bc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80213be:	f7ff f898 	bl	80204f2 <RadioStandby>
        RadioSetModem( radio_modem );
 80213c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80213c6:	4618      	mov	r0, r3
 80213c8:	f7fe fa2a 	bl	801f820 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80213cc:	485a      	ldr	r0, [pc, #360]	@ (8021538 <RadioSetTxGenericConfig+0x2f0>)
 80213ce:	f000 fe85 	bl	80220dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80213d2:	485a      	ldr	r0, [pc, #360]	@ (802153c <RadioSetTxGenericConfig+0x2f4>)
 80213d4:	f000 ff54 	bl	8022280 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80213d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80213dc:	4618      	mov	r0, r3
 80213de:	f000 fa18 	bl	8021812 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80213e2:	68bb      	ldr	r3, [r7, #8]
 80213e4:	8a1b      	ldrh	r3, [r3, #16]
 80213e6:	4618      	mov	r0, r3
 80213e8:	f000 fa62 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80213ec:	68bb      	ldr	r3, [r7, #8]
 80213ee:	899b      	ldrh	r3, [r3, #12]
 80213f0:	4618      	mov	r0, r3
 80213f2:	f000 fa3d 	bl	8021870 <SUBGRF_SetCrcPolynomial>
        break;
 80213f6:	e13f      	b.n	8021678 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80213f8:	68bb      	ldr	r3, [r7, #8]
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d102      	bne.n	8021406 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8021400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021404:	e14c      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8021406:	68bb      	ldr	r3, [r7, #8]
 8021408:	7c9b      	ldrb	r3, [r3, #18]
 802140a:	2b08      	cmp	r3, #8
 802140c:	d902      	bls.n	8021414 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 802140e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021412:	e145      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8021414:	68bb      	ldr	r3, [r7, #8]
 8021416:	6899      	ldr	r1, [r3, #8]
 8021418:	68bb      	ldr	r3, [r7, #8]
 802141a:	7c9b      	ldrb	r3, [r3, #18]
 802141c:	461a      	mov	r2, r3
 802141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8021422:	4618      	mov	r0, r3
 8021424:	f001 fc4e 	bl	8022cc4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8021428:	4b40      	ldr	r3, [pc, #256]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802142a:	2200      	movs	r2, #0
 802142c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8021430:	68bb      	ldr	r3, [r7, #8]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	4a3d      	ldr	r2, [pc, #244]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021436:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8021438:	68bb      	ldr	r3, [r7, #8]
 802143a:	7cda      	ldrb	r2, [r3, #19]
 802143c:	4b3b      	ldr	r3, [pc, #236]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802143e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8021442:	68bb      	ldr	r3, [r7, #8]
 8021444:	699b      	ldr	r3, [r3, #24]
 8021446:	4a39      	ldr	r2, [pc, #228]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021448:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 802144a:	4b38      	ldr	r3, [pc, #224]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802144c:	2200      	movs	r2, #0
 802144e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8021450:	68bb      	ldr	r3, [r7, #8]
 8021452:	685b      	ldr	r3, [r3, #4]
 8021454:	b29b      	uxth	r3, r3
 8021456:	00db      	lsls	r3, r3, #3
 8021458:	b29a      	uxth	r2, r3
 802145a:	4b34      	ldr	r3, [pc, #208]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802145c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 802145e:	4b33      	ldr	r3, [pc, #204]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021460:	2204      	movs	r2, #4
 8021462:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8021464:	68bb      	ldr	r3, [r7, #8]
 8021466:	7c9b      	ldrb	r3, [r3, #18]
 8021468:	00db      	lsls	r3, r3, #3
 802146a:	b2da      	uxtb	r2, r3
 802146c:	4b2f      	ldr	r3, [pc, #188]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 802146e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8021470:	4b2e      	ldr	r3, [pc, #184]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 8021472:	2200      	movs	r2, #0
 8021474:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8021476:	68bb      	ldr	r3, [r7, #8]
 8021478:	7d9b      	ldrb	r3, [r3, #22]
 802147a:	2b02      	cmp	r3, #2
 802147c:	d003      	beq.n	8021486 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 802147e:	68bb      	ldr	r3, [r7, #8]
 8021480:	7d1b      	ldrb	r3, [r3, #20]
 8021482:	2b02      	cmp	r3, #2
 8021484:	d12a      	bne.n	80214dc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8021486:	68bb      	ldr	r3, [r7, #8]
 8021488:	7d5b      	ldrb	r3, [r3, #21]
 802148a:	2bf1      	cmp	r3, #241	@ 0xf1
 802148c:	d00a      	beq.n	80214a4 <RadioSetTxGenericConfig+0x25c>
 802148e:	68bb      	ldr	r3, [r7, #8]
 8021490:	7d5b      	ldrb	r3, [r3, #21]
 8021492:	2bf2      	cmp	r3, #242	@ 0xf2
 8021494:	d006      	beq.n	80214a4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8021496:	68bb      	ldr	r3, [r7, #8]
 8021498:	7d5b      	ldrb	r3, [r3, #21]
 802149a:	2b01      	cmp	r3, #1
 802149c:	d002      	beq.n	80214a4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 802149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80214a2:	e0fd      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80214a4:	2301      	movs	r3, #1
 80214a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80214a8:	68bb      	ldr	r3, [r7, #8]
 80214aa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80214ac:	4b20      	ldr	r3, [pc, #128]	@ (8021530 <RadioSetTxGenericConfig+0x2e8>)
 80214ae:	6819      	ldr	r1, [r3, #0]
 80214b0:	f107 0314 	add.w	r3, r7, #20
 80214b4:	4a1f      	ldr	r2, [pc, #124]	@ (8021534 <RadioSetTxGenericConfig+0x2ec>)
 80214b6:	4618      	mov	r0, r3
 80214b8:	f001 fb04 	bl	8022ac4 <RFW_Init>
 80214bc:	4603      	mov	r3, r0
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d002      	beq.n	80214c8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80214c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80214c6:	e0eb      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80214c8:	4b18      	ldr	r3, [pc, #96]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214ca:	2200      	movs	r2, #0
 80214cc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80214ce:	4b17      	ldr	r3, [pc, #92]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214d0:	2201      	movs	r2, #1
 80214d2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80214d4:	4b15      	ldr	r3, [pc, #84]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214d6:	2200      	movs	r2, #0
 80214d8:	755a      	strb	r2, [r3, #21]
        {
 80214da:	e00b      	b.n	80214f4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80214dc:	68bb      	ldr	r3, [r7, #8]
 80214de:	7d5a      	ldrb	r2, [r3, #21]
 80214e0:	4b12      	ldr	r3, [pc, #72]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80214e4:	68bb      	ldr	r3, [r7, #8]
 80214e6:	7d9a      	ldrb	r2, [r3, #22]
 80214e8:	4b10      	ldr	r3, [pc, #64]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80214ec:	68bb      	ldr	r3, [r7, #8]
 80214ee:	7d1a      	ldrb	r2, [r3, #20]
 80214f0:	4b0e      	ldr	r3, [pc, #56]	@ (802152c <RadioSetTxGenericConfig+0x2e4>)
 80214f2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80214f4:	f7fe fffd 	bl	80204f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80214f8:	2000      	movs	r0, #0
 80214fa:	f7fe f991 	bl	801f820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80214fe:	480e      	ldr	r0, [pc, #56]	@ (8021538 <RadioSetTxGenericConfig+0x2f0>)
 8021500:	f000 fdec 	bl	80220dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8021504:	480d      	ldr	r0, [pc, #52]	@ (802153c <RadioSetTxGenericConfig+0x2f4>)
 8021506:	f000 febb 	bl	8022280 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 802150a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802150e:	4618      	mov	r0, r3
 8021510:	f000 f97f 	bl	8021812 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8021514:	68bb      	ldr	r3, [r7, #8]
 8021516:	8a1b      	ldrh	r3, [r3, #16]
 8021518:	4618      	mov	r0, r3
 802151a:	f000 f9c9 	bl	80218b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 802151e:	68bb      	ldr	r3, [r7, #8]
 8021520:	899b      	ldrh	r3, [r3, #12]
 8021522:	4618      	mov	r0, r3
 8021524:	f000 f9a4 	bl	8021870 <SUBGRF_SetCrcPolynomial>
        break;
 8021528:	e0a6      	b.n	8021678 <RadioSetTxGenericConfig+0x430>
 802152a:	bf00      	nop
 802152c:	2000212c 	.word	0x2000212c
 8021530:	20002128 	.word	0x20002128
 8021534:	20002188 	.word	0x20002188
 8021538:	20002164 	.word	0x20002164
 802153c:	2000213a 	.word	0x2000213a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8021540:	4b59      	ldr	r3, [pc, #356]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021542:	2201      	movs	r2, #1
 8021544:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	781a      	ldrb	r2, [r3, #0]
 802154c:	4b56      	ldr	r3, [pc, #344]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 802154e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8021552:	68bb      	ldr	r3, [r7, #8]
 8021554:	785a      	ldrb	r2, [r3, #1]
 8021556:	4b54      	ldr	r3, [pc, #336]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	789a      	ldrb	r2, [r3, #2]
 8021560:	4b51      	ldr	r3, [pc, #324]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021562:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8021566:	68bb      	ldr	r3, [r7, #8]
 8021568:	78db      	ldrb	r3, [r3, #3]
 802156a:	2b02      	cmp	r3, #2
 802156c:	d010      	beq.n	8021590 <RadioSetTxGenericConfig+0x348>
 802156e:	2b02      	cmp	r3, #2
 8021570:	dc20      	bgt.n	80215b4 <RadioSetTxGenericConfig+0x36c>
 8021572:	2b00      	cmp	r3, #0
 8021574:	d002      	beq.n	802157c <RadioSetTxGenericConfig+0x334>
 8021576:	2b01      	cmp	r3, #1
 8021578:	d005      	beq.n	8021586 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 802157a:	e01b      	b.n	80215b4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 802157c:	4b4a      	ldr	r3, [pc, #296]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 802157e:	2200      	movs	r2, #0
 8021580:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8021584:	e017      	b.n	80215b6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8021586:	4b48      	ldr	r3, [pc, #288]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021588:	2201      	movs	r2, #1
 802158a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 802158e:	e012      	b.n	80215b6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8021590:	68bb      	ldr	r3, [r7, #8]
 8021592:	781b      	ldrb	r3, [r3, #0]
 8021594:	2b0b      	cmp	r3, #11
 8021596:	d003      	beq.n	80215a0 <RadioSetTxGenericConfig+0x358>
 8021598:	68bb      	ldr	r3, [r7, #8]
 802159a:	781b      	ldrb	r3, [r3, #0]
 802159c:	2b0c      	cmp	r3, #12
 802159e:	d104      	bne.n	80215aa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80215a0:	4b41      	ldr	r3, [pc, #260]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215a2:	2201      	movs	r2, #1
 80215a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80215a8:	e005      	b.n	80215b6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80215aa:	4b3f      	ldr	r3, [pc, #252]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215ac:	2200      	movs	r2, #0
 80215ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80215b2:	e000      	b.n	80215b6 <RadioSetTxGenericConfig+0x36e>
            break;
 80215b4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80215b6:	4b3c      	ldr	r3, [pc, #240]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215b8:	2201      	movs	r2, #1
 80215ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80215bc:	68bb      	ldr	r3, [r7, #8]
 80215be:	889a      	ldrh	r2, [r3, #4]
 80215c0:	4b39      	ldr	r3, [pc, #228]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80215c4:	68bb      	ldr	r3, [r7, #8]
 80215c6:	799a      	ldrb	r2, [r3, #6]
 80215c8:	4b37      	ldr	r3, [pc, #220]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215ca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80215cc:	68bb      	ldr	r3, [r7, #8]
 80215ce:	79da      	ldrb	r2, [r3, #7]
 80215d0:	4b35      	ldr	r3, [pc, #212]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80215d6:	68bb      	ldr	r3, [r7, #8]
 80215d8:	7a1a      	ldrb	r2, [r3, #8]
 80215da:	4b33      	ldr	r3, [pc, #204]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80215e0:	f7fe ff87 	bl	80204f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80215e4:	2001      	movs	r0, #1
 80215e6:	f7fe f91b 	bl	801f820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80215ea:	4830      	ldr	r0, [pc, #192]	@ (80216ac <RadioSetTxGenericConfig+0x464>)
 80215ec:	f000 fd76 	bl	80220dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80215f0:	482f      	ldr	r0, [pc, #188]	@ (80216b0 <RadioSetTxGenericConfig+0x468>)
 80215f2:	f000 fe45 	bl	8022280 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80215f6:	4b2c      	ldr	r3, [pc, #176]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 80215f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80215fc:	2b06      	cmp	r3, #6
 80215fe:	d10d      	bne.n	802161c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8021600:	f640 0089 	movw	r0, #2185	@ 0x889
 8021604:	f000 ff98 	bl	8022538 <SUBGRF_ReadRegister>
 8021608:	4603      	mov	r3, r0
 802160a:	f023 0304 	bic.w	r3, r3, #4
 802160e:	b2db      	uxtb	r3, r3
 8021610:	4619      	mov	r1, r3
 8021612:	f640 0089 	movw	r0, #2185	@ 0x889
 8021616:	f000 ff7b 	bl	8022510 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 802161a:	e02d      	b.n	8021678 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 802161c:	f640 0089 	movw	r0, #2185	@ 0x889
 8021620:	f000 ff8a 	bl	8022538 <SUBGRF_ReadRegister>
 8021624:	4603      	mov	r3, r0
 8021626:	f043 0304 	orr.w	r3, r3, #4
 802162a:	b2db      	uxtb	r3, r3
 802162c:	4619      	mov	r1, r3
 802162e:	f640 0089 	movw	r0, #2185	@ 0x889
 8021632:	f000 ff6d 	bl	8022510 <SUBGRF_WriteRegister>
        break;
 8021636:	e01f      	b.n	8021678 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8021638:	68bb      	ldr	r3, [r7, #8]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d004      	beq.n	802164a <RadioSetTxGenericConfig+0x402>
 8021640:	68bb      	ldr	r3, [r7, #8]
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021648:	d902      	bls.n	8021650 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 802164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802164e:	e027      	b.n	80216a0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8021650:	2003      	movs	r0, #3
 8021652:	f7fe f8e5 	bl	801f820 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8021656:	4b14      	ldr	r3, [pc, #80]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021658:	2202      	movs	r2, #2
 802165a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 802165e:	68bb      	ldr	r3, [r7, #8]
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	4a11      	ldr	r2, [pc, #68]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021664:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8021666:	4b10      	ldr	r3, [pc, #64]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021668:	2216      	movs	r2, #22
 802166a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 802166e:	480f      	ldr	r0, [pc, #60]	@ (80216ac <RadioSetTxGenericConfig+0x464>)
 8021670:	f000 fd34 	bl	80220dc <SUBGRF_SetModulationParams>
        break;
 8021674:	e000      	b.n	8021678 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8021676:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8021678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802167c:	4618      	mov	r0, r3
 802167e:	f001 f863 	bl	8022748 <SUBGRF_SetRfTxPower>
 8021682:	4603      	mov	r3, r0
 8021684:	461a      	mov	r2, r3
 8021686:	4b08      	ldr	r3, [pc, #32]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 8021688:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 802168c:	4b06      	ldr	r3, [pc, #24]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 802168e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8021692:	4618      	mov	r0, r3
 8021694:	f001 fa37 	bl	8022b06 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8021698:	4a03      	ldr	r2, [pc, #12]	@ (80216a8 <RadioSetTxGenericConfig+0x460>)
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	6053      	str	r3, [r2, #4]
    return 0;
 802169e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80216a0:	4618      	mov	r0, r3
 80216a2:	3738      	adds	r7, #56	@ 0x38
 80216a4:	46bd      	mov	sp, r7
 80216a6:	bd80      	pop	{r7, pc}
 80216a8:	2000212c 	.word	0x2000212c
 80216ac:	20002164 	.word	0x20002164
 80216b0:	2000213a 	.word	0x2000213a

080216b4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80216b4:	b480      	push	{r7}
 80216b6:	b085      	sub	sp, #20
 80216b8:	af00      	add	r7, sp, #0
 80216ba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80216bc:	2301      	movs	r3, #1
 80216be:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80216c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80216c2:	4618      	mov	r0, r3
 80216c4:	3714      	adds	r7, #20
 80216c6:	46bd      	mov	sp, r7
 80216c8:	bc80      	pop	{r7}
 80216ca:	4770      	bx	lr

080216cc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80216cc:	b480      	push	{r7}
 80216ce:	b083      	sub	sp, #12
 80216d0:	af00      	add	r7, sp, #0
 80216d2:	6078      	str	r0, [r7, #4]
 80216d4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80216d6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80216d8:	4618      	mov	r0, r3
 80216da:	370c      	adds	r7, #12
 80216dc:	46bd      	mov	sp, r7
 80216de:	bc80      	pop	{r7}
 80216e0:	4770      	bx	lr
	...

080216e4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80216e4:	b580      	push	{r7, lr}
 80216e6:	b084      	sub	sp, #16
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d002      	beq.n	80216f8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80216f2:	4a1d      	ldr	r2, [pc, #116]	@ (8021768 <SUBGRF_Init+0x84>)
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80216f8:	f7e0 fc3a 	bl	8001f70 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80216fc:	2002      	movs	r0, #2
 80216fe:	f001 f8ff 	bl	8022900 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8021702:	4b1a      	ldr	r3, [pc, #104]	@ (802176c <SUBGRF_Init+0x88>)
 8021704:	2200      	movs	r2, #0
 8021706:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8021708:	2000      	movs	r0, #0
 802170a:	f000 f97d 	bl	8021a08 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 802170e:	f7ed fb21 	bl	800ed54 <RBI_IsTCXO>
 8021712:	4603      	mov	r3, r0
 8021714:	2b01      	cmp	r3, #1
 8021716:	d10e      	bne.n	8021736 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8021718:	2140      	movs	r1, #64	@ 0x40
 802171a:	2001      	movs	r0, #1
 802171c:	f000 fb82 	bl	8021e24 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8021720:	2100      	movs	r1, #0
 8021722:	f640 1011 	movw	r0, #2321	@ 0x911
 8021726:	f000 fef3 	bl	8022510 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 802172a:	237f      	movs	r3, #127	@ 0x7f
 802172c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 802172e:	7b38      	ldrb	r0, [r7, #12]
 8021730:	f000 fa8b 	bl	8021c4a <SUBGRF_Calibrate>
 8021734:	e009      	b.n	802174a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8021736:	2103      	movs	r1, #3
 8021738:	f640 1011 	movw	r0, #2321	@ 0x911
 802173c:	f000 fee8 	bl	8022510 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8021740:	2103      	movs	r1, #3
 8021742:	f640 1012 	movw	r0, #2322	@ 0x912
 8021746:	f000 fee3 	bl	8022510 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 802174a:	210e      	movs	r1, #14
 802174c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8021750:	f000 fede 	bl	8022510 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8021754:	f7ed fae2 	bl	800ed1c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8021758:	4b05      	ldr	r3, [pc, #20]	@ (8021770 <SUBGRF_Init+0x8c>)
 802175a:	2201      	movs	r2, #1
 802175c:	701a      	strb	r2, [r3, #0]
}
 802175e:	bf00      	nop
 8021760:	3710      	adds	r7, #16
 8021762:	46bd      	mov	sp, r7
 8021764:	bd80      	pop	{r7, pc}
 8021766:	bf00      	nop
 8021768:	200021c4 	.word	0x200021c4
 802176c:	200021c0 	.word	0x200021c0
 8021770:	200021b8 	.word	0x200021b8

08021774 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8021774:	b480      	push	{r7}
 8021776:	af00      	add	r7, sp, #0
    return OperatingMode;
 8021778:	4b02      	ldr	r3, [pc, #8]	@ (8021784 <SUBGRF_GetOperatingMode+0x10>)
 802177a:	781b      	ldrb	r3, [r3, #0]
}
 802177c:	4618      	mov	r0, r3
 802177e:	46bd      	mov	sp, r7
 8021780:	bc80      	pop	{r7}
 8021782:	4770      	bx	lr
 8021784:	200021b8 	.word	0x200021b8

08021788 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8021788:	b580      	push	{r7, lr}
 802178a:	b082      	sub	sp, #8
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]
 8021790:	460b      	mov	r3, r1
 8021792:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8021794:	78fb      	ldrb	r3, [r7, #3]
 8021796:	461a      	mov	r2, r3
 8021798:	6879      	ldr	r1, [r7, #4]
 802179a:	2000      	movs	r0, #0
 802179c:	f000 ff24 	bl	80225e8 <SUBGRF_WriteBuffer>
}
 80217a0:	bf00      	nop
 80217a2:	3708      	adds	r7, #8
 80217a4:	46bd      	mov	sp, r7
 80217a6:	bd80      	pop	{r7, pc}

080217a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b086      	sub	sp, #24
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	60f8      	str	r0, [r7, #12]
 80217b0:	60b9      	str	r1, [r7, #8]
 80217b2:	4613      	mov	r3, r2
 80217b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80217b6:	2300      	movs	r3, #0
 80217b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80217ba:	f107 0317 	add.w	r3, r7, #23
 80217be:	4619      	mov	r1, r3
 80217c0:	68b8      	ldr	r0, [r7, #8]
 80217c2:	f000 fe27 	bl	8022414 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80217c6:	68bb      	ldr	r3, [r7, #8]
 80217c8:	781b      	ldrb	r3, [r3, #0]
 80217ca:	79fa      	ldrb	r2, [r7, #7]
 80217cc:	429a      	cmp	r2, r3
 80217ce:	d201      	bcs.n	80217d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80217d0:	2301      	movs	r3, #1
 80217d2:	e007      	b.n	80217e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80217d4:	7df8      	ldrb	r0, [r7, #23]
 80217d6:	68bb      	ldr	r3, [r7, #8]
 80217d8:	781b      	ldrb	r3, [r3, #0]
 80217da:	461a      	mov	r2, r3
 80217dc:	68f9      	ldr	r1, [r7, #12]
 80217de:	f000 ff25 	bl	802262c <SUBGRF_ReadBuffer>

    return 0;
 80217e2:	2300      	movs	r3, #0
}
 80217e4:	4618      	mov	r0, r3
 80217e6:	3718      	adds	r7, #24
 80217e8:	46bd      	mov	sp, r7
 80217ea:	bd80      	pop	{r7, pc}

080217ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80217ec:	b580      	push	{r7, lr}
 80217ee:	b084      	sub	sp, #16
 80217f0:	af00      	add	r7, sp, #0
 80217f2:	60f8      	str	r0, [r7, #12]
 80217f4:	460b      	mov	r3, r1
 80217f6:	607a      	str	r2, [r7, #4]
 80217f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80217fa:	7afb      	ldrb	r3, [r7, #11]
 80217fc:	4619      	mov	r1, r3
 80217fe:	68f8      	ldr	r0, [r7, #12]
 8021800:	f7ff ffc2 	bl	8021788 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8021804:	6878      	ldr	r0, [r7, #4]
 8021806:	f000 f91b 	bl	8021a40 <SUBGRF_SetTx>
}
 802180a:	bf00      	nop
 802180c:	3710      	adds	r7, #16
 802180e:	46bd      	mov	sp, r7
 8021810:	bd80      	pop	{r7, pc}

08021812 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8021812:	b580      	push	{r7, lr}
 8021814:	b082      	sub	sp, #8
 8021816:	af00      	add	r7, sp, #0
 8021818:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 802181a:	2208      	movs	r2, #8
 802181c:	6879      	ldr	r1, [r7, #4]
 802181e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8021822:	f000 fe9d 	bl	8022560 <SUBGRF_WriteRegisters>
    return 0;
 8021826:	2300      	movs	r3, #0
}
 8021828:	4618      	mov	r0, r3
 802182a:	3708      	adds	r7, #8
 802182c:	46bd      	mov	sp, r7
 802182e:	bd80      	pop	{r7, pc}

08021830 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8021830:	b580      	push	{r7, lr}
 8021832:	b084      	sub	sp, #16
 8021834:	af00      	add	r7, sp, #0
 8021836:	4603      	mov	r3, r0
 8021838:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 802183a:	88fb      	ldrh	r3, [r7, #6]
 802183c:	0a1b      	lsrs	r3, r3, #8
 802183e:	b29b      	uxth	r3, r3
 8021840:	b2db      	uxtb	r3, r3
 8021842:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8021844:	88fb      	ldrh	r3, [r7, #6]
 8021846:	b2db      	uxtb	r3, r3
 8021848:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 802184a:	f000 fb6f 	bl	8021f2c <SUBGRF_GetPacketType>
 802184e:	4603      	mov	r3, r0
 8021850:	2b00      	cmp	r3, #0
 8021852:	d108      	bne.n	8021866 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8021854:	f107 030c 	add.w	r3, r7, #12
 8021858:	2202      	movs	r2, #2
 802185a:	4619      	mov	r1, r3
 802185c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8021860:	f000 fe7e 	bl	8022560 <SUBGRF_WriteRegisters>
            break;
 8021864:	e000      	b.n	8021868 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8021866:	bf00      	nop
    }
}
 8021868:	bf00      	nop
 802186a:	3710      	adds	r7, #16
 802186c:	46bd      	mov	sp, r7
 802186e:	bd80      	pop	{r7, pc}

08021870 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8021870:	b580      	push	{r7, lr}
 8021872:	b084      	sub	sp, #16
 8021874:	af00      	add	r7, sp, #0
 8021876:	4603      	mov	r3, r0
 8021878:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 802187a:	88fb      	ldrh	r3, [r7, #6]
 802187c:	0a1b      	lsrs	r3, r3, #8
 802187e:	b29b      	uxth	r3, r3
 8021880:	b2db      	uxtb	r3, r3
 8021882:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8021884:	88fb      	ldrh	r3, [r7, #6]
 8021886:	b2db      	uxtb	r3, r3
 8021888:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 802188a:	f000 fb4f 	bl	8021f2c <SUBGRF_GetPacketType>
 802188e:	4603      	mov	r3, r0
 8021890:	2b00      	cmp	r3, #0
 8021892:	d108      	bne.n	80218a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8021894:	f107 030c 	add.w	r3, r7, #12
 8021898:	2202      	movs	r2, #2
 802189a:	4619      	mov	r1, r3
 802189c:	f240 60be 	movw	r0, #1726	@ 0x6be
 80218a0:	f000 fe5e 	bl	8022560 <SUBGRF_WriteRegisters>
            break;
 80218a4:	e000      	b.n	80218a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80218a6:	bf00      	nop
    }
}
 80218a8:	bf00      	nop
 80218aa:	3710      	adds	r7, #16
 80218ac:	46bd      	mov	sp, r7
 80218ae:	bd80      	pop	{r7, pc}

080218b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b084      	sub	sp, #16
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	4603      	mov	r3, r0
 80218b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80218ba:	2300      	movs	r3, #0
 80218bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80218be:	f000 fb35 	bl	8021f2c <SUBGRF_GetPacketType>
 80218c2:	4603      	mov	r3, r0
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d121      	bne.n	802190c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80218c8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80218cc:	f000 fe34 	bl	8022538 <SUBGRF_ReadRegister>
 80218d0:	4603      	mov	r3, r0
 80218d2:	f023 0301 	bic.w	r3, r3, #1
 80218d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80218d8:	88fb      	ldrh	r3, [r7, #6]
 80218da:	0a1b      	lsrs	r3, r3, #8
 80218dc:	b29b      	uxth	r3, r3
 80218de:	b25b      	sxtb	r3, r3
 80218e0:	f003 0301 	and.w	r3, r3, #1
 80218e4:	b25a      	sxtb	r2, r3
 80218e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80218ea:	4313      	orrs	r3, r2
 80218ec:	b25b      	sxtb	r3, r3
 80218ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80218f0:	7bfb      	ldrb	r3, [r7, #15]
 80218f2:	4619      	mov	r1, r3
 80218f4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80218f8:	f000 fe0a 	bl	8022510 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80218fc:	88fb      	ldrh	r3, [r7, #6]
 80218fe:	b2db      	uxtb	r3, r3
 8021900:	4619      	mov	r1, r3
 8021902:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8021906:	f000 fe03 	bl	8022510 <SUBGRF_WriteRegister>
            break;
 802190a:	e000      	b.n	802190e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 802190c:	bf00      	nop
    }
}
 802190e:	bf00      	nop
 8021910:	3710      	adds	r7, #16
 8021912:	46bd      	mov	sp, r7
 8021914:	bd80      	pop	{r7, pc}

08021916 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8021916:	b580      	push	{r7, lr}
 8021918:	b082      	sub	sp, #8
 802191a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 802191c:	2300      	movs	r3, #0
 802191e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8021920:	2300      	movs	r3, #0
 8021922:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8021924:	2300      	movs	r3, #0
 8021926:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8021928:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 802192c:	f000 fe04 	bl	8022538 <SUBGRF_ReadRegister>
 8021930:	4603      	mov	r3, r0
 8021932:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8021934:	79fb      	ldrb	r3, [r7, #7]
 8021936:	f023 0301 	bic.w	r3, r3, #1
 802193a:	b2db      	uxtb	r3, r3
 802193c:	4619      	mov	r1, r3
 802193e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8021942:	f000 fde5 	bl	8022510 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8021946:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 802194a:	f000 fdf5 	bl	8022538 <SUBGRF_ReadRegister>
 802194e:	4603      	mov	r3, r0
 8021950:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8021952:	79bb      	ldrb	r3, [r7, #6]
 8021954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021958:	b2db      	uxtb	r3, r3
 802195a:	4619      	mov	r1, r3
 802195c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8021960:	f000 fdd6 	bl	8022510 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8021964:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8021968:	f000 f88a 	bl	8021a80 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 802196c:	463b      	mov	r3, r7
 802196e:	2204      	movs	r2, #4
 8021970:	4619      	mov	r1, r3
 8021972:	f640 0019 	movw	r0, #2073	@ 0x819
 8021976:	f000 fe15 	bl	80225a4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 802197a:	2000      	movs	r0, #0
 802197c:	f000 f844 	bl	8021a08 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8021980:	79fb      	ldrb	r3, [r7, #7]
 8021982:	4619      	mov	r1, r3
 8021984:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8021988:	f000 fdc2 	bl	8022510 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 802198c:	79bb      	ldrb	r3, [r7, #6]
 802198e:	4619      	mov	r1, r3
 8021990:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8021994:	f000 fdbc 	bl	8022510 <SUBGRF_WriteRegister>

    return number;
 8021998:	683b      	ldr	r3, [r7, #0]
}
 802199a:	4618      	mov	r0, r3
 802199c:	3708      	adds	r7, #8
 802199e:	46bd      	mov	sp, r7
 80219a0:	bd80      	pop	{r7, pc}
	...

080219a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80219a4:	b580      	push	{r7, lr}
 80219a6:	b084      	sub	sp, #16
 80219a8:	af00      	add	r7, sp, #0
 80219aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80219ac:	2000      	movs	r0, #0
 80219ae:	f7ed f9bc 	bl	800ed2a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80219b2:	2002      	movs	r0, #2
 80219b4:	f000 ffa4 	bl	8022900 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80219b8:	793b      	ldrb	r3, [r7, #4]
 80219ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80219be:	b2db      	uxtb	r3, r3
 80219c0:	009b      	lsls	r3, r3, #2
 80219c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80219c4:	793b      	ldrb	r3, [r7, #4]
 80219c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80219ca:	b2db      	uxtb	r3, r3
 80219cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80219ce:	b25b      	sxtb	r3, r3
 80219d0:	4313      	orrs	r3, r2
 80219d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80219d4:	793b      	ldrb	r3, [r7, #4]
 80219d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80219da:	b2db      	uxtb	r3, r3
 80219dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80219de:	4313      	orrs	r3, r2
 80219e0:	b25b      	sxtb	r3, r3
 80219e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80219e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80219e6:	f107 030f 	add.w	r3, r7, #15
 80219ea:	2201      	movs	r2, #1
 80219ec:	4619      	mov	r1, r3
 80219ee:	2084      	movs	r0, #132	@ 0x84
 80219f0:	f000 fe3e 	bl	8022670 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80219f4:	4b03      	ldr	r3, [pc, #12]	@ (8021a04 <SUBGRF_SetSleep+0x60>)
 80219f6:	2200      	movs	r2, #0
 80219f8:	701a      	strb	r2, [r3, #0]
}
 80219fa:	bf00      	nop
 80219fc:	3710      	adds	r7, #16
 80219fe:	46bd      	mov	sp, r7
 8021a00:	bd80      	pop	{r7, pc}
 8021a02:	bf00      	nop
 8021a04:	200021b8 	.word	0x200021b8

08021a08 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8021a08:	b580      	push	{r7, lr}
 8021a0a:	b082      	sub	sp, #8
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	4603      	mov	r3, r0
 8021a10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8021a12:	1dfb      	adds	r3, r7, #7
 8021a14:	2201      	movs	r2, #1
 8021a16:	4619      	mov	r1, r3
 8021a18:	2080      	movs	r0, #128	@ 0x80
 8021a1a:	f000 fe29 	bl	8022670 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8021a1e:	79fb      	ldrb	r3, [r7, #7]
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d103      	bne.n	8021a2c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8021a24:	4b05      	ldr	r3, [pc, #20]	@ (8021a3c <SUBGRF_SetStandby+0x34>)
 8021a26:	2201      	movs	r2, #1
 8021a28:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8021a2a:	e002      	b.n	8021a32 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8021a2c:	4b03      	ldr	r3, [pc, #12]	@ (8021a3c <SUBGRF_SetStandby+0x34>)
 8021a2e:	2202      	movs	r2, #2
 8021a30:	701a      	strb	r2, [r3, #0]
}
 8021a32:	bf00      	nop
 8021a34:	3708      	adds	r7, #8
 8021a36:	46bd      	mov	sp, r7
 8021a38:	bd80      	pop	{r7, pc}
 8021a3a:	bf00      	nop
 8021a3c:	200021b8 	.word	0x200021b8

08021a40 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8021a40:	b580      	push	{r7, lr}
 8021a42:	b084      	sub	sp, #16
 8021a44:	af00      	add	r7, sp, #0
 8021a46:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8021a48:	4b0c      	ldr	r3, [pc, #48]	@ (8021a7c <SUBGRF_SetTx+0x3c>)
 8021a4a:	2204      	movs	r2, #4
 8021a4c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	0c1b      	lsrs	r3, r3, #16
 8021a52:	b2db      	uxtb	r3, r3
 8021a54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	0a1b      	lsrs	r3, r3, #8
 8021a5a:	b2db      	uxtb	r3, r3
 8021a5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	b2db      	uxtb	r3, r3
 8021a62:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8021a64:	f107 030c 	add.w	r3, r7, #12
 8021a68:	2203      	movs	r2, #3
 8021a6a:	4619      	mov	r1, r3
 8021a6c:	2083      	movs	r0, #131	@ 0x83
 8021a6e:	f000 fdff 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021a72:	bf00      	nop
 8021a74:	3710      	adds	r7, #16
 8021a76:	46bd      	mov	sp, r7
 8021a78:	bd80      	pop	{r7, pc}
 8021a7a:	bf00      	nop
 8021a7c:	200021b8 	.word	0x200021b8

08021a80 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b084      	sub	sp, #16
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8021a88:	4b0c      	ldr	r3, [pc, #48]	@ (8021abc <SUBGRF_SetRx+0x3c>)
 8021a8a:	2205      	movs	r2, #5
 8021a8c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	0c1b      	lsrs	r3, r3, #16
 8021a92:	b2db      	uxtb	r3, r3
 8021a94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8021a96:	687b      	ldr	r3, [r7, #4]
 8021a98:	0a1b      	lsrs	r3, r3, #8
 8021a9a:	b2db      	uxtb	r3, r3
 8021a9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	b2db      	uxtb	r3, r3
 8021aa2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8021aa4:	f107 030c 	add.w	r3, r7, #12
 8021aa8:	2203      	movs	r2, #3
 8021aaa:	4619      	mov	r1, r3
 8021aac:	2082      	movs	r0, #130	@ 0x82
 8021aae:	f000 fddf 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021ab2:	bf00      	nop
 8021ab4:	3710      	adds	r7, #16
 8021ab6:	46bd      	mov	sp, r7
 8021ab8:	bd80      	pop	{r7, pc}
 8021aba:	bf00      	nop
 8021abc:	200021b8 	.word	0x200021b8

08021ac0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b084      	sub	sp, #16
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8021ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8021b04 <SUBGRF_SetRxBoosted+0x44>)
 8021aca:	2205      	movs	r2, #5
 8021acc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8021ace:	2197      	movs	r1, #151	@ 0x97
 8021ad0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8021ad4:	f000 fd1c 	bl	8022510 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	0c1b      	lsrs	r3, r3, #16
 8021adc:	b2db      	uxtb	r3, r3
 8021ade:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	0a1b      	lsrs	r3, r3, #8
 8021ae4:	b2db      	uxtb	r3, r3
 8021ae6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	b2db      	uxtb	r3, r3
 8021aec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8021aee:	f107 030c 	add.w	r3, r7, #12
 8021af2:	2203      	movs	r2, #3
 8021af4:	4619      	mov	r1, r3
 8021af6:	2082      	movs	r0, #130	@ 0x82
 8021af8:	f000 fdba 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021afc:	bf00      	nop
 8021afe:	3710      	adds	r7, #16
 8021b00:	46bd      	mov	sp, r7
 8021b02:	bd80      	pop	{r7, pc}
 8021b04:	200021b8 	.word	0x200021b8

08021b08 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8021b08:	b580      	push	{r7, lr}
 8021b0a:	b084      	sub	sp, #16
 8021b0c:	af00      	add	r7, sp, #0
 8021b0e:	6078      	str	r0, [r7, #4]
 8021b10:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	0c1b      	lsrs	r3, r3, #16
 8021b16:	b2db      	uxtb	r3, r3
 8021b18:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	0a1b      	lsrs	r3, r3, #8
 8021b1e:	b2db      	uxtb	r3, r3
 8021b20:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	b2db      	uxtb	r3, r3
 8021b26:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8021b28:	683b      	ldr	r3, [r7, #0]
 8021b2a:	0c1b      	lsrs	r3, r3, #16
 8021b2c:	b2db      	uxtb	r3, r3
 8021b2e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8021b30:	683b      	ldr	r3, [r7, #0]
 8021b32:	0a1b      	lsrs	r3, r3, #8
 8021b34:	b2db      	uxtb	r3, r3
 8021b36:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8021b38:	683b      	ldr	r3, [r7, #0]
 8021b3a:	b2db      	uxtb	r3, r3
 8021b3c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8021b3e:	f107 0308 	add.w	r3, r7, #8
 8021b42:	2206      	movs	r2, #6
 8021b44:	4619      	mov	r1, r3
 8021b46:	2094      	movs	r0, #148	@ 0x94
 8021b48:	f000 fd92 	bl	8022670 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8021b4c:	4b03      	ldr	r3, [pc, #12]	@ (8021b5c <SUBGRF_SetRxDutyCycle+0x54>)
 8021b4e:	2206      	movs	r2, #6
 8021b50:	701a      	strb	r2, [r3, #0]
}
 8021b52:	bf00      	nop
 8021b54:	3710      	adds	r7, #16
 8021b56:	46bd      	mov	sp, r7
 8021b58:	bd80      	pop	{r7, pc}
 8021b5a:	bf00      	nop
 8021b5c:	200021b8 	.word	0x200021b8

08021b60 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8021b60:	b580      	push	{r7, lr}
 8021b62:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8021b64:	2200      	movs	r2, #0
 8021b66:	2100      	movs	r1, #0
 8021b68:	20c5      	movs	r0, #197	@ 0xc5
 8021b6a:	f000 fd81 	bl	8022670 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8021b6e:	4b02      	ldr	r3, [pc, #8]	@ (8021b78 <SUBGRF_SetCad+0x18>)
 8021b70:	2207      	movs	r2, #7
 8021b72:	701a      	strb	r2, [r3, #0]
}
 8021b74:	bf00      	nop
 8021b76:	bd80      	pop	{r7, pc}
 8021b78:	200021b8 	.word	0x200021b8

08021b7c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8021b80:	2200      	movs	r2, #0
 8021b82:	2100      	movs	r1, #0
 8021b84:	20d1      	movs	r0, #209	@ 0xd1
 8021b86:	f000 fd73 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021b8a:	bf00      	nop
 8021b8c:	bd80      	pop	{r7, pc}

08021b8e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8021b8e:	b580      	push	{r7, lr}
 8021b90:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8021b92:	2200      	movs	r2, #0
 8021b94:	2100      	movs	r1, #0
 8021b96:	20d2      	movs	r0, #210	@ 0xd2
 8021b98:	f000 fd6a 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021b9c:	bf00      	nop
 8021b9e:	bd80      	pop	{r7, pc}

08021ba0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b082      	sub	sp, #8
 8021ba4:	af00      	add	r7, sp, #0
 8021ba6:	4603      	mov	r3, r0
 8021ba8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8021baa:	1dfb      	adds	r3, r7, #7
 8021bac:	2201      	movs	r2, #1
 8021bae:	4619      	mov	r1, r3
 8021bb0:	209f      	movs	r0, #159	@ 0x9f
 8021bb2:	f000 fd5d 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021bb6:	bf00      	nop
 8021bb8:	3708      	adds	r7, #8
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	bd80      	pop	{r7, pc}

08021bbe <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8021bbe:	b580      	push	{r7, lr}
 8021bc0:	b084      	sub	sp, #16
 8021bc2:	af00      	add	r7, sp, #0
 8021bc4:	4603      	mov	r3, r0
 8021bc6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8021bc8:	1dfb      	adds	r3, r7, #7
 8021bca:	2201      	movs	r2, #1
 8021bcc:	4619      	mov	r1, r3
 8021bce:	20a0      	movs	r0, #160	@ 0xa0
 8021bd0:	f000 fd4e 	bl	8022670 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8021bd4:	79fb      	ldrb	r3, [r7, #7]
 8021bd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8021bd8:	d91c      	bls.n	8021c14 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8021bda:	79fb      	ldrb	r3, [r7, #7]
 8021bdc:	085b      	lsrs	r3, r3, #1
 8021bde:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8021be0:	2300      	movs	r3, #0
 8021be2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8021be4:	2300      	movs	r3, #0
 8021be6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8021be8:	e005      	b.n	8021bf6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8021bea:	7bfb      	ldrb	r3, [r7, #15]
 8021bec:	089b      	lsrs	r3, r3, #2
 8021bee:	73fb      	strb	r3, [r7, #15]
            exp++;
 8021bf0:	7bbb      	ldrb	r3, [r7, #14]
 8021bf2:	3301      	adds	r3, #1
 8021bf4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8021bf6:	7bfb      	ldrb	r3, [r7, #15]
 8021bf8:	2b1f      	cmp	r3, #31
 8021bfa:	d8f6      	bhi.n	8021bea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8021bfc:	7bfb      	ldrb	r3, [r7, #15]
 8021bfe:	00db      	lsls	r3, r3, #3
 8021c00:	b2da      	uxtb	r2, r3
 8021c02:	7bbb      	ldrb	r3, [r7, #14]
 8021c04:	4413      	add	r3, r2
 8021c06:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8021c08:	7b7b      	ldrb	r3, [r7, #13]
 8021c0a:	4619      	mov	r1, r3
 8021c0c:	f240 7006 	movw	r0, #1798	@ 0x706
 8021c10:	f000 fc7e 	bl	8022510 <SUBGRF_WriteRegister>
    }
}
 8021c14:	bf00      	nop
 8021c16:	3710      	adds	r7, #16
 8021c18:	46bd      	mov	sp, r7
 8021c1a:	bd80      	pop	{r7, pc}

08021c1c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8021c1c:	b580      	push	{r7, lr}
 8021c1e:	b082      	sub	sp, #8
 8021c20:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8021c22:	f7ed f89e 	bl	800ed62 <RBI_IsDCDC>
 8021c26:	4603      	mov	r3, r0
 8021c28:	2b01      	cmp	r3, #1
 8021c2a:	d102      	bne.n	8021c32 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8021c2c:	2301      	movs	r3, #1
 8021c2e:	71fb      	strb	r3, [r7, #7]
 8021c30:	e001      	b.n	8021c36 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8021c32:	2300      	movs	r3, #0
 8021c34:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8021c36:	1dfb      	adds	r3, r7, #7
 8021c38:	2201      	movs	r2, #1
 8021c3a:	4619      	mov	r1, r3
 8021c3c:	2096      	movs	r0, #150	@ 0x96
 8021c3e:	f000 fd17 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021c42:	bf00      	nop
 8021c44:	3708      	adds	r7, #8
 8021c46:	46bd      	mov	sp, r7
 8021c48:	bd80      	pop	{r7, pc}

08021c4a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8021c4a:	b580      	push	{r7, lr}
 8021c4c:	b084      	sub	sp, #16
 8021c4e:	af00      	add	r7, sp, #0
 8021c50:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8021c52:	793b      	ldrb	r3, [r7, #4]
 8021c54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8021c58:	b2db      	uxtb	r3, r3
 8021c5a:	019b      	lsls	r3, r3, #6
 8021c5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8021c5e:	793b      	ldrb	r3, [r7, #4]
 8021c60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8021c64:	b2db      	uxtb	r3, r3
 8021c66:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8021c68:	b25b      	sxtb	r3, r3
 8021c6a:	4313      	orrs	r3, r2
 8021c6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8021c6e:	793b      	ldrb	r3, [r7, #4]
 8021c70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8021c74:	b2db      	uxtb	r3, r3
 8021c76:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8021c78:	b25b      	sxtb	r3, r3
 8021c7a:	4313      	orrs	r3, r2
 8021c7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8021c7e:	793b      	ldrb	r3, [r7, #4]
 8021c80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8021c84:	b2db      	uxtb	r3, r3
 8021c86:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8021c88:	b25b      	sxtb	r3, r3
 8021c8a:	4313      	orrs	r3, r2
 8021c8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8021c8e:	793b      	ldrb	r3, [r7, #4]
 8021c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8021c94:	b2db      	uxtb	r3, r3
 8021c96:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8021c98:	b25b      	sxtb	r3, r3
 8021c9a:	4313      	orrs	r3, r2
 8021c9c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8021c9e:	793b      	ldrb	r3, [r7, #4]
 8021ca0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8021ca4:	b2db      	uxtb	r3, r3
 8021ca6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8021ca8:	b25b      	sxtb	r3, r3
 8021caa:	4313      	orrs	r3, r2
 8021cac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8021cae:	793b      	ldrb	r3, [r7, #4]
 8021cb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021cb4:	b2db      	uxtb	r3, r3
 8021cb6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8021cb8:	4313      	orrs	r3, r2
 8021cba:	b25b      	sxtb	r3, r3
 8021cbc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8021cbe:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8021cc0:	f107 030f 	add.w	r3, r7, #15
 8021cc4:	2201      	movs	r2, #1
 8021cc6:	4619      	mov	r1, r3
 8021cc8:	2089      	movs	r0, #137	@ 0x89
 8021cca:	f000 fcd1 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021cce:	bf00      	nop
 8021cd0:	3710      	adds	r7, #16
 8021cd2:	46bd      	mov	sp, r7
 8021cd4:	bd80      	pop	{r7, pc}
	...

08021cd8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8021cd8:	b580      	push	{r7, lr}
 8021cda:	b084      	sub	sp, #16
 8021cdc:	af00      	add	r7, sp, #0
 8021cde:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8021d58 <SUBGRF_CalibrateImage+0x80>)
 8021ce4:	4293      	cmp	r3, r2
 8021ce6:	d904      	bls.n	8021cf2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8021ce8:	23e1      	movs	r3, #225	@ 0xe1
 8021cea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8021cec:	23e9      	movs	r3, #233	@ 0xe9
 8021cee:	737b      	strb	r3, [r7, #13]
 8021cf0:	e027      	b.n	8021d42 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	4a19      	ldr	r2, [pc, #100]	@ (8021d5c <SUBGRF_CalibrateImage+0x84>)
 8021cf6:	4293      	cmp	r3, r2
 8021cf8:	d904      	bls.n	8021d04 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8021cfa:	23d7      	movs	r3, #215	@ 0xd7
 8021cfc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8021cfe:	23db      	movs	r3, #219	@ 0xdb
 8021d00:	737b      	strb	r3, [r7, #13]
 8021d02:	e01e      	b.n	8021d42 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	4a16      	ldr	r2, [pc, #88]	@ (8021d60 <SUBGRF_CalibrateImage+0x88>)
 8021d08:	4293      	cmp	r3, r2
 8021d0a:	d904      	bls.n	8021d16 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8021d0c:	23c1      	movs	r3, #193	@ 0xc1
 8021d0e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8021d10:	23c5      	movs	r3, #197	@ 0xc5
 8021d12:	737b      	strb	r3, [r7, #13]
 8021d14:	e015      	b.n	8021d42 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	4a12      	ldr	r2, [pc, #72]	@ (8021d64 <SUBGRF_CalibrateImage+0x8c>)
 8021d1a:	4293      	cmp	r3, r2
 8021d1c:	d904      	bls.n	8021d28 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8021d1e:	2375      	movs	r3, #117	@ 0x75
 8021d20:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8021d22:	2381      	movs	r3, #129	@ 0x81
 8021d24:	737b      	strb	r3, [r7, #13]
 8021d26:	e00c      	b.n	8021d42 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8021d68 <SUBGRF_CalibrateImage+0x90>)
 8021d2c:	4293      	cmp	r3, r2
 8021d2e:	d904      	bls.n	8021d3a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8021d30:	236b      	movs	r3, #107	@ 0x6b
 8021d32:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8021d34:	236f      	movs	r3, #111	@ 0x6f
 8021d36:	737b      	strb	r3, [r7, #13]
 8021d38:	e003      	b.n	8021d42 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8021d3a:	2329      	movs	r3, #41	@ 0x29
 8021d3c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8021d3e:	232b      	movs	r3, #43	@ 0x2b
 8021d40:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8021d42:	f107 030c 	add.w	r3, r7, #12
 8021d46:	2202      	movs	r2, #2
 8021d48:	4619      	mov	r1, r3
 8021d4a:	2098      	movs	r0, #152	@ 0x98
 8021d4c:	f000 fc90 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021d50:	bf00      	nop
 8021d52:	3710      	adds	r7, #16
 8021d54:	46bd      	mov	sp, r7
 8021d56:	bd80      	pop	{r7, pc}
 8021d58:	35a4e900 	.word	0x35a4e900
 8021d5c:	32a9f880 	.word	0x32a9f880
 8021d60:	2de54480 	.word	0x2de54480
 8021d64:	1b6b0b00 	.word	0x1b6b0b00
 8021d68:	1954fc40 	.word	0x1954fc40

08021d6c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8021d6c:	b590      	push	{r4, r7, lr}
 8021d6e:	b085      	sub	sp, #20
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	4604      	mov	r4, r0
 8021d74:	4608      	mov	r0, r1
 8021d76:	4611      	mov	r1, r2
 8021d78:	461a      	mov	r2, r3
 8021d7a:	4623      	mov	r3, r4
 8021d7c:	71fb      	strb	r3, [r7, #7]
 8021d7e:	4603      	mov	r3, r0
 8021d80:	71bb      	strb	r3, [r7, #6]
 8021d82:	460b      	mov	r3, r1
 8021d84:	717b      	strb	r3, [r7, #5]
 8021d86:	4613      	mov	r3, r2
 8021d88:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8021d8a:	79fb      	ldrb	r3, [r7, #7]
 8021d8c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8021d8e:	79bb      	ldrb	r3, [r7, #6]
 8021d90:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8021d92:	797b      	ldrb	r3, [r7, #5]
 8021d94:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8021d96:	793b      	ldrb	r3, [r7, #4]
 8021d98:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8021d9a:	f107 030c 	add.w	r3, r7, #12
 8021d9e:	2204      	movs	r2, #4
 8021da0:	4619      	mov	r1, r3
 8021da2:	2095      	movs	r0, #149	@ 0x95
 8021da4:	f000 fc64 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021da8:	bf00      	nop
 8021daa:	3714      	adds	r7, #20
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd90      	pop	{r4, r7, pc}

08021db0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8021db0:	b590      	push	{r4, r7, lr}
 8021db2:	b085      	sub	sp, #20
 8021db4:	af00      	add	r7, sp, #0
 8021db6:	4604      	mov	r4, r0
 8021db8:	4608      	mov	r0, r1
 8021dba:	4611      	mov	r1, r2
 8021dbc:	461a      	mov	r2, r3
 8021dbe:	4623      	mov	r3, r4
 8021dc0:	80fb      	strh	r3, [r7, #6]
 8021dc2:	4603      	mov	r3, r0
 8021dc4:	80bb      	strh	r3, [r7, #4]
 8021dc6:	460b      	mov	r3, r1
 8021dc8:	807b      	strh	r3, [r7, #2]
 8021dca:	4613      	mov	r3, r2
 8021dcc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8021dce:	88fb      	ldrh	r3, [r7, #6]
 8021dd0:	0a1b      	lsrs	r3, r3, #8
 8021dd2:	b29b      	uxth	r3, r3
 8021dd4:	b2db      	uxtb	r3, r3
 8021dd6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8021dd8:	88fb      	ldrh	r3, [r7, #6]
 8021dda:	b2db      	uxtb	r3, r3
 8021ddc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8021dde:	88bb      	ldrh	r3, [r7, #4]
 8021de0:	0a1b      	lsrs	r3, r3, #8
 8021de2:	b29b      	uxth	r3, r3
 8021de4:	b2db      	uxtb	r3, r3
 8021de6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8021de8:	88bb      	ldrh	r3, [r7, #4]
 8021dea:	b2db      	uxtb	r3, r3
 8021dec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8021dee:	887b      	ldrh	r3, [r7, #2]
 8021df0:	0a1b      	lsrs	r3, r3, #8
 8021df2:	b29b      	uxth	r3, r3
 8021df4:	b2db      	uxtb	r3, r3
 8021df6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8021df8:	887b      	ldrh	r3, [r7, #2]
 8021dfa:	b2db      	uxtb	r3, r3
 8021dfc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8021dfe:	883b      	ldrh	r3, [r7, #0]
 8021e00:	0a1b      	lsrs	r3, r3, #8
 8021e02:	b29b      	uxth	r3, r3
 8021e04:	b2db      	uxtb	r3, r3
 8021e06:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8021e08:	883b      	ldrh	r3, [r7, #0]
 8021e0a:	b2db      	uxtb	r3, r3
 8021e0c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8021e0e:	f107 0308 	add.w	r3, r7, #8
 8021e12:	2208      	movs	r2, #8
 8021e14:	4619      	mov	r1, r3
 8021e16:	2008      	movs	r0, #8
 8021e18:	f000 fc2a 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021e1c:	bf00      	nop
 8021e1e:	3714      	adds	r7, #20
 8021e20:	46bd      	mov	sp, r7
 8021e22:	bd90      	pop	{r4, r7, pc}

08021e24 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b084      	sub	sp, #16
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	4603      	mov	r3, r0
 8021e2c:	6039      	str	r1, [r7, #0]
 8021e2e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8021e30:	79fb      	ldrb	r3, [r7, #7]
 8021e32:	f003 0307 	and.w	r3, r3, #7
 8021e36:	b2db      	uxtb	r3, r3
 8021e38:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021e3a:	683b      	ldr	r3, [r7, #0]
 8021e3c:	0c1b      	lsrs	r3, r3, #16
 8021e3e:	b2db      	uxtb	r3, r3
 8021e40:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8021e42:	683b      	ldr	r3, [r7, #0]
 8021e44:	0a1b      	lsrs	r3, r3, #8
 8021e46:	b2db      	uxtb	r3, r3
 8021e48:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8021e4a:	683b      	ldr	r3, [r7, #0]
 8021e4c:	b2db      	uxtb	r3, r3
 8021e4e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8021e50:	f107 030c 	add.w	r3, r7, #12
 8021e54:	2204      	movs	r2, #4
 8021e56:	4619      	mov	r1, r3
 8021e58:	2097      	movs	r0, #151	@ 0x97
 8021e5a:	f000 fc09 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021e5e:	bf00      	nop
 8021e60:	3710      	adds	r7, #16
 8021e62:	46bd      	mov	sp, r7
 8021e64:	bd80      	pop	{r7, pc}
	...

08021e68 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8021e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8021e6c:	b084      	sub	sp, #16
 8021e6e:	af00      	add	r7, sp, #0
 8021e70:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8021e72:	2300      	movs	r3, #0
 8021e74:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8021e76:	4b1d      	ldr	r3, [pc, #116]	@ (8021eec <SUBGRF_SetRfFrequency+0x84>)
 8021e78:	781b      	ldrb	r3, [r3, #0]
 8021e7a:	f083 0301 	eor.w	r3, r3, #1
 8021e7e:	b2db      	uxtb	r3, r3
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d005      	beq.n	8021e90 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8021e84:	6878      	ldr	r0, [r7, #4]
 8021e86:	f7ff ff27 	bl	8021cd8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8021e8a:	4b18      	ldr	r3, [pc, #96]	@ (8021eec <SUBGRF_SetRfFrequency+0x84>)
 8021e8c:	2201      	movs	r2, #1
 8021e8e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	2200      	movs	r2, #0
 8021e94:	461c      	mov	r4, r3
 8021e96:	4615      	mov	r5, r2
 8021e98:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8021e9c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8021ea0:	4a13      	ldr	r2, [pc, #76]	@ (8021ef0 <SUBGRF_SetRfFrequency+0x88>)
 8021ea2:	f04f 0300 	mov.w	r3, #0
 8021ea6:	4640      	mov	r0, r8
 8021ea8:	4649      	mov	r1, r9
 8021eaa:	f7de ff71 	bl	8000d90 <__aeabi_uldivmod>
 8021eae:	4602      	mov	r2, r0
 8021eb0:	460b      	mov	r3, r1
 8021eb2:	4613      	mov	r3, r2
 8021eb4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	0e1b      	lsrs	r3, r3, #24
 8021eba:	b2db      	uxtb	r3, r3
 8021ebc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8021ebe:	68fb      	ldr	r3, [r7, #12]
 8021ec0:	0c1b      	lsrs	r3, r3, #16
 8021ec2:	b2db      	uxtb	r3, r3
 8021ec4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8021ec6:	68fb      	ldr	r3, [r7, #12]
 8021ec8:	0a1b      	lsrs	r3, r3, #8
 8021eca:	b2db      	uxtb	r3, r3
 8021ecc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8021ece:	68fb      	ldr	r3, [r7, #12]
 8021ed0:	b2db      	uxtb	r3, r3
 8021ed2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8021ed4:	f107 0308 	add.w	r3, r7, #8
 8021ed8:	2204      	movs	r2, #4
 8021eda:	4619      	mov	r1, r3
 8021edc:	2086      	movs	r0, #134	@ 0x86
 8021ede:	f000 fbc7 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021ee2:	bf00      	nop
 8021ee4:	3710      	adds	r7, #16
 8021ee6:	46bd      	mov	sp, r7
 8021ee8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8021eec:	200021c0 	.word	0x200021c0
 8021ef0:	01e84800 	.word	0x01e84800

08021ef4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b082      	sub	sp, #8
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	4603      	mov	r3, r0
 8021efc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8021efe:	79fa      	ldrb	r2, [r7, #7]
 8021f00:	4b09      	ldr	r3, [pc, #36]	@ (8021f28 <SUBGRF_SetPacketType+0x34>)
 8021f02:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8021f04:	79fb      	ldrb	r3, [r7, #7]
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d104      	bne.n	8021f14 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8021f0a:	2100      	movs	r1, #0
 8021f0c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8021f10:	f000 fafe 	bl	8022510 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8021f14:	1dfb      	adds	r3, r7, #7
 8021f16:	2201      	movs	r2, #1
 8021f18:	4619      	mov	r1, r3
 8021f1a:	208a      	movs	r0, #138	@ 0x8a
 8021f1c:	f000 fba8 	bl	8022670 <SUBGRF_WriteCommand>
}
 8021f20:	bf00      	nop
 8021f22:	3708      	adds	r7, #8
 8021f24:	46bd      	mov	sp, r7
 8021f26:	bd80      	pop	{r7, pc}
 8021f28:	200021b9 	.word	0x200021b9

08021f2c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8021f2c:	b480      	push	{r7}
 8021f2e:	af00      	add	r7, sp, #0
    return PacketType;
 8021f30:	4b02      	ldr	r3, [pc, #8]	@ (8021f3c <SUBGRF_GetPacketType+0x10>)
 8021f32:	781b      	ldrb	r3, [r3, #0]
}
 8021f34:	4618      	mov	r0, r3
 8021f36:	46bd      	mov	sp, r7
 8021f38:	bc80      	pop	{r7}
 8021f3a:	4770      	bx	lr
 8021f3c:	200021b9 	.word	0x200021b9

08021f40 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	b084      	sub	sp, #16
 8021f44:	af00      	add	r7, sp, #0
 8021f46:	4603      	mov	r3, r0
 8021f48:	71fb      	strb	r3, [r7, #7]
 8021f4a:	460b      	mov	r3, r1
 8021f4c:	71bb      	strb	r3, [r7, #6]
 8021f4e:	4613      	mov	r3, r2
 8021f50:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8021f52:	79fb      	ldrb	r3, [r7, #7]
 8021f54:	2b01      	cmp	r3, #1
 8021f56:	d149      	bne.n	8021fec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8021f58:	2000      	movs	r0, #0
 8021f5a:	f7ec ff09 	bl	800ed70 <RBI_GetRFOMaxPowerConfig>
 8021f5e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8021f60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8021f64:	68fa      	ldr	r2, [r7, #12]
 8021f66:	429a      	cmp	r2, r3
 8021f68:	da01      	bge.n	8021f6e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	2b0e      	cmp	r3, #14
 8021f72:	d10e      	bne.n	8021f92 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8021f74:	2301      	movs	r3, #1
 8021f76:	2201      	movs	r2, #1
 8021f78:	2100      	movs	r1, #0
 8021f7a:	2004      	movs	r0, #4
 8021f7c:	f7ff fef6 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8021f80:	79ba      	ldrb	r2, [r7, #6]
 8021f82:	68fb      	ldr	r3, [r7, #12]
 8021f84:	b2db      	uxtb	r3, r3
 8021f86:	1ad3      	subs	r3, r2, r3
 8021f88:	b2db      	uxtb	r3, r3
 8021f8a:	330e      	adds	r3, #14
 8021f8c:	b2db      	uxtb	r3, r3
 8021f8e:	71bb      	strb	r3, [r7, #6]
 8021f90:	e01f      	b.n	8021fd2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8021f92:	68fb      	ldr	r3, [r7, #12]
 8021f94:	2b0a      	cmp	r3, #10
 8021f96:	d10e      	bne.n	8021fb6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8021f98:	2301      	movs	r3, #1
 8021f9a:	2201      	movs	r2, #1
 8021f9c:	2100      	movs	r1, #0
 8021f9e:	2001      	movs	r0, #1
 8021fa0:	f7ff fee4 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8021fa4:	79ba      	ldrb	r2, [r7, #6]
 8021fa6:	68fb      	ldr	r3, [r7, #12]
 8021fa8:	b2db      	uxtb	r3, r3
 8021faa:	1ad3      	subs	r3, r2, r3
 8021fac:	b2db      	uxtb	r3, r3
 8021fae:	330d      	adds	r3, #13
 8021fb0:	b2db      	uxtb	r3, r3
 8021fb2:	71bb      	strb	r3, [r7, #6]
 8021fb4:	e00d      	b.n	8021fd2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8021fb6:	2301      	movs	r3, #1
 8021fb8:	2201      	movs	r2, #1
 8021fba:	2100      	movs	r1, #0
 8021fbc:	2007      	movs	r0, #7
 8021fbe:	f7ff fed5 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8021fc2:	79ba      	ldrb	r2, [r7, #6]
 8021fc4:	68fb      	ldr	r3, [r7, #12]
 8021fc6:	b2db      	uxtb	r3, r3
 8021fc8:	1ad3      	subs	r3, r2, r3
 8021fca:	b2db      	uxtb	r3, r3
 8021fcc:	330e      	adds	r3, #14
 8021fce:	b2db      	uxtb	r3, r3
 8021fd0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8021fd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8021fd6:	f113 0f11 	cmn.w	r3, #17
 8021fda:	da01      	bge.n	8021fe0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8021fdc:	23ef      	movs	r3, #239	@ 0xef
 8021fde:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8021fe0:	2118      	movs	r1, #24
 8021fe2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8021fe6:	f000 fa93 	bl	8022510 <SUBGRF_WriteRegister>
 8021fea:	e067      	b.n	80220bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8021fec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8021ff0:	f000 faa2 	bl	8022538 <SUBGRF_ReadRegister>
 8021ff4:	4603      	mov	r3, r0
 8021ff6:	f043 031e 	orr.w	r3, r3, #30
 8021ffa:	b2db      	uxtb	r3, r3
 8021ffc:	4619      	mov	r1, r3
 8021ffe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8022002:	f000 fa85 	bl	8022510 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8022006:	2001      	movs	r0, #1
 8022008:	f7ec feb2 	bl	800ed70 <RBI_GetRFOMaxPowerConfig>
 802200c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 802200e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8022012:	68fa      	ldr	r2, [r7, #12]
 8022014:	429a      	cmp	r2, r3
 8022016:	da01      	bge.n	802201c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8022018:	68fb      	ldr	r3, [r7, #12]
 802201a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 802201c:	68fb      	ldr	r3, [r7, #12]
 802201e:	2b14      	cmp	r3, #20
 8022020:	d10e      	bne.n	8022040 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8022022:	2301      	movs	r3, #1
 8022024:	2200      	movs	r2, #0
 8022026:	2105      	movs	r1, #5
 8022028:	2003      	movs	r0, #3
 802202a:	f7ff fe9f 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 802202e:	79ba      	ldrb	r2, [r7, #6]
 8022030:	68fb      	ldr	r3, [r7, #12]
 8022032:	b2db      	uxtb	r3, r3
 8022034:	1ad3      	subs	r3, r2, r3
 8022036:	b2db      	uxtb	r3, r3
 8022038:	3316      	adds	r3, #22
 802203a:	b2db      	uxtb	r3, r3
 802203c:	71bb      	strb	r3, [r7, #6]
 802203e:	e031      	b.n	80220a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8022040:	68fb      	ldr	r3, [r7, #12]
 8022042:	2b11      	cmp	r3, #17
 8022044:	d10e      	bne.n	8022064 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8022046:	2301      	movs	r3, #1
 8022048:	2200      	movs	r2, #0
 802204a:	2103      	movs	r1, #3
 802204c:	2002      	movs	r0, #2
 802204e:	f7ff fe8d 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8022052:	79ba      	ldrb	r2, [r7, #6]
 8022054:	68fb      	ldr	r3, [r7, #12]
 8022056:	b2db      	uxtb	r3, r3
 8022058:	1ad3      	subs	r3, r2, r3
 802205a:	b2db      	uxtb	r3, r3
 802205c:	3316      	adds	r3, #22
 802205e:	b2db      	uxtb	r3, r3
 8022060:	71bb      	strb	r3, [r7, #6]
 8022062:	e01f      	b.n	80220a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	2b0e      	cmp	r3, #14
 8022068:	d10e      	bne.n	8022088 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 802206a:	2301      	movs	r3, #1
 802206c:	2200      	movs	r2, #0
 802206e:	2102      	movs	r1, #2
 8022070:	2002      	movs	r0, #2
 8022072:	f7ff fe7b 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8022076:	79ba      	ldrb	r2, [r7, #6]
 8022078:	68fb      	ldr	r3, [r7, #12]
 802207a:	b2db      	uxtb	r3, r3
 802207c:	1ad3      	subs	r3, r2, r3
 802207e:	b2db      	uxtb	r3, r3
 8022080:	330e      	adds	r3, #14
 8022082:	b2db      	uxtb	r3, r3
 8022084:	71bb      	strb	r3, [r7, #6]
 8022086:	e00d      	b.n	80220a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8022088:	2301      	movs	r3, #1
 802208a:	2200      	movs	r2, #0
 802208c:	2107      	movs	r1, #7
 802208e:	2004      	movs	r0, #4
 8022090:	f7ff fe6c 	bl	8021d6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8022094:	79ba      	ldrb	r2, [r7, #6]
 8022096:	68fb      	ldr	r3, [r7, #12]
 8022098:	b2db      	uxtb	r3, r3
 802209a:	1ad3      	subs	r3, r2, r3
 802209c:	b2db      	uxtb	r3, r3
 802209e:	3316      	adds	r3, #22
 80220a0:	b2db      	uxtb	r3, r3
 80220a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80220a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80220a8:	f113 0f09 	cmn.w	r3, #9
 80220ac:	da01      	bge.n	80220b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80220ae:	23f7      	movs	r3, #247	@ 0xf7
 80220b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80220b2:	2138      	movs	r1, #56	@ 0x38
 80220b4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80220b8:	f000 fa2a 	bl	8022510 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80220bc:	79bb      	ldrb	r3, [r7, #6]
 80220be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80220c0:	797b      	ldrb	r3, [r7, #5]
 80220c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80220c4:	f107 0308 	add.w	r3, r7, #8
 80220c8:	2202      	movs	r2, #2
 80220ca:	4619      	mov	r1, r3
 80220cc:	208e      	movs	r0, #142	@ 0x8e
 80220ce:	f000 facf 	bl	8022670 <SUBGRF_WriteCommand>
}
 80220d2:	bf00      	nop
 80220d4:	3710      	adds	r7, #16
 80220d6:	46bd      	mov	sp, r7
 80220d8:	bd80      	pop	{r7, pc}
	...

080220dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80220dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80220e0:	b086      	sub	sp, #24
 80220e2:	af00      	add	r7, sp, #0
 80220e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80220e6:	2300      	movs	r3, #0
 80220e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80220ea:	4a61      	ldr	r2, [pc, #388]	@ (8022270 <SUBGRF_SetModulationParams+0x194>)
 80220ec:	f107 0308 	add.w	r3, r7, #8
 80220f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80220f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	781a      	ldrb	r2, [r3, #0]
 80220fc:	4b5d      	ldr	r3, [pc, #372]	@ (8022274 <SUBGRF_SetModulationParams+0x198>)
 80220fe:	781b      	ldrb	r3, [r3, #0]
 8022100:	429a      	cmp	r2, r3
 8022102:	d004      	beq.n	802210e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	781b      	ldrb	r3, [r3, #0]
 8022108:	4618      	mov	r0, r3
 802210a:	f7ff fef3 	bl	8021ef4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	781b      	ldrb	r3, [r3, #0]
 8022112:	2b03      	cmp	r3, #3
 8022114:	f200 80a5 	bhi.w	8022262 <SUBGRF_SetModulationParams+0x186>
 8022118:	a201      	add	r2, pc, #4	@ (adr r2, 8022120 <SUBGRF_SetModulationParams+0x44>)
 802211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802211e:	bf00      	nop
 8022120:	08022131 	.word	0x08022131
 8022124:	080221f1 	.word	0x080221f1
 8022128:	080221b3 	.word	0x080221b3
 802212c:	0802221f 	.word	0x0802221f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8022130:	2308      	movs	r3, #8
 8022132:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	685b      	ldr	r3, [r3, #4]
 8022138:	4a4f      	ldr	r2, [pc, #316]	@ (8022278 <SUBGRF_SetModulationParams+0x19c>)
 802213a:	fbb2 f3f3 	udiv	r3, r2, r3
 802213e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8022140:	697b      	ldr	r3, [r7, #20]
 8022142:	0c1b      	lsrs	r3, r3, #16
 8022144:	b2db      	uxtb	r3, r3
 8022146:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8022148:	697b      	ldr	r3, [r7, #20]
 802214a:	0a1b      	lsrs	r3, r3, #8
 802214c:	b2db      	uxtb	r3, r3
 802214e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8022150:	697b      	ldr	r3, [r7, #20]
 8022152:	b2db      	uxtb	r3, r3
 8022154:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	7b1b      	ldrb	r3, [r3, #12]
 802215a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	7b5b      	ldrb	r3, [r3, #13]
 8022160:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	689b      	ldr	r3, [r3, #8]
 8022166:	2200      	movs	r2, #0
 8022168:	461c      	mov	r4, r3
 802216a:	4615      	mov	r5, r2
 802216c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8022170:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8022174:	4a41      	ldr	r2, [pc, #260]	@ (802227c <SUBGRF_SetModulationParams+0x1a0>)
 8022176:	f04f 0300 	mov.w	r3, #0
 802217a:	4640      	mov	r0, r8
 802217c:	4649      	mov	r1, r9
 802217e:	f7de fe07 	bl	8000d90 <__aeabi_uldivmod>
 8022182:	4602      	mov	r2, r0
 8022184:	460b      	mov	r3, r1
 8022186:	4613      	mov	r3, r2
 8022188:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 802218a:	697b      	ldr	r3, [r7, #20]
 802218c:	0c1b      	lsrs	r3, r3, #16
 802218e:	b2db      	uxtb	r3, r3
 8022190:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8022192:	697b      	ldr	r3, [r7, #20]
 8022194:	0a1b      	lsrs	r3, r3, #8
 8022196:	b2db      	uxtb	r3, r3
 8022198:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 802219a:	697b      	ldr	r3, [r7, #20]
 802219c:	b2db      	uxtb	r3, r3
 802219e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80221a0:	7cfb      	ldrb	r3, [r7, #19]
 80221a2:	b29a      	uxth	r2, r3
 80221a4:	f107 0308 	add.w	r3, r7, #8
 80221a8:	4619      	mov	r1, r3
 80221aa:	208b      	movs	r0, #139	@ 0x8b
 80221ac:	f000 fa60 	bl	8022670 <SUBGRF_WriteCommand>
        break;
 80221b0:	e058      	b.n	8022264 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80221b2:	2304      	movs	r3, #4
 80221b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	691b      	ldr	r3, [r3, #16]
 80221ba:	4a2f      	ldr	r2, [pc, #188]	@ (8022278 <SUBGRF_SetModulationParams+0x19c>)
 80221bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80221c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80221c2:	697b      	ldr	r3, [r7, #20]
 80221c4:	0c1b      	lsrs	r3, r3, #16
 80221c6:	b2db      	uxtb	r3, r3
 80221c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80221ca:	697b      	ldr	r3, [r7, #20]
 80221cc:	0a1b      	lsrs	r3, r3, #8
 80221ce:	b2db      	uxtb	r3, r3
 80221d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80221d2:	697b      	ldr	r3, [r7, #20]
 80221d4:	b2db      	uxtb	r3, r3
 80221d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	7d1b      	ldrb	r3, [r3, #20]
 80221dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80221de:	7cfb      	ldrb	r3, [r7, #19]
 80221e0:	b29a      	uxth	r2, r3
 80221e2:	f107 0308 	add.w	r3, r7, #8
 80221e6:	4619      	mov	r1, r3
 80221e8:	208b      	movs	r0, #139	@ 0x8b
 80221ea:	f000 fa41 	bl	8022670 <SUBGRF_WriteCommand>
        break;
 80221ee:	e039      	b.n	8022264 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80221f0:	2304      	movs	r3, #4
 80221f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	7e1b      	ldrb	r3, [r3, #24]
 80221f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	7e5b      	ldrb	r3, [r3, #25]
 80221fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	7e9b      	ldrb	r3, [r3, #26]
 8022204:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	7edb      	ldrb	r3, [r3, #27]
 802220a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 802220c:	7cfb      	ldrb	r3, [r7, #19]
 802220e:	b29a      	uxth	r2, r3
 8022210:	f107 0308 	add.w	r3, r7, #8
 8022214:	4619      	mov	r1, r3
 8022216:	208b      	movs	r0, #139	@ 0x8b
 8022218:	f000 fa2a 	bl	8022670 <SUBGRF_WriteCommand>

        break;
 802221c:	e022      	b.n	8022264 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 802221e:	2305      	movs	r3, #5
 8022220:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	685b      	ldr	r3, [r3, #4]
 8022226:	4a14      	ldr	r2, [pc, #80]	@ (8022278 <SUBGRF_SetModulationParams+0x19c>)
 8022228:	fbb2 f3f3 	udiv	r3, r2, r3
 802222c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 802222e:	697b      	ldr	r3, [r7, #20]
 8022230:	0c1b      	lsrs	r3, r3, #16
 8022232:	b2db      	uxtb	r3, r3
 8022234:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8022236:	697b      	ldr	r3, [r7, #20]
 8022238:	0a1b      	lsrs	r3, r3, #8
 802223a:	b2db      	uxtb	r3, r3
 802223c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 802223e:	697b      	ldr	r3, [r7, #20]
 8022240:	b2db      	uxtb	r3, r3
 8022242:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	7b1b      	ldrb	r3, [r3, #12]
 8022248:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	7b5b      	ldrb	r3, [r3, #13]
 802224e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8022250:	7cfb      	ldrb	r3, [r7, #19]
 8022252:	b29a      	uxth	r2, r3
 8022254:	f107 0308 	add.w	r3, r7, #8
 8022258:	4619      	mov	r1, r3
 802225a:	208b      	movs	r0, #139	@ 0x8b
 802225c:	f000 fa08 	bl	8022670 <SUBGRF_WriteCommand>
        break;
 8022260:	e000      	b.n	8022264 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8022262:	bf00      	nop
    }
}
 8022264:	bf00      	nop
 8022266:	3718      	adds	r7, #24
 8022268:	46bd      	mov	sp, r7
 802226a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802226e:	bf00      	nop
 8022270:	08028cf0 	.word	0x08028cf0
 8022274:	200021b9 	.word	0x200021b9
 8022278:	3d090000 	.word	0x3d090000
 802227c:	01e84800 	.word	0x01e84800

08022280 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8022280:	b580      	push	{r7, lr}
 8022282:	b086      	sub	sp, #24
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8022288:	2300      	movs	r3, #0
 802228a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 802228c:	4a48      	ldr	r2, [pc, #288]	@ (80223b0 <SUBGRF_SetPacketParams+0x130>)
 802228e:	f107 030c 	add.w	r3, r7, #12
 8022292:	ca07      	ldmia	r2, {r0, r1, r2}
 8022294:	c303      	stmia	r3!, {r0, r1}
 8022296:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	781a      	ldrb	r2, [r3, #0]
 802229c:	4b45      	ldr	r3, [pc, #276]	@ (80223b4 <SUBGRF_SetPacketParams+0x134>)
 802229e:	781b      	ldrb	r3, [r3, #0]
 80222a0:	429a      	cmp	r2, r3
 80222a2:	d004      	beq.n	80222ae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	4618      	mov	r0, r3
 80222aa:	f7ff fe23 	bl	8021ef4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	781b      	ldrb	r3, [r3, #0]
 80222b2:	2b03      	cmp	r3, #3
 80222b4:	d878      	bhi.n	80223a8 <SUBGRF_SetPacketParams+0x128>
 80222b6:	a201      	add	r2, pc, #4	@ (adr r2, 80222bc <SUBGRF_SetPacketParams+0x3c>)
 80222b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80222bc:	080222cd 	.word	0x080222cd
 80222c0:	0802235d 	.word	0x0802235d
 80222c4:	08022351 	.word	0x08022351
 80222c8:	080222cd 	.word	0x080222cd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	7a5b      	ldrb	r3, [r3, #9]
 80222d0:	2bf1      	cmp	r3, #241	@ 0xf1
 80222d2:	d10a      	bne.n	80222ea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80222d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80222d8:	f7ff faaa 	bl	8021830 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80222dc:	f248 0005 	movw	r0, #32773	@ 0x8005
 80222e0:	f7ff fac6 	bl	8021870 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80222e4:	2302      	movs	r3, #2
 80222e6:	75bb      	strb	r3, [r7, #22]
 80222e8:	e011      	b.n	802230e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	7a5b      	ldrb	r3, [r3, #9]
 80222ee:	2bf2      	cmp	r3, #242	@ 0xf2
 80222f0:	d10a      	bne.n	8022308 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80222f2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80222f6:	f7ff fa9b 	bl	8021830 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80222fa:	f241 0021 	movw	r0, #4129	@ 0x1021
 80222fe:	f7ff fab7 	bl	8021870 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8022302:	2306      	movs	r3, #6
 8022304:	75bb      	strb	r3, [r7, #22]
 8022306:	e002      	b.n	802230e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	7a5b      	ldrb	r3, [r3, #9]
 802230c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 802230e:	2309      	movs	r3, #9
 8022310:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	885b      	ldrh	r3, [r3, #2]
 8022316:	0a1b      	lsrs	r3, r3, #8
 8022318:	b29b      	uxth	r3, r3
 802231a:	b2db      	uxtb	r3, r3
 802231c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	885b      	ldrh	r3, [r3, #2]
 8022322:	b2db      	uxtb	r3, r3
 8022324:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	791b      	ldrb	r3, [r3, #4]
 802232a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	795b      	ldrb	r3, [r3, #5]
 8022330:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	799b      	ldrb	r3, [r3, #6]
 8022336:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	79db      	ldrb	r3, [r3, #7]
 802233c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	7a1b      	ldrb	r3, [r3, #8]
 8022342:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8022344:	7dbb      	ldrb	r3, [r7, #22]
 8022346:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	7a9b      	ldrb	r3, [r3, #10]
 802234c:	753b      	strb	r3, [r7, #20]
        break;
 802234e:	e022      	b.n	8022396 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8022350:	2301      	movs	r3, #1
 8022352:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	7b1b      	ldrb	r3, [r3, #12]
 8022358:	733b      	strb	r3, [r7, #12]
        break;
 802235a:	e01c      	b.n	8022396 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 802235c:	2306      	movs	r3, #6
 802235e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	89db      	ldrh	r3, [r3, #14]
 8022364:	0a1b      	lsrs	r3, r3, #8
 8022366:	b29b      	uxth	r3, r3
 8022368:	b2db      	uxtb	r3, r3
 802236a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	89db      	ldrh	r3, [r3, #14]
 8022370:	b2db      	uxtb	r3, r3
 8022372:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	7c1a      	ldrb	r2, [r3, #16]
 8022378:	4b0f      	ldr	r3, [pc, #60]	@ (80223b8 <SUBGRF_SetPacketParams+0x138>)
 802237a:	4611      	mov	r1, r2
 802237c:	7019      	strb	r1, [r3, #0]
 802237e:	4613      	mov	r3, r2
 8022380:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	7c5b      	ldrb	r3, [r3, #17]
 8022386:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	7c9b      	ldrb	r3, [r3, #18]
 802238c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	7cdb      	ldrb	r3, [r3, #19]
 8022392:	747b      	strb	r3, [r7, #17]
        break;
 8022394:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8022396:	7dfb      	ldrb	r3, [r7, #23]
 8022398:	b29a      	uxth	r2, r3
 802239a:	f107 030c 	add.w	r3, r7, #12
 802239e:	4619      	mov	r1, r3
 80223a0:	208c      	movs	r0, #140	@ 0x8c
 80223a2:	f000 f965 	bl	8022670 <SUBGRF_WriteCommand>
 80223a6:	e000      	b.n	80223aa <SUBGRF_SetPacketParams+0x12a>
        return;
 80223a8:	bf00      	nop
}
 80223aa:	3718      	adds	r7, #24
 80223ac:	46bd      	mov	sp, r7
 80223ae:	bd80      	pop	{r7, pc}
 80223b0:	08028cf8 	.word	0x08028cf8
 80223b4:	200021b9 	.word	0x200021b9
 80223b8:	200021ba 	.word	0x200021ba

080223bc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80223bc:	b580      	push	{r7, lr}
 80223be:	b084      	sub	sp, #16
 80223c0:	af00      	add	r7, sp, #0
 80223c2:	4603      	mov	r3, r0
 80223c4:	460a      	mov	r2, r1
 80223c6:	71fb      	strb	r3, [r7, #7]
 80223c8:	4613      	mov	r3, r2
 80223ca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80223cc:	79fb      	ldrb	r3, [r7, #7]
 80223ce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80223d0:	79bb      	ldrb	r3, [r7, #6]
 80223d2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80223d4:	f107 030c 	add.w	r3, r7, #12
 80223d8:	2202      	movs	r2, #2
 80223da:	4619      	mov	r1, r3
 80223dc:	208f      	movs	r0, #143	@ 0x8f
 80223de:	f000 f947 	bl	8022670 <SUBGRF_WriteCommand>
}
 80223e2:	bf00      	nop
 80223e4:	3710      	adds	r7, #16
 80223e6:	46bd      	mov	sp, r7
 80223e8:	bd80      	pop	{r7, pc}

080223ea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80223ea:	b580      	push	{r7, lr}
 80223ec:	b082      	sub	sp, #8
 80223ee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80223f0:	2300      	movs	r3, #0
 80223f2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80223f4:	1d3b      	adds	r3, r7, #4
 80223f6:	2201      	movs	r2, #1
 80223f8:	4619      	mov	r1, r3
 80223fa:	2015      	movs	r0, #21
 80223fc:	f000 f95a 	bl	80226b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8022400:	793b      	ldrb	r3, [r7, #4]
 8022402:	425b      	negs	r3, r3
 8022404:	105b      	asrs	r3, r3, #1
 8022406:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8022408:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 802240c:	4618      	mov	r0, r3
 802240e:	3708      	adds	r7, #8
 8022410:	46bd      	mov	sp, r7
 8022412:	bd80      	pop	{r7, pc}

08022414 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8022414:	b580      	push	{r7, lr}
 8022416:	b084      	sub	sp, #16
 8022418:	af00      	add	r7, sp, #0
 802241a:	6078      	str	r0, [r7, #4]
 802241c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 802241e:	f107 030c 	add.w	r3, r7, #12
 8022422:	2202      	movs	r2, #2
 8022424:	4619      	mov	r1, r3
 8022426:	2013      	movs	r0, #19
 8022428:	f000 f944 	bl	80226b4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 802242c:	f7ff fd7e 	bl	8021f2c <SUBGRF_GetPacketType>
 8022430:	4603      	mov	r3, r0
 8022432:	2b01      	cmp	r3, #1
 8022434:	d10d      	bne.n	8022452 <SUBGRF_GetRxBufferStatus+0x3e>
 8022436:	4b0c      	ldr	r3, [pc, #48]	@ (8022468 <SUBGRF_GetRxBufferStatus+0x54>)
 8022438:	781b      	ldrb	r3, [r3, #0]
 802243a:	b2db      	uxtb	r3, r3
 802243c:	2b01      	cmp	r3, #1
 802243e:	d108      	bne.n	8022452 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8022440:	f240 7002 	movw	r0, #1794	@ 0x702
 8022444:	f000 f878 	bl	8022538 <SUBGRF_ReadRegister>
 8022448:	4603      	mov	r3, r0
 802244a:	461a      	mov	r2, r3
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	701a      	strb	r2, [r3, #0]
 8022450:	e002      	b.n	8022458 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8022452:	7b3a      	ldrb	r2, [r7, #12]
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8022458:	7b7a      	ldrb	r2, [r7, #13]
 802245a:	683b      	ldr	r3, [r7, #0]
 802245c:	701a      	strb	r2, [r3, #0]
}
 802245e:	bf00      	nop
 8022460:	3710      	adds	r7, #16
 8022462:	46bd      	mov	sp, r7
 8022464:	bd80      	pop	{r7, pc}
 8022466:	bf00      	nop
 8022468:	200021ba 	.word	0x200021ba

0802246c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 802246c:	b580      	push	{r7, lr}
 802246e:	b084      	sub	sp, #16
 8022470:	af00      	add	r7, sp, #0
 8022472:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8022474:	f107 030c 	add.w	r3, r7, #12
 8022478:	2203      	movs	r2, #3
 802247a:	4619      	mov	r1, r3
 802247c:	2014      	movs	r0, #20
 802247e:	f000 f919 	bl	80226b4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8022482:	f7ff fd53 	bl	8021f2c <SUBGRF_GetPacketType>
 8022486:	4603      	mov	r3, r0
 8022488:	461a      	mov	r2, r3
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	781b      	ldrb	r3, [r3, #0]
 8022492:	2b00      	cmp	r3, #0
 8022494:	d002      	beq.n	802249c <SUBGRF_GetPacketStatus+0x30>
 8022496:	2b01      	cmp	r3, #1
 8022498:	d013      	beq.n	80224c2 <SUBGRF_GetPacketStatus+0x56>
 802249a:	e02a      	b.n	80224f2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 802249c:	7b3a      	ldrb	r2, [r7, #12]
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80224a2:	7b7b      	ldrb	r3, [r7, #13]
 80224a4:	425b      	negs	r3, r3
 80224a6:	105b      	asrs	r3, r3, #1
 80224a8:	b25a      	sxtb	r2, r3
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80224ae:	7bbb      	ldrb	r3, [r7, #14]
 80224b0:	425b      	negs	r3, r3
 80224b2:	105b      	asrs	r3, r3, #1
 80224b4:	b25a      	sxtb	r2, r3
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	2200      	movs	r2, #0
 80224be:	609a      	str	r2, [r3, #8]
            break;
 80224c0:	e020      	b.n	8022504 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80224c2:	7b3b      	ldrb	r3, [r7, #12]
 80224c4:	425b      	negs	r3, r3
 80224c6:	105b      	asrs	r3, r3, #1
 80224c8:	b25a      	sxtb	r2, r3
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80224ce:	7b7b      	ldrb	r3, [r7, #13]
 80224d0:	b25b      	sxtb	r3, r3
 80224d2:	3302      	adds	r3, #2
 80224d4:	109b      	asrs	r3, r3, #2
 80224d6:	b25a      	sxtb	r2, r3
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80224dc:	7bbb      	ldrb	r3, [r7, #14]
 80224de:	425b      	negs	r3, r3
 80224e0:	105b      	asrs	r3, r3, #1
 80224e2:	b25a      	sxtb	r2, r3
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80224e8:	4b08      	ldr	r3, [pc, #32]	@ (802250c <SUBGRF_GetPacketStatus+0xa0>)
 80224ea:	681a      	ldr	r2, [r3, #0]
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	611a      	str	r2, [r3, #16]
            break;
 80224f0:	e008      	b.n	8022504 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80224f2:	2214      	movs	r2, #20
 80224f4:	2100      	movs	r1, #0
 80224f6:	6878      	ldr	r0, [r7, #4]
 80224f8:	f000 fc03 	bl	8022d02 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	220f      	movs	r2, #15
 8022500:	701a      	strb	r2, [r3, #0]
            break;
 8022502:	bf00      	nop
    }
}
 8022504:	bf00      	nop
 8022506:	3710      	adds	r7, #16
 8022508:	46bd      	mov	sp, r7
 802250a:	bd80      	pop	{r7, pc}
 802250c:	200021bc 	.word	0x200021bc

08022510 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8022510:	b580      	push	{r7, lr}
 8022512:	b082      	sub	sp, #8
 8022514:	af00      	add	r7, sp, #0
 8022516:	4603      	mov	r3, r0
 8022518:	460a      	mov	r2, r1
 802251a:	80fb      	strh	r3, [r7, #6]
 802251c:	4613      	mov	r3, r2
 802251e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8022520:	1d7a      	adds	r2, r7, #5
 8022522:	88f9      	ldrh	r1, [r7, #6]
 8022524:	2301      	movs	r3, #1
 8022526:	4803      	ldr	r0, [pc, #12]	@ (8022534 <SUBGRF_WriteRegister+0x24>)
 8022528:	f7e6 f8be 	bl	80086a8 <HAL_SUBGHZ_WriteRegisters>
}
 802252c:	bf00      	nop
 802252e:	3708      	adds	r7, #8
 8022530:	46bd      	mov	sp, r7
 8022532:	bd80      	pop	{r7, pc}
 8022534:	20000328 	.word	0x20000328

08022538 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8022538:	b580      	push	{r7, lr}
 802253a:	b084      	sub	sp, #16
 802253c:	af00      	add	r7, sp, #0
 802253e:	4603      	mov	r3, r0
 8022540:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8022542:	f107 020f 	add.w	r2, r7, #15
 8022546:	88f9      	ldrh	r1, [r7, #6]
 8022548:	2301      	movs	r3, #1
 802254a:	4804      	ldr	r0, [pc, #16]	@ (802255c <SUBGRF_ReadRegister+0x24>)
 802254c:	f7e6 f90b 	bl	8008766 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8022550:	7bfb      	ldrb	r3, [r7, #15]
}
 8022552:	4618      	mov	r0, r3
 8022554:	3710      	adds	r7, #16
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}
 802255a:	bf00      	nop
 802255c:	20000328 	.word	0x20000328

08022560 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8022560:	b580      	push	{r7, lr}
 8022562:	b086      	sub	sp, #24
 8022564:	af00      	add	r7, sp, #0
 8022566:	4603      	mov	r3, r0
 8022568:	6039      	str	r1, [r7, #0]
 802256a:	80fb      	strh	r3, [r7, #6]
 802256c:	4613      	mov	r3, r2
 802256e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022570:	f3ef 8310 	mrs	r3, PRIMASK
 8022574:	60fb      	str	r3, [r7, #12]
  return(result);
 8022576:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8022578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802257a:	b672      	cpsid	i
}
 802257c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 802257e:	88bb      	ldrh	r3, [r7, #4]
 8022580:	88f9      	ldrh	r1, [r7, #6]
 8022582:	683a      	ldr	r2, [r7, #0]
 8022584:	4806      	ldr	r0, [pc, #24]	@ (80225a0 <SUBGRF_WriteRegisters+0x40>)
 8022586:	f7e6 f88f 	bl	80086a8 <HAL_SUBGHZ_WriteRegisters>
 802258a:	697b      	ldr	r3, [r7, #20]
 802258c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802258e:	693b      	ldr	r3, [r7, #16]
 8022590:	f383 8810 	msr	PRIMASK, r3
}
 8022594:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8022596:	bf00      	nop
 8022598:	3718      	adds	r7, #24
 802259a:	46bd      	mov	sp, r7
 802259c:	bd80      	pop	{r7, pc}
 802259e:	bf00      	nop
 80225a0:	20000328 	.word	0x20000328

080225a4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b086      	sub	sp, #24
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	4603      	mov	r3, r0
 80225ac:	6039      	str	r1, [r7, #0]
 80225ae:	80fb      	strh	r3, [r7, #6]
 80225b0:	4613      	mov	r3, r2
 80225b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80225b4:	f3ef 8310 	mrs	r3, PRIMASK
 80225b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80225ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80225bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80225be:	b672      	cpsid	i
}
 80225c0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80225c2:	88bb      	ldrh	r3, [r7, #4]
 80225c4:	88f9      	ldrh	r1, [r7, #6]
 80225c6:	683a      	ldr	r2, [r7, #0]
 80225c8:	4806      	ldr	r0, [pc, #24]	@ (80225e4 <SUBGRF_ReadRegisters+0x40>)
 80225ca:	f7e6 f8cc 	bl	8008766 <HAL_SUBGHZ_ReadRegisters>
 80225ce:	697b      	ldr	r3, [r7, #20]
 80225d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80225d2:	693b      	ldr	r3, [r7, #16]
 80225d4:	f383 8810 	msr	PRIMASK, r3
}
 80225d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80225da:	bf00      	nop
 80225dc:	3718      	adds	r7, #24
 80225de:	46bd      	mov	sp, r7
 80225e0:	bd80      	pop	{r7, pc}
 80225e2:	bf00      	nop
 80225e4:	20000328 	.word	0x20000328

080225e8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80225e8:	b580      	push	{r7, lr}
 80225ea:	b086      	sub	sp, #24
 80225ec:	af00      	add	r7, sp, #0
 80225ee:	4603      	mov	r3, r0
 80225f0:	6039      	str	r1, [r7, #0]
 80225f2:	71fb      	strb	r3, [r7, #7]
 80225f4:	4613      	mov	r3, r2
 80225f6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80225f8:	f3ef 8310 	mrs	r3, PRIMASK
 80225fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80225fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8022600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022602:	b672      	cpsid	i
}
 8022604:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8022606:	79bb      	ldrb	r3, [r7, #6]
 8022608:	b29b      	uxth	r3, r3
 802260a:	79f9      	ldrb	r1, [r7, #7]
 802260c:	683a      	ldr	r2, [r7, #0]
 802260e:	4806      	ldr	r0, [pc, #24]	@ (8022628 <SUBGRF_WriteBuffer+0x40>)
 8022610:	f7e6 f9bd 	bl	800898e <HAL_SUBGHZ_WriteBuffer>
 8022614:	697b      	ldr	r3, [r7, #20]
 8022616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022618:	693b      	ldr	r3, [r7, #16]
 802261a:	f383 8810 	msr	PRIMASK, r3
}
 802261e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8022620:	bf00      	nop
 8022622:	3718      	adds	r7, #24
 8022624:	46bd      	mov	sp, r7
 8022626:	bd80      	pop	{r7, pc}
 8022628:	20000328 	.word	0x20000328

0802262c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b086      	sub	sp, #24
 8022630:	af00      	add	r7, sp, #0
 8022632:	4603      	mov	r3, r0
 8022634:	6039      	str	r1, [r7, #0]
 8022636:	71fb      	strb	r3, [r7, #7]
 8022638:	4613      	mov	r3, r2
 802263a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802263c:	f3ef 8310 	mrs	r3, PRIMASK
 8022640:	60fb      	str	r3, [r7, #12]
  return(result);
 8022642:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8022644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022646:	b672      	cpsid	i
}
 8022648:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 802264a:	79bb      	ldrb	r3, [r7, #6]
 802264c:	b29b      	uxth	r3, r3
 802264e:	79f9      	ldrb	r1, [r7, #7]
 8022650:	683a      	ldr	r2, [r7, #0]
 8022652:	4806      	ldr	r0, [pc, #24]	@ (802266c <SUBGRF_ReadBuffer+0x40>)
 8022654:	f7e6 f9ee 	bl	8008a34 <HAL_SUBGHZ_ReadBuffer>
 8022658:	697b      	ldr	r3, [r7, #20]
 802265a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802265c:	693b      	ldr	r3, [r7, #16]
 802265e:	f383 8810 	msr	PRIMASK, r3
}
 8022662:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8022664:	bf00      	nop
 8022666:	3718      	adds	r7, #24
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}
 802266c:	20000328 	.word	0x20000328

08022670 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8022670:	b580      	push	{r7, lr}
 8022672:	b086      	sub	sp, #24
 8022674:	af00      	add	r7, sp, #0
 8022676:	4603      	mov	r3, r0
 8022678:	6039      	str	r1, [r7, #0]
 802267a:	71fb      	strb	r3, [r7, #7]
 802267c:	4613      	mov	r3, r2
 802267e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022680:	f3ef 8310 	mrs	r3, PRIMASK
 8022684:	60fb      	str	r3, [r7, #12]
  return(result);
 8022686:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8022688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802268a:	b672      	cpsid	i
}
 802268c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 802268e:	88bb      	ldrh	r3, [r7, #4]
 8022690:	79f9      	ldrb	r1, [r7, #7]
 8022692:	683a      	ldr	r2, [r7, #0]
 8022694:	4806      	ldr	r0, [pc, #24]	@ (80226b0 <SUBGRF_WriteCommand+0x40>)
 8022696:	f7e6 f8c7 	bl	8008828 <HAL_SUBGHZ_ExecSetCmd>
 802269a:	697b      	ldr	r3, [r7, #20]
 802269c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802269e:	693b      	ldr	r3, [r7, #16]
 80226a0:	f383 8810 	msr	PRIMASK, r3
}
 80226a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80226a6:	bf00      	nop
 80226a8:	3718      	adds	r7, #24
 80226aa:	46bd      	mov	sp, r7
 80226ac:	bd80      	pop	{r7, pc}
 80226ae:	bf00      	nop
 80226b0:	20000328 	.word	0x20000328

080226b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b086      	sub	sp, #24
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	4603      	mov	r3, r0
 80226bc:	6039      	str	r1, [r7, #0]
 80226be:	71fb      	strb	r3, [r7, #7]
 80226c0:	4613      	mov	r3, r2
 80226c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80226c4:	f3ef 8310 	mrs	r3, PRIMASK
 80226c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80226ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80226cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80226ce:	b672      	cpsid	i
}
 80226d0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80226d2:	88bb      	ldrh	r3, [r7, #4]
 80226d4:	79f9      	ldrb	r1, [r7, #7]
 80226d6:	683a      	ldr	r2, [r7, #0]
 80226d8:	4806      	ldr	r0, [pc, #24]	@ (80226f4 <SUBGRF_ReadCommand+0x40>)
 80226da:	f7e6 f904 	bl	80088e6 <HAL_SUBGHZ_ExecGetCmd>
 80226de:	697b      	ldr	r3, [r7, #20]
 80226e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80226e2:	693b      	ldr	r3, [r7, #16]
 80226e4:	f383 8810 	msr	PRIMASK, r3
}
 80226e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80226ea:	bf00      	nop
 80226ec:	3718      	adds	r7, #24
 80226ee:	46bd      	mov	sp, r7
 80226f0:	bd80      	pop	{r7, pc}
 80226f2:	bf00      	nop
 80226f4:	20000328 	.word	0x20000328

080226f8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80226f8:	b580      	push	{r7, lr}
 80226fa:	b084      	sub	sp, #16
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	4603      	mov	r3, r0
 8022700:	460a      	mov	r2, r1
 8022702:	71fb      	strb	r3, [r7, #7]
 8022704:	4613      	mov	r3, r2
 8022706:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8022708:	2301      	movs	r3, #1
 802270a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 802270c:	79bb      	ldrb	r3, [r7, #6]
 802270e:	2b01      	cmp	r3, #1
 8022710:	d10d      	bne.n	802272e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8022712:	79fb      	ldrb	r3, [r7, #7]
 8022714:	2b01      	cmp	r3, #1
 8022716:	d104      	bne.n	8022722 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8022718:	2302      	movs	r3, #2
 802271a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 802271c:	2004      	movs	r0, #4
 802271e:	f000 f8ef 	bl	8022900 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8022722:	79fb      	ldrb	r3, [r7, #7]
 8022724:	2b02      	cmp	r3, #2
 8022726:	d107      	bne.n	8022738 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8022728:	2303      	movs	r3, #3
 802272a:	73fb      	strb	r3, [r7, #15]
 802272c:	e004      	b.n	8022738 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 802272e:	79bb      	ldrb	r3, [r7, #6]
 8022730:	2b00      	cmp	r3, #0
 8022732:	d101      	bne.n	8022738 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8022734:	2301      	movs	r3, #1
 8022736:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8022738:	7bfb      	ldrb	r3, [r7, #15]
 802273a:	4618      	mov	r0, r3
 802273c:	f7ec faf5 	bl	800ed2a <RBI_ConfigRFSwitch>
}
 8022740:	bf00      	nop
 8022742:	3710      	adds	r7, #16
 8022744:	46bd      	mov	sp, r7
 8022746:	bd80      	pop	{r7, pc}

08022748 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8022748:	b580      	push	{r7, lr}
 802274a:	b084      	sub	sp, #16
 802274c:	af00      	add	r7, sp, #0
 802274e:	4603      	mov	r3, r0
 8022750:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8022752:	2301      	movs	r3, #1
 8022754:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8022756:	f7ec faf6 	bl	800ed46 <RBI_GetTxConfig>
 802275a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 802275c:	68bb      	ldr	r3, [r7, #8]
 802275e:	2b02      	cmp	r3, #2
 8022760:	d016      	beq.n	8022790 <SUBGRF_SetRfTxPower+0x48>
 8022762:	68bb      	ldr	r3, [r7, #8]
 8022764:	2b02      	cmp	r3, #2
 8022766:	dc16      	bgt.n	8022796 <SUBGRF_SetRfTxPower+0x4e>
 8022768:	68bb      	ldr	r3, [r7, #8]
 802276a:	2b00      	cmp	r3, #0
 802276c:	d003      	beq.n	8022776 <SUBGRF_SetRfTxPower+0x2e>
 802276e:	68bb      	ldr	r3, [r7, #8]
 8022770:	2b01      	cmp	r3, #1
 8022772:	d00a      	beq.n	802278a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8022774:	e00f      	b.n	8022796 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8022776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802277a:	2b0f      	cmp	r3, #15
 802277c:	dd02      	ble.n	8022784 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 802277e:	2302      	movs	r3, #2
 8022780:	73fb      	strb	r3, [r7, #15]
            break;
 8022782:	e009      	b.n	8022798 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8022784:	2301      	movs	r3, #1
 8022786:	73fb      	strb	r3, [r7, #15]
            break;
 8022788:	e006      	b.n	8022798 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 802278a:	2301      	movs	r3, #1
 802278c:	73fb      	strb	r3, [r7, #15]
            break;
 802278e:	e003      	b.n	8022798 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8022790:	2302      	movs	r3, #2
 8022792:	73fb      	strb	r3, [r7, #15]
            break;
 8022794:	e000      	b.n	8022798 <SUBGRF_SetRfTxPower+0x50>
            break;
 8022796:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8022798:	f997 1007 	ldrsb.w	r1, [r7, #7]
 802279c:	7bfb      	ldrb	r3, [r7, #15]
 802279e:	2202      	movs	r2, #2
 80227a0:	4618      	mov	r0, r3
 80227a2:	f7ff fbcd 	bl	8021f40 <SUBGRF_SetTxParams>

    return paSelect;
 80227a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80227a8:	4618      	mov	r0, r3
 80227aa:	3710      	adds	r7, #16
 80227ac:	46bd      	mov	sp, r7
 80227ae:	bd80      	pop	{r7, pc}

080227b0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80227b0:	b480      	push	{r7}
 80227b2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80227b4:	2301      	movs	r3, #1
}
 80227b6:	4618      	mov	r0, r3
 80227b8:	46bd      	mov	sp, r7
 80227ba:	bc80      	pop	{r7}
 80227bc:	4770      	bx	lr
	...

080227c0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80227c0:	b580      	push	{r7, lr}
 80227c2:	b082      	sub	sp, #8
 80227c4:	af00      	add	r7, sp, #0
 80227c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80227c8:	4b03      	ldr	r3, [pc, #12]	@ (80227d8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	2001      	movs	r0, #1
 80227ce:	4798      	blx	r3
}
 80227d0:	bf00      	nop
 80227d2:	3708      	adds	r7, #8
 80227d4:	46bd      	mov	sp, r7
 80227d6:	bd80      	pop	{r7, pc}
 80227d8:	200021c4 	.word	0x200021c4

080227dc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b082      	sub	sp, #8
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80227e4:	4b03      	ldr	r3, [pc, #12]	@ (80227f4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80227e6:	681b      	ldr	r3, [r3, #0]
 80227e8:	2002      	movs	r0, #2
 80227ea:	4798      	blx	r3
}
 80227ec:	bf00      	nop
 80227ee:	3708      	adds	r7, #8
 80227f0:	46bd      	mov	sp, r7
 80227f2:	bd80      	pop	{r7, pc}
 80227f4:	200021c4 	.word	0x200021c4

080227f8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80227f8:	b580      	push	{r7, lr}
 80227fa:	b082      	sub	sp, #8
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8022800:	4b03      	ldr	r3, [pc, #12]	@ (8022810 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	2040      	movs	r0, #64	@ 0x40
 8022806:	4798      	blx	r3
}
 8022808:	bf00      	nop
 802280a:	3708      	adds	r7, #8
 802280c:	46bd      	mov	sp, r7
 802280e:	bd80      	pop	{r7, pc}
 8022810:	200021c4 	.word	0x200021c4

08022814 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8022814:	b580      	push	{r7, lr}
 8022816:	b082      	sub	sp, #8
 8022818:	af00      	add	r7, sp, #0
 802281a:	6078      	str	r0, [r7, #4]
 802281c:	460b      	mov	r3, r1
 802281e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8022820:	78fb      	ldrb	r3, [r7, #3]
 8022822:	2b00      	cmp	r3, #0
 8022824:	d002      	beq.n	802282c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8022826:	2b01      	cmp	r3, #1
 8022828:	d005      	beq.n	8022836 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 802282a:	e00a      	b.n	8022842 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 802282c:	4b07      	ldr	r3, [pc, #28]	@ (802284c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 802282e:	681b      	ldr	r3, [r3, #0]
 8022830:	2080      	movs	r0, #128	@ 0x80
 8022832:	4798      	blx	r3
            break;
 8022834:	e005      	b.n	8022842 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8022836:	4b05      	ldr	r3, [pc, #20]	@ (802284c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 802283e:	4798      	blx	r3
            break;
 8022840:	bf00      	nop
    }
}
 8022842:	bf00      	nop
 8022844:	3708      	adds	r7, #8
 8022846:	46bd      	mov	sp, r7
 8022848:	bd80      	pop	{r7, pc}
 802284a:	bf00      	nop
 802284c:	200021c4 	.word	0x200021c4

08022850 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8022850:	b580      	push	{r7, lr}
 8022852:	b082      	sub	sp, #8
 8022854:	af00      	add	r7, sp, #0
 8022856:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8022858:	4b04      	ldr	r3, [pc, #16]	@ (802286c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8022860:	4798      	blx	r3
}
 8022862:	bf00      	nop
 8022864:	3708      	adds	r7, #8
 8022866:	46bd      	mov	sp, r7
 8022868:	bd80      	pop	{r7, pc}
 802286a:	bf00      	nop
 802286c:	200021c4 	.word	0x200021c4

08022870 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	b082      	sub	sp, #8
 8022874:	af00      	add	r7, sp, #0
 8022876:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8022878:	4b03      	ldr	r3, [pc, #12]	@ (8022888 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	2020      	movs	r0, #32
 802287e:	4798      	blx	r3
}
 8022880:	bf00      	nop
 8022882:	3708      	adds	r7, #8
 8022884:	46bd      	mov	sp, r7
 8022886:	bd80      	pop	{r7, pc}
 8022888:	200021c4 	.word	0x200021c4

0802288c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b082      	sub	sp, #8
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8022894:	4b03      	ldr	r3, [pc, #12]	@ (80228a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	2004      	movs	r0, #4
 802289a:	4798      	blx	r3
}
 802289c:	bf00      	nop
 802289e:	3708      	adds	r7, #8
 80228a0:	46bd      	mov	sp, r7
 80228a2:	bd80      	pop	{r7, pc}
 80228a4:	200021c4 	.word	0x200021c4

080228a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80228a8:	b580      	push	{r7, lr}
 80228aa:	b082      	sub	sp, #8
 80228ac:	af00      	add	r7, sp, #0
 80228ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80228b0:	4b03      	ldr	r3, [pc, #12]	@ (80228c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	2008      	movs	r0, #8
 80228b6:	4798      	blx	r3
}
 80228b8:	bf00      	nop
 80228ba:	3708      	adds	r7, #8
 80228bc:	46bd      	mov	sp, r7
 80228be:	bd80      	pop	{r7, pc}
 80228c0:	200021c4 	.word	0x200021c4

080228c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80228c4:	b580      	push	{r7, lr}
 80228c6:	b082      	sub	sp, #8
 80228c8:	af00      	add	r7, sp, #0
 80228ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80228cc:	4b03      	ldr	r3, [pc, #12]	@ (80228dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80228ce:	681b      	ldr	r3, [r3, #0]
 80228d0:	2010      	movs	r0, #16
 80228d2:	4798      	blx	r3
}
 80228d4:	bf00      	nop
 80228d6:	3708      	adds	r7, #8
 80228d8:	46bd      	mov	sp, r7
 80228da:	bd80      	pop	{r7, pc}
 80228dc:	200021c4 	.word	0x200021c4

080228e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80228e0:	b580      	push	{r7, lr}
 80228e2:	b082      	sub	sp, #8
 80228e4:	af00      	add	r7, sp, #0
 80228e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80228e8:	4b04      	ldr	r3, [pc, #16]	@ (80228fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80228f0:	4798      	blx	r3
}
 80228f2:	bf00      	nop
 80228f4:	3708      	adds	r7, #8
 80228f6:	46bd      	mov	sp, r7
 80228f8:	bd80      	pop	{r7, pc}
 80228fa:	bf00      	nop
 80228fc:	200021c4 	.word	0x200021c4

08022900 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8022900:	b580      	push	{r7, lr}
 8022902:	b084      	sub	sp, #16
 8022904:	af00      	add	r7, sp, #0
 8022906:	4603      	mov	r3, r0
 8022908:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 802290a:	f7ec fa2a 	bl	800ed62 <RBI_IsDCDC>
 802290e:	4603      	mov	r3, r0
 8022910:	2b01      	cmp	r3, #1
 8022912:	d112      	bne.n	802293a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8022914:	f640 1023 	movw	r0, #2339	@ 0x923
 8022918:	f7ff fe0e 	bl	8022538 <SUBGRF_ReadRegister>
 802291c:	4603      	mov	r3, r0
 802291e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8022920:	7bfb      	ldrb	r3, [r7, #15]
 8022922:	f023 0306 	bic.w	r3, r3, #6
 8022926:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8022928:	7bfa      	ldrb	r2, [r7, #15]
 802292a:	79fb      	ldrb	r3, [r7, #7]
 802292c:	4313      	orrs	r3, r2
 802292e:	b2db      	uxtb	r3, r3
 8022930:	4619      	mov	r1, r3
 8022932:	f640 1023 	movw	r0, #2339	@ 0x923
 8022936:	f7ff fdeb 	bl	8022510 <SUBGRF_WriteRegister>
  }
}
 802293a:	bf00      	nop
 802293c:	3710      	adds	r7, #16
 802293e:	46bd      	mov	sp, r7
 8022940:	bd80      	pop	{r7, pc}
	...

08022944 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8022944:	b480      	push	{r7}
 8022946:	b085      	sub	sp, #20
 8022948:	af00      	add	r7, sp, #0
 802294a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	2b00      	cmp	r3, #0
 8022950:	d101      	bne.n	8022956 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8022952:	231f      	movs	r3, #31
 8022954:	e017      	b.n	8022986 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8022956:	2300      	movs	r3, #0
 8022958:	73fb      	strb	r3, [r7, #15]
 802295a:	e00f      	b.n	802297c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 802295c:	7bfb      	ldrb	r3, [r7, #15]
 802295e:	4a0c      	ldr	r2, [pc, #48]	@ (8022990 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8022960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022964:	687a      	ldr	r2, [r7, #4]
 8022966:	429a      	cmp	r2, r3
 8022968:	d205      	bcs.n	8022976 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 802296a:	7bfb      	ldrb	r3, [r7, #15]
 802296c:	4a08      	ldr	r2, [pc, #32]	@ (8022990 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 802296e:	00db      	lsls	r3, r3, #3
 8022970:	4413      	add	r3, r2
 8022972:	791b      	ldrb	r3, [r3, #4]
 8022974:	e007      	b.n	8022986 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8022976:	7bfb      	ldrb	r3, [r7, #15]
 8022978:	3301      	adds	r3, #1
 802297a:	73fb      	strb	r3, [r7, #15]
 802297c:	7bfb      	ldrb	r3, [r7, #15]
 802297e:	2b15      	cmp	r3, #21
 8022980:	d9ec      	bls.n	802295c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8022982:	bf00      	nop
 8022984:	e7fd      	b.n	8022982 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8022986:	4618      	mov	r0, r3
 8022988:	3714      	adds	r7, #20
 802298a:	46bd      	mov	sp, r7
 802298c:	bc80      	pop	{r7}
 802298e:	4770      	bx	lr
 8022990:	080298a8 	.word	0x080298a8

08022994 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8022994:	b580      	push	{r7, lr}
 8022996:	b08a      	sub	sp, #40	@ 0x28
 8022998:	af00      	add	r7, sp, #0
 802299a:	6078      	str	r0, [r7, #4]
 802299c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 802299e:	4b35      	ldr	r3, [pc, #212]	@ (8022a74 <SUBGRF_GetCFO+0xe0>)
 80229a0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80229a2:	f640 0007 	movw	r0, #2055	@ 0x807
 80229a6:	f7ff fdc7 	bl	8022538 <SUBGRF_ReadRegister>
 80229aa:	4603      	mov	r3, r0
 80229ac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80229ae:	7ffb      	ldrb	r3, [r7, #31]
 80229b0:	08db      	lsrs	r3, r3, #3
 80229b2:	b2db      	uxtb	r3, r3
 80229b4:	f003 0303 	and.w	r3, r3, #3
 80229b8:	3328      	adds	r3, #40	@ 0x28
 80229ba:	443b      	add	r3, r7
 80229bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80229c0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80229c2:	7ffb      	ldrb	r3, [r7, #31]
 80229c4:	f003 0307 	and.w	r3, r3, #7
 80229c8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80229ca:	7fba      	ldrb	r2, [r7, #30]
 80229cc:	7f7b      	ldrb	r3, [r7, #29]
 80229ce:	3301      	adds	r3, #1
 80229d0:	fa02 f303 	lsl.w	r3, r2, r3
 80229d4:	461a      	mov	r2, r3
 80229d6:	4b28      	ldr	r3, [pc, #160]	@ (8022a78 <SUBGRF_GetCFO+0xe4>)
 80229d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80229dc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80229de:	69ba      	ldr	r2, [r7, #24]
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80229e6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80229e8:	2301      	movs	r3, #1
 80229ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80229ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80229f2:	697a      	ldr	r2, [r7, #20]
 80229f4:	fb02 f303 	mul.w	r3, r2, r3
 80229f8:	2b07      	cmp	r3, #7
 80229fa:	d802      	bhi.n	8022a02 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 80229fc:	2302      	movs	r3, #2
 80229fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8022a02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022a06:	697a      	ldr	r2, [r7, #20]
 8022a08:	fb02 f303 	mul.w	r3, r2, r3
 8022a0c:	2b03      	cmp	r3, #3
 8022a0e:	d802      	bhi.n	8022a16 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8022a10:	2304      	movs	r3, #4
 8022a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8022a16:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8022a1a:	69bb      	ldr	r3, [r7, #24]
 8022a1c:	fb02 f303 	mul.w	r3, r2, r3
 8022a20:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8022a22:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8022a26:	f7ff fd87 	bl	8022538 <SUBGRF_ReadRegister>
 8022a2a:	4603      	mov	r3, r0
 8022a2c:	021b      	lsls	r3, r3, #8
 8022a2e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022a32:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8022a34:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8022a38:	f7ff fd7e 	bl	8022538 <SUBGRF_ReadRegister>
 8022a3c:	4603      	mov	r3, r0
 8022a3e:	461a      	mov	r2, r3
 8022a40:	6a3b      	ldr	r3, [r7, #32]
 8022a42:	4313      	orrs	r3, r2
 8022a44:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8022a46:	6a3b      	ldr	r3, [r7, #32]
 8022a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d005      	beq.n	8022a5c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8022a50:	6a3b      	ldr	r3, [r7, #32]
 8022a52:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8022a56:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8022a5a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8022a5c:	693b      	ldr	r3, [r7, #16]
 8022a5e:	095b      	lsrs	r3, r3, #5
 8022a60:	6a3a      	ldr	r2, [r7, #32]
 8022a62:	fb02 f303 	mul.w	r3, r2, r3
 8022a66:	11da      	asrs	r2, r3, #7
 8022a68:	683b      	ldr	r3, [r7, #0]
 8022a6a:	601a      	str	r2, [r3, #0]
}
 8022a6c:	bf00      	nop
 8022a6e:	3728      	adds	r7, #40	@ 0x28
 8022a70:	46bd      	mov	sp, r7
 8022a72:	bd80      	pop	{r7, pc}
 8022a74:	0c0a0804 	.word	0x0c0a0804
 8022a78:	01e84800 	.word	0x01e84800

08022a7c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8022a7c:	b480      	push	{r7}
 8022a7e:	b087      	sub	sp, #28
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	4603      	mov	r3, r0
 8022a84:	60b9      	str	r1, [r7, #8]
 8022a86:	607a      	str	r2, [r7, #4]
 8022a88:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8022a8a:	2300      	movs	r3, #0
 8022a8c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8022a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022a92:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8022a94:	697b      	ldr	r3, [r7, #20]
}
 8022a96:	4618      	mov	r0, r3
 8022a98:	371c      	adds	r7, #28
 8022a9a:	46bd      	mov	sp, r7
 8022a9c:	bc80      	pop	{r7}
 8022a9e:	4770      	bx	lr

08022aa0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8022aa0:	b480      	push	{r7}
 8022aa2:	b087      	sub	sp, #28
 8022aa4:	af00      	add	r7, sp, #0
 8022aa6:	4603      	mov	r3, r0
 8022aa8:	60b9      	str	r1, [r7, #8]
 8022aaa:	607a      	str	r2, [r7, #4]
 8022aac:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8022aae:	2300      	movs	r3, #0
 8022ab0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8022ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022ab6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8022ab8:	697b      	ldr	r3, [r7, #20]
}
 8022aba:	4618      	mov	r0, r3
 8022abc:	371c      	adds	r7, #28
 8022abe:	46bd      	mov	sp, r7
 8022ac0:	bc80      	pop	{r7}
 8022ac2:	4770      	bx	lr

08022ac4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8022ac4:	b480      	push	{r7}
 8022ac6:	b085      	sub	sp, #20
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	60f8      	str	r0, [r7, #12]
 8022acc:	60b9      	str	r1, [r7, #8]
 8022ace:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8022ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	3714      	adds	r7, #20
 8022ad8:	46bd      	mov	sp, r7
 8022ada:	bc80      	pop	{r7}
 8022adc:	4770      	bx	lr

08022ade <RFW_DeInit>:

void RFW_DeInit( void )
{
 8022ade:	b480      	push	{r7}
 8022ae0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8022ae2:	bf00      	nop
 8022ae4:	46bd      	mov	sp, r7
 8022ae6:	bc80      	pop	{r7}
 8022ae8:	4770      	bx	lr

08022aea <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8022aea:	b480      	push	{r7}
 8022aec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8022aee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8022af0:	4618      	mov	r0, r3
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bc80      	pop	{r7}
 8022af6:	4770      	bx	lr

08022af8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8022af8:	b480      	push	{r7}
 8022afa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8022afc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8022afe:	4618      	mov	r0, r3
 8022b00:	46bd      	mov	sp, r7
 8022b02:	bc80      	pop	{r7}
 8022b04:	4770      	bx	lr

08022b06 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8022b06:	b480      	push	{r7}
 8022b08:	b083      	sub	sp, #12
 8022b0a:	af00      	add	r7, sp, #0
 8022b0c:	4603      	mov	r3, r0
 8022b0e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8022b10:	bf00      	nop
 8022b12:	370c      	adds	r7, #12
 8022b14:	46bd      	mov	sp, r7
 8022b16:	bc80      	pop	{r7}
 8022b18:	4770      	bx	lr

08022b1a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8022b1a:	b480      	push	{r7}
 8022b1c:	b087      	sub	sp, #28
 8022b1e:	af00      	add	r7, sp, #0
 8022b20:	60f8      	str	r0, [r7, #12]
 8022b22:	460b      	mov	r3, r1
 8022b24:	607a      	str	r2, [r7, #4]
 8022b26:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8022b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022b2c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8022b2e:	697b      	ldr	r3, [r7, #20]
}
 8022b30:	4618      	mov	r0, r3
 8022b32:	371c      	adds	r7, #28
 8022b34:	46bd      	mov	sp, r7
 8022b36:	bc80      	pop	{r7}
 8022b38:	4770      	bx	lr

08022b3a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8022b3a:	b480      	push	{r7}
 8022b3c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8022b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8022b42:	4618      	mov	r0, r3
 8022b44:	46bd      	mov	sp, r7
 8022b46:	bc80      	pop	{r7}
 8022b48:	4770      	bx	lr

08022b4a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8022b4a:	b480      	push	{r7}
 8022b4c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8022b4e:	bf00      	nop
 8022b50:	46bd      	mov	sp, r7
 8022b52:	bc80      	pop	{r7}
 8022b54:	4770      	bx	lr

08022b56 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8022b56:	b480      	push	{r7}
 8022b58:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8022b5a:	bf00      	nop
 8022b5c:	46bd      	mov	sp, r7
 8022b5e:	bc80      	pop	{r7}
 8022b60:	4770      	bx	lr

08022b62 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8022b62:	b480      	push	{r7}
 8022b64:	b083      	sub	sp, #12
 8022b66:	af00      	add	r7, sp, #0
 8022b68:	4603      	mov	r3, r0
 8022b6a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8022b6c:	bf00      	nop
 8022b6e:	370c      	adds	r7, #12
 8022b70:	46bd      	mov	sp, r7
 8022b72:	bc80      	pop	{r7}
 8022b74:	4770      	bx	lr
	...

08022b78 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8022b78:	b480      	push	{r7}
 8022b7a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8022b7c:	4b04      	ldr	r3, [pc, #16]	@ (8022b90 <UTIL_LPM_Init+0x18>)
 8022b7e:	2200      	movs	r2, #0
 8022b80:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8022b82:	4b04      	ldr	r3, [pc, #16]	@ (8022b94 <UTIL_LPM_Init+0x1c>)
 8022b84:	2200      	movs	r2, #0
 8022b86:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8022b88:	bf00      	nop
 8022b8a:	46bd      	mov	sp, r7
 8022b8c:	bc80      	pop	{r7}
 8022b8e:	4770      	bx	lr
 8022b90:	200021c8 	.word	0x200021c8
 8022b94:	200021cc 	.word	0x200021cc

08022b98 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8022b98:	b480      	push	{r7}
 8022b9a:	b087      	sub	sp, #28
 8022b9c:	af00      	add	r7, sp, #0
 8022b9e:	6078      	str	r0, [r7, #4]
 8022ba0:	460b      	mov	r3, r1
 8022ba2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8022ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8022baa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8022bac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022bae:	b672      	cpsid	i
}
 8022bb0:	bf00      	nop
  
  switch( state )
 8022bb2:	78fb      	ldrb	r3, [r7, #3]
 8022bb4:	2b00      	cmp	r3, #0
 8022bb6:	d008      	beq.n	8022bca <UTIL_LPM_SetStopMode+0x32>
 8022bb8:	2b01      	cmp	r3, #1
 8022bba:	d10e      	bne.n	8022bda <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8022bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8022bf4 <UTIL_LPM_SetStopMode+0x5c>)
 8022bbe:	681a      	ldr	r2, [r3, #0]
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	4313      	orrs	r3, r2
 8022bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8022bf4 <UTIL_LPM_SetStopMode+0x5c>)
 8022bc6:	6013      	str	r3, [r2, #0]
      break;
 8022bc8:	e008      	b.n	8022bdc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	43da      	mvns	r2, r3
 8022bce:	4b09      	ldr	r3, [pc, #36]	@ (8022bf4 <UTIL_LPM_SetStopMode+0x5c>)
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	4013      	ands	r3, r2
 8022bd4:	4a07      	ldr	r2, [pc, #28]	@ (8022bf4 <UTIL_LPM_SetStopMode+0x5c>)
 8022bd6:	6013      	str	r3, [r2, #0]
      break;
 8022bd8:	e000      	b.n	8022bdc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8022bda:	bf00      	nop
 8022bdc:	697b      	ldr	r3, [r7, #20]
 8022bde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	f383 8810 	msr	PRIMASK, r3
}
 8022be6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8022be8:	bf00      	nop
 8022bea:	371c      	adds	r7, #28
 8022bec:	46bd      	mov	sp, r7
 8022bee:	bc80      	pop	{r7}
 8022bf0:	4770      	bx	lr
 8022bf2:	bf00      	nop
 8022bf4:	200021c8 	.word	0x200021c8

08022bf8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8022bf8:	b480      	push	{r7}
 8022bfa:	b087      	sub	sp, #28
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
 8022c00:	460b      	mov	r3, r1
 8022c02:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022c04:	f3ef 8310 	mrs	r3, PRIMASK
 8022c08:	613b      	str	r3, [r7, #16]
  return(result);
 8022c0a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8022c0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8022c0e:	b672      	cpsid	i
}
 8022c10:	bf00      	nop
  
  switch(state)
 8022c12:	78fb      	ldrb	r3, [r7, #3]
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d008      	beq.n	8022c2a <UTIL_LPM_SetOffMode+0x32>
 8022c18:	2b01      	cmp	r3, #1
 8022c1a:	d10e      	bne.n	8022c3a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8022c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8022c54 <UTIL_LPM_SetOffMode+0x5c>)
 8022c1e:	681a      	ldr	r2, [r3, #0]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	4313      	orrs	r3, r2
 8022c24:	4a0b      	ldr	r2, [pc, #44]	@ (8022c54 <UTIL_LPM_SetOffMode+0x5c>)
 8022c26:	6013      	str	r3, [r2, #0]
      break;
 8022c28:	e008      	b.n	8022c3c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	43da      	mvns	r2, r3
 8022c2e:	4b09      	ldr	r3, [pc, #36]	@ (8022c54 <UTIL_LPM_SetOffMode+0x5c>)
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	4013      	ands	r3, r2
 8022c34:	4a07      	ldr	r2, [pc, #28]	@ (8022c54 <UTIL_LPM_SetOffMode+0x5c>)
 8022c36:	6013      	str	r3, [r2, #0]
      break;
 8022c38:	e000      	b.n	8022c3c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8022c3a:	bf00      	nop
 8022c3c:	697b      	ldr	r3, [r7, #20]
 8022c3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022c40:	68fb      	ldr	r3, [r7, #12]
 8022c42:	f383 8810 	msr	PRIMASK, r3
}
 8022c46:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8022c48:	bf00      	nop
 8022c4a:	371c      	adds	r7, #28
 8022c4c:	46bd      	mov	sp, r7
 8022c4e:	bc80      	pop	{r7}
 8022c50:	4770      	bx	lr
 8022c52:	bf00      	nop
 8022c54:	200021cc 	.word	0x200021cc

08022c58 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8022c58:	b580      	push	{r7, lr}
 8022c5a:	b084      	sub	sp, #16
 8022c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8022c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8022c64:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8022c66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8022c68:	b672      	cpsid	i
}
 8022c6a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8022c6c:	4b12      	ldr	r3, [pc, #72]	@ (8022cb8 <UTIL_LPM_EnterLowPower+0x60>)
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d006      	beq.n	8022c82 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8022c74:	4b11      	ldr	r3, [pc, #68]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8022c7a:	4b10      	ldr	r3, [pc, #64]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022c7c:	685b      	ldr	r3, [r3, #4]
 8022c7e:	4798      	blx	r3
 8022c80:	e010      	b.n	8022ca4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8022c82:	4b0f      	ldr	r3, [pc, #60]	@ (8022cc0 <UTIL_LPM_EnterLowPower+0x68>)
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d006      	beq.n	8022c98 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8022c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022c8c:	689b      	ldr	r3, [r3, #8]
 8022c8e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8022c90:	4b0a      	ldr	r3, [pc, #40]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022c92:	68db      	ldr	r3, [r3, #12]
 8022c94:	4798      	blx	r3
 8022c96:	e005      	b.n	8022ca4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8022c98:	4b08      	ldr	r3, [pc, #32]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022c9a:	691b      	ldr	r3, [r3, #16]
 8022c9c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8022c9e:	4b07      	ldr	r3, [pc, #28]	@ (8022cbc <UTIL_LPM_EnterLowPower+0x64>)
 8022ca0:	695b      	ldr	r3, [r3, #20]
 8022ca2:	4798      	blx	r3
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	f383 8810 	msr	PRIMASK, r3
}
 8022cae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8022cb0:	bf00      	nop
 8022cb2:	3710      	adds	r7, #16
 8022cb4:	46bd      	mov	sp, r7
 8022cb6:	bd80      	pop	{r7, pc}
 8022cb8:	200021c8 	.word	0x200021c8
 8022cbc:	08028d88 	.word	0x08028d88
 8022cc0:	200021cc 	.word	0x200021cc

08022cc4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8022cc4:	b480      	push	{r7}
 8022cc6:	b087      	sub	sp, #28
 8022cc8:	af00      	add	r7, sp, #0
 8022cca:	60f8      	str	r0, [r7, #12]
 8022ccc:	60b9      	str	r1, [r7, #8]
 8022cce:	4613      	mov	r3, r2
 8022cd0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8022cd2:	68fb      	ldr	r3, [r7, #12]
 8022cd4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8022cd6:	68bb      	ldr	r3, [r7, #8]
 8022cd8:	613b      	str	r3, [r7, #16]

  while( size-- )
 8022cda:	e007      	b.n	8022cec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8022cdc:	693a      	ldr	r2, [r7, #16]
 8022cde:	1c53      	adds	r3, r2, #1
 8022ce0:	613b      	str	r3, [r7, #16]
 8022ce2:	697b      	ldr	r3, [r7, #20]
 8022ce4:	1c59      	adds	r1, r3, #1
 8022ce6:	6179      	str	r1, [r7, #20]
 8022ce8:	7812      	ldrb	r2, [r2, #0]
 8022cea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8022cec:	88fb      	ldrh	r3, [r7, #6]
 8022cee:	1e5a      	subs	r2, r3, #1
 8022cf0:	80fa      	strh	r2, [r7, #6]
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d1f2      	bne.n	8022cdc <UTIL_MEM_cpy_8+0x18>
    }
}
 8022cf6:	bf00      	nop
 8022cf8:	bf00      	nop
 8022cfa:	371c      	adds	r7, #28
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	bc80      	pop	{r7}
 8022d00:	4770      	bx	lr

08022d02 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8022d02:	b480      	push	{r7}
 8022d04:	b085      	sub	sp, #20
 8022d06:	af00      	add	r7, sp, #0
 8022d08:	6078      	str	r0, [r7, #4]
 8022d0a:	460b      	mov	r3, r1
 8022d0c:	70fb      	strb	r3, [r7, #3]
 8022d0e:	4613      	mov	r3, r2
 8022d10:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8022d16:	e004      	b.n	8022d22 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	1c5a      	adds	r2, r3, #1
 8022d1c:	60fa      	str	r2, [r7, #12]
 8022d1e:	78fa      	ldrb	r2, [r7, #3]
 8022d20:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8022d22:	883b      	ldrh	r3, [r7, #0]
 8022d24:	1e5a      	subs	r2, r3, #1
 8022d26:	803a      	strh	r2, [r7, #0]
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d1f5      	bne.n	8022d18 <UTIL_MEM_set_8+0x16>
  }
}
 8022d2c:	bf00      	nop
 8022d2e:	bf00      	nop
 8022d30:	3714      	adds	r7, #20
 8022d32:	46bd      	mov	sp, r7
 8022d34:	bc80      	pop	{r7}
 8022d36:	4770      	bx	lr

08022d38 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8022d38:	b082      	sub	sp, #8
 8022d3a:	b480      	push	{r7}
 8022d3c:	b087      	sub	sp, #28
 8022d3e:	af00      	add	r7, sp, #0
 8022d40:	60f8      	str	r0, [r7, #12]
 8022d42:	1d38      	adds	r0, r7, #4
 8022d44:	e880 0006 	stmia.w	r0, {r1, r2}
 8022d48:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8022d4a:	2300      	movs	r3, #0
 8022d4c:	613b      	str	r3, [r7, #16]
 8022d4e:	2300      	movs	r3, #0
 8022d50:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8022d52:	687a      	ldr	r2, [r7, #4]
 8022d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d56:	4413      	add	r3, r2
 8022d58:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8022d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8022d5e:	b29a      	uxth	r2, r3
 8022d60:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8022d64:	b29b      	uxth	r3, r3
 8022d66:	4413      	add	r3, r2
 8022d68:	b29b      	uxth	r3, r3
 8022d6a:	b21b      	sxth	r3, r3
 8022d6c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8022d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022d76:	db0a      	blt.n	8022d8e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8022d78:	693b      	ldr	r3, [r7, #16]
 8022d7a:	3301      	adds	r3, #1
 8022d7c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8022d7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022d82:	b29b      	uxth	r3, r3
 8022d84:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8022d88:	b29b      	uxth	r3, r3
 8022d8a:	b21b      	sxth	r3, r3
 8022d8c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	461a      	mov	r2, r3
 8022d92:	f107 0310 	add.w	r3, r7, #16
 8022d96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022d9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022d9e:	68f8      	ldr	r0, [r7, #12]
 8022da0:	371c      	adds	r7, #28
 8022da2:	46bd      	mov	sp, r7
 8022da4:	bc80      	pop	{r7}
 8022da6:	b002      	add	sp, #8
 8022da8:	4770      	bx	lr

08022daa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8022daa:	b082      	sub	sp, #8
 8022dac:	b480      	push	{r7}
 8022dae:	b087      	sub	sp, #28
 8022db0:	af00      	add	r7, sp, #0
 8022db2:	60f8      	str	r0, [r7, #12]
 8022db4:	1d38      	adds	r0, r7, #4
 8022db6:	e880 0006 	stmia.w	r0, {r1, r2}
 8022dba:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8022dbc:	2300      	movs	r3, #0
 8022dbe:	613b      	str	r3, [r7, #16]
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8022dc4:	687a      	ldr	r2, [r7, #4]
 8022dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dc8:	1ad3      	subs	r3, r2, r3
 8022dca:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8022dcc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8022dd0:	b29a      	uxth	r2, r3
 8022dd2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8022dd6:	b29b      	uxth	r3, r3
 8022dd8:	1ad3      	subs	r3, r2, r3
 8022dda:	b29b      	uxth	r3, r3
 8022ddc:	b21b      	sxth	r3, r3
 8022dde:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8022de0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	da0a      	bge.n	8022dfe <SysTimeSub+0x54>
  {
    c.Seconds--;
 8022de8:	693b      	ldr	r3, [r7, #16]
 8022dea:	3b01      	subs	r3, #1
 8022dec:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8022dee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022df2:	b29b      	uxth	r3, r3
 8022df4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8022df8:	b29b      	uxth	r3, r3
 8022dfa:	b21b      	sxth	r3, r3
 8022dfc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8022dfe:	68fb      	ldr	r3, [r7, #12]
 8022e00:	461a      	mov	r2, r3
 8022e02:	f107 0310 	add.w	r3, r7, #16
 8022e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022e0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022e0e:	68f8      	ldr	r0, [r7, #12]
 8022e10:	371c      	adds	r7, #28
 8022e12:	46bd      	mov	sp, r7
 8022e14:	bc80      	pop	{r7}
 8022e16:	b002      	add	sp, #8
 8022e18:	4770      	bx	lr
	...

08022e1c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8022e1c:	b580      	push	{r7, lr}
 8022e1e:	b088      	sub	sp, #32
 8022e20:	af02      	add	r7, sp, #8
 8022e22:	463b      	mov	r3, r7
 8022e24:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8022e28:	2300      	movs	r3, #0
 8022e2a:	60bb      	str	r3, [r7, #8]
 8022e2c:	2300      	movs	r3, #0
 8022e2e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022e30:	4b10      	ldr	r3, [pc, #64]	@ (8022e74 <SysTimeSet+0x58>)
 8022e32:	691b      	ldr	r3, [r3, #16]
 8022e34:	f107 0208 	add.w	r2, r7, #8
 8022e38:	3204      	adds	r2, #4
 8022e3a:	4610      	mov	r0, r2
 8022e3c:	4798      	blx	r3
 8022e3e:	4603      	mov	r3, r0
 8022e40:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8022e42:	f107 0010 	add.w	r0, r7, #16
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	9300      	str	r3, [sp, #0]
 8022e4a:	68bb      	ldr	r3, [r7, #8]
 8022e4c:	463a      	mov	r2, r7
 8022e4e:	ca06      	ldmia	r2, {r1, r2}
 8022e50:	f7ff ffab 	bl	8022daa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8022e54:	4b07      	ldr	r3, [pc, #28]	@ (8022e74 <SysTimeSet+0x58>)
 8022e56:	681b      	ldr	r3, [r3, #0]
 8022e58:	693a      	ldr	r2, [r7, #16]
 8022e5a:	4610      	mov	r0, r2
 8022e5c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8022e5e:	4b05      	ldr	r3, [pc, #20]	@ (8022e74 <SysTimeSet+0x58>)
 8022e60:	689b      	ldr	r3, [r3, #8]
 8022e62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8022e66:	4610      	mov	r0, r2
 8022e68:	4798      	blx	r3
}
 8022e6a:	bf00      	nop
 8022e6c:	3718      	adds	r7, #24
 8022e6e:	46bd      	mov	sp, r7
 8022e70:	bd80      	pop	{r7, pc}
 8022e72:	bf00      	nop
 8022e74:	08028e6c 	.word	0x08028e6c

08022e78 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b08a      	sub	sp, #40	@ 0x28
 8022e7c:	af02      	add	r7, sp, #8
 8022e7e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8022e80:	2300      	movs	r3, #0
 8022e82:	61bb      	str	r3, [r7, #24]
 8022e84:	2300      	movs	r3, #0
 8022e86:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8022e88:	2300      	movs	r3, #0
 8022e8a:	613b      	str	r3, [r7, #16]
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022e90:	4b14      	ldr	r3, [pc, #80]	@ (8022ee4 <SysTimeGet+0x6c>)
 8022e92:	691b      	ldr	r3, [r3, #16]
 8022e94:	f107 0218 	add.w	r2, r7, #24
 8022e98:	3204      	adds	r2, #4
 8022e9a:	4610      	mov	r0, r2
 8022e9c:	4798      	blx	r3
 8022e9e:	4603      	mov	r3, r0
 8022ea0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8022ea2:	4b10      	ldr	r3, [pc, #64]	@ (8022ee4 <SysTimeGet+0x6c>)
 8022ea4:	68db      	ldr	r3, [r3, #12]
 8022ea6:	4798      	blx	r3
 8022ea8:	4603      	mov	r3, r0
 8022eaa:	b21b      	sxth	r3, r3
 8022eac:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8022eae:	4b0d      	ldr	r3, [pc, #52]	@ (8022ee4 <SysTimeGet+0x6c>)
 8022eb0:	685b      	ldr	r3, [r3, #4]
 8022eb2:	4798      	blx	r3
 8022eb4:	4603      	mov	r3, r0
 8022eb6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8022eb8:	f107 0010 	add.w	r0, r7, #16
 8022ebc:	69fb      	ldr	r3, [r7, #28]
 8022ebe:	9300      	str	r3, [sp, #0]
 8022ec0:	69bb      	ldr	r3, [r7, #24]
 8022ec2:	f107 0208 	add.w	r2, r7, #8
 8022ec6:	ca06      	ldmia	r2, {r1, r2}
 8022ec8:	f7ff ff36 	bl	8022d38 <SysTimeAdd>

  return sysTime;
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	461a      	mov	r2, r3
 8022ed0:	f107 0310 	add.w	r3, r7, #16
 8022ed4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022ed8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022edc:	6878      	ldr	r0, [r7, #4]
 8022ede:	3720      	adds	r7, #32
 8022ee0:	46bd      	mov	sp, r7
 8022ee2:	bd80      	pop	{r7, pc}
 8022ee4:	08028e6c 	.word	0x08028e6c

08022ee8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8022ee8:	b580      	push	{r7, lr}
 8022eea:	b084      	sub	sp, #16
 8022eec:	af00      	add	r7, sp, #0
 8022eee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8022ef0:	2300      	movs	r3, #0
 8022ef2:	60bb      	str	r3, [r7, #8]
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8022f24 <SysTimeGetMcuTime+0x3c>)
 8022efa:	691b      	ldr	r3, [r3, #16]
 8022efc:	f107 0208 	add.w	r2, r7, #8
 8022f00:	3204      	adds	r2, #4
 8022f02:	4610      	mov	r0, r2
 8022f04:	4798      	blx	r3
 8022f06:	4603      	mov	r3, r0
 8022f08:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	461a      	mov	r2, r3
 8022f0e:	f107 0308 	add.w	r3, r7, #8
 8022f12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022f16:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022f1a:	6878      	ldr	r0, [r7, #4]
 8022f1c:	3710      	adds	r7, #16
 8022f1e:	46bd      	mov	sp, r7
 8022f20:	bd80      	pop	{r7, pc}
 8022f22:	bf00      	nop
 8022f24:	08028e6c 	.word	0x08028e6c

08022f28 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8022f28:	b580      	push	{r7, lr}
 8022f2a:	b088      	sub	sp, #32
 8022f2c:	af02      	add	r7, sp, #8
 8022f2e:	463b      	mov	r3, r7
 8022f30:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8022f34:	4b0f      	ldr	r3, [pc, #60]	@ (8022f74 <SysTimeToMs+0x4c>)
 8022f36:	68db      	ldr	r3, [r3, #12]
 8022f38:	4798      	blx	r3
 8022f3a:	4603      	mov	r3, r0
 8022f3c:	b21b      	sxth	r3, r3
 8022f3e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8022f40:	4b0c      	ldr	r3, [pc, #48]	@ (8022f74 <SysTimeToMs+0x4c>)
 8022f42:	685b      	ldr	r3, [r3, #4]
 8022f44:	4798      	blx	r3
 8022f46:	4603      	mov	r3, r0
 8022f48:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8022f4a:	f107 0008 	add.w	r0, r7, #8
 8022f4e:	697b      	ldr	r3, [r7, #20]
 8022f50:	9300      	str	r3, [sp, #0]
 8022f52:	693b      	ldr	r3, [r7, #16]
 8022f54:	463a      	mov	r2, r7
 8022f56:	ca06      	ldmia	r2, {r1, r2}
 8022f58:	f7ff ff27 	bl	8022daa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8022f5c:	68bb      	ldr	r3, [r7, #8]
 8022f5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022f62:	fb02 f303 	mul.w	r3, r2, r3
 8022f66:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8022f6a:	4413      	add	r3, r2
}
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	3718      	adds	r7, #24
 8022f70:	46bd      	mov	sp, r7
 8022f72:	bd80      	pop	{r7, pc}
 8022f74:	08028e6c 	.word	0x08028e6c

08022f78 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b08a      	sub	sp, #40	@ 0x28
 8022f7c:	af02      	add	r7, sp, #8
 8022f7e:	6078      	str	r0, [r7, #4]
 8022f80:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8022f82:	683b      	ldr	r3, [r7, #0]
 8022f84:	4a19      	ldr	r2, [pc, #100]	@ (8022fec <SysTimeFromMs+0x74>)
 8022f86:	fba2 2303 	umull	r2, r3, r2, r3
 8022f8a:	099b      	lsrs	r3, r3, #6
 8022f8c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8022f8e:	69fb      	ldr	r3, [r7, #28]
 8022f90:	617b      	str	r3, [r7, #20]
 8022f92:	683b      	ldr	r3, [r7, #0]
 8022f94:	b29a      	uxth	r2, r3
 8022f96:	69fb      	ldr	r3, [r7, #28]
 8022f98:	b29b      	uxth	r3, r3
 8022f9a:	4619      	mov	r1, r3
 8022f9c:	0149      	lsls	r1, r1, #5
 8022f9e:	1ac9      	subs	r1, r1, r3
 8022fa0:	0089      	lsls	r1, r1, #2
 8022fa2:	440b      	add	r3, r1
 8022fa4:	00db      	lsls	r3, r3, #3
 8022fa6:	b29b      	uxth	r3, r3
 8022fa8:	1ad3      	subs	r3, r2, r3
 8022faa:	b29b      	uxth	r3, r3
 8022fac:	b21b      	sxth	r3, r3
 8022fae:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8022fb0:	f107 030c 	add.w	r3, r7, #12
 8022fb4:	2200      	movs	r2, #0
 8022fb6:	601a      	str	r2, [r3, #0]
 8022fb8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8022fba:	4b0d      	ldr	r3, [pc, #52]	@ (8022ff0 <SysTimeFromMs+0x78>)
 8022fbc:	68db      	ldr	r3, [r3, #12]
 8022fbe:	4798      	blx	r3
 8022fc0:	4603      	mov	r3, r0
 8022fc2:	b21b      	sxth	r3, r3
 8022fc4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8022fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8022ff0 <SysTimeFromMs+0x78>)
 8022fc8:	685b      	ldr	r3, [r3, #4]
 8022fca:	4798      	blx	r3
 8022fcc:	4603      	mov	r3, r0
 8022fce:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8022fd0:	6878      	ldr	r0, [r7, #4]
 8022fd2:	693b      	ldr	r3, [r7, #16]
 8022fd4:	9300      	str	r3, [sp, #0]
 8022fd6:	68fb      	ldr	r3, [r7, #12]
 8022fd8:	f107 0214 	add.w	r2, r7, #20
 8022fdc:	ca06      	ldmia	r2, {r1, r2}
 8022fde:	f7ff feab 	bl	8022d38 <SysTimeAdd>
}
 8022fe2:	6878      	ldr	r0, [r7, #4]
 8022fe4:	3720      	adds	r7, #32
 8022fe6:	46bd      	mov	sp, r7
 8022fe8:	bd80      	pop	{r7, pc}
 8022fea:	bf00      	nop
 8022fec:	10624dd3 	.word	0x10624dd3
 8022ff0:	08028e6c 	.word	0x08028e6c

08022ff4 <SysTimeLocalTime>:
        ( ( uint32_t )localtime->tm_hour * TM_SECONDS_IN_1HOUR ) );
  return nbsecs - CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS;
}

void SysTimeLocalTime( const uint32_t timestamp, struct tm *localtime )
{
 8022ff4:	b590      	push	{r4, r7, lr}
 8022ff6:	b08d      	sub	sp, #52	@ 0x34
 8022ff8:	af00      	add	r7, sp, #0
 8022ffa:	6078      	str	r0, [r7, #4]
 8022ffc:	6039      	str	r1, [r7, #0]
  uint32_t correctionMonth[4] =
 8022ffe:	4b54      	ldr	r3, [pc, #336]	@ (8023150 <SysTimeLocalTime+0x15c>)
 8023000:	f107 041c 	add.w	r4, r7, #28
 8023004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    DAYS_IN_MONTH_CORRECTION_LEAP,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM
  };
  uint32_t weekDays = 1; // Monday 1st January 1968
 802300a:	2301      	movs	r3, #1
 802300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t minutes;
  uint32_t days;
  uint32_t divOut;
  uint32_t divReminder;

  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 802300e:	687a      	ldr	r2, [r7, #4]
 8023010:	4b50      	ldr	r3, [pc, #320]	@ (8023154 <SysTimeLocalTime+0x160>)
 8023012:	4413      	add	r3, r2
 8023014:	f107 0218 	add.w	r2, r7, #24
 8023018:	f107 0110 	add.w	r1, r7, #16
 802301c:	4618      	mov	r0, r3
 802301e:	f000 f8ef 	bl	8023200 <CalendarDiv86400>

  // Calculates seconds
  CalendarDiv60( seconds, &minutes, &divReminder );
 8023022:	69bb      	ldr	r3, [r7, #24]
 8023024:	f107 0208 	add.w	r2, r7, #8
 8023028:	f107 0114 	add.w	r1, r7, #20
 802302c:	4618      	mov	r0, r3
 802302e:	f000 f95b 	bl	80232e8 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 8023032:	68bb      	ldr	r3, [r7, #8]
 8023034:	b2db      	uxtb	r3, r3
 8023036:	461a      	mov	r2, r3
 8023038:	683b      	ldr	r3, [r7, #0]
 802303a:	601a      	str	r2, [r3, #0]

  // Calculates minutes and hours
  CalendarDiv60( minutes, &divOut, &divReminder);
 802303c:	697b      	ldr	r3, [r7, #20]
 802303e:	f107 0208 	add.w	r2, r7, #8
 8023042:	f107 010c 	add.w	r1, r7, #12
 8023046:	4618      	mov	r0, r3
 8023048:	f000 f94e 	bl	80232e8 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 802304c:	68bb      	ldr	r3, [r7, #8]
 802304e:	b2db      	uxtb	r3, r3
 8023050:	461a      	mov	r2, r3
 8023052:	683b      	ldr	r3, [r7, #0]
 8023054:	605a      	str	r2, [r3, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 8023056:	68fb      	ldr	r3, [r7, #12]
 8023058:	b2db      	uxtb	r3, r3
 802305a:	461a      	mov	r2, r3
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	609a      	str	r2, [r3, #8]

  // Calculates year
  localtime->tm_year = DIV_365_25( days );
 8023060:	693b      	ldr	r3, [r7, #16]
 8023062:	4a3d      	ldr	r2, [pc, #244]	@ (8023158 <SysTimeLocalTime+0x164>)
 8023064:	fb02 f303 	mul.w	r3, r2, r3
 8023068:	f503 43b1 	add.w	r3, r3, #22656	@ 0x5880
 802306c:	335e      	adds	r3, #94	@ 0x5e
 802306e:	0e5b      	lsrs	r3, r3, #25
 8023070:	461a      	mov	r2, r3
 8023072:	683b      	ldr	r3, [r7, #0]
 8023074:	615a      	str	r2, [r3, #20]
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 8023076:	693a      	ldr	r2, [r7, #16]
 8023078:	683b      	ldr	r3, [r7, #0]
 802307a:	695b      	ldr	r3, [r3, #20]
 802307c:	4619      	mov	r1, r3
 802307e:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8023082:	fb01 f303 	mul.w	r3, r1, r3
 8023086:	3303      	adds	r3, #3
 8023088:	089b      	lsrs	r3, r3, #2
 802308a:	1ad3      	subs	r3, r2, r3
 802308c:	613b      	str	r3, [r7, #16]

  localtime->tm_yday = days;
 802308e:	693b      	ldr	r3, [r7, #16]
 8023090:	461a      	mov	r2, r3
 8023092:	683b      	ldr	r3, [r7, #0]
 8023094:	61da      	str	r2, [r3, #28]

  // Calculates month
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 8023096:	693a      	ldr	r2, [r7, #16]
 8023098:	683b      	ldr	r3, [r7, #0]
 802309a:	695b      	ldr	r3, [r3, #20]
 802309c:	4619      	mov	r1, r3
 802309e:	4610      	mov	r0, r2
 80230a0:	f000 f85e 	bl	8023160 <CalendarGetMonth>
 80230a4:	4603      	mov	r3, r0
 80230a6:	461a      	mov	r2, r3
 80230a8:	683b      	ldr	r3, [r7, #0]
 80230aa:	611a      	str	r2, [r3, #16]

  // calculates weekdays
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 80230ac:	683b      	ldr	r3, [r7, #0]
 80230ae:	695a      	ldr	r2, [r3, #20]
 80230b0:	4613      	mov	r3, r2
 80230b2:	009b      	lsls	r3, r3, #2
 80230b4:	4413      	add	r3, r2
 80230b6:	3303      	adds	r3, #3
 80230b8:	109b      	asrs	r3, r3, #2
 80230ba:	461a      	mov	r2, r3
 80230bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80230be:	4413      	add	r3, r2
 80230c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  weekDays += days;
 80230c2:	693b      	ldr	r3, [r7, #16]
 80230c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80230c6:	4413      	add	r3, r2
 80230c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  localtime->tm_wday = MODULO_7( weekDays );
 80230ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80230cc:	3301      	adds	r3, #1
 80230ce:	4a23      	ldr	r2, [pc, #140]	@ (802315c <SysTimeLocalTime+0x168>)
 80230d0:	fb02 f303 	mul.w	r3, r2, r3
 80230d4:	0d5a      	lsrs	r2, r3, #21
 80230d6:	4613      	mov	r3, r2
 80230d8:	00db      	lsls	r3, r3, #3
 80230da:	1a9b      	subs	r3, r3, r2
 80230dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80230de:	1ad3      	subs	r3, r2, r3
 80230e0:	461a      	mov	r2, r3
 80230e2:	683b      	ldr	r3, [r7, #0]
 80230e4:	619a      	str	r2, [r3, #24]

  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 80230e6:	683b      	ldr	r3, [r7, #0]
 80230e8:	695b      	ldr	r3, [r3, #20]
 80230ea:	425a      	negs	r2, r3
 80230ec:	f003 0303 	and.w	r3, r3, #3
 80230f0:	f002 0203 	and.w	r2, r2, #3
 80230f4:	bf58      	it	pl
 80230f6:	4253      	negpl	r3, r2
 80230f8:	009b      	lsls	r3, r3, #2
 80230fa:	3330      	adds	r3, #48	@ 0x30
 80230fc:	443b      	add	r3, r7
 80230fe:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8023102:	683b      	ldr	r3, [r7, #0]
 8023104:	691b      	ldr	r3, [r3, #16]
 8023106:	005b      	lsls	r3, r3, #1
 8023108:	fa22 f303 	lsr.w	r3, r2, r3
 802310c:	f003 0103 	and.w	r1, r3, #3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 8023110:	683b      	ldr	r3, [r7, #0]
 8023112:	691a      	ldr	r2, [r3, #16]
 8023114:	4613      	mov	r3, r2
 8023116:	011b      	lsls	r3, r3, #4
 8023118:	1a9b      	subs	r3, r3, r2
 802311a:	009b      	lsls	r3, r3, #2
 802311c:	4413      	add	r3, r2
 802311e:	3301      	adds	r3, #1
 8023120:	105b      	asrs	r3, r3, #1
 8023122:	1aca      	subs	r2, r1, r3
 8023124:	693b      	ldr	r3, [r7, #16]
 8023126:	4413      	add	r3, r2
 8023128:	613b      	str	r3, [r7, #16]

  // Convert 0 to 1 indexed.
  localtime->tm_mday = days + 1;
 802312a:	693b      	ldr	r3, [r7, #16]
 802312c:	3301      	adds	r3, #1
 802312e:	461a      	mov	r2, r3
 8023130:	683b      	ldr	r3, [r7, #0]
 8023132:	60da      	str	r2, [r3, #12]

  localtime->tm_year += CALC_REF_YEAR;
 8023134:	683b      	ldr	r3, [r7, #0]
 8023136:	695b      	ldr	r3, [r3, #20]
 8023138:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 802313c:	683b      	ldr	r3, [r7, #0]
 802313e:	615a      	str	r2, [r3, #20]

  localtime->tm_isdst = -1;
 8023140:	683b      	ldr	r3, [r7, #0]
 8023142:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023146:	621a      	str	r2, [r3, #32]
}
 8023148:	bf00      	nop
 802314a:	3734      	adds	r7, #52	@ 0x34
 802314c:	46bd      	mov	sp, r7
 802314e:	bd90      	pop	{r4, r7, pc}
 8023150:	08028d20 	.word	0x08028d20
 8023154:	03c3b880 	.word	0x03c3b880
 8023158:	000166db 	.word	0x000166db
 802315c:	00049249 	.word	0x00049249

08023160 <CalendarGetMonth>:
  *  @addtogroup SYSTIME_private_function
  *
  *  @{
  */
static uint32_t CalendarGetMonth( uint32_t days, uint32_t year )
{
 8023160:	b580      	push	{r7, lr}
 8023162:	b084      	sub	sp, #16
 8023164:	af00      	add	r7, sp, #0
 8023166:	6078      	str	r0, [r7, #4]
 8023168:	6039      	str	r1, [r7, #0]
  uint32_t month;
  if( ( year % 4 ) == 0 )
 802316a:	683b      	ldr	r3, [r7, #0]
 802316c:	f003 0303 	and.w	r3, r3, #3
 8023170:	2b00      	cmp	r3, #0
 8023172:	d120      	bne.n	80231b6 <CalendarGetMonth+0x56>
  {   /*leap year*/
    if( days < END_OF_FEBRUARY_LEAP )
 8023174:	687b      	ldr	r3, [r7, #4]
 8023176:	2b3b      	cmp	r3, #59	@ 0x3b
 8023178:	d806      	bhi.n	8023188 <CalendarGetMonth+0x28>
    {   // January or February
      // month =  days * 2 / ( 30 + 31 );
      month = CalendarDiv61( days * 2 );
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	005b      	lsls	r3, r3, #1
 802317e:	4618      	mov	r0, r3
 8023180:	f000 f87e 	bl	8023280 <CalendarDiv61>
 8023184:	60f8      	str	r0, [r7, #12]
 8023186:	e036      	b.n	80231f6 <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_LEAP )
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	2bd4      	cmp	r3, #212	@ 0xd4
 802318c:	d809      	bhi.n	80231a2 <CalendarGetMonth+0x42>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	3b3c      	subs	r3, #60	@ 0x3c
 8023192:	005b      	lsls	r3, r3, #1
 8023194:	4618      	mov	r0, r3
 8023196:	f000 f873 	bl	8023280 <CalendarDiv61>
 802319a:	4603      	mov	r3, r0
 802319c:	3302      	adds	r3, #2
 802319e:	60fb      	str	r3, [r7, #12]
 80231a0:	e029      	b.n	80231f6 <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	3bd5      	subs	r3, #213	@ 0xd5
 80231a6:	005b      	lsls	r3, r3, #1
 80231a8:	4618      	mov	r0, r3
 80231aa:	f000 f869 	bl	8023280 <CalendarDiv61>
 80231ae:	4603      	mov	r3, r0
 80231b0:	3307      	adds	r3, #7
 80231b2:	60fb      	str	r3, [r7, #12]
 80231b4:	e01f      	b.n	80231f6 <CalendarGetMonth+0x96>
    }
  }
  else
  {
    if( days < END_OF_FEBRUARY_NORM )
 80231b6:	687b      	ldr	r3, [r7, #4]
 80231b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80231ba:	d806      	bhi.n	80231ca <CalendarGetMonth+0x6a>
    {   // January or February
      month = CalendarDiv61( days * 2 );
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	005b      	lsls	r3, r3, #1
 80231c0:	4618      	mov	r0, r3
 80231c2:	f000 f85d 	bl	8023280 <CalendarDiv61>
 80231c6:	60f8      	str	r0, [r7, #12]
 80231c8:	e015      	b.n	80231f6 <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_NORM )
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	2bd3      	cmp	r3, #211	@ 0xd3
 80231ce:	d809      	bhi.n	80231e4 <CalendarGetMonth+0x84>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	3b3b      	subs	r3, #59	@ 0x3b
 80231d4:	005b      	lsls	r3, r3, #1
 80231d6:	4618      	mov	r0, r3
 80231d8:	f000 f852 	bl	8023280 <CalendarDiv61>
 80231dc:	4603      	mov	r3, r0
 80231de:	3302      	adds	r3, #2
 80231e0:	60fb      	str	r3, [r7, #12]
 80231e2:	e008      	b.n	80231f6 <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	3bd4      	subs	r3, #212	@ 0xd4
 80231e8:	005b      	lsls	r3, r3, #1
 80231ea:	4618      	mov	r0, r3
 80231ec:	f000 f848 	bl	8023280 <CalendarDiv61>
 80231f0:	4603      	mov	r3, r0
 80231f2:	3307      	adds	r3, #7
 80231f4:	60fb      	str	r3, [r7, #12]
    }
  }
  return month;
 80231f6:	68fb      	ldr	r3, [r7, #12]
}
 80231f8:	4618      	mov	r0, r3
 80231fa:	3710      	adds	r7, #16
 80231fc:	46bd      	mov	sp, r7
 80231fe:	bd80      	pop	{r7, pc}

08023200 <CalendarDiv86400>:

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 8023200:	b480      	push	{r7}
 8023202:	b087      	sub	sp, #28
 8023204:	af00      	add	r7, sp, #0
 8023206:	60f8      	str	r0, [r7, #12]
 8023208:	60b9      	str	r1, [r7, #8]
 802320a:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
 802320c:	2300      	movs	r3, #0
 802320e:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_86400( in );
 8023210:	68fb      	ldr	r3, [r7, #12]
 8023212:	0c9a      	lsrs	r2, r3, #18
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	0c5b      	lsrs	r3, r3, #17
 8023218:	4413      	add	r3, r2
 802321a:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 802321c:	e010      	b.n	8023240 <CalendarDiv86400+0x40>
  {
    outTemp += divResult;
 802321e:	697a      	ldr	r2, [r7, #20]
 8023220:	693b      	ldr	r3, [r7, #16]
 8023222:	4413      	add	r3, r2
 8023224:	617b      	str	r3, [r7, #20]
    in -= divResult * 86400;
 8023226:	693b      	ldr	r3, [r7, #16]
 8023228:	4a13      	ldr	r2, [pc, #76]	@ (8023278 <CalendarDiv86400+0x78>)
 802322a:	fb02 f303 	mul.w	r3, r2, r3
 802322e:	68fa      	ldr	r2, [r7, #12]
 8023230:	1ad3      	subs	r3, r2, r3
 8023232:	60fb      	str	r3, [r7, #12]
    divResult= DIV_APPROX_86400( in );
 8023234:	68fb      	ldr	r3, [r7, #12]
 8023236:	0c9a      	lsrs	r2, r3, #18
 8023238:	68fb      	ldr	r3, [r7, #12]
 802323a:	0c5b      	lsrs	r3, r3, #17
 802323c:	4413      	add	r3, r2
 802323e:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 8023240:	693b      	ldr	r3, [r7, #16]
 8023242:	2b00      	cmp	r3, #0
 8023244:	d1eb      	bne.n	802321e <CalendarDiv86400+0x1e>
  }
  if( in >= 86400 )
 8023246:	68fb      	ldr	r3, [r7, #12]
 8023248:	4a0c      	ldr	r2, [pc, #48]	@ (802327c <CalendarDiv86400+0x7c>)
 802324a:	4293      	cmp	r3, r2
 802324c:	d908      	bls.n	8023260 <CalendarDiv86400+0x60>
  {
    outTemp += 1;
 802324e:	697b      	ldr	r3, [r7, #20]
 8023250:	3301      	adds	r3, #1
 8023252:	617b      	str	r3, [r7, #20]
    in -= 86400;
 8023254:	68fb      	ldr	r3, [r7, #12]
 8023256:	f5a3 33a8 	sub.w	r3, r3, #86016	@ 0x15000
 802325a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 802325e:	60fb      	str	r3, [r7, #12]
  }

  *remainder = in;
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	68fa      	ldr	r2, [r7, #12]
 8023264:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 8023266:	68bb      	ldr	r3, [r7, #8]
 8023268:	697a      	ldr	r2, [r7, #20]
 802326a:	601a      	str	r2, [r3, #0]
#endif
}
 802326c:	bf00      	nop
 802326e:	371c      	adds	r7, #28
 8023270:	46bd      	mov	sp, r7
 8023272:	bc80      	pop	{r7}
 8023274:	4770      	bx	lr
 8023276:	bf00      	nop
 8023278:	00015180 	.word	0x00015180
 802327c:	0001517f 	.word	0x0001517f

08023280 <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 8023280:	b480      	push	{r7}
 8023282:	b085      	sub	sp, #20
 8023284:	af00      	add	r7, sp, #0
 8023286:	6078      	str	r0, [r7, #4]
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
 8023288:	2300      	movs	r3, #0
 802328a:	60fb      	str	r3, [r7, #12]
  uint32_t divResult = DIV_APPROX_61( in );
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	4a15      	ldr	r2, [pc, #84]	@ (80232e4 <CalendarDiv61+0x64>)
 8023290:	fb02 f303 	mul.w	r3, r2, r3
 8023294:	0d9b      	lsrs	r3, r3, #22
 8023296:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 8023298:	e012      	b.n	80232c0 <CalendarDiv61+0x40>
  {
    outTemp += divResult;
 802329a:	68fa      	ldr	r2, [r7, #12]
 802329c:	68bb      	ldr	r3, [r7, #8]
 802329e:	4413      	add	r3, r2
 80232a0:	60fb      	str	r3, [r7, #12]
    in -= divResult * 61;
 80232a2:	68ba      	ldr	r2, [r7, #8]
 80232a4:	4613      	mov	r3, r2
 80232a6:	011b      	lsls	r3, r3, #4
 80232a8:	1a9b      	subs	r3, r3, r2
 80232aa:	009b      	lsls	r3, r3, #2
 80232ac:	4413      	add	r3, r2
 80232ae:	687a      	ldr	r2, [r7, #4]
 80232b0:	1ad3      	subs	r3, r2, r3
 80232b2:	607b      	str	r3, [r7, #4]
    divResult = DIV_APPROX_61( in );
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	4a0b      	ldr	r2, [pc, #44]	@ (80232e4 <CalendarDiv61+0x64>)
 80232b8:	fb02 f303 	mul.w	r3, r2, r3
 80232bc:	0d9b      	lsrs	r3, r3, #22
 80232be:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 80232c0:	68bb      	ldr	r3, [r7, #8]
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d1e9      	bne.n	802329a <CalendarDiv61+0x1a>
  }
  if( in >= 61 )
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	2b3c      	cmp	r3, #60	@ 0x3c
 80232ca:	d905      	bls.n	80232d8 <CalendarDiv61+0x58>
  {
    outTemp += 1;
 80232cc:	68fb      	ldr	r3, [r7, #12]
 80232ce:	3301      	adds	r3, #1
 80232d0:	60fb      	str	r3, [r7, #12]
    in -= 61;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	3b3d      	subs	r3, #61	@ 0x3d
 80232d6:	607b      	str	r3, [r7, #4]
  }
  return outTemp;
 80232d8:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80232da:	4618      	mov	r0, r3
 80232dc:	3714      	adds	r7, #20
 80232de:	46bd      	mov	sp, r7
 80232e0:	bc80      	pop	{r7}
 80232e2:	4770      	bx	lr
 80232e4:	00010c97 	.word	0x00010c97

080232e8 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 80232e8:	b480      	push	{r7}
 80232ea:	b087      	sub	sp, #28
 80232ec:	af00      	add	r7, sp, #0
 80232ee:	60f8      	str	r0, [r7, #12]
 80232f0:	60b9      	str	r1, [r7, #8]
 80232f2:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
 80232f4:	2300      	movs	r3, #0
 80232f6:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_60( in );
 80232f8:	68fb      	ldr	r3, [r7, #12]
 80232fa:	f244 4244 	movw	r2, #17476	@ 0x4444
 80232fe:	fb02 f303 	mul.w	r3, r2, r3
 8023302:	0d1b      	lsrs	r3, r3, #20
 8023304:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 8023306:	e013      	b.n	8023330 <CalendarDiv60+0x48>
  {
    outTemp += divResult;
 8023308:	697a      	ldr	r2, [r7, #20]
 802330a:	693b      	ldr	r3, [r7, #16]
 802330c:	4413      	add	r3, r2
 802330e:	617b      	str	r3, [r7, #20]
    in -= divResult * 60;
 8023310:	693a      	ldr	r2, [r7, #16]
 8023312:	4613      	mov	r3, r2
 8023314:	011b      	lsls	r3, r3, #4
 8023316:	1a9b      	subs	r3, r3, r2
 8023318:	009b      	lsls	r3, r3, #2
 802331a:	461a      	mov	r2, r3
 802331c:	68fb      	ldr	r3, [r7, #12]
 802331e:	1a9b      	subs	r3, r3, r2
 8023320:	60fb      	str	r3, [r7, #12]
    divResult = DIV_APPROX_60( in );
 8023322:	68fb      	ldr	r3, [r7, #12]
 8023324:	f244 4244 	movw	r2, #17476	@ 0x4444
 8023328:	fb02 f303 	mul.w	r3, r2, r3
 802332c:	0d1b      	lsrs	r3, r3, #20
 802332e:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 8023330:	693b      	ldr	r3, [r7, #16]
 8023332:	2b00      	cmp	r3, #0
 8023334:	d1e8      	bne.n	8023308 <CalendarDiv60+0x20>
  }
  if( in >= 60 )
 8023336:	68fb      	ldr	r3, [r7, #12]
 8023338:	2b3b      	cmp	r3, #59	@ 0x3b
 802333a:	d905      	bls.n	8023348 <CalendarDiv60+0x60>
  {
    outTemp += 1;
 802333c:	697b      	ldr	r3, [r7, #20]
 802333e:	3301      	adds	r3, #1
 8023340:	617b      	str	r3, [r7, #20]
    in -= 60;
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	3b3c      	subs	r3, #60	@ 0x3c
 8023346:	60fb      	str	r3, [r7, #12]
  }
  *remainder = in;
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	68fa      	ldr	r2, [r7, #12]
 802334c:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 802334e:	68bb      	ldr	r3, [r7, #8]
 8023350:	697a      	ldr	r2, [r7, #20]
 8023352:	601a      	str	r2, [r3, #0]
#endif
}
 8023354:	bf00      	nop
 8023356:	371c      	adds	r7, #28
 8023358:	46bd      	mov	sp, r7
 802335a:	bc80      	pop	{r7}
 802335c:	4770      	bx	lr
	...

08023360 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 8023360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023364:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 8023368:	af00      	add	r7, sp, #0
 802336a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 802336e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8023372:	6018      	str	r0, [r3, #0]
 8023374:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023378:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 802337c:	6019      	str	r1, [r3, #0]
 802337e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023382:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023386:	601a      	str	r2, [r3, #0]
  u_char *fmt = (u_char *)fmt0;
 8023388:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 802338c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8023390:	681b      	ldr	r3, [r3, #0]
 8023392:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
#else
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif

   fp_p = str;
 8023396:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 802339a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
  fp_r = strlen(str);
 80233a4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80233a8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80233ac:	6818      	ldr	r0, [r3, #0]
 80233ae:	f7dc fee7 	bl	8000180 <strlen>
 80233b2:	4603      	mov	r3, r0
 80233b4:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288

  nassigned = 0;
 80233b8:	2300      	movs	r3, #0
 80233ba:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
  nread = 0;
 80233be:	2300      	movs	r3, #0
 80233c0:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
  base = 0;    /* XXX just to keep gcc happy */
 80233c4:	2300      	movs	r3, #0
 80233c6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
  for (;;) {
    c = *fmt++;
 80233ca:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80233ce:	1c53      	adds	r3, r2, #1
 80233d0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80233d4:	7813      	ldrb	r3, [r2, #0]
 80233d6:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
    if (c == 0)
 80233da:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80233de:	2b00      	cmp	r3, #0
 80233e0:	d102      	bne.n	80233e8 <tiny_vfscanf+0x88>
      return (nassigned);
 80233e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80233e6:	e386      	b.n	8023af6 <tiny_vfscanf+0x796>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 80233e8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80233ec:	2b25      	cmp	r3, #37	@ 0x25
 80233ee:	f040 809f 	bne.w	8023530 <tiny_vfscanf+0x1d0>
      goto literal;
    width = 0;
 80233f2:	2300      	movs	r3, #0
 80233f4:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
    flags = 0;
 80233f8:	2300      	movs	r3, #0
 80233fa:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 80233fe:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 8023402:	1c53      	adds	r3, r2, #1
 8023404:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8023408:	7813      	ldrb	r3, [r2, #0]
 802340a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
    switch (c) {
 802340e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023412:	2b78      	cmp	r3, #120	@ 0x78
 8023414:	f300 8102 	bgt.w	802361c <tiny_vfscanf+0x2bc>
 8023418:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802341c:	2b44      	cmp	r3, #68	@ 0x44
 802341e:	da13      	bge.n	8023448 <tiny_vfscanf+0xe8>
 8023420:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023424:	2b39      	cmp	r3, #57	@ 0x39
 8023426:	f300 80f9 	bgt.w	802361c <tiny_vfscanf+0x2bc>
 802342a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802342e:	2b30      	cmp	r3, #48	@ 0x30
 8023430:	f280 80bc 	bge.w	80235ac <tiny_vfscanf+0x24c>
 8023434:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023438:	2b00      	cmp	r3, #0
 802343a:	f000 80ec 	beq.w	8023616 <tiny_vfscanf+0x2b6>
 802343e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023442:	2b25      	cmp	r3, #37	@ 0x25
 8023444:	d075      	beq.n	8023532 <tiny_vfscanf+0x1d2>
      if (isupper(c))
        flags |= LONG;
      c = CT_INT;
      base = 10;
#endif
      break;
 8023446:	e0e9      	b.n	802361c <tiny_vfscanf+0x2bc>
    switch (c) {
 8023448:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802344c:	3b44      	subs	r3, #68	@ 0x44
 802344e:	2b34      	cmp	r3, #52	@ 0x34
 8023450:	f200 80e4 	bhi.w	802361c <tiny_vfscanf+0x2bc>
 8023454:	a201      	add	r2, pc, #4	@ (adr r2, 802345c <tiny_vfscanf+0xfc>)
 8023456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802345a:	bf00      	nop
 802345c:	080235c9 	.word	0x080235c9
 8023460:	0802361d 	.word	0x0802361d
 8023464:	0802361d 	.word	0x0802361d
 8023468:	0802361d 	.word	0x0802361d
 802346c:	0802361d 	.word	0x0802361d
 8023470:	0802361d 	.word	0x0802361d
 8023474:	0802361d 	.word	0x0802361d
 8023478:	0802361d 	.word	0x0802361d
 802347c:	0802361d 	.word	0x0802361d
 8023480:	0802361d 	.word	0x0802361d
 8023484:	0802361d 	.word	0x0802361d
 8023488:	0802361d 	.word	0x0802361d
 802348c:	0802361d 	.word	0x0802361d
 8023490:	0802361d 	.word	0x0802361d
 8023494:	0802361d 	.word	0x0802361d
 8023498:	0802361d 	.word	0x0802361d
 802349c:	0802361d 	.word	0x0802361d
 80234a0:	0802361d 	.word	0x0802361d
 80234a4:	0802361d 	.word	0x0802361d
 80234a8:	0802361d 	.word	0x0802361d
 80234ac:	080235fd 	.word	0x080235fd
 80234b0:	0802361d 	.word	0x0802361d
 80234b4:	0802361d 	.word	0x0802361d
 80234b8:	0802361d 	.word	0x0802361d
 80234bc:	0802361d 	.word	0x0802361d
 80234c0:	0802361d 	.word	0x0802361d
 80234c4:	0802361d 	.word	0x0802361d
 80234c8:	0802361d 	.word	0x0802361d
 80234cc:	0802361d 	.word	0x0802361d
 80234d0:	0802361d 	.word	0x0802361d
 80234d4:	0802361d 	.word	0x0802361d
 80234d8:	0802361d 	.word	0x0802361d
 80234dc:	080235d5 	.word	0x080235d5
 80234e0:	0802361d 	.word	0x0802361d
 80234e4:	0802361d 	.word	0x0802361d
 80234e8:	0802361d 	.word	0x0802361d
 80234ec:	0802356f 	.word	0x0802356f
 80234f0:	0802361d 	.word	0x0802361d
 80234f4:	0802361d 	.word	0x0802361d
 80234f8:	0802361d 	.word	0x0802361d
 80234fc:	0802359f 	.word	0x0802359f
 8023500:	0802361d 	.word	0x0802361d
 8023504:	0802361d 	.word	0x0802361d
 8023508:	0802361d 	.word	0x0802361d
 802350c:	0802361d 	.word	0x0802361d
 8023510:	0802361d 	.word	0x0802361d
 8023514:	0802361d 	.word	0x0802361d
 8023518:	0802361d 	.word	0x0802361d
 802351c:	0802361d 	.word	0x0802361d
 8023520:	080235e3 	.word	0x080235e3
 8023524:	0802361d 	.word	0x0802361d
 8023528:	0802361d 	.word	0x0802361d
 802352c:	080235fd 	.word	0x080235fd
      goto literal;
 8023530:	bf00      	nop
      if (fp_r <= 0 && __srefill(fp))
 8023532:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8023536:	2b00      	cmp	r3, #0
 8023538:	f340 82cb 	ble.w	8023ad2 <tiny_vfscanf+0x772>
      if (*fp_p != c)
 802353c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8023540:	781b      	ldrb	r3, [r3, #0]
 8023542:	461a      	mov	r2, r3
 8023544:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023548:	4293      	cmp	r3, r2
 802354a:	f040 82cf 	bne.w	8023aec <tiny_vfscanf+0x78c>
      fp_r--, fp_p++;
 802354e:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8023552:	3b01      	subs	r3, #1
 8023554:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8023558:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 802355c:	3301      	adds	r3, #1
 802355e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
      nread++;
 8023562:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8023566:	3301      	adds	r3, #1
 8023568:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
      continue;
 802356c:	e2b0      	b.n	8023ad0 <tiny_vfscanf+0x770>
      if (*fmt == 'h') {
 802356e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8023572:	781b      	ldrb	r3, [r3, #0]
 8023574:	2b68      	cmp	r3, #104	@ 0x68
 8023576:	d10b      	bne.n	8023590 <tiny_vfscanf+0x230>
        fmt++;
 8023578:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 802357c:	3301      	adds	r3, #1
 802357e:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
        flags |= SHORTSHORT;
 8023582:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023586:	f043 0308 	orr.w	r3, r3, #8
 802358a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      goto again;
 802358e:	e736      	b.n	80233fe <tiny_vfscanf+0x9e>
        flags |= SHORT;
 8023590:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023594:	f043 0304 	orr.w	r3, r3, #4
 8023598:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      goto again;
 802359c:	e72f      	b.n	80233fe <tiny_vfscanf+0x9e>
      flags |= LONG;
 802359e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80235a2:	f043 0301 	orr.w	r3, r3, #1
 80235a6:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      goto again;
 80235aa:	e728      	b.n	80233fe <tiny_vfscanf+0x9e>
      width = width * 10 + c - '0';
 80235ac:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 80235b0:	4613      	mov	r3, r2
 80235b2:	009b      	lsls	r3, r3, #2
 80235b4:	4413      	add	r3, r2
 80235b6:	005b      	lsls	r3, r3, #1
 80235b8:	461a      	mov	r2, r3
 80235ba:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80235be:	4413      	add	r3, r2
 80235c0:	3b30      	subs	r3, #48	@ 0x30
 80235c2:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
      goto again;
 80235c6:	e71a      	b.n	80233fe <tiny_vfscanf+0x9e>
      flags |= LONG;
 80235c8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80235cc:	f043 0301 	orr.w	r3, r3, #1
 80235d0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      c = CT_INT;
 80235d4:	2303      	movs	r3, #3
 80235d6:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
      base = 10;
 80235da:	230a      	movs	r3, #10
 80235dc:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
      break;
 80235e0:	e01d      	b.n	802361e <tiny_vfscanf+0x2be>
      c = CT_INT;
 80235e2:	2303      	movs	r3, #3
 80235e4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
      flags |= UNSIGNED;
 80235e8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80235ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80235f0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      base = 10;
 80235f4:	230a      	movs	r3, #10
 80235f6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
      break;
 80235fa:	e010      	b.n	802361e <tiny_vfscanf+0x2be>
      c = CT_INT;
 80235fc:	2303      	movs	r3, #3
 80235fe:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
      flags |= UNSIGNED;
 8023602:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023606:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802360a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      base = 16;
 802360e:	2310      	movs	r3, #16
 8023610:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
      break;
 8023614:	e003      	b.n	802361e <tiny_vfscanf+0x2be>
      return (EOF);
 8023616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802361a:	e26c      	b.n	8023af6 <tiny_vfscanf+0x796>
      break;
 802361c:	bf00      	nop
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 802361e:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8023622:	2b00      	cmp	r3, #0
 8023624:	f340 8257 	ble.w	8023ad6 <tiny_vfscanf+0x776>
#endif

    /*
     * Do the conversion.
     */
    switch (c) {
 8023628:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802362c:	2b03      	cmp	r3, #3
 802362e:	f47f aecc 	bne.w	80233ca <tiny_vfscanf+0x6a>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 8023632:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8023636:	3b01      	subs	r3, #1
 8023638:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 802363c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8023640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023644:	d303      	bcc.n	802364e <tiny_vfscanf+0x2ee>
        width = sizeof(buf) - 2;
 8023646:	f240 13ff 	movw	r3, #511	@ 0x1ff
 802364a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
      width++;
 802364e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8023652:	3301      	adds	r3, #1
 8023654:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 8023658:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 802365c:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8023660:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif

      sign_minus = 0;
 8023664:	2300      	movs	r3, #0
 8023666:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
      value = 0;
 802366a:	f04f 0200 	mov.w	r2, #0
 802366e:	f04f 0300 	mov.w	r3, #0
 8023672:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
      for (p = buf; width; width--) {
 8023676:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 802367a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 802367e:	e182      	b.n	8023986 <tiny_vfscanf+0x626>
        c = *fp_p;
 8023680:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8023684:	781b      	ldrb	r3, [r3, #0]
 8023686:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 802368a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802368e:	3b2b      	subs	r3, #43	@ 0x2b
 8023690:	2b3b      	cmp	r3, #59	@ 0x3b
 8023692:	f200 817e 	bhi.w	8023992 <tiny_vfscanf+0x632>
 8023696:	a201      	add	r2, pc, #4	@ (adr r2, 802369c <tiny_vfscanf+0x33c>)
 8023698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802369c:	0802391d 	.word	0x0802391d
 80236a0:	08023993 	.word	0x08023993
 80236a4:	0802390b 	.word	0x0802390b
 80236a8:	08023993 	.word	0x08023993
 80236ac:	08023993 	.word	0x08023993
 80236b0:	0802378d 	.word	0x0802378d
 80236b4:	0802378d 	.word	0x0802378d
 80236b8:	0802378d 	.word	0x0802378d
 80236bc:	0802378d 	.word	0x0802378d
 80236c0:	0802378d 	.word	0x0802378d
 80236c4:	0802378d 	.word	0x0802378d
 80236c8:	0802378d 	.word	0x0802378d
 80236cc:	0802378d 	.word	0x0802378d
 80236d0:	0802378d 	.word	0x0802378d
 80236d4:	0802378d 	.word	0x0802378d
 80236d8:	08023993 	.word	0x08023993
 80236dc:	08023993 	.word	0x08023993
 80236e0:	08023993 	.word	0x08023993
 80236e4:	08023993 	.word	0x08023993
 80236e8:	08023993 	.word	0x08023993
 80236ec:	08023993 	.word	0x08023993
 80236f0:	08023993 	.word	0x08023993
 80236f4:	08023805 	.word	0x08023805
 80236f8:	08023805 	.word	0x08023805
 80236fc:	08023805 	.word	0x08023805
 8023700:	08023805 	.word	0x08023805
 8023704:	08023805 	.word	0x08023805
 8023708:	08023805 	.word	0x08023805
 802370c:	08023993 	.word	0x08023993
 8023710:	08023993 	.word	0x08023993
 8023714:	08023993 	.word	0x08023993
 8023718:	08023993 	.word	0x08023993
 802371c:	08023993 	.word	0x08023993
 8023720:	08023993 	.word	0x08023993
 8023724:	08023993 	.word	0x08023993
 8023728:	08023993 	.word	0x08023993
 802372c:	08023993 	.word	0x08023993
 8023730:	08023993 	.word	0x08023993
 8023734:	08023993 	.word	0x08023993
 8023738:	08023993 	.word	0x08023993
 802373c:	08023993 	.word	0x08023993
 8023740:	08023993 	.word	0x08023993
 8023744:	08023993 	.word	0x08023993
 8023748:	08023993 	.word	0x08023993
 802374c:	08023993 	.word	0x08023993
 8023750:	08023993 	.word	0x08023993
 8023754:	08023993 	.word	0x08023993
 8023758:	08023993 	.word	0x08023993
 802375c:	08023993 	.word	0x08023993
 8023760:	08023993 	.word	0x08023993
 8023764:	08023993 	.word	0x08023993
 8023768:	08023993 	.word	0x08023993
 802376c:	08023993 	.word	0x08023993
 8023770:	08023993 	.word	0x08023993
 8023774:	08023889 	.word	0x08023889
 8023778:	08023889 	.word	0x08023889
 802377c:	08023889 	.word	0x08023889
 8023780:	08023889 	.word	0x08023889
 8023784:	08023889 	.word	0x08023889
 8023788:	08023889 	.word	0x08023889
        /* we only support base 10 and 16 */
        case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
        case '8': case '9':
#ifdef TINY_NO_OX
          flags &= ~(SIGNOK | NDIGITS);
 802378c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023790:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8023794:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - '0';
 8023798:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 802379c:	17da      	asrs	r2, r3, #31
 802379e:	663b      	str	r3, [r7, #96]	@ 0x60
 80237a0:	667a      	str	r2, [r7, #100]	@ 0x64
 80237a2:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80237a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80237aa:	460a      	mov	r2, r1
 80237ac:	fb02 f203 	mul.w	r2, r2, r3
 80237b0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80237b4:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 80237b8:	4601      	mov	r1, r0
 80237ba:	fb01 f303 	mul.w	r3, r1, r3
 80237be:	441a      	add	r2, r3
 80237c0:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80237c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80237c6:	fba3 4501 	umull	r4, r5, r3, r1
 80237ca:	1953      	adds	r3, r2, r5
 80237cc:	461d      	mov	r5, r3
 80237ce:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80237d2:	17da      	asrs	r2, r3, #31
 80237d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80237d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80237d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80237dc:	460b      	mov	r3, r1
 80237de:	18e3      	adds	r3, r4, r3
 80237e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80237e2:	4613      	mov	r3, r2
 80237e4:	eb45 0303 	adc.w	r3, r5, r3
 80237e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80237ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80237ee:	4611      	mov	r1, r2
 80237f0:	3930      	subs	r1, #48	@ 0x30
 80237f2:	61b9      	str	r1, [r7, #24]
 80237f4:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80237f8:	61fb      	str	r3, [r7, #28]
 80237fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80237fe:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
          goto ok;
 8023802:	e0a4      	b.n	802394e <tiny_vfscanf+0x5ee>

        /* letters ok iff hex */
        case 'A': case 'B': case 'C':
        case 'D': case 'E': case 'F':
          /* no need to fix base here */
          if (base <= 10)
 8023804:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8023808:	2b0a      	cmp	r3, #10
 802380a:	f340 809a 	ble.w	8023942 <tiny_vfscanf+0x5e2>
            break;  /* not legal here */
#ifdef TINY_NO_OX
          flags &= ~(SIGNOK | NDIGITS);
 802380e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023812:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8023816:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'A' + 10;
 802381a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 802381e:	17da      	asrs	r2, r3, #31
 8023820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023822:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8023824:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8023828:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 802382c:	460a      	mov	r2, r1
 802382e:	fb02 f203 	mul.w	r2, r2, r3
 8023832:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8023836:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 802383a:	4601      	mov	r1, r0
 802383c:	fb01 f303 	mul.w	r3, r1, r3
 8023840:	441a      	add	r2, r3
 8023842:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8023846:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8023848:	fba3 8901 	umull	r8, r9, r3, r1
 802384c:	eb02 0309 	add.w	r3, r2, r9
 8023850:	4699      	mov	r9, r3
 8023852:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8023856:	17da      	asrs	r2, r3, #31
 8023858:	63bb      	str	r3, [r7, #56]	@ 0x38
 802385a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 802385c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8023860:	4611      	mov	r1, r2
 8023862:	eb18 0101 	adds.w	r1, r8, r1
 8023866:	6339      	str	r1, [r7, #48]	@ 0x30
 8023868:	eb49 0303 	adc.w	r3, r9, r3
 802386c:	637b      	str	r3, [r7, #52]	@ 0x34
 802386e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8023872:	4611      	mov	r1, r2
 8023874:	3937      	subs	r1, #55	@ 0x37
 8023876:	6139      	str	r1, [r7, #16]
 8023878:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 802387c:	617b      	str	r3, [r7, #20]
 802387e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023882:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
          goto ok;
 8023886:	e062      	b.n	802394e <tiny_vfscanf+0x5ee>

        case 'a': case 'b': case 'c':
        case 'd': case 'e': case 'f':
          /* no need to fix base here */
          if (base <= 10)
 8023888:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 802388c:	2b0a      	cmp	r3, #10
 802388e:	dd5a      	ble.n	8023946 <tiny_vfscanf+0x5e6>
            break;  /* not legal here */
#ifdef TINY_NO_OX
          flags &= ~(SIGNOK | NDIGITS);
 8023890:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023894:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8023898:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'a' + 10;
 802389c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80238a0:	17da      	asrs	r2, r3, #31
 80238a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80238a4:	657a      	str	r2, [r7, #84]	@ 0x54
 80238a6:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80238aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80238ae:	460a      	mov	r2, r1
 80238b0:	fb02 f203 	mul.w	r2, r2, r3
 80238b4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80238b8:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80238bc:	4601      	mov	r1, r0
 80238be:	fb01 f303 	mul.w	r3, r1, r3
 80238c2:	441a      	add	r2, r3
 80238c4:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80238c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80238ca:	fba3 ab01 	umull	sl, fp, r3, r1
 80238ce:	eb02 030b 	add.w	r3, r2, fp
 80238d2:	469b      	mov	fp, r3
 80238d4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80238d8:	17da      	asrs	r2, r3, #31
 80238da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80238dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80238de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80238e2:	4611      	mov	r1, r2
 80238e4:	eb1a 0101 	adds.w	r1, sl, r1
 80238e8:	6239      	str	r1, [r7, #32]
 80238ea:	eb4b 0303 	adc.w	r3, fp, r3
 80238ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80238f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80238f4:	4611      	mov	r1, r2
 80238f6:	3957      	subs	r1, #87	@ 0x57
 80238f8:	60b9      	str	r1, [r7, #8]
 80238fa:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80238fe:	60fb      	str	r3, [r7, #12]
 8023900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023904:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
          goto ok;
 8023908:	e021      	b.n	802394e <tiny_vfscanf+0x5ee>

        /* sign ok only as first character */
        case '-':
          if (!(flags & HAVESIGN)) {
 802390a:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 802390e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023912:	2b00      	cmp	r3, #0
 8023914:	d102      	bne.n	802391c <tiny_vfscanf+0x5bc>
            sign_minus = 1;
 8023916:	2301      	movs	r3, #1
 8023918:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
          }
          /* FALLTHROUGH */
        case '+':
          if (flags & SIGNOK) {
 802391c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8023924:	2b00      	cmp	r3, #0
 8023926:	d010      	beq.n	802394a <tiny_vfscanf+0x5ea>
            flags &= ~SIGNOK;
 8023928:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 802392c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023930:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
            flags |= HAVESIGN;
 8023934:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023938:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802393c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
            goto ok;
 8023940:	e005      	b.n	802394e <tiny_vfscanf+0x5ee>
            break;  /* not legal here */
 8023942:	bf00      	nop
 8023944:	e025      	b.n	8023992 <tiny_vfscanf+0x632>
            break;  /* not legal here */
 8023946:	bf00      	nop
 8023948:	e023      	b.n	8023992 <tiny_vfscanf+0x632>
          }
          break;
 802394a:	bf00      	nop

        /*
         * If we got here, c is not a legal character
         * for a number.  Stop accumulating digits.
         */
        break;
 802394c:	e021      	b.n	8023992 <tiny_vfscanf+0x632>
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 802394e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8023952:	1c53      	adds	r3, r2, #1
 8023954:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8023958:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802395c:	b2db      	uxtb	r3, r3
 802395e:	7013      	strb	r3, [r2, #0]
        if (--fp_r > 0)
 8023960:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8023964:	3b01      	subs	r3, #1
 8023966:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 802396a:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 802396e:	2b00      	cmp	r3, #0
 8023970:	dd11      	ble.n	8023996 <tiny_vfscanf+0x636>
          fp_p++;
 8023972:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8023976:	3301      	adds	r3, #1
 8023978:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
      for (p = buf; width; width--) {
 802397c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8023980:	3b01      	subs	r3, #1
 8023982:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8023986:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 802398a:	2b00      	cmp	r3, #0
 802398c:	f47f ae78 	bne.w	8023680 <tiny_vfscanf+0x320>
 8023990:	e002      	b.n	8023998 <tiny_vfscanf+0x638>
        break;
 8023992:	bf00      	nop
 8023994:	e000      	b.n	8023998 <tiny_vfscanf+0x638>
        else if (__srefill(fp))
          break;    /* EOF */
 8023996:	bf00      	nop
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 8023998:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 802399c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d020      	beq.n	80239e6 <tiny_vfscanf+0x686>
        if (p > buf)
 80239a4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80239a8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80239ac:	429a      	cmp	r2, r3
 80239ae:	f240 809f 	bls.w	8023af0 <tiny_vfscanf+0x790>
        {
          --c;
 80239b2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80239b6:	3b01      	subs	r3, #1
 80239b8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
          --p;
 80239bc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80239c0:	3b01      	subs	r3, #1
 80239c2:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
          ungetc(c++, fp);
 80239c6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80239ca:	3301      	adds	r3, #1
 80239cc:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80239d0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80239d4:	3b01      	subs	r3, #1
 80239d6:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80239da:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 80239de:	3301      	adds	r3, #1
 80239e0:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
          /* There is a dummy post-increment to
             avoid an unused value warning */
        }
        goto match_failure;
 80239e4:	e084      	b.n	8023af0 <tiny_vfscanf+0x790>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 80239e6:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80239ea:	2300      	movs	r3, #0
 80239ec:	7013      	strb	r3, [r2, #0]
        if (sign_minus)
 80239ee:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d00b      	beq.n	8023a0e <tiny_vfscanf+0x6ae>
          value = -value;
 80239f6:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 80239fa:	2100      	movs	r1, #0
 80239fc:	4250      	negs	r0, r2
 80239fe:	6038      	str	r0, [r7, #0]
 8023a00:	eb61 0303 	sbc.w	r3, r1, r3
 8023a04:	607b      	str	r3, [r7, #4]
 8023a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023a0a:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
          *va_arg(ap, size_t *) = value;
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else
#endif
        if (flags & LONG)
 8023a0e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023a12:	f003 0301 	and.w	r3, r3, #1
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d00f      	beq.n	8023a3a <tiny_vfscanf+0x6da>
          *va_arg(ap, long *) = value;
 8023a1a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a1e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a22:	6819      	ldr	r1, [r3, #0]
 8023a24:	1d0a      	adds	r2, r1, #4
 8023a26:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a2a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a2e:	601a      	str	r2, [r3, #0]
 8023a30:	680a      	ldr	r2, [r1, #0]
 8023a32:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8023a36:	6013      	str	r3, [r2, #0]
 8023a38:	e03a      	b.n	8023ab0 <tiny_vfscanf+0x750>
        else if (flags & SHORT)
 8023a3a:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023a3e:	f003 0304 	and.w	r3, r3, #4
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	d00f      	beq.n	8023a66 <tiny_vfscanf+0x706>
          *va_arg(ap, short *) = value;
 8023a46:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a4a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a4e:	6819      	ldr	r1, [r3, #0]
 8023a50:	1d0a      	adds	r2, r1, #4
 8023a52:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a56:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a5a:	601a      	str	r2, [r3, #0]
 8023a5c:	680a      	ldr	r2, [r1, #0]
 8023a5e:	f9b7 3280 	ldrsh.w	r3, [r7, #640]	@ 0x280
 8023a62:	8013      	strh	r3, [r2, #0]
 8023a64:	e024      	b.n	8023ab0 <tiny_vfscanf+0x750>
        else if (flags & SHORTSHORT)
 8023a66:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8023a6a:	f003 0308 	and.w	r3, r3, #8
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d00f      	beq.n	8023a92 <tiny_vfscanf+0x732>
          *va_arg(ap, char *) = value;
 8023a72:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a76:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a7a:	6819      	ldr	r1, [r3, #0]
 8023a7c:	1d0a      	adds	r2, r1, #4
 8023a7e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a82:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a86:	601a      	str	r2, [r3, #0]
 8023a88:	680a      	ldr	r2, [r1, #0]
 8023a8a:	f897 3280 	ldrb.w	r3, [r7, #640]	@ 0x280
 8023a8e:	7013      	strb	r3, [r2, #0]
 8023a90:	e00e      	b.n	8023ab0 <tiny_vfscanf+0x750>
        else
          *va_arg(ap, int *) = value;
 8023a92:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023a96:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023a9a:	6819      	ldr	r1, [r3, #0]
 8023a9c:	1d0a      	adds	r2, r1, #4
 8023a9e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8023aa2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8023aa6:	601a      	str	r2, [r3, #0]
 8023aa8:	680a      	ldr	r2, [r1, #0]
 8023aaa:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8023aae:	6013      	str	r3, [r2, #0]
        nassigned++;
 8023ab0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8023ab4:	3301      	adds	r3, #1
 8023ab6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
      }
      nread += p - buf;
 8023aba:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8023abe:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8023ac2:	1a9a      	subs	r2, r3, r2
 8023ac4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8023ac8:	4413      	add	r3, r2
 8023aca:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
      break;
 8023ace:	bf00      	nop
    c = *fmt++;
 8023ad0:	e47b      	b.n	80233ca <tiny_vfscanf+0x6a>
        goto input_failure;
 8023ad2:	bf00      	nop
 8023ad4:	e000      	b.n	8023ad8 <tiny_vfscanf+0x778>
      goto input_failure;
 8023ad6:	bf00      	nop
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 8023ad8:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d002      	beq.n	8023ae6 <tiny_vfscanf+0x786>
 8023ae0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8023ae4:	e007      	b.n	8023af6 <tiny_vfscanf+0x796>
 8023ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023aea:	e004      	b.n	8023af6 <tiny_vfscanf+0x796>
        goto match_failure;
 8023aec:	bf00      	nop
 8023aee:	e000      	b.n	8023af2 <tiny_vfscanf+0x792>
        goto match_failure;
 8023af0:	bf00      	nop
match_failure:
  return (nassigned);
 8023af2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
}
 8023af6:	4618      	mov	r0, r3
 8023af8:	f507 772c 	add.w	r7, r7, #688	@ 0x2b0
 8023afc:	46bd      	mov	sp, r7
 8023afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023b02:	bf00      	nop

08023b04 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 8023b04:	b40e      	push	{r1, r2, r3}
 8023b06:	b580      	push	{r7, lr}
 8023b08:	b085      	sub	sp, #20
 8023b0a:	af00      	add	r7, sp, #0
 8023b0c:	6078      	str	r0, [r7, #4]
  int ret;
  va_list ap;

  va_start(ap, fmt);
 8023b0e:	f107 0320 	add.w	r3, r7, #32
 8023b12:	60bb      	str	r3, [r7, #8]
  ret = tiny_vfscanf(str, fmt, ap);
 8023b14:	68ba      	ldr	r2, [r7, #8]
 8023b16:	69f9      	ldr	r1, [r7, #28]
 8023b18:	6878      	ldr	r0, [r7, #4]
 8023b1a:	f7ff fc21 	bl	8023360 <tiny_vfscanf>
 8023b1e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return (ret);
 8023b20:	68fb      	ldr	r3, [r7, #12]
}
 8023b22:	4618      	mov	r0, r3
 8023b24:	3714      	adds	r7, #20
 8023b26:	46bd      	mov	sp, r7
 8023b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023b2c:	b003      	add	sp, #12
 8023b2e:	4770      	bx	lr

08023b30 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8023b30:	b480      	push	{r7}
 8023b32:	b085      	sub	sp, #20
 8023b34:	af00      	add	r7, sp, #0
 8023b36:	6078      	str	r0, [r7, #4]
  int i = 0;
 8023b38:	2300      	movs	r3, #0
 8023b3a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8023b3c:	e00e      	b.n	8023b5c <ee_skip_atoi+0x2c>
 8023b3e:	68fa      	ldr	r2, [r7, #12]
 8023b40:	4613      	mov	r3, r2
 8023b42:	009b      	lsls	r3, r3, #2
 8023b44:	4413      	add	r3, r2
 8023b46:	005b      	lsls	r3, r3, #1
 8023b48:	4618      	mov	r0, r3
 8023b4a:	687b      	ldr	r3, [r7, #4]
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	1c59      	adds	r1, r3, #1
 8023b50:	687a      	ldr	r2, [r7, #4]
 8023b52:	6011      	str	r1, [r2, #0]
 8023b54:	781b      	ldrb	r3, [r3, #0]
 8023b56:	4403      	add	r3, r0
 8023b58:	3b30      	subs	r3, #48	@ 0x30
 8023b5a:	60fb      	str	r3, [r7, #12]
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	781b      	ldrb	r3, [r3, #0]
 8023b62:	2b2f      	cmp	r3, #47	@ 0x2f
 8023b64:	d904      	bls.n	8023b70 <ee_skip_atoi+0x40>
 8023b66:	687b      	ldr	r3, [r7, #4]
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	781b      	ldrb	r3, [r3, #0]
 8023b6c:	2b39      	cmp	r3, #57	@ 0x39
 8023b6e:	d9e6      	bls.n	8023b3e <ee_skip_atoi+0xe>
  return i;
 8023b70:	68fb      	ldr	r3, [r7, #12]
}
 8023b72:	4618      	mov	r0, r3
 8023b74:	3714      	adds	r7, #20
 8023b76:	46bd      	mov	sp, r7
 8023b78:	bc80      	pop	{r7}
 8023b7a:	4770      	bx	lr

08023b7c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8023b7c:	b480      	push	{r7}
 8023b7e:	b099      	sub	sp, #100	@ 0x64
 8023b80:	af00      	add	r7, sp, #0
 8023b82:	60f8      	str	r0, [r7, #12]
 8023b84:	60b9      	str	r1, [r7, #8]
 8023b86:	607a      	str	r2, [r7, #4]
 8023b88:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8023b8a:	4b71      	ldr	r3, [pc, #452]	@ (8023d50 <ee_number+0x1d4>)
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8023b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d002      	beq.n	8023ba0 <ee_number+0x24>
 8023b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8023d54 <ee_number+0x1d8>)
 8023b9c:	681b      	ldr	r3, [r3, #0]
 8023b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8023ba0:	683b      	ldr	r3, [r7, #0]
 8023ba2:	2b01      	cmp	r3, #1
 8023ba4:	dd02      	ble.n	8023bac <ee_number+0x30>
 8023ba6:	683b      	ldr	r3, [r7, #0]
 8023ba8:	2b24      	cmp	r3, #36	@ 0x24
 8023baa:	dd01      	ble.n	8023bb0 <ee_number+0x34>
 8023bac:	2300      	movs	r3, #0
 8023bae:	e0ca      	b.n	8023d46 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 8023bb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023bb2:	f003 0301 	and.w	r3, r3, #1
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	d001      	beq.n	8023bbe <ee_number+0x42>
 8023bba:	2330      	movs	r3, #48	@ 0x30
 8023bbc:	e000      	b.n	8023bc0 <ee_number+0x44>
 8023bbe:	2320      	movs	r3, #32
 8023bc0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 8023bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023bcc:	f003 0302 	and.w	r3, r3, #2
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d00b      	beq.n	8023bec <ee_number+0x70>
  {
    if (num < 0)
 8023bd4:	687b      	ldr	r3, [r7, #4]
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	da08      	bge.n	8023bec <ee_number+0x70>
    {
      sign = '-';
 8023bda:	232d      	movs	r3, #45	@ 0x2d
 8023bdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	425b      	negs	r3, r3
 8023be4:	607b      	str	r3, [r7, #4]
      size--;
 8023be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023be8:	3b01      	subs	r3, #1
 8023bea:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 8023bec:	2300      	movs	r3, #0
 8023bee:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d11e      	bne.n	8023c34 <ee_number+0xb8>
    tmp[i++] = '0';
 8023bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023bf8:	1c5a      	adds	r2, r3, #1
 8023bfa:	657a      	str	r2, [r7, #84]	@ 0x54
 8023bfc:	3360      	adds	r3, #96	@ 0x60
 8023bfe:	443b      	add	r3, r7
 8023c00:	2230      	movs	r2, #48	@ 0x30
 8023c02:	f803 2c50 	strb.w	r2, [r3, #-80]
 8023c06:	e018      	b.n	8023c3a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	683a      	ldr	r2, [r7, #0]
 8023c0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023c10:	fb01 f202 	mul.w	r2, r1, r2
 8023c14:	1a9b      	subs	r3, r3, r2
 8023c16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8023c18:	441a      	add	r2, r3
 8023c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023c1c:	1c59      	adds	r1, r3, #1
 8023c1e:	6579      	str	r1, [r7, #84]	@ 0x54
 8023c20:	7812      	ldrb	r2, [r2, #0]
 8023c22:	3360      	adds	r3, #96	@ 0x60
 8023c24:	443b      	add	r3, r7
 8023c26:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8023c2a:	687a      	ldr	r2, [r7, #4]
 8023c2c:	683b      	ldr	r3, [r7, #0]
 8023c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8023c32:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8023c34:	687b      	ldr	r3, [r7, #4]
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	d1e6      	bne.n	8023c08 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8023c3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023c3e:	429a      	cmp	r2, r3
 8023c40:	dd01      	ble.n	8023c46 <ee_number+0xca>
 8023c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 8023c46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023c4a:	1ad3      	subs	r3, r2, r3
 8023c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8023c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023c50:	f003 0301 	and.w	r3, r3, #1
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d112      	bne.n	8023c7e <ee_number+0x102>
 8023c58:	e00c      	b.n	8023c74 <ee_number+0xf8>
 8023c5a:	68fb      	ldr	r3, [r7, #12]
 8023c5c:	1c5a      	adds	r2, r3, #1
 8023c5e:	60fa      	str	r2, [r7, #12]
 8023c60:	2220      	movs	r2, #32
 8023c62:	701a      	strb	r2, [r3, #0]
 8023c64:	68bb      	ldr	r3, [r7, #8]
 8023c66:	3b01      	subs	r3, #1
 8023c68:	60bb      	str	r3, [r7, #8]
 8023c6a:	68bb      	ldr	r3, [r7, #8]
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d101      	bne.n	8023c74 <ee_number+0xf8>
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	e068      	b.n	8023d46 <ee_number+0x1ca>
 8023c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023c76:	1e5a      	subs	r2, r3, #1
 8023c78:	66ba      	str	r2, [r7, #104]	@ 0x68
 8023c7a:	2b00      	cmp	r3, #0
 8023c7c:	dced      	bgt.n	8023c5a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 8023c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	d01b      	beq.n	8023cbe <ee_number+0x142>
 8023c86:	68fb      	ldr	r3, [r7, #12]
 8023c88:	1c5a      	adds	r2, r3, #1
 8023c8a:	60fa      	str	r2, [r7, #12]
 8023c8c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8023c90:	701a      	strb	r2, [r3, #0]
 8023c92:	68bb      	ldr	r3, [r7, #8]
 8023c94:	3b01      	subs	r3, #1
 8023c96:	60bb      	str	r3, [r7, #8]
 8023c98:	68bb      	ldr	r3, [r7, #8]
 8023c9a:	2b00      	cmp	r3, #0
 8023c9c:	d10f      	bne.n	8023cbe <ee_number+0x142>
 8023c9e:	68fb      	ldr	r3, [r7, #12]
 8023ca0:	e051      	b.n	8023d46 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8023ca2:	68fb      	ldr	r3, [r7, #12]
 8023ca4:	1c5a      	adds	r2, r3, #1
 8023ca6:	60fa      	str	r2, [r7, #12]
 8023ca8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8023cac:	701a      	strb	r2, [r3, #0]
 8023cae:	68bb      	ldr	r3, [r7, #8]
 8023cb0:	3b01      	subs	r3, #1
 8023cb2:	60bb      	str	r3, [r7, #8]
 8023cb4:	68bb      	ldr	r3, [r7, #8]
 8023cb6:	2b00      	cmp	r3, #0
 8023cb8:	d101      	bne.n	8023cbe <ee_number+0x142>
 8023cba:	68fb      	ldr	r3, [r7, #12]
 8023cbc:	e043      	b.n	8023d46 <ee_number+0x1ca>
 8023cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023cc0:	1e5a      	subs	r2, r3, #1
 8023cc2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8023cc4:	2b00      	cmp	r3, #0
 8023cc6:	dcec      	bgt.n	8023ca2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8023cc8:	e00c      	b.n	8023ce4 <ee_number+0x168>
 8023cca:	68fb      	ldr	r3, [r7, #12]
 8023ccc:	1c5a      	adds	r2, r3, #1
 8023cce:	60fa      	str	r2, [r7, #12]
 8023cd0:	2230      	movs	r2, #48	@ 0x30
 8023cd2:	701a      	strb	r2, [r3, #0]
 8023cd4:	68bb      	ldr	r3, [r7, #8]
 8023cd6:	3b01      	subs	r3, #1
 8023cd8:	60bb      	str	r3, [r7, #8]
 8023cda:	68bb      	ldr	r3, [r7, #8]
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	d101      	bne.n	8023ce4 <ee_number+0x168>
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	e030      	b.n	8023d46 <ee_number+0x1ca>
 8023ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023ce6:	1e5a      	subs	r2, r3, #1
 8023ce8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8023cea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023cec:	429a      	cmp	r2, r3
 8023cee:	dbec      	blt.n	8023cca <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8023cf0:	e010      	b.n	8023d14 <ee_number+0x198>
 8023cf2:	68fb      	ldr	r3, [r7, #12]
 8023cf4:	1c5a      	adds	r2, r3, #1
 8023cf6:	60fa      	str	r2, [r7, #12]
 8023cf8:	f107 0110 	add.w	r1, r7, #16
 8023cfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023cfe:	440a      	add	r2, r1
 8023d00:	7812      	ldrb	r2, [r2, #0]
 8023d02:	701a      	strb	r2, [r3, #0]
 8023d04:	68bb      	ldr	r3, [r7, #8]
 8023d06:	3b01      	subs	r3, #1
 8023d08:	60bb      	str	r3, [r7, #8]
 8023d0a:	68bb      	ldr	r3, [r7, #8]
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	d101      	bne.n	8023d14 <ee_number+0x198>
 8023d10:	68fb      	ldr	r3, [r7, #12]
 8023d12:	e018      	b.n	8023d46 <ee_number+0x1ca>
 8023d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023d16:	1e5a      	subs	r2, r3, #1
 8023d18:	657a      	str	r2, [r7, #84]	@ 0x54
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	dce9      	bgt.n	8023cf2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8023d1e:	e00c      	b.n	8023d3a <ee_number+0x1be>
 8023d20:	68fb      	ldr	r3, [r7, #12]
 8023d22:	1c5a      	adds	r2, r3, #1
 8023d24:	60fa      	str	r2, [r7, #12]
 8023d26:	2220      	movs	r2, #32
 8023d28:	701a      	strb	r2, [r3, #0]
 8023d2a:	68bb      	ldr	r3, [r7, #8]
 8023d2c:	3b01      	subs	r3, #1
 8023d2e:	60bb      	str	r3, [r7, #8]
 8023d30:	68bb      	ldr	r3, [r7, #8]
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d101      	bne.n	8023d3a <ee_number+0x1be>
 8023d36:	68fb      	ldr	r3, [r7, #12]
 8023d38:	e005      	b.n	8023d46 <ee_number+0x1ca>
 8023d3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023d3c:	1e5a      	subs	r2, r3, #1
 8023d3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8023d40:	2b00      	cmp	r3, #0
 8023d42:	dced      	bgt.n	8023d20 <ee_number+0x1a4>

  return str;
 8023d44:	68fb      	ldr	r3, [r7, #12]
}
 8023d46:	4618      	mov	r0, r3
 8023d48:	3764      	adds	r7, #100	@ 0x64
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	bc80      	pop	{r7}
 8023d4e:	4770      	bx	lr
 8023d50:	20000148 	.word	0x20000148
 8023d54:	2000014c 	.word	0x2000014c

08023d58 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8023d58:	b580      	push	{r7, lr}
 8023d5a:	b092      	sub	sp, #72	@ 0x48
 8023d5c:	af04      	add	r7, sp, #16
 8023d5e:	60f8      	str	r0, [r7, #12]
 8023d60:	60b9      	str	r1, [r7, #8]
 8023d62:	607a      	str	r2, [r7, #4]
 8023d64:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8023d66:	68bb      	ldr	r3, [r7, #8]
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	dc01      	bgt.n	8023d70 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8023d6c:	2300      	movs	r3, #0
 8023d6e:	e13e      	b.n	8023fee <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8023d70:	68fb      	ldr	r3, [r7, #12]
 8023d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023d74:	e128      	b.n	8023fc8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 8023d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023d78:	68fb      	ldr	r3, [r7, #12]
 8023d7a:	1ad2      	subs	r2, r2, r3
 8023d7c:	68bb      	ldr	r3, [r7, #8]
 8023d7e:	3b01      	subs	r3, #1
 8023d80:	429a      	cmp	r2, r3
 8023d82:	f280 812e 	bge.w	8023fe2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	781b      	ldrb	r3, [r3, #0]
 8023d8a:	2b25      	cmp	r3, #37	@ 0x25
 8023d8c:	d006      	beq.n	8023d9c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8023d8e:	687a      	ldr	r2, [r7, #4]
 8023d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023d92:	1c59      	adds	r1, r3, #1
 8023d94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8023d96:	7812      	ldrb	r2, [r2, #0]
 8023d98:	701a      	strb	r2, [r3, #0]
      continue;
 8023d9a:	e112      	b.n	8023fc2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	3301      	adds	r3, #1
 8023da4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	781b      	ldrb	r3, [r3, #0]
 8023daa:	2b30      	cmp	r3, #48	@ 0x30
 8023dac:	d103      	bne.n	8023db6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8023dae:	6a3b      	ldr	r3, [r7, #32]
 8023db0:	f043 0301 	orr.w	r3, r3, #1
 8023db4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 8023db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023dba:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	781b      	ldrb	r3, [r3, #0]
 8023dc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8023dc2:	d908      	bls.n	8023dd6 <tiny_vsnprintf_like+0x7e>
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	781b      	ldrb	r3, [r3, #0]
 8023dc8:	2b39      	cmp	r3, #57	@ 0x39
 8023dca:	d804      	bhi.n	8023dd6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8023dcc:	1d3b      	adds	r3, r7, #4
 8023dce:	4618      	mov	r0, r3
 8023dd0:	f7ff feae 	bl	8023b30 <ee_skip_atoi>
 8023dd4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 8023dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023dda:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 8023ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023de0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 8023de2:	230a      	movs	r3, #10
 8023de4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	781b      	ldrb	r3, [r3, #0]
 8023dea:	3b58      	subs	r3, #88	@ 0x58
 8023dec:	2b20      	cmp	r3, #32
 8023dee:	f200 8094 	bhi.w	8023f1a <tiny_vsnprintf_like+0x1c2>
 8023df2:	a201      	add	r2, pc, #4	@ (adr r2, 8023df8 <tiny_vsnprintf_like+0xa0>)
 8023df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023df8:	08023f03 	.word	0x08023f03
 8023dfc:	08023f1b 	.word	0x08023f1b
 8023e00:	08023f1b 	.word	0x08023f1b
 8023e04:	08023f1b 	.word	0x08023f1b
 8023e08:	08023f1b 	.word	0x08023f1b
 8023e0c:	08023f1b 	.word	0x08023f1b
 8023e10:	08023f1b 	.word	0x08023f1b
 8023e14:	08023f1b 	.word	0x08023f1b
 8023e18:	08023f1b 	.word	0x08023f1b
 8023e1c:	08023f1b 	.word	0x08023f1b
 8023e20:	08023f1b 	.word	0x08023f1b
 8023e24:	08023e87 	.word	0x08023e87
 8023e28:	08023f11 	.word	0x08023f11
 8023e2c:	08023f1b 	.word	0x08023f1b
 8023e30:	08023f1b 	.word	0x08023f1b
 8023e34:	08023f1b 	.word	0x08023f1b
 8023e38:	08023f1b 	.word	0x08023f1b
 8023e3c:	08023f11 	.word	0x08023f11
 8023e40:	08023f1b 	.word	0x08023f1b
 8023e44:	08023f1b 	.word	0x08023f1b
 8023e48:	08023f1b 	.word	0x08023f1b
 8023e4c:	08023f1b 	.word	0x08023f1b
 8023e50:	08023f1b 	.word	0x08023f1b
 8023e54:	08023f1b 	.word	0x08023f1b
 8023e58:	08023f1b 	.word	0x08023f1b
 8023e5c:	08023f1b 	.word	0x08023f1b
 8023e60:	08023f1b 	.word	0x08023f1b
 8023e64:	08023ea7 	.word	0x08023ea7
 8023e68:	08023f1b 	.word	0x08023f1b
 8023e6c:	08023f67 	.word	0x08023f67
 8023e70:	08023f1b 	.word	0x08023f1b
 8023e74:	08023f1b 	.word	0x08023f1b
 8023e78:	08023f0b 	.word	0x08023f0b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8023e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e7e:	1c5a      	adds	r2, r3, #1
 8023e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023e82:	2220      	movs	r2, #32
 8023e84:	701a      	strb	r2, [r3, #0]
 8023e86:	69fb      	ldr	r3, [r7, #28]
 8023e88:	3b01      	subs	r3, #1
 8023e8a:	61fb      	str	r3, [r7, #28]
 8023e8c:	69fb      	ldr	r3, [r7, #28]
 8023e8e:	2b00      	cmp	r3, #0
 8023e90:	dcf4      	bgt.n	8023e7c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8023e92:	683b      	ldr	r3, [r7, #0]
 8023e94:	1d1a      	adds	r2, r3, #4
 8023e96:	603a      	str	r2, [r7, #0]
 8023e98:	6819      	ldr	r1, [r3, #0]
 8023e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e9c:	1c5a      	adds	r2, r3, #1
 8023e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023ea0:	b2ca      	uxtb	r2, r1
 8023ea2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8023ea4:	e08d      	b.n	8023fc2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 8023ea6:	683b      	ldr	r3, [r7, #0]
 8023ea8:	1d1a      	adds	r2, r3, #4
 8023eaa:	603a      	str	r2, [r7, #0]
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 8023eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	d101      	bne.n	8023eba <tiny_vsnprintf_like+0x162>
 8023eb6:	4b50      	ldr	r3, [pc, #320]	@ (8023ff8 <tiny_vsnprintf_like+0x2a0>)
 8023eb8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8023eba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023ebc:	f7dc f960 	bl	8000180 <strlen>
 8023ec0:	4603      	mov	r3, r0
 8023ec2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8023ec4:	e004      	b.n	8023ed0 <tiny_vsnprintf_like+0x178>
 8023ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ec8:	1c5a      	adds	r2, r3, #1
 8023eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023ecc:	2220      	movs	r2, #32
 8023ece:	701a      	strb	r2, [r3, #0]
 8023ed0:	69fb      	ldr	r3, [r7, #28]
 8023ed2:	1e5a      	subs	r2, r3, #1
 8023ed4:	61fa      	str	r2, [r7, #28]
 8023ed6:	693a      	ldr	r2, [r7, #16]
 8023ed8:	429a      	cmp	r2, r3
 8023eda:	dbf4      	blt.n	8023ec6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8023edc:	2300      	movs	r3, #0
 8023ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023ee0:	e00a      	b.n	8023ef8 <tiny_vsnprintf_like+0x1a0>
 8023ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023ee4:	1c53      	adds	r3, r2, #1
 8023ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8023ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023eea:	1c59      	adds	r1, r3, #1
 8023eec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8023eee:	7812      	ldrb	r2, [r2, #0]
 8023ef0:	701a      	strb	r2, [r3, #0]
 8023ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ef4:	3301      	adds	r3, #1
 8023ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023efa:	693b      	ldr	r3, [r7, #16]
 8023efc:	429a      	cmp	r2, r3
 8023efe:	dbf0      	blt.n	8023ee2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8023f00:	e05f      	b.n	8023fc2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8023f02:	6a3b      	ldr	r3, [r7, #32]
 8023f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023f08:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8023f0a:	2310      	movs	r3, #16
 8023f0c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8023f0e:	e02b      	b.n	8023f68 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 8023f10:	6a3b      	ldr	r3, [r7, #32]
 8023f12:	f043 0302 	orr.w	r3, r3, #2
 8023f16:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8023f18:	e025      	b.n	8023f66 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	781b      	ldrb	r3, [r3, #0]
 8023f1e:	2b25      	cmp	r3, #37	@ 0x25
 8023f20:	d004      	beq.n	8023f2c <tiny_vsnprintf_like+0x1d4>
 8023f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023f24:	1c5a      	adds	r2, r3, #1
 8023f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023f28:	2225      	movs	r2, #37	@ 0x25
 8023f2a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8023f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023f2e:	68fb      	ldr	r3, [r7, #12]
 8023f30:	1ad2      	subs	r2, r2, r3
 8023f32:	68bb      	ldr	r3, [r7, #8]
 8023f34:	3b01      	subs	r3, #1
 8023f36:	429a      	cmp	r2, r3
 8023f38:	da16      	bge.n	8023f68 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	781b      	ldrb	r3, [r3, #0]
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d006      	beq.n	8023f50 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8023f42:	687a      	ldr	r2, [r7, #4]
 8023f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023f46:	1c59      	adds	r1, r3, #1
 8023f48:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8023f4a:	7812      	ldrb	r2, [r2, #0]
 8023f4c:	701a      	strb	r2, [r3, #0]
 8023f4e:	e002      	b.n	8023f56 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	3b01      	subs	r3, #1
 8023f54:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8023f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	1ad2      	subs	r2, r2, r3
 8023f5c:	68bb      	ldr	r3, [r7, #8]
 8023f5e:	3b01      	subs	r3, #1
 8023f60:	429a      	cmp	r2, r3
 8023f62:	db2d      	blt.n	8023fc0 <tiny_vsnprintf_like+0x268>
 8023f64:	e000      	b.n	8023f68 <tiny_vsnprintf_like+0x210>
        break;
 8023f66:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8023f68:	697b      	ldr	r3, [r7, #20]
 8023f6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8023f6c:	d105      	bne.n	8023f7a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 8023f6e:	683b      	ldr	r3, [r7, #0]
 8023f70:	1d1a      	adds	r2, r3, #4
 8023f72:	603a      	str	r2, [r7, #0]
 8023f74:	681b      	ldr	r3, [r3, #0]
 8023f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8023f78:	e00f      	b.n	8023f9a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 8023f7a:	6a3b      	ldr	r3, [r7, #32]
 8023f7c:	f003 0302 	and.w	r3, r3, #2
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d005      	beq.n	8023f90 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 8023f84:	683b      	ldr	r3, [r7, #0]
 8023f86:	1d1a      	adds	r2, r3, #4
 8023f88:	603a      	str	r2, [r7, #0]
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8023f8e:	e004      	b.n	8023f9a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 8023f90:	683b      	ldr	r3, [r7, #0]
 8023f92:	1d1a      	adds	r2, r3, #4
 8023f94:	603a      	str	r2, [r7, #0]
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8023f9a:	68bb      	ldr	r3, [r7, #8]
 8023f9c:	1e5a      	subs	r2, r3, #1
 8023f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	1acb      	subs	r3, r1, r3
 8023fa4:	1ad1      	subs	r1, r2, r3
 8023fa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023fa8:	6a3b      	ldr	r3, [r7, #32]
 8023faa:	9302      	str	r3, [sp, #8]
 8023fac:	69bb      	ldr	r3, [r7, #24]
 8023fae:	9301      	str	r3, [sp, #4]
 8023fb0:	69fb      	ldr	r3, [r7, #28]
 8023fb2:	9300      	str	r3, [sp, #0]
 8023fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8023fb8:	f7ff fde0 	bl	8023b7c <ee_number>
 8023fbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8023fbe:	e000      	b.n	8023fc2 <tiny_vsnprintf_like+0x26a>
        continue;
 8023fc0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	3301      	adds	r3, #1
 8023fc6:	607b      	str	r3, [r7, #4]
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	781b      	ldrb	r3, [r3, #0]
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	f47f aed2 	bne.w	8023d76 <tiny_vsnprintf_like+0x1e>
 8023fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023fd4:	68fb      	ldr	r3, [r7, #12]
 8023fd6:	1ad2      	subs	r2, r2, r3
 8023fd8:	68bb      	ldr	r3, [r7, #8]
 8023fda:	3b01      	subs	r3, #1
 8023fdc:	429a      	cmp	r2, r3
 8023fde:	f6bf aeca 	bge.w	8023d76 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 8023fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023fe4:	2200      	movs	r2, #0
 8023fe6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8023fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023fea:	68fb      	ldr	r3, [r7, #12]
 8023fec:	1ad3      	subs	r3, r2, r3
}
 8023fee:	4618      	mov	r0, r3
 8023ff0:	3738      	adds	r7, #56	@ 0x38
 8023ff2:	46bd      	mov	sp, r7
 8023ff4:	bd80      	pop	{r7, pc}
 8023ff6:	bf00      	nop
 8023ff8:	08028d80 	.word	0x08028d80

08023ffc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8023ffc:	b580      	push	{r7, lr}
 8023ffe:	b090      	sub	sp, #64	@ 0x40
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8024004:	4b73      	ldr	r3, [pc, #460]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 802400a:	4b72      	ldr	r3, [pc, #456]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 802400c:	681a      	ldr	r2, [r3, #0]
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	4013      	ands	r3, r2
 8024012:	4a70      	ldr	r2, [pc, #448]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 8024014:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8024016:	4b70      	ldr	r3, [pc, #448]	@ (80241d8 <UTIL_SEQ_Run+0x1dc>)
 8024018:	681b      	ldr	r3, [r3, #0]
 802401a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 802401c:	4b6f      	ldr	r3, [pc, #444]	@ (80241dc <UTIL_SEQ_Run+0x1e0>)
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8024022:	4b6f      	ldr	r3, [pc, #444]	@ (80241e0 <UTIL_SEQ_Run+0x1e4>)
 8024024:	681b      	ldr	r3, [r3, #0]
 8024026:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8024028:	4b6e      	ldr	r3, [pc, #440]	@ (80241e4 <UTIL_SEQ_Run+0x1e8>)
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 802402e:	e08d      	b.n	802414c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8024030:	2300      	movs	r3, #0
 8024032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8024034:	e002      	b.n	802403c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8024036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024038:	3301      	adds	r3, #1
 802403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 802403c:	4a6a      	ldr	r2, [pc, #424]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 802403e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024040:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8024044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024046:	401a      	ands	r2, r3
 8024048:	4b62      	ldr	r3, [pc, #392]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 802404a:	681b      	ldr	r3, [r3, #0]
 802404c:	4013      	ands	r3, r2
 802404e:	2b00      	cmp	r3, #0
 8024050:	d0f1      	beq.n	8024036 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8024052:	4a65      	ldr	r2, [pc, #404]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 8024054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024056:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 802405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802405c:	401a      	ands	r2, r3
 802405e:	4b5d      	ldr	r3, [pc, #372]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	4013      	ands	r3, r2
 8024064:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8024066:	4a60      	ldr	r2, [pc, #384]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 8024068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802406a:	00db      	lsls	r3, r3, #3
 802406c:	4413      	add	r3, r2
 802406e:	685a      	ldr	r2, [r3, #4]
 8024070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024072:	4013      	ands	r3, r2
 8024074:	2b00      	cmp	r3, #0
 8024076:	d106      	bne.n	8024086 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8024078:	4a5b      	ldr	r2, [pc, #364]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 802407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802407c:	00db      	lsls	r3, r3, #3
 802407e:	4413      	add	r3, r2
 8024080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024084:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8024086:	4a58      	ldr	r2, [pc, #352]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 8024088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802408a:	00db      	lsls	r3, r3, #3
 802408c:	4413      	add	r3, r2
 802408e:	685a      	ldr	r2, [r3, #4]
 8024090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024092:	4013      	ands	r3, r2
 8024094:	4618      	mov	r0, r3
 8024096:	f000 f97d 	bl	8024394 <SEQ_BitPosition>
 802409a:	4603      	mov	r3, r0
 802409c:	461a      	mov	r2, r3
 802409e:	4b53      	ldr	r3, [pc, #332]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 80240a0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80240a2:	4a51      	ldr	r2, [pc, #324]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 80240a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80240a6:	00db      	lsls	r3, r3, #3
 80240a8:	4413      	add	r3, r2
 80240aa:	685a      	ldr	r2, [r3, #4]
 80240ac:	4b4f      	ldr	r3, [pc, #316]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 80240ae:	681b      	ldr	r3, [r3, #0]
 80240b0:	2101      	movs	r1, #1
 80240b2:	fa01 f303 	lsl.w	r3, r1, r3
 80240b6:	43db      	mvns	r3, r3
 80240b8:	401a      	ands	r2, r3
 80240ba:	494b      	ldr	r1, [pc, #300]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 80240bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80240be:	00db      	lsls	r3, r3, #3
 80240c0:	440b      	add	r3, r1
 80240c2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80240c4:	f3ef 8310 	mrs	r3, PRIMASK
 80240c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80240ca:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80240cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80240ce:	b672      	cpsid	i
}
 80240d0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80240d2:	4b46      	ldr	r3, [pc, #280]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	2201      	movs	r2, #1
 80240d8:	fa02 f303 	lsl.w	r3, r2, r3
 80240dc:	43da      	mvns	r2, r3
 80240de:	4b3e      	ldr	r3, [pc, #248]	@ (80241d8 <UTIL_SEQ_Run+0x1dc>)
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	4013      	ands	r3, r2
 80240e4:	4a3c      	ldr	r2, [pc, #240]	@ (80241d8 <UTIL_SEQ_Run+0x1dc>)
 80240e6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80240e8:	2301      	movs	r3, #1
 80240ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80240ec:	e013      	b.n	8024116 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80240ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80240f0:	3b01      	subs	r3, #1
 80240f2:	4a3d      	ldr	r2, [pc, #244]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 80240f4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80240f8:	4b3c      	ldr	r3, [pc, #240]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	2201      	movs	r2, #1
 80240fe:	fa02 f303 	lsl.w	r3, r2, r3
 8024102:	43da      	mvns	r2, r3
 8024104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024106:	3b01      	subs	r3, #1
 8024108:	400a      	ands	r2, r1
 802410a:	4937      	ldr	r1, [pc, #220]	@ (80241e8 <UTIL_SEQ_Run+0x1ec>)
 802410c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8024110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024112:	3b01      	subs	r3, #1
 8024114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8024116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024118:	2b00      	cmp	r3, #0
 802411a:	d1e8      	bne.n	80240ee <UTIL_SEQ_Run+0xf2>
 802411c:	6a3b      	ldr	r3, [r7, #32]
 802411e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024120:	697b      	ldr	r3, [r7, #20]
 8024122:	f383 8810 	msr	PRIMASK, r3
}
 8024126:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8024128:	4b30      	ldr	r3, [pc, #192]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	4a30      	ldr	r2, [pc, #192]	@ (80241f0 <UTIL_SEQ_Run+0x1f4>)
 802412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024132:	4798      	blx	r3

    local_taskset = TaskSet;
 8024134:	4b28      	ldr	r3, [pc, #160]	@ (80241d8 <UTIL_SEQ_Run+0x1dc>)
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 802413a:	4b28      	ldr	r3, [pc, #160]	@ (80241dc <UTIL_SEQ_Run+0x1e0>)
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8024140:	4b27      	ldr	r3, [pc, #156]	@ (80241e0 <UTIL_SEQ_Run+0x1e4>)
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8024146:	4b27      	ldr	r3, [pc, #156]	@ (80241e4 <UTIL_SEQ_Run+0x1e8>)
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 802414c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024150:	401a      	ands	r2, r3
 8024152:	4b20      	ldr	r3, [pc, #128]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	4013      	ands	r3, r2
 8024158:	2b00      	cmp	r3, #0
 802415a:	d005      	beq.n	8024168 <UTIL_SEQ_Run+0x16c>
 802415c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024160:	4013      	ands	r3, r2
 8024162:	2b00      	cmp	r3, #0
 8024164:	f43f af64 	beq.w	8024030 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8024168:	4b20      	ldr	r3, [pc, #128]	@ (80241ec <UTIL_SEQ_Run+0x1f0>)
 802416a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802416e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8024170:	f000 f904 	bl	802437c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024174:	f3ef 8310 	mrs	r3, PRIMASK
 8024178:	613b      	str	r3, [r7, #16]
  return(result);
 802417a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 802417c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 802417e:	b672      	cpsid	i
}
 8024180:	bf00      	nop
  local_taskset = TaskSet;
 8024182:	4b15      	ldr	r3, [pc, #84]	@ (80241d8 <UTIL_SEQ_Run+0x1dc>)
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8024188:	4b14      	ldr	r3, [pc, #80]	@ (80241dc <UTIL_SEQ_Run+0x1e0>)
 802418a:	681b      	ldr	r3, [r3, #0]
 802418c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 802418e:	4b14      	ldr	r3, [pc, #80]	@ (80241e0 <UTIL_SEQ_Run+0x1e4>)
 8024190:	681b      	ldr	r3, [r3, #0]
 8024192:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8024194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024198:	401a      	ands	r2, r3
 802419a:	4b0e      	ldr	r3, [pc, #56]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	4013      	ands	r3, r2
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d107      	bne.n	80241b4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80241a4:	4b0f      	ldr	r3, [pc, #60]	@ (80241e4 <UTIL_SEQ_Run+0x1e8>)
 80241a6:	681a      	ldr	r2, [r3, #0]
 80241a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80241aa:	4013      	ands	r3, r2
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	d101      	bne.n	80241b4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80241b0:	f7dd ff5c 	bl	800206c <UTIL_SEQ_Idle>
 80241b4:	69fb      	ldr	r3, [r7, #28]
 80241b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80241b8:	68fb      	ldr	r3, [r7, #12]
 80241ba:	f383 8810 	msr	PRIMASK, r3
}
 80241be:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80241c0:	f000 f8e2 	bl	8024388 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80241c4:	4a03      	ldr	r2, [pc, #12]	@ (80241d4 <UTIL_SEQ_Run+0x1d8>)
 80241c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80241c8:	6013      	str	r3, [r2, #0]

  return;
 80241ca:	bf00      	nop
}
 80241cc:	3740      	adds	r7, #64	@ 0x40
 80241ce:	46bd      	mov	sp, r7
 80241d0:	bd80      	pop	{r7, pc}
 80241d2:	bf00      	nop
 80241d4:	20000154 	.word	0x20000154
 80241d8:	200021d0 	.word	0x200021d0
 80241dc:	200021d4 	.word	0x200021d4
 80241e0:	20000150 	.word	0x20000150
 80241e4:	200021d8 	.word	0x200021d8
 80241e8:	200021f0 	.word	0x200021f0
 80241ec:	200021dc 	.word	0x200021dc
 80241f0:	200021e0 	.word	0x200021e0

080241f4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80241f4:	b580      	push	{r7, lr}
 80241f6:	b088      	sub	sp, #32
 80241f8:	af00      	add	r7, sp, #0
 80241fa:	60f8      	str	r0, [r7, #12]
 80241fc:	60b9      	str	r1, [r7, #8]
 80241fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024200:	f3ef 8310 	mrs	r3, PRIMASK
 8024204:	617b      	str	r3, [r7, #20]
  return(result);
 8024206:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8024208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 802420a:	b672      	cpsid	i
}
 802420c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 802420e:	68f8      	ldr	r0, [r7, #12]
 8024210:	f000 f8c0 	bl	8024394 <SEQ_BitPosition>
 8024214:	4603      	mov	r3, r0
 8024216:	4619      	mov	r1, r3
 8024218:	4a06      	ldr	r2, [pc, #24]	@ (8024234 <UTIL_SEQ_RegTask+0x40>)
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8024220:	69fb      	ldr	r3, [r7, #28]
 8024222:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024224:	69bb      	ldr	r3, [r7, #24]
 8024226:	f383 8810 	msr	PRIMASK, r3
}
 802422a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 802422c:	bf00      	nop
}
 802422e:	3720      	adds	r7, #32
 8024230:	46bd      	mov	sp, r7
 8024232:	bd80      	pop	{r7, pc}
 8024234:	200021e0 	.word	0x200021e0

08024238 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8024238:	b480      	push	{r7}
 802423a:	b087      	sub	sp, #28
 802423c:	af00      	add	r7, sp, #0
 802423e:	6078      	str	r0, [r7, #4]
 8024240:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024242:	f3ef 8310 	mrs	r3, PRIMASK
 8024246:	60fb      	str	r3, [r7, #12]
  return(result);
 8024248:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 802424a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802424c:	b672      	cpsid	i
}
 802424e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8024250:	4b0d      	ldr	r3, [pc, #52]	@ (8024288 <UTIL_SEQ_SetTask+0x50>)
 8024252:	681a      	ldr	r2, [r3, #0]
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	4313      	orrs	r3, r2
 8024258:	4a0b      	ldr	r2, [pc, #44]	@ (8024288 <UTIL_SEQ_SetTask+0x50>)
 802425a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 802425c:	4a0b      	ldr	r2, [pc, #44]	@ (802428c <UTIL_SEQ_SetTask+0x54>)
 802425e:	683b      	ldr	r3, [r7, #0]
 8024260:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	431a      	orrs	r2, r3
 8024268:	4908      	ldr	r1, [pc, #32]	@ (802428c <UTIL_SEQ_SetTask+0x54>)
 802426a:	683b      	ldr	r3, [r7, #0]
 802426c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8024270:	697b      	ldr	r3, [r7, #20]
 8024272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024274:	693b      	ldr	r3, [r7, #16]
 8024276:	f383 8810 	msr	PRIMASK, r3
}
 802427a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 802427c:	bf00      	nop
}
 802427e:	371c      	adds	r7, #28
 8024280:	46bd      	mov	sp, r7
 8024282:	bc80      	pop	{r7}
 8024284:	4770      	bx	lr
 8024286:	bf00      	nop
 8024288:	200021d0 	.word	0x200021d0
 802428c:	200021f0 	.word	0x200021f0

08024290 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8024290:	b480      	push	{r7}
 8024292:	b087      	sub	sp, #28
 8024294:	af00      	add	r7, sp, #0
 8024296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024298:	f3ef 8310 	mrs	r3, PRIMASK
 802429c:	60fb      	str	r3, [r7, #12]
  return(result);
 802429e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80242a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80242a2:	b672      	cpsid	i
}
 80242a4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80242a6:	4b08      	ldr	r3, [pc, #32]	@ (80242c8 <UTIL_SEQ_SetEvt+0x38>)
 80242a8:	681a      	ldr	r2, [r3, #0]
 80242aa:	687b      	ldr	r3, [r7, #4]
 80242ac:	4313      	orrs	r3, r2
 80242ae:	4a06      	ldr	r2, [pc, #24]	@ (80242c8 <UTIL_SEQ_SetEvt+0x38>)
 80242b0:	6013      	str	r3, [r2, #0]
 80242b2:	697b      	ldr	r3, [r7, #20]
 80242b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80242b6:	693b      	ldr	r3, [r7, #16]
 80242b8:	f383 8810 	msr	PRIMASK, r3
}
 80242bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80242be:	bf00      	nop
}
 80242c0:	371c      	adds	r7, #28
 80242c2:	46bd      	mov	sp, r7
 80242c4:	bc80      	pop	{r7}
 80242c6:	4770      	bx	lr
 80242c8:	200021d4 	.word	0x200021d4

080242cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80242cc:	b580      	push	{r7, lr}
 80242ce:	b088      	sub	sp, #32
 80242d0:	af00      	add	r7, sp, #0
 80242d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80242d4:	4b1f      	ldr	r3, [pc, #124]	@ (8024354 <UTIL_SEQ_WaitEvt+0x88>)
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80242da:	4b1e      	ldr	r3, [pc, #120]	@ (8024354 <UTIL_SEQ_WaitEvt+0x88>)
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80242e2:	d102      	bne.n	80242ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80242e4:	2300      	movs	r3, #0
 80242e6:	61fb      	str	r3, [r7, #28]
 80242e8:	e005      	b.n	80242f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80242ea:	4b1a      	ldr	r3, [pc, #104]	@ (8024354 <UTIL_SEQ_WaitEvt+0x88>)
 80242ec:	681b      	ldr	r3, [r3, #0]
 80242ee:	2201      	movs	r2, #1
 80242f0:	fa02 f303 	lsl.w	r3, r2, r3
 80242f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80242f6:	4b18      	ldr	r3, [pc, #96]	@ (8024358 <UTIL_SEQ_WaitEvt+0x8c>)
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80242fc:	4a16      	ldr	r2, [pc, #88]	@ (8024358 <UTIL_SEQ_WaitEvt+0x8c>)
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8024302:	e003      	b.n	802430c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8024304:	6879      	ldr	r1, [r7, #4]
 8024306:	69f8      	ldr	r0, [r7, #28]
 8024308:	f000 f82a 	bl	8024360 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 802430c:	4b13      	ldr	r3, [pc, #76]	@ (802435c <UTIL_SEQ_WaitEvt+0x90>)
 802430e:	681a      	ldr	r2, [r3, #0]
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	4013      	ands	r3, r2
 8024314:	2b00      	cmp	r3, #0
 8024316:	d0f5      	beq.n	8024304 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8024318:	4a0e      	ldr	r2, [pc, #56]	@ (8024354 <UTIL_SEQ_WaitEvt+0x88>)
 802431a:	69bb      	ldr	r3, [r7, #24]
 802431c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802431e:	f3ef 8310 	mrs	r3, PRIMASK
 8024322:	60bb      	str	r3, [r7, #8]
  return(result);
 8024324:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8024326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8024328:	b672      	cpsid	i
}
 802432a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 802432c:	687b      	ldr	r3, [r7, #4]
 802432e:	43da      	mvns	r2, r3
 8024330:	4b0a      	ldr	r3, [pc, #40]	@ (802435c <UTIL_SEQ_WaitEvt+0x90>)
 8024332:	681b      	ldr	r3, [r3, #0]
 8024334:	4013      	ands	r3, r2
 8024336:	4a09      	ldr	r2, [pc, #36]	@ (802435c <UTIL_SEQ_WaitEvt+0x90>)
 8024338:	6013      	str	r3, [r2, #0]
 802433a:	693b      	ldr	r3, [r7, #16]
 802433c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802433e:	68fb      	ldr	r3, [r7, #12]
 8024340:	f383 8810 	msr	PRIMASK, r3
}
 8024344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8024346:	4a04      	ldr	r2, [pc, #16]	@ (8024358 <UTIL_SEQ_WaitEvt+0x8c>)
 8024348:	697b      	ldr	r3, [r7, #20]
 802434a:	6013      	str	r3, [r2, #0]
  return;
 802434c:	bf00      	nop
}
 802434e:	3720      	adds	r7, #32
 8024350:	46bd      	mov	sp, r7
 8024352:	bd80      	pop	{r7, pc}
 8024354:	200021dc 	.word	0x200021dc
 8024358:	200021d8 	.word	0x200021d8
 802435c:	200021d4 	.word	0x200021d4

08024360 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8024360:	b580      	push	{r7, lr}
 8024362:	b082      	sub	sp, #8
 8024364:	af00      	add	r7, sp, #0
 8024366:	6078      	str	r0, [r7, #4]
 8024368:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	43db      	mvns	r3, r3
 802436e:	4618      	mov	r0, r3
 8024370:	f7ff fe44 	bl	8023ffc <UTIL_SEQ_Run>
  return;
 8024374:	bf00      	nop
}
 8024376:	3708      	adds	r7, #8
 8024378:	46bd      	mov	sp, r7
 802437a:	bd80      	pop	{r7, pc}

0802437c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 802437c:	b480      	push	{r7}
 802437e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8024380:	bf00      	nop
}
 8024382:	46bd      	mov	sp, r7
 8024384:	bc80      	pop	{r7}
 8024386:	4770      	bx	lr

08024388 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8024388:	b480      	push	{r7}
 802438a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 802438c:	bf00      	nop
}
 802438e:	46bd      	mov	sp, r7
 8024390:	bc80      	pop	{r7}
 8024392:	4770      	bx	lr

08024394 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8024394:	b480      	push	{r7}
 8024396:	b085      	sub	sp, #20
 8024398:	af00      	add	r7, sp, #0
 802439a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 802439c:	2300      	movs	r3, #0
 802439e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80243a4:	68bb      	ldr	r3, [r7, #8]
 80243a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80243aa:	d204      	bcs.n	80243b6 <SEQ_BitPosition+0x22>
 80243ac:	2310      	movs	r3, #16
 80243ae:	73fb      	strb	r3, [r7, #15]
 80243b0:	68bb      	ldr	r3, [r7, #8]
 80243b2:	041b      	lsls	r3, r3, #16
 80243b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80243b6:	68bb      	ldr	r3, [r7, #8]
 80243b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80243bc:	d205      	bcs.n	80243ca <SEQ_BitPosition+0x36>
 80243be:	7bfb      	ldrb	r3, [r7, #15]
 80243c0:	3308      	adds	r3, #8
 80243c2:	73fb      	strb	r3, [r7, #15]
 80243c4:	68bb      	ldr	r3, [r7, #8]
 80243c6:	021b      	lsls	r3, r3, #8
 80243c8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80243ca:	68bb      	ldr	r3, [r7, #8]
 80243cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80243d0:	d205      	bcs.n	80243de <SEQ_BitPosition+0x4a>
 80243d2:	7bfb      	ldrb	r3, [r7, #15]
 80243d4:	3304      	adds	r3, #4
 80243d6:	73fb      	strb	r3, [r7, #15]
 80243d8:	68bb      	ldr	r3, [r7, #8]
 80243da:	011b      	lsls	r3, r3, #4
 80243dc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80243de:	68bb      	ldr	r3, [r7, #8]
 80243e0:	0f1b      	lsrs	r3, r3, #28
 80243e2:	4a07      	ldr	r2, [pc, #28]	@ (8024400 <SEQ_BitPosition+0x6c>)
 80243e4:	5cd2      	ldrb	r2, [r2, r3]
 80243e6:	7bfb      	ldrb	r3, [r7, #15]
 80243e8:	4413      	add	r3, r2
 80243ea:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80243ec:	7bfb      	ldrb	r3, [r7, #15]
 80243ee:	f1c3 031f 	rsb	r3, r3, #31
 80243f2:	b2db      	uxtb	r3, r3
}
 80243f4:	4618      	mov	r0, r3
 80243f6:	3714      	adds	r7, #20
 80243f8:	46bd      	mov	sp, r7
 80243fa:	bc80      	pop	{r7}
 80243fc:	4770      	bx	lr
 80243fe:	bf00      	nop
 8024400:	08029958 	.word	0x08029958

08024404 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8024404:	b580      	push	{r7, lr}
 8024406:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8024408:	4b04      	ldr	r3, [pc, #16]	@ (802441c <UTIL_TIMER_Init+0x18>)
 802440a:	2200      	movs	r2, #0
 802440c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 802440e:	4b04      	ldr	r3, [pc, #16]	@ (8024420 <UTIL_TIMER_Init+0x1c>)
 8024410:	681b      	ldr	r3, [r3, #0]
 8024412:	4798      	blx	r3
 8024414:	4603      	mov	r3, r0
}
 8024416:	4618      	mov	r0, r3
 8024418:	bd80      	pop	{r7, pc}
 802441a:	bf00      	nop
 802441c:	200021f8 	.word	0x200021f8
 8024420:	08028e40 	.word	0x08028e40

08024424 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8024424:	b580      	push	{r7, lr}
 8024426:	b084      	sub	sp, #16
 8024428:	af00      	add	r7, sp, #0
 802442a:	60f8      	str	r0, [r7, #12]
 802442c:	60b9      	str	r1, [r7, #8]
 802442e:	603b      	str	r3, [r7, #0]
 8024430:	4613      	mov	r3, r2
 8024432:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	2b00      	cmp	r3, #0
 8024438:	d023      	beq.n	8024482 <UTIL_TIMER_Create+0x5e>
 802443a:	683b      	ldr	r3, [r7, #0]
 802443c:	2b00      	cmp	r3, #0
 802443e:	d020      	beq.n	8024482 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8024440:	68fb      	ldr	r3, [r7, #12]
 8024442:	2200      	movs	r2, #0
 8024444:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8024446:	4b11      	ldr	r3, [pc, #68]	@ (802448c <UTIL_TIMER_Create+0x68>)
 8024448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802444a:	68b8      	ldr	r0, [r7, #8]
 802444c:	4798      	blx	r3
 802444e:	4602      	mov	r2, r0
 8024450:	68fb      	ldr	r3, [r7, #12]
 8024452:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8024454:	68fb      	ldr	r3, [r7, #12]
 8024456:	2200      	movs	r2, #0
 8024458:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 802445a:	68fb      	ldr	r3, [r7, #12]
 802445c:	2200      	movs	r2, #0
 802445e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	2200      	movs	r2, #0
 8024464:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8024466:	68fb      	ldr	r3, [r7, #12]
 8024468:	683a      	ldr	r2, [r7, #0]
 802446a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 802446c:	68fb      	ldr	r3, [r7, #12]
 802446e:	69ba      	ldr	r2, [r7, #24]
 8024470:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8024472:	68fb      	ldr	r3, [r7, #12]
 8024474:	79fa      	ldrb	r2, [r7, #7]
 8024476:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8024478:	68fb      	ldr	r3, [r7, #12]
 802447a:	2200      	movs	r2, #0
 802447c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 802447e:	2300      	movs	r3, #0
 8024480:	e000      	b.n	8024484 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8024482:	2301      	movs	r3, #1
  }
}
 8024484:	4618      	mov	r0, r3
 8024486:	3710      	adds	r7, #16
 8024488:	46bd      	mov	sp, r7
 802448a:	bd80      	pop	{r7, pc}
 802448c:	08028e40 	.word	0x08028e40

08024490 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8024490:	b580      	push	{r7, lr}
 8024492:	b08a      	sub	sp, #40	@ 0x28
 8024494:	af00      	add	r7, sp, #0
 8024496:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8024498:	2300      	movs	r3, #0
 802449a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	d056      	beq.n	8024552 <UTIL_TIMER_Start+0xc2>
 80244a4:	6878      	ldr	r0, [r7, #4]
 80244a6:	f000 f9a9 	bl	80247fc <TimerExists>
 80244aa:	4603      	mov	r3, r0
 80244ac:	f083 0301 	eor.w	r3, r3, #1
 80244b0:	b2db      	uxtb	r3, r3
 80244b2:	2b00      	cmp	r3, #0
 80244b4:	d04d      	beq.n	8024552 <UTIL_TIMER_Start+0xc2>
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	7a5b      	ldrb	r3, [r3, #9]
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d149      	bne.n	8024552 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80244be:	f3ef 8310 	mrs	r3, PRIMASK
 80244c2:	613b      	str	r3, [r7, #16]
  return(result);
 80244c4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80244c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80244c8:	b672      	cpsid	i
}
 80244ca:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	685b      	ldr	r3, [r3, #4]
 80244d0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80244d2:	4b24      	ldr	r3, [pc, #144]	@ (8024564 <UTIL_TIMER_Start+0xd4>)
 80244d4:	6a1b      	ldr	r3, [r3, #32]
 80244d6:	4798      	blx	r3
 80244d8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80244da:	6a3a      	ldr	r2, [r7, #32]
 80244dc:	69bb      	ldr	r3, [r7, #24]
 80244de:	429a      	cmp	r2, r3
 80244e0:	d201      	bcs.n	80244e6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80244e2:	69bb      	ldr	r3, [r7, #24]
 80244e4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	6a3a      	ldr	r2, [r7, #32]
 80244ea:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	2200      	movs	r2, #0
 80244f0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80244f2:	687b      	ldr	r3, [r7, #4]
 80244f4:	2201      	movs	r2, #1
 80244f6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80244f8:	687b      	ldr	r3, [r7, #4]
 80244fa:	2200      	movs	r2, #0
 80244fc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80244fe:	4b1a      	ldr	r3, [pc, #104]	@ (8024568 <UTIL_TIMER_Start+0xd8>)
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	2b00      	cmp	r3, #0
 8024504:	d106      	bne.n	8024514 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8024506:	4b17      	ldr	r3, [pc, #92]	@ (8024564 <UTIL_TIMER_Start+0xd4>)
 8024508:	691b      	ldr	r3, [r3, #16]
 802450a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 802450c:	6878      	ldr	r0, [r7, #4]
 802450e:	f000 f9eb 	bl	80248e8 <TimerInsertNewHeadTimer>
 8024512:	e017      	b.n	8024544 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8024514:	4b13      	ldr	r3, [pc, #76]	@ (8024564 <UTIL_TIMER_Start+0xd4>)
 8024516:	699b      	ldr	r3, [r3, #24]
 8024518:	4798      	blx	r3
 802451a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 802451c:	687b      	ldr	r3, [r7, #4]
 802451e:	681a      	ldr	r2, [r3, #0]
 8024520:	697b      	ldr	r3, [r7, #20]
 8024522:	441a      	add	r2, r3
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	681a      	ldr	r2, [r3, #0]
 802452c:	4b0e      	ldr	r3, [pc, #56]	@ (8024568 <UTIL_TIMER_Start+0xd8>)
 802452e:	681b      	ldr	r3, [r3, #0]
 8024530:	681b      	ldr	r3, [r3, #0]
 8024532:	429a      	cmp	r2, r3
 8024534:	d203      	bcs.n	802453e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8024536:	6878      	ldr	r0, [r7, #4]
 8024538:	f000 f9d6 	bl	80248e8 <TimerInsertNewHeadTimer>
 802453c:	e002      	b.n	8024544 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 802453e:	6878      	ldr	r0, [r7, #4]
 8024540:	f000 f9a2 	bl	8024888 <TimerInsertTimer>
 8024544:	69fb      	ldr	r3, [r7, #28]
 8024546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024548:	68fb      	ldr	r3, [r7, #12]
 802454a:	f383 8810 	msr	PRIMASK, r3
}
 802454e:	bf00      	nop
  {
 8024550:	e002      	b.n	8024558 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8024552:	2301      	movs	r3, #1
 8024554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8024558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 802455c:	4618      	mov	r0, r3
 802455e:	3728      	adds	r7, #40	@ 0x28
 8024560:	46bd      	mov	sp, r7
 8024562:	bd80      	pop	{r7, pc}
 8024564:	08028e40 	.word	0x08028e40
 8024568:	200021f8 	.word	0x200021f8

0802456c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 802456c:	b580      	push	{r7, lr}
 802456e:	b088      	sub	sp, #32
 8024570:	af00      	add	r7, sp, #0
 8024572:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8024574:	2300      	movs	r3, #0
 8024576:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	2b00      	cmp	r3, #0
 802457c:	d05b      	beq.n	8024636 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802457e:	f3ef 8310 	mrs	r3, PRIMASK
 8024582:	60fb      	str	r3, [r7, #12]
  return(result);
 8024584:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8024586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8024588:	b672      	cpsid	i
}
 802458a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 802458c:	4b2d      	ldr	r3, [pc, #180]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 802458e:	681b      	ldr	r3, [r3, #0]
 8024590:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8024592:	4b2c      	ldr	r3, [pc, #176]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 8024594:	681b      	ldr	r3, [r3, #0]
 8024596:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	2201      	movs	r2, #1
 802459c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 802459e:	4b29      	ldr	r3, [pc, #164]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	d041      	beq.n	802462a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	2200      	movs	r2, #0
 80245aa:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80245ac:	4b25      	ldr	r3, [pc, #148]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245ae:	681b      	ldr	r3, [r3, #0]
 80245b0:	687a      	ldr	r2, [r7, #4]
 80245b2:	429a      	cmp	r2, r3
 80245b4:	d134      	bne.n	8024620 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80245b6:	4b23      	ldr	r3, [pc, #140]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245b8:	681b      	ldr	r3, [r3, #0]
 80245ba:	2200      	movs	r2, #0
 80245bc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80245be:	4b21      	ldr	r3, [pc, #132]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	695b      	ldr	r3, [r3, #20]
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d00a      	beq.n	80245de <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80245c8:	4b1e      	ldr	r3, [pc, #120]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245ca:	681b      	ldr	r3, [r3, #0]
 80245cc:	695b      	ldr	r3, [r3, #20]
 80245ce:	4a1d      	ldr	r2, [pc, #116]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245d0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80245d2:	4b1c      	ldr	r3, [pc, #112]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	4618      	mov	r0, r3
 80245d8:	f000 f92c 	bl	8024834 <TimerSetTimeout>
 80245dc:	e023      	b.n	8024626 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80245de:	4b1a      	ldr	r3, [pc, #104]	@ (8024648 <UTIL_TIMER_Stop+0xdc>)
 80245e0:	68db      	ldr	r3, [r3, #12]
 80245e2:	4798      	blx	r3
            TimerListHead = NULL;
 80245e4:	4b17      	ldr	r3, [pc, #92]	@ (8024644 <UTIL_TIMER_Stop+0xd8>)
 80245e6:	2200      	movs	r2, #0
 80245e8:	601a      	str	r2, [r3, #0]
 80245ea:	e01c      	b.n	8024626 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80245ec:	697a      	ldr	r2, [r7, #20]
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	429a      	cmp	r2, r3
 80245f2:	d110      	bne.n	8024616 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80245f4:	697b      	ldr	r3, [r7, #20]
 80245f6:	695b      	ldr	r3, [r3, #20]
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d006      	beq.n	802460a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80245fc:	697b      	ldr	r3, [r7, #20]
 80245fe:	695b      	ldr	r3, [r3, #20]
 8024600:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8024602:	69bb      	ldr	r3, [r7, #24]
 8024604:	697a      	ldr	r2, [r7, #20]
 8024606:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8024608:	e00d      	b.n	8024626 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 802460a:	2300      	movs	r3, #0
 802460c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 802460e:	69bb      	ldr	r3, [r7, #24]
 8024610:	697a      	ldr	r2, [r7, #20]
 8024612:	615a      	str	r2, [r3, #20]
            break;
 8024614:	e007      	b.n	8024626 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8024616:	697b      	ldr	r3, [r7, #20]
 8024618:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 802461a:	697b      	ldr	r3, [r7, #20]
 802461c:	695b      	ldr	r3, [r3, #20]
 802461e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8024620:	697b      	ldr	r3, [r7, #20]
 8024622:	2b00      	cmp	r3, #0
 8024624:	d1e2      	bne.n	80245ec <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8024626:	2300      	movs	r3, #0
 8024628:	77fb      	strb	r3, [r7, #31]
 802462a:	693b      	ldr	r3, [r7, #16]
 802462c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802462e:	68bb      	ldr	r3, [r7, #8]
 8024630:	f383 8810 	msr	PRIMASK, r3
}
 8024634:	e001      	b.n	802463a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8024636:	2301      	movs	r3, #1
 8024638:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 802463a:	7ffb      	ldrb	r3, [r7, #31]
}
 802463c:	4618      	mov	r0, r3
 802463e:	3720      	adds	r7, #32
 8024640:	46bd      	mov	sp, r7
 8024642:	bd80      	pop	{r7, pc}
 8024644:	200021f8 	.word	0x200021f8
 8024648:	08028e40 	.word	0x08028e40

0802464c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 802464c:	b580      	push	{r7, lr}
 802464e:	b084      	sub	sp, #16
 8024650:	af00      	add	r7, sp, #0
 8024652:	6078      	str	r0, [r7, #4]
 8024654:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8024656:	2300      	movs	r3, #0
 8024658:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 802465a:	687b      	ldr	r3, [r7, #4]
 802465c:	2b00      	cmp	r3, #0
 802465e:	d102      	bne.n	8024666 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8024660:	2301      	movs	r3, #1
 8024662:	73fb      	strb	r3, [r7, #15]
 8024664:	e014      	b.n	8024690 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8024666:	4b0d      	ldr	r3, [pc, #52]	@ (802469c <UTIL_TIMER_SetPeriod+0x50>)
 8024668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802466a:	6838      	ldr	r0, [r7, #0]
 802466c:	4798      	blx	r3
 802466e:	4602      	mov	r2, r0
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8024674:	6878      	ldr	r0, [r7, #4]
 8024676:	f000 f8c1 	bl	80247fc <TimerExists>
 802467a:	4603      	mov	r3, r0
 802467c:	2b00      	cmp	r3, #0
 802467e:	d007      	beq.n	8024690 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8024680:	6878      	ldr	r0, [r7, #4]
 8024682:	f7ff ff73 	bl	802456c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8024686:	6878      	ldr	r0, [r7, #4]
 8024688:	f7ff ff02 	bl	8024490 <UTIL_TIMER_Start>
 802468c:	4603      	mov	r3, r0
 802468e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8024690:	7bfb      	ldrb	r3, [r7, #15]
}
 8024692:	4618      	mov	r0, r3
 8024694:	3710      	adds	r7, #16
 8024696:	46bd      	mov	sp, r7
 8024698:	bd80      	pop	{r7, pc}
 802469a:	bf00      	nop
 802469c:	08028e40 	.word	0x08028e40

080246a0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 80246a0:	b590      	push	{r4, r7, lr}
 80246a2:	b089      	sub	sp, #36	@ 0x24
 80246a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80246a6:	f3ef 8310 	mrs	r3, PRIMASK
 80246aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80246ac:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80246ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80246b0:	b672      	cpsid	i
}
 80246b2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 80246b4:	4b38      	ldr	r3, [pc, #224]	@ (8024798 <UTIL_TIMER_IRQ_Handler+0xf8>)
 80246b6:	695b      	ldr	r3, [r3, #20]
 80246b8:	4798      	blx	r3
 80246ba:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80246bc:	4b36      	ldr	r3, [pc, #216]	@ (8024798 <UTIL_TIMER_IRQ_Handler+0xf8>)
 80246be:	691b      	ldr	r3, [r3, #16]
 80246c0:	4798      	blx	r3
 80246c2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 80246c4:	693a      	ldr	r2, [r7, #16]
 80246c6:	697b      	ldr	r3, [r7, #20]
 80246c8:	1ad3      	subs	r3, r2, r3
 80246ca:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80246cc:	4b33      	ldr	r3, [pc, #204]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 80246ce:	681b      	ldr	r3, [r3, #0]
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	d037      	beq.n	8024744 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 80246d4:	4b31      	ldr	r3, [pc, #196]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 80246d6:	681b      	ldr	r3, [r3, #0]
 80246d8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80246da:	69fb      	ldr	r3, [r7, #28]
 80246dc:	681b      	ldr	r3, [r3, #0]
 80246de:	68fa      	ldr	r2, [r7, #12]
 80246e0:	429a      	cmp	r2, r3
 80246e2:	d206      	bcs.n	80246f2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80246e4:	69fb      	ldr	r3, [r7, #28]
 80246e6:	681a      	ldr	r2, [r3, #0]
 80246e8:	68fb      	ldr	r3, [r7, #12]
 80246ea:	1ad2      	subs	r2, r2, r3
 80246ec:	69fb      	ldr	r3, [r7, #28]
 80246ee:	601a      	str	r2, [r3, #0]
 80246f0:	e002      	b.n	80246f8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80246f2:	69fb      	ldr	r3, [r7, #28]
 80246f4:	2200      	movs	r2, #0
 80246f6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80246f8:	69fb      	ldr	r3, [r7, #28]
 80246fa:	695b      	ldr	r3, [r3, #20]
 80246fc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80246fe:	69fb      	ldr	r3, [r7, #28]
 8024700:	2b00      	cmp	r3, #0
 8024702:	d1ea      	bne.n	80246da <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8024704:	e01e      	b.n	8024744 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8024706:	4b25      	ldr	r3, [pc, #148]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8024708:	681b      	ldr	r3, [r3, #0]
 802470a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 802470c:	4b23      	ldr	r3, [pc, #140]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 802470e:	681b      	ldr	r3, [r3, #0]
 8024710:	695b      	ldr	r3, [r3, #20]
 8024712:	4a22      	ldr	r2, [pc, #136]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8024714:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8024716:	69fb      	ldr	r3, [r7, #28]
 8024718:	2200      	movs	r2, #0
 802471a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 802471c:	69fb      	ldr	r3, [r7, #28]
 802471e:	2200      	movs	r2, #0
 8024720:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8024722:	69fb      	ldr	r3, [r7, #28]
 8024724:	68db      	ldr	r3, [r3, #12]
 8024726:	69fa      	ldr	r2, [r7, #28]
 8024728:	6912      	ldr	r2, [r2, #16]
 802472a:	4610      	mov	r0, r2
 802472c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 802472e:	69fb      	ldr	r3, [r7, #28]
 8024730:	7adb      	ldrb	r3, [r3, #11]
 8024732:	2b01      	cmp	r3, #1
 8024734:	d106      	bne.n	8024744 <UTIL_TIMER_IRQ_Handler+0xa4>
 8024736:	69fb      	ldr	r3, [r7, #28]
 8024738:	7a9b      	ldrb	r3, [r3, #10]
 802473a:	2b00      	cmp	r3, #0
 802473c:	d102      	bne.n	8024744 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 802473e:	69f8      	ldr	r0, [r7, #28]
 8024740:	f7ff fea6 	bl	8024490 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8024744:	4b15      	ldr	r3, [pc, #84]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	2b00      	cmp	r3, #0
 802474a:	d00d      	beq.n	8024768 <UTIL_TIMER_IRQ_Handler+0xc8>
 802474c:	4b13      	ldr	r3, [pc, #76]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	681b      	ldr	r3, [r3, #0]
 8024752:	2b00      	cmp	r3, #0
 8024754:	d0d7      	beq.n	8024706 <UTIL_TIMER_IRQ_Handler+0x66>
 8024756:	4b11      	ldr	r3, [pc, #68]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8024758:	681b      	ldr	r3, [r3, #0]
 802475a:	681c      	ldr	r4, [r3, #0]
 802475c:	4b0e      	ldr	r3, [pc, #56]	@ (8024798 <UTIL_TIMER_IRQ_Handler+0xf8>)
 802475e:	699b      	ldr	r3, [r3, #24]
 8024760:	4798      	blx	r3
 8024762:	4603      	mov	r3, r0
 8024764:	429c      	cmp	r4, r3
 8024766:	d3ce      	bcc.n	8024706 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8024768:	4b0c      	ldr	r3, [pc, #48]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 802476a:	681b      	ldr	r3, [r3, #0]
 802476c:	2b00      	cmp	r3, #0
 802476e:	d009      	beq.n	8024784 <UTIL_TIMER_IRQ_Handler+0xe4>
 8024770:	4b0a      	ldr	r3, [pc, #40]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8024772:	681b      	ldr	r3, [r3, #0]
 8024774:	7a1b      	ldrb	r3, [r3, #8]
 8024776:	2b00      	cmp	r3, #0
 8024778:	d104      	bne.n	8024784 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 802477a:	4b08      	ldr	r3, [pc, #32]	@ (802479c <UTIL_TIMER_IRQ_Handler+0xfc>)
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	4618      	mov	r0, r3
 8024780:	f000 f858 	bl	8024834 <TimerSetTimeout>
 8024784:	69bb      	ldr	r3, [r7, #24]
 8024786:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	f383 8810 	msr	PRIMASK, r3
}
 802478e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8024790:	bf00      	nop
 8024792:	3724      	adds	r7, #36	@ 0x24
 8024794:	46bd      	mov	sp, r7
 8024796:	bd90      	pop	{r4, r7, pc}
 8024798:	08028e40 	.word	0x08028e40
 802479c:	200021f8 	.word	0x200021f8

080247a0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	b082      	sub	sp, #8
 80247a4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80247a6:	4b06      	ldr	r3, [pc, #24]	@ (80247c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 80247a8:	69db      	ldr	r3, [r3, #28]
 80247aa:	4798      	blx	r3
 80247ac:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 80247ae:	4b04      	ldr	r3, [pc, #16]	@ (80247c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 80247b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80247b2:	6878      	ldr	r0, [r7, #4]
 80247b4:	4798      	blx	r3
 80247b6:	4603      	mov	r3, r0
}
 80247b8:	4618      	mov	r0, r3
 80247ba:	3708      	adds	r7, #8
 80247bc:	46bd      	mov	sp, r7
 80247be:	bd80      	pop	{r7, pc}
 80247c0:	08028e40 	.word	0x08028e40

080247c4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b084      	sub	sp, #16
 80247c8:	af00      	add	r7, sp, #0
 80247ca:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80247cc:	4b0a      	ldr	r3, [pc, #40]	@ (80247f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80247ce:	69db      	ldr	r3, [r3, #28]
 80247d0:	4798      	blx	r3
 80247d2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80247d4:	4b08      	ldr	r3, [pc, #32]	@ (80247f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80247d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80247d8:	6878      	ldr	r0, [r7, #4]
 80247da:	4798      	blx	r3
 80247dc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80247de:	4b06      	ldr	r3, [pc, #24]	@ (80247f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80247e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80247e2:	68f9      	ldr	r1, [r7, #12]
 80247e4:	68ba      	ldr	r2, [r7, #8]
 80247e6:	1a8a      	subs	r2, r1, r2
 80247e8:	4610      	mov	r0, r2
 80247ea:	4798      	blx	r3
 80247ec:	4603      	mov	r3, r0
}
 80247ee:	4618      	mov	r0, r3
 80247f0:	3710      	adds	r7, #16
 80247f2:	46bd      	mov	sp, r7
 80247f4:	bd80      	pop	{r7, pc}
 80247f6:	bf00      	nop
 80247f8:	08028e40 	.word	0x08028e40

080247fc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80247fc:	b480      	push	{r7}
 80247fe:	b085      	sub	sp, #20
 8024800:	af00      	add	r7, sp, #0
 8024802:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8024804:	4b0a      	ldr	r3, [pc, #40]	@ (8024830 <TimerExists+0x34>)
 8024806:	681b      	ldr	r3, [r3, #0]
 8024808:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 802480a:	e008      	b.n	802481e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 802480c:	68fa      	ldr	r2, [r7, #12]
 802480e:	687b      	ldr	r3, [r7, #4]
 8024810:	429a      	cmp	r2, r3
 8024812:	d101      	bne.n	8024818 <TimerExists+0x1c>
    {
      return true;
 8024814:	2301      	movs	r3, #1
 8024816:	e006      	b.n	8024826 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8024818:	68fb      	ldr	r3, [r7, #12]
 802481a:	695b      	ldr	r3, [r3, #20]
 802481c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	2b00      	cmp	r3, #0
 8024822:	d1f3      	bne.n	802480c <TimerExists+0x10>
  }
  return false;
 8024824:	2300      	movs	r3, #0
}
 8024826:	4618      	mov	r0, r3
 8024828:	3714      	adds	r7, #20
 802482a:	46bd      	mov	sp, r7
 802482c:	bc80      	pop	{r7}
 802482e:	4770      	bx	lr
 8024830:	200021f8 	.word	0x200021f8

08024834 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8024834:	b590      	push	{r4, r7, lr}
 8024836:	b085      	sub	sp, #20
 8024838:	af00      	add	r7, sp, #0
 802483a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 802483c:	4b11      	ldr	r3, [pc, #68]	@ (8024884 <TimerSetTimeout+0x50>)
 802483e:	6a1b      	ldr	r3, [r3, #32]
 8024840:	4798      	blx	r3
 8024842:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8024844:	687b      	ldr	r3, [r7, #4]
 8024846:	2201      	movs	r2, #1
 8024848:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	681c      	ldr	r4, [r3, #0]
 802484e:	4b0d      	ldr	r3, [pc, #52]	@ (8024884 <TimerSetTimeout+0x50>)
 8024850:	699b      	ldr	r3, [r3, #24]
 8024852:	4798      	blx	r3
 8024854:	4602      	mov	r2, r0
 8024856:	68fb      	ldr	r3, [r7, #12]
 8024858:	4413      	add	r3, r2
 802485a:	429c      	cmp	r4, r3
 802485c:	d207      	bcs.n	802486e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 802485e:	4b09      	ldr	r3, [pc, #36]	@ (8024884 <TimerSetTimeout+0x50>)
 8024860:	699b      	ldr	r3, [r3, #24]
 8024862:	4798      	blx	r3
 8024864:	4602      	mov	r2, r0
 8024866:	68fb      	ldr	r3, [r7, #12]
 8024868:	441a      	add	r2, r3
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 802486e:	4b05      	ldr	r3, [pc, #20]	@ (8024884 <TimerSetTimeout+0x50>)
 8024870:	689b      	ldr	r3, [r3, #8]
 8024872:	687a      	ldr	r2, [r7, #4]
 8024874:	6812      	ldr	r2, [r2, #0]
 8024876:	4610      	mov	r0, r2
 8024878:	4798      	blx	r3
}
 802487a:	bf00      	nop
 802487c:	3714      	adds	r7, #20
 802487e:	46bd      	mov	sp, r7
 8024880:	bd90      	pop	{r4, r7, pc}
 8024882:	bf00      	nop
 8024884:	08028e40 	.word	0x08028e40

08024888 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8024888:	b480      	push	{r7}
 802488a:	b085      	sub	sp, #20
 802488c:	af00      	add	r7, sp, #0
 802488e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8024890:	4b14      	ldr	r3, [pc, #80]	@ (80248e4 <TimerInsertTimer+0x5c>)
 8024892:	681b      	ldr	r3, [r3, #0]
 8024894:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8024896:	4b13      	ldr	r3, [pc, #76]	@ (80248e4 <TimerInsertTimer+0x5c>)
 8024898:	681b      	ldr	r3, [r3, #0]
 802489a:	695b      	ldr	r3, [r3, #20]
 802489c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 802489e:	e012      	b.n	80248c6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80248a0:	687b      	ldr	r3, [r7, #4]
 80248a2:	681a      	ldr	r2, [r3, #0]
 80248a4:	68bb      	ldr	r3, [r7, #8]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	429a      	cmp	r2, r3
 80248aa:	d905      	bls.n	80248b8 <TimerInsertTimer+0x30>
    {
        cur = next;
 80248ac:	68bb      	ldr	r3, [r7, #8]
 80248ae:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80248b0:	68bb      	ldr	r3, [r7, #8]
 80248b2:	695b      	ldr	r3, [r3, #20]
 80248b4:	60bb      	str	r3, [r7, #8]
 80248b6:	e006      	b.n	80248c6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 80248b8:	68fb      	ldr	r3, [r7, #12]
 80248ba:	687a      	ldr	r2, [r7, #4]
 80248bc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	68ba      	ldr	r2, [r7, #8]
 80248c2:	615a      	str	r2, [r3, #20]
        return;
 80248c4:	e009      	b.n	80248da <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	695b      	ldr	r3, [r3, #20]
 80248ca:	2b00      	cmp	r3, #0
 80248cc:	d1e8      	bne.n	80248a0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 80248ce:	68fb      	ldr	r3, [r7, #12]
 80248d0:	687a      	ldr	r2, [r7, #4]
 80248d2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	2200      	movs	r2, #0
 80248d8:	615a      	str	r2, [r3, #20]
}
 80248da:	3714      	adds	r7, #20
 80248dc:	46bd      	mov	sp, r7
 80248de:	bc80      	pop	{r7}
 80248e0:	4770      	bx	lr
 80248e2:	bf00      	nop
 80248e4:	200021f8 	.word	0x200021f8

080248e8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80248e8:	b580      	push	{r7, lr}
 80248ea:	b084      	sub	sp, #16
 80248ec:	af00      	add	r7, sp, #0
 80248ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80248f0:	4b0b      	ldr	r3, [pc, #44]	@ (8024920 <TimerInsertNewHeadTimer+0x38>)
 80248f2:	681b      	ldr	r3, [r3, #0]
 80248f4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80248f6:	68fb      	ldr	r3, [r7, #12]
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d002      	beq.n	8024902 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	2200      	movs	r2, #0
 8024900:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	68fa      	ldr	r2, [r7, #12]
 8024906:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8024908:	4a05      	ldr	r2, [pc, #20]	@ (8024920 <TimerInsertNewHeadTimer+0x38>)
 802490a:	687b      	ldr	r3, [r7, #4]
 802490c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 802490e:	4b04      	ldr	r3, [pc, #16]	@ (8024920 <TimerInsertNewHeadTimer+0x38>)
 8024910:	681b      	ldr	r3, [r3, #0]
 8024912:	4618      	mov	r0, r3
 8024914:	f7ff ff8e 	bl	8024834 <TimerSetTimeout>
}
 8024918:	bf00      	nop
 802491a:	3710      	adds	r7, #16
 802491c:	46bd      	mov	sp, r7
 802491e:	bd80      	pop	{r7, pc}
 8024920:	200021f8 	.word	0x200021f8

08024924 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8024924:	b580      	push	{r7, lr}
 8024926:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8024928:	2218      	movs	r2, #24
 802492a:	2100      	movs	r1, #0
 802492c:	4807      	ldr	r0, [pc, #28]	@ (802494c <UTIL_ADV_TRACE_Init+0x28>)
 802492e:	f7fe f9e8 	bl	8022d02 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8024932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024936:	2100      	movs	r1, #0
 8024938:	4805      	ldr	r0, [pc, #20]	@ (8024950 <UTIL_ADV_TRACE_Init+0x2c>)
 802493a:	f7fe f9e2 	bl	8022d02 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 802493e:	4b05      	ldr	r3, [pc, #20]	@ (8024954 <UTIL_ADV_TRACE_Init+0x30>)
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	4805      	ldr	r0, [pc, #20]	@ (8024958 <UTIL_ADV_TRACE_Init+0x34>)
 8024944:	4798      	blx	r3
 8024946:	4603      	mov	r3, r0
}
 8024948:	4618      	mov	r0, r3
 802494a:	bd80      	pop	{r7, pc}
 802494c:	200021fc 	.word	0x200021fc
 8024950:	20002214 	.word	0x20002214
 8024954:	08028e80 	.word	0x08028e80
 8024958:	08024bf9 	.word	0x08024bf9

0802495c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 802495c:	b480      	push	{r7}
 802495e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8024960:	4b06      	ldr	r3, [pc, #24]	@ (802497c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8024962:	8a5a      	ldrh	r2, [r3, #18]
 8024964:	4b05      	ldr	r3, [pc, #20]	@ (802497c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8024966:	8a1b      	ldrh	r3, [r3, #16]
 8024968:	429a      	cmp	r2, r3
 802496a:	d101      	bne.n	8024970 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 802496c:	2301      	movs	r3, #1
 802496e:	e000      	b.n	8024972 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 8024970:	2300      	movs	r3, #0
}
 8024972:	4618      	mov	r0, r3
 8024974:	46bd      	mov	sp, r7
 8024976:	bc80      	pop	{r7}
 8024978:	4770      	bx	lr
 802497a:	bf00      	nop
 802497c:	200021fc 	.word	0x200021fc

08024980 <UTIL_ADV_TRACE_StartRxProcess>:

UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_StartRxProcess(void (*UserCallback)(uint8_t *PData, uint16_t Size, uint8_t Error))
{
 8024980:	b580      	push	{r7, lr}
 8024982:	b082      	sub	sp, #8
 8024984:	af00      	add	r7, sp, #0
 8024986:	6078      	str	r0, [r7, #4]
  /* start the RX process */
  return UTIL_TraceDriver.StartRx(UserCallback);
 8024988:	4b04      	ldr	r3, [pc, #16]	@ (802499c <UTIL_ADV_TRACE_StartRxProcess+0x1c>)
 802498a:	689b      	ldr	r3, [r3, #8]
 802498c:	6878      	ldr	r0, [r7, #4]
 802498e:	4798      	blx	r3
 8024990:	4603      	mov	r3, r0
}
 8024992:	4618      	mov	r0, r3
 8024994:	3708      	adds	r7, #8
 8024996:	46bd      	mov	sp, r7
 8024998:	bd80      	pop	{r7, pc}
 802499a:	bf00      	nop
 802499c:	08028e80 	.word	0x08028e80

080249a0 <UTIL_ADV_TRACE_COND_FSend>:

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 80249a0:	b408      	push	{r3}
 80249a2:	b580      	push	{r7, lr}
 80249a4:	b08d      	sub	sp, #52	@ 0x34
 80249a6:	af00      	add	r7, sp, #0
 80249a8:	60f8      	str	r0, [r7, #12]
 80249aa:	60b9      	str	r1, [r7, #8]
 80249ac:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 80249ae:	2300      	movs	r3, #0
 80249b0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 80249b2:	2300      	movs	r3, #0
 80249b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80249b6:	4b37      	ldr	r3, [pc, #220]	@ (8024a94 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80249b8:	7a1b      	ldrb	r3, [r3, #8]
 80249ba:	461a      	mov	r2, r3
 80249bc:	68fb      	ldr	r3, [r7, #12]
 80249be:	4293      	cmp	r3, r2
 80249c0:	d902      	bls.n	80249c8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 80249c2:	f06f 0304 	mvn.w	r3, #4
 80249c6:	e05e      	b.n	8024a86 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80249c8:	4b32      	ldr	r3, [pc, #200]	@ (8024a94 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80249ca:	68da      	ldr	r2, [r3, #12]
 80249cc:	68bb      	ldr	r3, [r7, #8]
 80249ce:	4013      	ands	r3, r2
 80249d0:	68ba      	ldr	r2, [r7, #8]
 80249d2:	429a      	cmp	r2, r3
 80249d4:	d002      	beq.n	80249dc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 80249d6:	f06f 0305 	mvn.w	r3, #5
 80249da:	e054      	b.n	8024a86 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80249dc:	4b2d      	ldr	r3, [pc, #180]	@ (8024a94 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80249de:	685b      	ldr	r3, [r3, #4]
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	d00a      	beq.n	80249fa <UTIL_ADV_TRACE_COND_FSend+0x5a>
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d007      	beq.n	80249fa <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80249ea:	4b2a      	ldr	r3, [pc, #168]	@ (8024a94 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80249ec:	685b      	ldr	r3, [r3, #4]
 80249ee:	f107 0116 	add.w	r1, r7, #22
 80249f2:	f107 0218 	add.w	r2, r7, #24
 80249f6:	4610      	mov	r0, r2
 80249f8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 80249fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80249fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8024a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024a04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8024a08:	4823      	ldr	r0, [pc, #140]	@ (8024a98 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8024a0a:	f7ff f9a5 	bl	8023d58 <tiny_vsnprintf_like>
 8024a0e:	4603      	mov	r3, r0
 8024a10:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 8024a12:	f000 f9fb 	bl	8024e0c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8024a16:	8afa      	ldrh	r2, [r7, #22]
 8024a18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8024a1a:	4413      	add	r3, r2
 8024a1c:	b29b      	uxth	r3, r3
 8024a1e:	f107 0214 	add.w	r2, r7, #20
 8024a22:	4611      	mov	r1, r2
 8024a24:	4618      	mov	r0, r3
 8024a26:	f000 f973 	bl	8024d10 <TRACE_AllocateBufer>
 8024a2a:	4603      	mov	r3, r0
 8024a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024a30:	d025      	beq.n	8024a7e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8024a32:	2300      	movs	r3, #0
 8024a34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8024a36:	e00e      	b.n	8024a56 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8024a38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8024a3a:	8aba      	ldrh	r2, [r7, #20]
 8024a3c:	3330      	adds	r3, #48	@ 0x30
 8024a3e:	443b      	add	r3, r7
 8024a40:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8024a44:	4b15      	ldr	r3, [pc, #84]	@ (8024a9c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8024a46:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8024a48:	8abb      	ldrh	r3, [r7, #20]
 8024a4a:	3301      	adds	r3, #1
 8024a4c:	b29b      	uxth	r3, r3
 8024a4e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8024a50:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8024a52:	3301      	adds	r3, #1
 8024a54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8024a56:	8afb      	ldrh	r3, [r7, #22]
 8024a58:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8024a5a:	429a      	cmp	r2, r3
 8024a5c:	d3ec      	bcc.n	8024a38 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8024a5e:	8abb      	ldrh	r3, [r7, #20]
 8024a60:	461a      	mov	r2, r3
 8024a62:	4b0e      	ldr	r3, [pc, #56]	@ (8024a9c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8024a64:	18d0      	adds	r0, r2, r3
 8024a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8024a6e:	f7ff f973 	bl	8023d58 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8024a72:	f000 f9e9 	bl	8024e48 <TRACE_UnLock>

    return TRACE_Send();
 8024a76:	f000 f83b 	bl	8024af0 <TRACE_Send>
 8024a7a:	4603      	mov	r3, r0
 8024a7c:	e003      	b.n	8024a86 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8024a7e:	f000 f9e3 	bl	8024e48 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8024a82:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8024a86:	4618      	mov	r0, r3
 8024a88:	3734      	adds	r7, #52	@ 0x34
 8024a8a:	46bd      	mov	sp, r7
 8024a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8024a90:	b001      	add	sp, #4
 8024a92:	4770      	bx	lr
 8024a94:	200021fc 	.word	0x200021fc
 8024a98:	20002a14 	.word	0x20002a14
 8024a9c:	20002214 	.word	0x20002214

08024aa0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8024aa0:	b480      	push	{r7}
 8024aa2:	b083      	sub	sp, #12
 8024aa4:	af00      	add	r7, sp, #0
 8024aa6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8024aa8:	4a03      	ldr	r2, [pc, #12]	@ (8024ab8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	6053      	str	r3, [r2, #4]
}
 8024aae:	bf00      	nop
 8024ab0:	370c      	adds	r7, #12
 8024ab2:	46bd      	mov	sp, r7
 8024ab4:	bc80      	pop	{r7}
 8024ab6:	4770      	bx	lr
 8024ab8:	200021fc 	.word	0x200021fc

08024abc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8024abc:	b480      	push	{r7}
 8024abe:	b083      	sub	sp, #12
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	4603      	mov	r3, r0
 8024ac4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8024ac6:	4a04      	ldr	r2, [pc, #16]	@ (8024ad8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8024ac8:	79fb      	ldrb	r3, [r7, #7]
 8024aca:	7213      	strb	r3, [r2, #8]
}
 8024acc:	bf00      	nop
 8024ace:	370c      	adds	r7, #12
 8024ad0:	46bd      	mov	sp, r7
 8024ad2:	bc80      	pop	{r7}
 8024ad4:	4770      	bx	lr
 8024ad6:	bf00      	nop
 8024ad8:	200021fc 	.word	0x200021fc

08024adc <UTIL_ADV_TRACE_GetVerboseLevel>:

uint8_t UTIL_ADV_TRACE_GetVerboseLevel(void)
{
 8024adc:	b480      	push	{r7}
 8024ade:	af00      	add	r7, sp, #0
  return ADV_TRACE_Ctx.CurrentVerboseLevel;
 8024ae0:	4b02      	ldr	r3, [pc, #8]	@ (8024aec <UTIL_ADV_TRACE_GetVerboseLevel+0x10>)
 8024ae2:	7a1b      	ldrb	r3, [r3, #8]
}
 8024ae4:	4618      	mov	r0, r3
 8024ae6:	46bd      	mov	sp, r7
 8024ae8:	bc80      	pop	{r7}
 8024aea:	4770      	bx	lr
 8024aec:	200021fc 	.word	0x200021fc

08024af0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8024af0:	b580      	push	{r7, lr}
 8024af2:	b088      	sub	sp, #32
 8024af4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8024af6:	2300      	movs	r3, #0
 8024af8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8024afa:	2300      	movs	r3, #0
 8024afc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024afe:	f3ef 8310 	mrs	r3, PRIMASK
 8024b02:	613b      	str	r3, [r7, #16]
  return(result);
 8024b04:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8024b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024b08:	b672      	cpsid	i
}
 8024b0a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8024b0c:	f000 f9ba 	bl	8024e84 <TRACE_IsLocked>
 8024b10:	4603      	mov	r3, r0
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d15d      	bne.n	8024bd2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8024b16:	f000 f979 	bl	8024e0c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8024b1a:	4b34      	ldr	r3, [pc, #208]	@ (8024bec <TRACE_Send+0xfc>)
 8024b1c:	8a1a      	ldrh	r2, [r3, #16]
 8024b1e:	4b33      	ldr	r3, [pc, #204]	@ (8024bec <TRACE_Send+0xfc>)
 8024b20:	8a5b      	ldrh	r3, [r3, #18]
 8024b22:	429a      	cmp	r2, r3
 8024b24:	d04d      	beq.n	8024bc2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8024b26:	4b31      	ldr	r3, [pc, #196]	@ (8024bec <TRACE_Send+0xfc>)
 8024b28:	789b      	ldrb	r3, [r3, #2]
 8024b2a:	2b01      	cmp	r3, #1
 8024b2c:	d117      	bne.n	8024b5e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8024b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8024bec <TRACE_Send+0xfc>)
 8024b30:	881a      	ldrh	r2, [r3, #0]
 8024b32:	4b2e      	ldr	r3, [pc, #184]	@ (8024bec <TRACE_Send+0xfc>)
 8024b34:	8a1b      	ldrh	r3, [r3, #16]
 8024b36:	1ad3      	subs	r3, r2, r3
 8024b38:	b29a      	uxth	r2, r3
 8024b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8024bec <TRACE_Send+0xfc>)
 8024b3c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8024b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8024bec <TRACE_Send+0xfc>)
 8024b40:	2202      	movs	r2, #2
 8024b42:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8024b44:	4b29      	ldr	r3, [pc, #164]	@ (8024bec <TRACE_Send+0xfc>)
 8024b46:	2200      	movs	r2, #0
 8024b48:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8024b4a:	4b28      	ldr	r3, [pc, #160]	@ (8024bec <TRACE_Send+0xfc>)
 8024b4c:	8a9b      	ldrh	r3, [r3, #20]
 8024b4e:	2b00      	cmp	r3, #0
 8024b50:	d105      	bne.n	8024b5e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8024b52:	4b26      	ldr	r3, [pc, #152]	@ (8024bec <TRACE_Send+0xfc>)
 8024b54:	2200      	movs	r2, #0
 8024b56:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8024b58:	4b24      	ldr	r3, [pc, #144]	@ (8024bec <TRACE_Send+0xfc>)
 8024b5a:	2200      	movs	r2, #0
 8024b5c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8024b5e:	4b23      	ldr	r3, [pc, #140]	@ (8024bec <TRACE_Send+0xfc>)
 8024b60:	789b      	ldrb	r3, [r3, #2]
 8024b62:	2b00      	cmp	r3, #0
 8024b64:	d115      	bne.n	8024b92 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8024b66:	4b21      	ldr	r3, [pc, #132]	@ (8024bec <TRACE_Send+0xfc>)
 8024b68:	8a5a      	ldrh	r2, [r3, #18]
 8024b6a:	4b20      	ldr	r3, [pc, #128]	@ (8024bec <TRACE_Send+0xfc>)
 8024b6c:	8a1b      	ldrh	r3, [r3, #16]
 8024b6e:	429a      	cmp	r2, r3
 8024b70:	d908      	bls.n	8024b84 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8024b72:	4b1e      	ldr	r3, [pc, #120]	@ (8024bec <TRACE_Send+0xfc>)
 8024b74:	8a5a      	ldrh	r2, [r3, #18]
 8024b76:	4b1d      	ldr	r3, [pc, #116]	@ (8024bec <TRACE_Send+0xfc>)
 8024b78:	8a1b      	ldrh	r3, [r3, #16]
 8024b7a:	1ad3      	subs	r3, r2, r3
 8024b7c:	b29a      	uxth	r2, r3
 8024b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8024bec <TRACE_Send+0xfc>)
 8024b80:	829a      	strh	r2, [r3, #20]
 8024b82:	e006      	b.n	8024b92 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8024b84:	4b19      	ldr	r3, [pc, #100]	@ (8024bec <TRACE_Send+0xfc>)
 8024b86:	8a1b      	ldrh	r3, [r3, #16]
 8024b88:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8024b8c:	b29a      	uxth	r2, r3
 8024b8e:	4b17      	ldr	r3, [pc, #92]	@ (8024bec <TRACE_Send+0xfc>)
 8024b90:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8024b92:	4b16      	ldr	r3, [pc, #88]	@ (8024bec <TRACE_Send+0xfc>)
 8024b94:	8a1b      	ldrh	r3, [r3, #16]
 8024b96:	461a      	mov	r2, r3
 8024b98:	4b15      	ldr	r3, [pc, #84]	@ (8024bf0 <TRACE_Send+0x100>)
 8024b9a:	4413      	add	r3, r2
 8024b9c:	61bb      	str	r3, [r7, #24]
 8024b9e:	697b      	ldr	r3, [r7, #20]
 8024ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024ba2:	68fb      	ldr	r3, [r7, #12]
 8024ba4:	f383 8810 	msr	PRIMASK, r3
}
 8024ba8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8024baa:	f7dd fb5d 	bl	8002268 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8024bae:	4b11      	ldr	r3, [pc, #68]	@ (8024bf4 <TRACE_Send+0x104>)
 8024bb0:	68db      	ldr	r3, [r3, #12]
 8024bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8024bec <TRACE_Send+0xfc>)
 8024bb4:	8a92      	ldrh	r2, [r2, #20]
 8024bb6:	4611      	mov	r1, r2
 8024bb8:	69b8      	ldr	r0, [r7, #24]
 8024bba:	4798      	blx	r3
 8024bbc:	4603      	mov	r3, r0
 8024bbe:	77fb      	strb	r3, [r7, #31]
 8024bc0:	e00d      	b.n	8024bde <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8024bc2:	f000 f941 	bl	8024e48 <TRACE_UnLock>
 8024bc6:	697b      	ldr	r3, [r7, #20]
 8024bc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024bca:	68bb      	ldr	r3, [r7, #8]
 8024bcc:	f383 8810 	msr	PRIMASK, r3
}
 8024bd0:	e005      	b.n	8024bde <TRACE_Send+0xee>
 8024bd2:	697b      	ldr	r3, [r7, #20]
 8024bd4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	f383 8810 	msr	PRIMASK, r3
}
 8024bdc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8024bde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024be2:	4618      	mov	r0, r3
 8024be4:	3720      	adds	r7, #32
 8024be6:	46bd      	mov	sp, r7
 8024be8:	bd80      	pop	{r7, pc}
 8024bea:	bf00      	nop
 8024bec:	200021fc 	.word	0x200021fc
 8024bf0:	20002214 	.word	0x20002214
 8024bf4:	08028e80 	.word	0x08028e80

08024bf8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8024bf8:	b580      	push	{r7, lr}
 8024bfa:	b088      	sub	sp, #32
 8024bfc:	af00      	add	r7, sp, #0
 8024bfe:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8024c00:	2300      	movs	r3, #0
 8024c02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024c04:	f3ef 8310 	mrs	r3, PRIMASK
 8024c08:	617b      	str	r3, [r7, #20]
  return(result);
 8024c0a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8024c0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8024c0e:	b672      	cpsid	i
}
 8024c10:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8024c12:	4b3c      	ldr	r3, [pc, #240]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c14:	789b      	ldrb	r3, [r3, #2]
 8024c16:	2b02      	cmp	r3, #2
 8024c18:	d106      	bne.n	8024c28 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8024c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c1c:	2200      	movs	r2, #0
 8024c1e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8024c20:	4b38      	ldr	r3, [pc, #224]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c22:	2200      	movs	r2, #0
 8024c24:	821a      	strh	r2, [r3, #16]
 8024c26:	e00a      	b.n	8024c3e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8024c28:	4b36      	ldr	r3, [pc, #216]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c2a:	8a1a      	ldrh	r2, [r3, #16]
 8024c2c:	4b35      	ldr	r3, [pc, #212]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c2e:	8a9b      	ldrh	r3, [r3, #20]
 8024c30:	4413      	add	r3, r2
 8024c32:	b29b      	uxth	r3, r3
 8024c34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024c38:	b29a      	uxth	r2, r3
 8024c3a:	4b32      	ldr	r3, [pc, #200]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c3c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8024c3e:	4b31      	ldr	r3, [pc, #196]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c40:	8a1a      	ldrh	r2, [r3, #16]
 8024c42:	4b30      	ldr	r3, [pc, #192]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c44:	8a5b      	ldrh	r3, [r3, #18]
 8024c46:	429a      	cmp	r2, r3
 8024c48:	d04d      	beq.n	8024ce6 <TRACE_TxCpltCallback+0xee>
 8024c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c4c:	8adb      	ldrh	r3, [r3, #22]
 8024c4e:	2b01      	cmp	r3, #1
 8024c50:	d149      	bne.n	8024ce6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8024c52:	4b2c      	ldr	r3, [pc, #176]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c54:	789b      	ldrb	r3, [r3, #2]
 8024c56:	2b01      	cmp	r3, #1
 8024c58:	d117      	bne.n	8024c8a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8024c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c5c:	881a      	ldrh	r2, [r3, #0]
 8024c5e:	4b29      	ldr	r3, [pc, #164]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c60:	8a1b      	ldrh	r3, [r3, #16]
 8024c62:	1ad3      	subs	r3, r2, r3
 8024c64:	b29a      	uxth	r2, r3
 8024c66:	4b27      	ldr	r3, [pc, #156]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c68:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8024c6a:	4b26      	ldr	r3, [pc, #152]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c6c:	2202      	movs	r2, #2
 8024c6e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8024c70:	4b24      	ldr	r3, [pc, #144]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c72:	2200      	movs	r2, #0
 8024c74:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8024c76:	4b23      	ldr	r3, [pc, #140]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c78:	8a9b      	ldrh	r3, [r3, #20]
 8024c7a:	2b00      	cmp	r3, #0
 8024c7c:	d105      	bne.n	8024c8a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8024c7e:	4b21      	ldr	r3, [pc, #132]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c80:	2200      	movs	r2, #0
 8024c82:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8024c84:	4b1f      	ldr	r3, [pc, #124]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c86:	2200      	movs	r2, #0
 8024c88:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8024c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c8c:	789b      	ldrb	r3, [r3, #2]
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	d115      	bne.n	8024cbe <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8024c92:	4b1c      	ldr	r3, [pc, #112]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c94:	8a5a      	ldrh	r2, [r3, #18]
 8024c96:	4b1b      	ldr	r3, [pc, #108]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024c98:	8a1b      	ldrh	r3, [r3, #16]
 8024c9a:	429a      	cmp	r2, r3
 8024c9c:	d908      	bls.n	8024cb0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8024c9e:	4b19      	ldr	r3, [pc, #100]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024ca0:	8a5a      	ldrh	r2, [r3, #18]
 8024ca2:	4b18      	ldr	r3, [pc, #96]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024ca4:	8a1b      	ldrh	r3, [r3, #16]
 8024ca6:	1ad3      	subs	r3, r2, r3
 8024ca8:	b29a      	uxth	r2, r3
 8024caa:	4b16      	ldr	r3, [pc, #88]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024cac:	829a      	strh	r2, [r3, #20]
 8024cae:	e006      	b.n	8024cbe <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8024cb0:	4b14      	ldr	r3, [pc, #80]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024cb2:	8a1b      	ldrh	r3, [r3, #16]
 8024cb4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8024cb8:	b29a      	uxth	r2, r3
 8024cba:	4b12      	ldr	r3, [pc, #72]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024cbc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8024cbe:	4b11      	ldr	r3, [pc, #68]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024cc0:	8a1b      	ldrh	r3, [r3, #16]
 8024cc2:	461a      	mov	r2, r3
 8024cc4:	4b10      	ldr	r3, [pc, #64]	@ (8024d08 <TRACE_TxCpltCallback+0x110>)
 8024cc6:	4413      	add	r3, r2
 8024cc8:	61fb      	str	r3, [r7, #28]
 8024cca:	69bb      	ldr	r3, [r7, #24]
 8024ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024cce:	693b      	ldr	r3, [r7, #16]
 8024cd0:	f383 8810 	msr	PRIMASK, r3
}
 8024cd4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8024cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8024d0c <TRACE_TxCpltCallback+0x114>)
 8024cd8:	68db      	ldr	r3, [r3, #12]
 8024cda:	4a0a      	ldr	r2, [pc, #40]	@ (8024d04 <TRACE_TxCpltCallback+0x10c>)
 8024cdc:	8a92      	ldrh	r2, [r2, #20]
 8024cde:	4611      	mov	r1, r2
 8024ce0:	69f8      	ldr	r0, [r7, #28]
 8024ce2:	4798      	blx	r3
 8024ce4:	e00a      	b.n	8024cfc <TRACE_TxCpltCallback+0x104>
 8024ce6:	69bb      	ldr	r3, [r7, #24]
 8024ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024cea:	68fb      	ldr	r3, [r7, #12]
 8024cec:	f383 8810 	msr	PRIMASK, r3
}
 8024cf0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8024cf2:	f7dd fac1 	bl	8002278 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8024cf6:	f000 f8a7 	bl	8024e48 <TRACE_UnLock>
  }
}
 8024cfa:	bf00      	nop
 8024cfc:	bf00      	nop
 8024cfe:	3720      	adds	r7, #32
 8024d00:	46bd      	mov	sp, r7
 8024d02:	bd80      	pop	{r7, pc}
 8024d04:	200021fc 	.word	0x200021fc
 8024d08:	20002214 	.word	0x20002214
 8024d0c:	08028e80 	.word	0x08028e80

08024d10 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8024d10:	b480      	push	{r7}
 8024d12:	b087      	sub	sp, #28
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	4603      	mov	r3, r0
 8024d18:	6039      	str	r1, [r7, #0]
 8024d1a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8024d1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024d20:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024d22:	f3ef 8310 	mrs	r3, PRIMASK
 8024d26:	60fb      	str	r3, [r7, #12]
  return(result);
 8024d28:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8024d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8024d2c:	b672      	cpsid	i
}
 8024d2e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8024d30:	4b35      	ldr	r3, [pc, #212]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d32:	8a5a      	ldrh	r2, [r3, #18]
 8024d34:	4b34      	ldr	r3, [pc, #208]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d36:	8a1b      	ldrh	r3, [r3, #16]
 8024d38:	429a      	cmp	r2, r3
 8024d3a:	d11b      	bne.n	8024d74 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8024d3c:	4b32      	ldr	r3, [pc, #200]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d3e:	8a5b      	ldrh	r3, [r3, #18]
 8024d40:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8024d44:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8024d46:	88fa      	ldrh	r2, [r7, #6]
 8024d48:	8afb      	ldrh	r3, [r7, #22]
 8024d4a:	429a      	cmp	r2, r3
 8024d4c:	d33a      	bcc.n	8024dc4 <TRACE_AllocateBufer+0xb4>
 8024d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d50:	8a1b      	ldrh	r3, [r3, #16]
 8024d52:	88fa      	ldrh	r2, [r7, #6]
 8024d54:	429a      	cmp	r2, r3
 8024d56:	d235      	bcs.n	8024dc4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8024d58:	4b2b      	ldr	r3, [pc, #172]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d5a:	2201      	movs	r2, #1
 8024d5c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8024d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d60:	8a5a      	ldrh	r2, [r3, #18]
 8024d62:	4b29      	ldr	r3, [pc, #164]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d64:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8024d66:	4b28      	ldr	r3, [pc, #160]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d68:	8a1b      	ldrh	r3, [r3, #16]
 8024d6a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8024d6c:	4b26      	ldr	r3, [pc, #152]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d6e:	2200      	movs	r2, #0
 8024d70:	825a      	strh	r2, [r3, #18]
 8024d72:	e027      	b.n	8024dc4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8024d74:	4b24      	ldr	r3, [pc, #144]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d76:	8a5a      	ldrh	r2, [r3, #18]
 8024d78:	4b23      	ldr	r3, [pc, #140]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d7a:	8a1b      	ldrh	r3, [r3, #16]
 8024d7c:	429a      	cmp	r2, r3
 8024d7e:	d91b      	bls.n	8024db8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8024d80:	4b21      	ldr	r3, [pc, #132]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d82:	8a5b      	ldrh	r3, [r3, #18]
 8024d84:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8024d88:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8024d8a:	88fa      	ldrh	r2, [r7, #6]
 8024d8c:	8afb      	ldrh	r3, [r7, #22]
 8024d8e:	429a      	cmp	r2, r3
 8024d90:	d318      	bcc.n	8024dc4 <TRACE_AllocateBufer+0xb4>
 8024d92:	4b1d      	ldr	r3, [pc, #116]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d94:	8a1b      	ldrh	r3, [r3, #16]
 8024d96:	88fa      	ldrh	r2, [r7, #6]
 8024d98:	429a      	cmp	r2, r3
 8024d9a:	d213      	bcs.n	8024dc4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8024d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024d9e:	2201      	movs	r2, #1
 8024da0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8024da2:	4b19      	ldr	r3, [pc, #100]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024da4:	8a5a      	ldrh	r2, [r3, #18]
 8024da6:	4b18      	ldr	r3, [pc, #96]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024da8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8024daa:	4b17      	ldr	r3, [pc, #92]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024dac:	8a1b      	ldrh	r3, [r3, #16]
 8024dae:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8024db0:	4b15      	ldr	r3, [pc, #84]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024db2:	2200      	movs	r2, #0
 8024db4:	825a      	strh	r2, [r3, #18]
 8024db6:	e005      	b.n	8024dc4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8024db8:	4b13      	ldr	r3, [pc, #76]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024dba:	8a1a      	ldrh	r2, [r3, #16]
 8024dbc:	4b12      	ldr	r3, [pc, #72]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024dbe:	8a5b      	ldrh	r3, [r3, #18]
 8024dc0:	1ad3      	subs	r3, r2, r3
 8024dc2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8024dc4:	8afa      	ldrh	r2, [r7, #22]
 8024dc6:	88fb      	ldrh	r3, [r7, #6]
 8024dc8:	429a      	cmp	r2, r3
 8024dca:	d90f      	bls.n	8024dec <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8024dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024dce:	8a5a      	ldrh	r2, [r3, #18]
 8024dd0:	683b      	ldr	r3, [r7, #0]
 8024dd2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8024dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024dd6:	8a5a      	ldrh	r2, [r3, #18]
 8024dd8:	88fb      	ldrh	r3, [r7, #6]
 8024dda:	4413      	add	r3, r2
 8024ddc:	b29b      	uxth	r3, r3
 8024dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024de2:	b29a      	uxth	r2, r3
 8024de4:	4b08      	ldr	r3, [pc, #32]	@ (8024e08 <TRACE_AllocateBufer+0xf8>)
 8024de6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8024de8:	2300      	movs	r3, #0
 8024dea:	82bb      	strh	r3, [r7, #20]
 8024dec:	693b      	ldr	r3, [r7, #16]
 8024dee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024df0:	68bb      	ldr	r3, [r7, #8]
 8024df2:	f383 8810 	msr	PRIMASK, r3
}
 8024df6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8024df8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8024dfc:	4618      	mov	r0, r3
 8024dfe:	371c      	adds	r7, #28
 8024e00:	46bd      	mov	sp, r7
 8024e02:	bc80      	pop	{r7}
 8024e04:	4770      	bx	lr
 8024e06:	bf00      	nop
 8024e08:	200021fc 	.word	0x200021fc

08024e0c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8024e0c:	b480      	push	{r7}
 8024e0e:	b085      	sub	sp, #20
 8024e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024e12:	f3ef 8310 	mrs	r3, PRIMASK
 8024e16:	607b      	str	r3, [r7, #4]
  return(result);
 8024e18:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8024e1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8024e1c:	b672      	cpsid	i
}
 8024e1e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8024e20:	4b08      	ldr	r3, [pc, #32]	@ (8024e44 <TRACE_Lock+0x38>)
 8024e22:	8adb      	ldrh	r3, [r3, #22]
 8024e24:	3301      	adds	r3, #1
 8024e26:	b29a      	uxth	r2, r3
 8024e28:	4b06      	ldr	r3, [pc, #24]	@ (8024e44 <TRACE_Lock+0x38>)
 8024e2a:	82da      	strh	r2, [r3, #22]
 8024e2c:	68fb      	ldr	r3, [r7, #12]
 8024e2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024e30:	68bb      	ldr	r3, [r7, #8]
 8024e32:	f383 8810 	msr	PRIMASK, r3
}
 8024e36:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8024e38:	bf00      	nop
 8024e3a:	3714      	adds	r7, #20
 8024e3c:	46bd      	mov	sp, r7
 8024e3e:	bc80      	pop	{r7}
 8024e40:	4770      	bx	lr
 8024e42:	bf00      	nop
 8024e44:	200021fc 	.word	0x200021fc

08024e48 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8024e48:	b480      	push	{r7}
 8024e4a:	b085      	sub	sp, #20
 8024e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8024e52:	607b      	str	r3, [r7, #4]
  return(result);
 8024e54:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8024e56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8024e58:	b672      	cpsid	i
}
 8024e5a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8024e5c:	4b08      	ldr	r3, [pc, #32]	@ (8024e80 <TRACE_UnLock+0x38>)
 8024e5e:	8adb      	ldrh	r3, [r3, #22]
 8024e60:	3b01      	subs	r3, #1
 8024e62:	b29a      	uxth	r2, r3
 8024e64:	4b06      	ldr	r3, [pc, #24]	@ (8024e80 <TRACE_UnLock+0x38>)
 8024e66:	82da      	strh	r2, [r3, #22]
 8024e68:	68fb      	ldr	r3, [r7, #12]
 8024e6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024e6c:	68bb      	ldr	r3, [r7, #8]
 8024e6e:	f383 8810 	msr	PRIMASK, r3
}
 8024e72:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8024e74:	bf00      	nop
 8024e76:	3714      	adds	r7, #20
 8024e78:	46bd      	mov	sp, r7
 8024e7a:	bc80      	pop	{r7}
 8024e7c:	4770      	bx	lr
 8024e7e:	bf00      	nop
 8024e80:	200021fc 	.word	0x200021fc

08024e84 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8024e84:	b480      	push	{r7}
 8024e86:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8024e88:	4b05      	ldr	r3, [pc, #20]	@ (8024ea0 <TRACE_IsLocked+0x1c>)
 8024e8a:	8adb      	ldrh	r3, [r3, #22]
 8024e8c:	2b00      	cmp	r3, #0
 8024e8e:	bf14      	ite	ne
 8024e90:	2301      	movne	r3, #1
 8024e92:	2300      	moveq	r3, #0
 8024e94:	b2db      	uxtb	r3, r3
}
 8024e96:	4618      	mov	r0, r3
 8024e98:	46bd      	mov	sp, r7
 8024e9a:	bc80      	pop	{r7}
 8024e9c:	4770      	bx	lr
 8024e9e:	bf00      	nop
 8024ea0:	200021fc 	.word	0x200021fc

08024ea4 <_strtol_l.constprop.0>:
 8024ea4:	2b24      	cmp	r3, #36	@ 0x24
 8024ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024eaa:	4686      	mov	lr, r0
 8024eac:	4690      	mov	r8, r2
 8024eae:	d801      	bhi.n	8024eb4 <_strtol_l.constprop.0+0x10>
 8024eb0:	2b01      	cmp	r3, #1
 8024eb2:	d106      	bne.n	8024ec2 <_strtol_l.constprop.0+0x1e>
 8024eb4:	f000 faa2 	bl	80253fc <__errno>
 8024eb8:	2316      	movs	r3, #22
 8024eba:	6003      	str	r3, [r0, #0]
 8024ebc:	2000      	movs	r0, #0
 8024ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ec2:	4834      	ldr	r0, [pc, #208]	@ (8024f94 <_strtol_l.constprop.0+0xf0>)
 8024ec4:	460d      	mov	r5, r1
 8024ec6:	462a      	mov	r2, r5
 8024ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024ecc:	5d06      	ldrb	r6, [r0, r4]
 8024ece:	f016 0608 	ands.w	r6, r6, #8
 8024ed2:	d1f8      	bne.n	8024ec6 <_strtol_l.constprop.0+0x22>
 8024ed4:	2c2d      	cmp	r4, #45	@ 0x2d
 8024ed6:	d12d      	bne.n	8024f34 <_strtol_l.constprop.0+0x90>
 8024ed8:	782c      	ldrb	r4, [r5, #0]
 8024eda:	2601      	movs	r6, #1
 8024edc:	1c95      	adds	r5, r2, #2
 8024ede:	f033 0210 	bics.w	r2, r3, #16
 8024ee2:	d109      	bne.n	8024ef8 <_strtol_l.constprop.0+0x54>
 8024ee4:	2c30      	cmp	r4, #48	@ 0x30
 8024ee6:	d12a      	bne.n	8024f3e <_strtol_l.constprop.0+0x9a>
 8024ee8:	782a      	ldrb	r2, [r5, #0]
 8024eea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8024eee:	2a58      	cmp	r2, #88	@ 0x58
 8024ef0:	d125      	bne.n	8024f3e <_strtol_l.constprop.0+0x9a>
 8024ef2:	786c      	ldrb	r4, [r5, #1]
 8024ef4:	2310      	movs	r3, #16
 8024ef6:	3502      	adds	r5, #2
 8024ef8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8024efc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8024f00:	2200      	movs	r2, #0
 8024f02:	fbbc f9f3 	udiv	r9, ip, r3
 8024f06:	4610      	mov	r0, r2
 8024f08:	fb03 ca19 	mls	sl, r3, r9, ip
 8024f0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8024f10:	2f09      	cmp	r7, #9
 8024f12:	d81b      	bhi.n	8024f4c <_strtol_l.constprop.0+0xa8>
 8024f14:	463c      	mov	r4, r7
 8024f16:	42a3      	cmp	r3, r4
 8024f18:	dd27      	ble.n	8024f6a <_strtol_l.constprop.0+0xc6>
 8024f1a:	1c57      	adds	r7, r2, #1
 8024f1c:	d007      	beq.n	8024f2e <_strtol_l.constprop.0+0x8a>
 8024f1e:	4581      	cmp	r9, r0
 8024f20:	d320      	bcc.n	8024f64 <_strtol_l.constprop.0+0xc0>
 8024f22:	d101      	bne.n	8024f28 <_strtol_l.constprop.0+0x84>
 8024f24:	45a2      	cmp	sl, r4
 8024f26:	db1d      	blt.n	8024f64 <_strtol_l.constprop.0+0xc0>
 8024f28:	fb00 4003 	mla	r0, r0, r3, r4
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024f32:	e7eb      	b.n	8024f0c <_strtol_l.constprop.0+0x68>
 8024f34:	2c2b      	cmp	r4, #43	@ 0x2b
 8024f36:	bf04      	itt	eq
 8024f38:	782c      	ldrbeq	r4, [r5, #0]
 8024f3a:	1c95      	addeq	r5, r2, #2
 8024f3c:	e7cf      	b.n	8024ede <_strtol_l.constprop.0+0x3a>
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	d1da      	bne.n	8024ef8 <_strtol_l.constprop.0+0x54>
 8024f42:	2c30      	cmp	r4, #48	@ 0x30
 8024f44:	bf0c      	ite	eq
 8024f46:	2308      	moveq	r3, #8
 8024f48:	230a      	movne	r3, #10
 8024f4a:	e7d5      	b.n	8024ef8 <_strtol_l.constprop.0+0x54>
 8024f4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8024f50:	2f19      	cmp	r7, #25
 8024f52:	d801      	bhi.n	8024f58 <_strtol_l.constprop.0+0xb4>
 8024f54:	3c37      	subs	r4, #55	@ 0x37
 8024f56:	e7de      	b.n	8024f16 <_strtol_l.constprop.0+0x72>
 8024f58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8024f5c:	2f19      	cmp	r7, #25
 8024f5e:	d804      	bhi.n	8024f6a <_strtol_l.constprop.0+0xc6>
 8024f60:	3c57      	subs	r4, #87	@ 0x57
 8024f62:	e7d8      	b.n	8024f16 <_strtol_l.constprop.0+0x72>
 8024f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024f68:	e7e1      	b.n	8024f2e <_strtol_l.constprop.0+0x8a>
 8024f6a:	1c53      	adds	r3, r2, #1
 8024f6c:	d108      	bne.n	8024f80 <_strtol_l.constprop.0+0xdc>
 8024f6e:	2322      	movs	r3, #34	@ 0x22
 8024f70:	f8ce 3000 	str.w	r3, [lr]
 8024f74:	4660      	mov	r0, ip
 8024f76:	f1b8 0f00 	cmp.w	r8, #0
 8024f7a:	d0a0      	beq.n	8024ebe <_strtol_l.constprop.0+0x1a>
 8024f7c:	1e69      	subs	r1, r5, #1
 8024f7e:	e006      	b.n	8024f8e <_strtol_l.constprop.0+0xea>
 8024f80:	b106      	cbz	r6, 8024f84 <_strtol_l.constprop.0+0xe0>
 8024f82:	4240      	negs	r0, r0
 8024f84:	f1b8 0f00 	cmp.w	r8, #0
 8024f88:	d099      	beq.n	8024ebe <_strtol_l.constprop.0+0x1a>
 8024f8a:	2a00      	cmp	r2, #0
 8024f8c:	d1f6      	bne.n	8024f7c <_strtol_l.constprop.0+0xd8>
 8024f8e:	f8c8 1000 	str.w	r1, [r8]
 8024f92:	e794      	b.n	8024ebe <_strtol_l.constprop.0+0x1a>
 8024f94:	08029969 	.word	0x08029969

08024f98 <strtol>:
 8024f98:	4613      	mov	r3, r2
 8024f9a:	460a      	mov	r2, r1
 8024f9c:	4601      	mov	r1, r0
 8024f9e:	4802      	ldr	r0, [pc, #8]	@ (8024fa8 <strtol+0x10>)
 8024fa0:	6800      	ldr	r0, [r0, #0]
 8024fa2:	f7ff bf7f 	b.w	8024ea4 <_strtol_l.constprop.0>
 8024fa6:	bf00      	nop
 8024fa8:	20000164 	.word	0x20000164

08024fac <std>:
 8024fac:	2300      	movs	r3, #0
 8024fae:	b510      	push	{r4, lr}
 8024fb0:	4604      	mov	r4, r0
 8024fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8024fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024fba:	6083      	str	r3, [r0, #8]
 8024fbc:	8181      	strh	r1, [r0, #12]
 8024fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8024fc0:	81c2      	strh	r2, [r0, #14]
 8024fc2:	6183      	str	r3, [r0, #24]
 8024fc4:	4619      	mov	r1, r3
 8024fc6:	2208      	movs	r2, #8
 8024fc8:	305c      	adds	r0, #92	@ 0x5c
 8024fca:	f000 f948 	bl	802525e <memset>
 8024fce:	4b0d      	ldr	r3, [pc, #52]	@ (8025004 <std+0x58>)
 8024fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8024fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8025008 <std+0x5c>)
 8024fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024fd6:	4b0d      	ldr	r3, [pc, #52]	@ (802500c <std+0x60>)
 8024fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024fda:	4b0d      	ldr	r3, [pc, #52]	@ (8025010 <std+0x64>)
 8024fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8024fde:	4b0d      	ldr	r3, [pc, #52]	@ (8025014 <std+0x68>)
 8024fe0:	6224      	str	r4, [r4, #32]
 8024fe2:	429c      	cmp	r4, r3
 8024fe4:	d006      	beq.n	8024ff4 <std+0x48>
 8024fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024fea:	4294      	cmp	r4, r2
 8024fec:	d002      	beq.n	8024ff4 <std+0x48>
 8024fee:	33d0      	adds	r3, #208	@ 0xd0
 8024ff0:	429c      	cmp	r4, r3
 8024ff2:	d105      	bne.n	8025000 <std+0x54>
 8024ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ffc:	f000 ba28 	b.w	8025450 <__retarget_lock_init_recursive>
 8025000:	bd10      	pop	{r4, pc}
 8025002:	bf00      	nop
 8025004:	080251d9 	.word	0x080251d9
 8025008:	080251fb 	.word	0x080251fb
 802500c:	08025233 	.word	0x08025233
 8025010:	08025257 	.word	0x08025257
 8025014:	20002e14 	.word	0x20002e14

08025018 <stdio_exit_handler>:
 8025018:	4a02      	ldr	r2, [pc, #8]	@ (8025024 <stdio_exit_handler+0xc>)
 802501a:	4903      	ldr	r1, [pc, #12]	@ (8025028 <stdio_exit_handler+0x10>)
 802501c:	4803      	ldr	r0, [pc, #12]	@ (802502c <stdio_exit_handler+0x14>)
 802501e:	f000 b869 	b.w	80250f4 <_fwalk_sglue>
 8025022:	bf00      	nop
 8025024:	20000158 	.word	0x20000158
 8025028:	08025d61 	.word	0x08025d61
 802502c:	20000168 	.word	0x20000168

08025030 <cleanup_stdio>:
 8025030:	6841      	ldr	r1, [r0, #4]
 8025032:	4b0c      	ldr	r3, [pc, #48]	@ (8025064 <cleanup_stdio+0x34>)
 8025034:	4299      	cmp	r1, r3
 8025036:	b510      	push	{r4, lr}
 8025038:	4604      	mov	r4, r0
 802503a:	d001      	beq.n	8025040 <cleanup_stdio+0x10>
 802503c:	f000 fe90 	bl	8025d60 <_fflush_r>
 8025040:	68a1      	ldr	r1, [r4, #8]
 8025042:	4b09      	ldr	r3, [pc, #36]	@ (8025068 <cleanup_stdio+0x38>)
 8025044:	4299      	cmp	r1, r3
 8025046:	d002      	beq.n	802504e <cleanup_stdio+0x1e>
 8025048:	4620      	mov	r0, r4
 802504a:	f000 fe89 	bl	8025d60 <_fflush_r>
 802504e:	68e1      	ldr	r1, [r4, #12]
 8025050:	4b06      	ldr	r3, [pc, #24]	@ (802506c <cleanup_stdio+0x3c>)
 8025052:	4299      	cmp	r1, r3
 8025054:	d004      	beq.n	8025060 <cleanup_stdio+0x30>
 8025056:	4620      	mov	r0, r4
 8025058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802505c:	f000 be80 	b.w	8025d60 <_fflush_r>
 8025060:	bd10      	pop	{r4, pc}
 8025062:	bf00      	nop
 8025064:	20002e14 	.word	0x20002e14
 8025068:	20002e7c 	.word	0x20002e7c
 802506c:	20002ee4 	.word	0x20002ee4

08025070 <global_stdio_init.part.0>:
 8025070:	b510      	push	{r4, lr}
 8025072:	4b0b      	ldr	r3, [pc, #44]	@ (80250a0 <global_stdio_init.part.0+0x30>)
 8025074:	4c0b      	ldr	r4, [pc, #44]	@ (80250a4 <global_stdio_init.part.0+0x34>)
 8025076:	4a0c      	ldr	r2, [pc, #48]	@ (80250a8 <global_stdio_init.part.0+0x38>)
 8025078:	601a      	str	r2, [r3, #0]
 802507a:	4620      	mov	r0, r4
 802507c:	2200      	movs	r2, #0
 802507e:	2104      	movs	r1, #4
 8025080:	f7ff ff94 	bl	8024fac <std>
 8025084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025088:	2201      	movs	r2, #1
 802508a:	2109      	movs	r1, #9
 802508c:	f7ff ff8e 	bl	8024fac <std>
 8025090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025094:	2202      	movs	r2, #2
 8025096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802509a:	2112      	movs	r1, #18
 802509c:	f7ff bf86 	b.w	8024fac <std>
 80250a0:	20002f4c 	.word	0x20002f4c
 80250a4:	20002e14 	.word	0x20002e14
 80250a8:	08025019 	.word	0x08025019

080250ac <__sfp_lock_acquire>:
 80250ac:	4801      	ldr	r0, [pc, #4]	@ (80250b4 <__sfp_lock_acquire+0x8>)
 80250ae:	f000 b9d0 	b.w	8025452 <__retarget_lock_acquire_recursive>
 80250b2:	bf00      	nop
 80250b4:	20002f55 	.word	0x20002f55

080250b8 <__sfp_lock_release>:
 80250b8:	4801      	ldr	r0, [pc, #4]	@ (80250c0 <__sfp_lock_release+0x8>)
 80250ba:	f000 b9cb 	b.w	8025454 <__retarget_lock_release_recursive>
 80250be:	bf00      	nop
 80250c0:	20002f55 	.word	0x20002f55

080250c4 <__sinit>:
 80250c4:	b510      	push	{r4, lr}
 80250c6:	4604      	mov	r4, r0
 80250c8:	f7ff fff0 	bl	80250ac <__sfp_lock_acquire>
 80250cc:	6a23      	ldr	r3, [r4, #32]
 80250ce:	b11b      	cbz	r3, 80250d8 <__sinit+0x14>
 80250d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80250d4:	f7ff bff0 	b.w	80250b8 <__sfp_lock_release>
 80250d8:	4b04      	ldr	r3, [pc, #16]	@ (80250ec <__sinit+0x28>)
 80250da:	6223      	str	r3, [r4, #32]
 80250dc:	4b04      	ldr	r3, [pc, #16]	@ (80250f0 <__sinit+0x2c>)
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d1f5      	bne.n	80250d0 <__sinit+0xc>
 80250e4:	f7ff ffc4 	bl	8025070 <global_stdio_init.part.0>
 80250e8:	e7f2      	b.n	80250d0 <__sinit+0xc>
 80250ea:	bf00      	nop
 80250ec:	08025031 	.word	0x08025031
 80250f0:	20002f4c 	.word	0x20002f4c

080250f4 <_fwalk_sglue>:
 80250f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80250f8:	4607      	mov	r7, r0
 80250fa:	4688      	mov	r8, r1
 80250fc:	4614      	mov	r4, r2
 80250fe:	2600      	movs	r6, #0
 8025100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025104:	f1b9 0901 	subs.w	r9, r9, #1
 8025108:	d505      	bpl.n	8025116 <_fwalk_sglue+0x22>
 802510a:	6824      	ldr	r4, [r4, #0]
 802510c:	2c00      	cmp	r4, #0
 802510e:	d1f7      	bne.n	8025100 <_fwalk_sglue+0xc>
 8025110:	4630      	mov	r0, r6
 8025112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025116:	89ab      	ldrh	r3, [r5, #12]
 8025118:	2b01      	cmp	r3, #1
 802511a:	d907      	bls.n	802512c <_fwalk_sglue+0x38>
 802511c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025120:	3301      	adds	r3, #1
 8025122:	d003      	beq.n	802512c <_fwalk_sglue+0x38>
 8025124:	4629      	mov	r1, r5
 8025126:	4638      	mov	r0, r7
 8025128:	47c0      	blx	r8
 802512a:	4306      	orrs	r6, r0
 802512c:	3568      	adds	r5, #104	@ 0x68
 802512e:	e7e9      	b.n	8025104 <_fwalk_sglue+0x10>

08025130 <sniprintf>:
 8025130:	b40c      	push	{r2, r3}
 8025132:	b530      	push	{r4, r5, lr}
 8025134:	4b17      	ldr	r3, [pc, #92]	@ (8025194 <sniprintf+0x64>)
 8025136:	1e0c      	subs	r4, r1, #0
 8025138:	681d      	ldr	r5, [r3, #0]
 802513a:	b09d      	sub	sp, #116	@ 0x74
 802513c:	da08      	bge.n	8025150 <sniprintf+0x20>
 802513e:	238b      	movs	r3, #139	@ 0x8b
 8025140:	602b      	str	r3, [r5, #0]
 8025142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025146:	b01d      	add	sp, #116	@ 0x74
 8025148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802514c:	b002      	add	sp, #8
 802514e:	4770      	bx	lr
 8025150:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025154:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025158:	bf14      	ite	ne
 802515a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802515e:	4623      	moveq	r3, r4
 8025160:	9304      	str	r3, [sp, #16]
 8025162:	9307      	str	r3, [sp, #28]
 8025164:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025168:	9002      	str	r0, [sp, #8]
 802516a:	9006      	str	r0, [sp, #24]
 802516c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025170:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025172:	ab21      	add	r3, sp, #132	@ 0x84
 8025174:	a902      	add	r1, sp, #8
 8025176:	4628      	mov	r0, r5
 8025178:	9301      	str	r3, [sp, #4]
 802517a:	f000 fae7 	bl	802574c <_svfiprintf_r>
 802517e:	1c43      	adds	r3, r0, #1
 8025180:	bfbc      	itt	lt
 8025182:	238b      	movlt	r3, #139	@ 0x8b
 8025184:	602b      	strlt	r3, [r5, #0]
 8025186:	2c00      	cmp	r4, #0
 8025188:	d0dd      	beq.n	8025146 <sniprintf+0x16>
 802518a:	9b02      	ldr	r3, [sp, #8]
 802518c:	2200      	movs	r2, #0
 802518e:	701a      	strb	r2, [r3, #0]
 8025190:	e7d9      	b.n	8025146 <sniprintf+0x16>
 8025192:	bf00      	nop
 8025194:	20000164 	.word	0x20000164

08025198 <siprintf>:
 8025198:	b40e      	push	{r1, r2, r3}
 802519a:	b500      	push	{lr}
 802519c:	b09c      	sub	sp, #112	@ 0x70
 802519e:	ab1d      	add	r3, sp, #116	@ 0x74
 80251a0:	9002      	str	r0, [sp, #8]
 80251a2:	9006      	str	r0, [sp, #24]
 80251a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80251a8:	4809      	ldr	r0, [pc, #36]	@ (80251d0 <siprintf+0x38>)
 80251aa:	9107      	str	r1, [sp, #28]
 80251ac:	9104      	str	r1, [sp, #16]
 80251ae:	4909      	ldr	r1, [pc, #36]	@ (80251d4 <siprintf+0x3c>)
 80251b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80251b4:	9105      	str	r1, [sp, #20]
 80251b6:	6800      	ldr	r0, [r0, #0]
 80251b8:	9301      	str	r3, [sp, #4]
 80251ba:	a902      	add	r1, sp, #8
 80251bc:	f000 fac6 	bl	802574c <_svfiprintf_r>
 80251c0:	9b02      	ldr	r3, [sp, #8]
 80251c2:	2200      	movs	r2, #0
 80251c4:	701a      	strb	r2, [r3, #0]
 80251c6:	b01c      	add	sp, #112	@ 0x70
 80251c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80251cc:	b003      	add	sp, #12
 80251ce:	4770      	bx	lr
 80251d0:	20000164 	.word	0x20000164
 80251d4:	ffff0208 	.word	0xffff0208

080251d8 <__sread>:
 80251d8:	b510      	push	{r4, lr}
 80251da:	460c      	mov	r4, r1
 80251dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80251e0:	f000 f8e8 	bl	80253b4 <_read_r>
 80251e4:	2800      	cmp	r0, #0
 80251e6:	bfab      	itete	ge
 80251e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80251ea:	89a3      	ldrhlt	r3, [r4, #12]
 80251ec:	181b      	addge	r3, r3, r0
 80251ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80251f2:	bfac      	ite	ge
 80251f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80251f6:	81a3      	strhlt	r3, [r4, #12]
 80251f8:	bd10      	pop	{r4, pc}

080251fa <__swrite>:
 80251fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80251fe:	461f      	mov	r7, r3
 8025200:	898b      	ldrh	r3, [r1, #12]
 8025202:	05db      	lsls	r3, r3, #23
 8025204:	4605      	mov	r5, r0
 8025206:	460c      	mov	r4, r1
 8025208:	4616      	mov	r6, r2
 802520a:	d505      	bpl.n	8025218 <__swrite+0x1e>
 802520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025210:	2302      	movs	r3, #2
 8025212:	2200      	movs	r2, #0
 8025214:	f000 f8bc 	bl	8025390 <_lseek_r>
 8025218:	89a3      	ldrh	r3, [r4, #12]
 802521a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802521e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8025222:	81a3      	strh	r3, [r4, #12]
 8025224:	4632      	mov	r2, r6
 8025226:	463b      	mov	r3, r7
 8025228:	4628      	mov	r0, r5
 802522a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802522e:	f000 b8d3 	b.w	80253d8 <_write_r>

08025232 <__sseek>:
 8025232:	b510      	push	{r4, lr}
 8025234:	460c      	mov	r4, r1
 8025236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802523a:	f000 f8a9 	bl	8025390 <_lseek_r>
 802523e:	1c43      	adds	r3, r0, #1
 8025240:	89a3      	ldrh	r3, [r4, #12]
 8025242:	bf15      	itete	ne
 8025244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8025246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802524a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802524e:	81a3      	strheq	r3, [r4, #12]
 8025250:	bf18      	it	ne
 8025252:	81a3      	strhne	r3, [r4, #12]
 8025254:	bd10      	pop	{r4, pc}

08025256 <__sclose>:
 8025256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802525a:	f000 b889 	b.w	8025370 <_close_r>

0802525e <memset>:
 802525e:	4402      	add	r2, r0
 8025260:	4603      	mov	r3, r0
 8025262:	4293      	cmp	r3, r2
 8025264:	d100      	bne.n	8025268 <memset+0xa>
 8025266:	4770      	bx	lr
 8025268:	f803 1b01 	strb.w	r1, [r3], #1
 802526c:	e7f9      	b.n	8025262 <memset+0x4>

0802526e <strncmp>:
 802526e:	b510      	push	{r4, lr}
 8025270:	b16a      	cbz	r2, 802528e <strncmp+0x20>
 8025272:	3901      	subs	r1, #1
 8025274:	1884      	adds	r4, r0, r2
 8025276:	f810 2b01 	ldrb.w	r2, [r0], #1
 802527a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802527e:	429a      	cmp	r2, r3
 8025280:	d103      	bne.n	802528a <strncmp+0x1c>
 8025282:	42a0      	cmp	r0, r4
 8025284:	d001      	beq.n	802528a <strncmp+0x1c>
 8025286:	2a00      	cmp	r2, #0
 8025288:	d1f5      	bne.n	8025276 <strncmp+0x8>
 802528a:	1ad0      	subs	r0, r2, r3
 802528c:	bd10      	pop	{r4, pc}
 802528e:	4610      	mov	r0, r2
 8025290:	e7fc      	b.n	802528c <strncmp+0x1e>

08025292 <strncpy>:
 8025292:	b510      	push	{r4, lr}
 8025294:	3901      	subs	r1, #1
 8025296:	4603      	mov	r3, r0
 8025298:	b132      	cbz	r2, 80252a8 <strncpy+0x16>
 802529a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802529e:	f803 4b01 	strb.w	r4, [r3], #1
 80252a2:	3a01      	subs	r2, #1
 80252a4:	2c00      	cmp	r4, #0
 80252a6:	d1f7      	bne.n	8025298 <strncpy+0x6>
 80252a8:	441a      	add	r2, r3
 80252aa:	2100      	movs	r1, #0
 80252ac:	4293      	cmp	r3, r2
 80252ae:	d100      	bne.n	80252b2 <strncpy+0x20>
 80252b0:	bd10      	pop	{r4, pc}
 80252b2:	f803 1b01 	strb.w	r1, [r3], #1
 80252b6:	e7f9      	b.n	80252ac <strncpy+0x1a>

080252b8 <strtok>:
 80252b8:	4b16      	ldr	r3, [pc, #88]	@ (8025314 <strtok+0x5c>)
 80252ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252be:	681f      	ldr	r7, [r3, #0]
 80252c0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80252c2:	4605      	mov	r5, r0
 80252c4:	460e      	mov	r6, r1
 80252c6:	b9ec      	cbnz	r4, 8025304 <strtok+0x4c>
 80252c8:	2050      	movs	r0, #80	@ 0x50
 80252ca:	f000 f92d 	bl	8025528 <malloc>
 80252ce:	4602      	mov	r2, r0
 80252d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80252d2:	b920      	cbnz	r0, 80252de <strtok+0x26>
 80252d4:	4b10      	ldr	r3, [pc, #64]	@ (8025318 <strtok+0x60>)
 80252d6:	4811      	ldr	r0, [pc, #68]	@ (802531c <strtok+0x64>)
 80252d8:	215b      	movs	r1, #91	@ 0x5b
 80252da:	f000 f8bd 	bl	8025458 <__assert_func>
 80252de:	e9c0 4400 	strd	r4, r4, [r0]
 80252e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80252e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80252ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80252ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80252f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80252f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80252fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80252fe:	6184      	str	r4, [r0, #24]
 8025300:	7704      	strb	r4, [r0, #28]
 8025302:	6244      	str	r4, [r0, #36]	@ 0x24
 8025304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025306:	4631      	mov	r1, r6
 8025308:	4628      	mov	r0, r5
 802530a:	2301      	movs	r3, #1
 802530c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025310:	f000 b806 	b.w	8025320 <__strtok_r>
 8025314:	20000164 	.word	0x20000164
 8025318:	08029a69 	.word	0x08029a69
 802531c:	08029a80 	.word	0x08029a80

08025320 <__strtok_r>:
 8025320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025322:	4604      	mov	r4, r0
 8025324:	b908      	cbnz	r0, 802532a <__strtok_r+0xa>
 8025326:	6814      	ldr	r4, [r2, #0]
 8025328:	b144      	cbz	r4, 802533c <__strtok_r+0x1c>
 802532a:	4620      	mov	r0, r4
 802532c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025330:	460f      	mov	r7, r1
 8025332:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025336:	b91e      	cbnz	r6, 8025340 <__strtok_r+0x20>
 8025338:	b965      	cbnz	r5, 8025354 <__strtok_r+0x34>
 802533a:	6015      	str	r5, [r2, #0]
 802533c:	2000      	movs	r0, #0
 802533e:	e005      	b.n	802534c <__strtok_r+0x2c>
 8025340:	42b5      	cmp	r5, r6
 8025342:	d1f6      	bne.n	8025332 <__strtok_r+0x12>
 8025344:	2b00      	cmp	r3, #0
 8025346:	d1f0      	bne.n	802532a <__strtok_r+0xa>
 8025348:	6014      	str	r4, [r2, #0]
 802534a:	7003      	strb	r3, [r0, #0]
 802534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802534e:	461c      	mov	r4, r3
 8025350:	e00c      	b.n	802536c <__strtok_r+0x4c>
 8025352:	b915      	cbnz	r5, 802535a <__strtok_r+0x3a>
 8025354:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025358:	460e      	mov	r6, r1
 802535a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802535e:	42ab      	cmp	r3, r5
 8025360:	d1f7      	bne.n	8025352 <__strtok_r+0x32>
 8025362:	2b00      	cmp	r3, #0
 8025364:	d0f3      	beq.n	802534e <__strtok_r+0x2e>
 8025366:	2300      	movs	r3, #0
 8025368:	f804 3c01 	strb.w	r3, [r4, #-1]
 802536c:	6014      	str	r4, [r2, #0]
 802536e:	e7ed      	b.n	802534c <__strtok_r+0x2c>

08025370 <_close_r>:
 8025370:	b538      	push	{r3, r4, r5, lr}
 8025372:	4d06      	ldr	r5, [pc, #24]	@ (802538c <_close_r+0x1c>)
 8025374:	2300      	movs	r3, #0
 8025376:	4604      	mov	r4, r0
 8025378:	4608      	mov	r0, r1
 802537a:	602b      	str	r3, [r5, #0]
 802537c:	f7dd f875 	bl	800246a <_close>
 8025380:	1c43      	adds	r3, r0, #1
 8025382:	d102      	bne.n	802538a <_close_r+0x1a>
 8025384:	682b      	ldr	r3, [r5, #0]
 8025386:	b103      	cbz	r3, 802538a <_close_r+0x1a>
 8025388:	6023      	str	r3, [r4, #0]
 802538a:	bd38      	pop	{r3, r4, r5, pc}
 802538c:	20002f50 	.word	0x20002f50

08025390 <_lseek_r>:
 8025390:	b538      	push	{r3, r4, r5, lr}
 8025392:	4d07      	ldr	r5, [pc, #28]	@ (80253b0 <_lseek_r+0x20>)
 8025394:	4604      	mov	r4, r0
 8025396:	4608      	mov	r0, r1
 8025398:	4611      	mov	r1, r2
 802539a:	2200      	movs	r2, #0
 802539c:	602a      	str	r2, [r5, #0]
 802539e:	461a      	mov	r2, r3
 80253a0:	f7dd f887 	bl	80024b2 <_lseek>
 80253a4:	1c43      	adds	r3, r0, #1
 80253a6:	d102      	bne.n	80253ae <_lseek_r+0x1e>
 80253a8:	682b      	ldr	r3, [r5, #0]
 80253aa:	b103      	cbz	r3, 80253ae <_lseek_r+0x1e>
 80253ac:	6023      	str	r3, [r4, #0]
 80253ae:	bd38      	pop	{r3, r4, r5, pc}
 80253b0:	20002f50 	.word	0x20002f50

080253b4 <_read_r>:
 80253b4:	b538      	push	{r3, r4, r5, lr}
 80253b6:	4d07      	ldr	r5, [pc, #28]	@ (80253d4 <_read_r+0x20>)
 80253b8:	4604      	mov	r4, r0
 80253ba:	4608      	mov	r0, r1
 80253bc:	4611      	mov	r1, r2
 80253be:	2200      	movs	r2, #0
 80253c0:	602a      	str	r2, [r5, #0]
 80253c2:	461a      	mov	r2, r3
 80253c4:	f7dd f818 	bl	80023f8 <_read>
 80253c8:	1c43      	adds	r3, r0, #1
 80253ca:	d102      	bne.n	80253d2 <_read_r+0x1e>
 80253cc:	682b      	ldr	r3, [r5, #0]
 80253ce:	b103      	cbz	r3, 80253d2 <_read_r+0x1e>
 80253d0:	6023      	str	r3, [r4, #0]
 80253d2:	bd38      	pop	{r3, r4, r5, pc}
 80253d4:	20002f50 	.word	0x20002f50

080253d8 <_write_r>:
 80253d8:	b538      	push	{r3, r4, r5, lr}
 80253da:	4d07      	ldr	r5, [pc, #28]	@ (80253f8 <_write_r+0x20>)
 80253dc:	4604      	mov	r4, r0
 80253de:	4608      	mov	r0, r1
 80253e0:	4611      	mov	r1, r2
 80253e2:	2200      	movs	r2, #0
 80253e4:	602a      	str	r2, [r5, #0]
 80253e6:	461a      	mov	r2, r3
 80253e8:	f7dd f823 	bl	8002432 <_write>
 80253ec:	1c43      	adds	r3, r0, #1
 80253ee:	d102      	bne.n	80253f6 <_write_r+0x1e>
 80253f0:	682b      	ldr	r3, [r5, #0]
 80253f2:	b103      	cbz	r3, 80253f6 <_write_r+0x1e>
 80253f4:	6023      	str	r3, [r4, #0]
 80253f6:	bd38      	pop	{r3, r4, r5, pc}
 80253f8:	20002f50 	.word	0x20002f50

080253fc <__errno>:
 80253fc:	4b01      	ldr	r3, [pc, #4]	@ (8025404 <__errno+0x8>)
 80253fe:	6818      	ldr	r0, [r3, #0]
 8025400:	4770      	bx	lr
 8025402:	bf00      	nop
 8025404:	20000164 	.word	0x20000164

08025408 <__libc_init_array>:
 8025408:	b570      	push	{r4, r5, r6, lr}
 802540a:	4d0d      	ldr	r5, [pc, #52]	@ (8025440 <__libc_init_array+0x38>)
 802540c:	4c0d      	ldr	r4, [pc, #52]	@ (8025444 <__libc_init_array+0x3c>)
 802540e:	1b64      	subs	r4, r4, r5
 8025410:	10a4      	asrs	r4, r4, #2
 8025412:	2600      	movs	r6, #0
 8025414:	42a6      	cmp	r6, r4
 8025416:	d109      	bne.n	802542c <__libc_init_array+0x24>
 8025418:	4d0b      	ldr	r5, [pc, #44]	@ (8025448 <__libc_init_array+0x40>)
 802541a:	4c0c      	ldr	r4, [pc, #48]	@ (802544c <__libc_init_array+0x44>)
 802541c:	f001 f86c 	bl	80264f8 <_init>
 8025420:	1b64      	subs	r4, r4, r5
 8025422:	10a4      	asrs	r4, r4, #2
 8025424:	2600      	movs	r6, #0
 8025426:	42a6      	cmp	r6, r4
 8025428:	d105      	bne.n	8025436 <__libc_init_array+0x2e>
 802542a:	bd70      	pop	{r4, r5, r6, pc}
 802542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025430:	4798      	blx	r3
 8025432:	3601      	adds	r6, #1
 8025434:	e7ee      	b.n	8025414 <__libc_init_array+0xc>
 8025436:	f855 3b04 	ldr.w	r3, [r5], #4
 802543a:	4798      	blx	r3
 802543c:	3601      	adds	r6, #1
 802543e:	e7f2      	b.n	8025426 <__libc_init_array+0x1e>
 8025440:	08029c2c 	.word	0x08029c2c
 8025444:	08029c2c 	.word	0x08029c2c
 8025448:	08029c2c 	.word	0x08029c2c
 802544c:	08029c30 	.word	0x08029c30

08025450 <__retarget_lock_init_recursive>:
 8025450:	4770      	bx	lr

08025452 <__retarget_lock_acquire_recursive>:
 8025452:	4770      	bx	lr

08025454 <__retarget_lock_release_recursive>:
 8025454:	4770      	bx	lr
	...

08025458 <__assert_func>:
 8025458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802545a:	4614      	mov	r4, r2
 802545c:	461a      	mov	r2, r3
 802545e:	4b09      	ldr	r3, [pc, #36]	@ (8025484 <__assert_func+0x2c>)
 8025460:	681b      	ldr	r3, [r3, #0]
 8025462:	4605      	mov	r5, r0
 8025464:	68d8      	ldr	r0, [r3, #12]
 8025466:	b954      	cbnz	r4, 802547e <__assert_func+0x26>
 8025468:	4b07      	ldr	r3, [pc, #28]	@ (8025488 <__assert_func+0x30>)
 802546a:	461c      	mov	r4, r3
 802546c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025470:	9100      	str	r1, [sp, #0]
 8025472:	462b      	mov	r3, r5
 8025474:	4905      	ldr	r1, [pc, #20]	@ (802548c <__assert_func+0x34>)
 8025476:	f000 fc9b 	bl	8025db0 <fiprintf>
 802547a:	f000 fce3 	bl	8025e44 <abort>
 802547e:	4b04      	ldr	r3, [pc, #16]	@ (8025490 <__assert_func+0x38>)
 8025480:	e7f4      	b.n	802546c <__assert_func+0x14>
 8025482:	bf00      	nop
 8025484:	20000164 	.word	0x20000164
 8025488:	08029b15 	.word	0x08029b15
 802548c:	08029ae7 	.word	0x08029ae7
 8025490:	08029ada 	.word	0x08029ada

08025494 <_free_r>:
 8025494:	b538      	push	{r3, r4, r5, lr}
 8025496:	4605      	mov	r5, r0
 8025498:	2900      	cmp	r1, #0
 802549a:	d041      	beq.n	8025520 <_free_r+0x8c>
 802549c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80254a0:	1f0c      	subs	r4, r1, #4
 80254a2:	2b00      	cmp	r3, #0
 80254a4:	bfb8      	it	lt
 80254a6:	18e4      	addlt	r4, r4, r3
 80254a8:	f000 f8e8 	bl	802567c <__malloc_lock>
 80254ac:	4a1d      	ldr	r2, [pc, #116]	@ (8025524 <_free_r+0x90>)
 80254ae:	6813      	ldr	r3, [r2, #0]
 80254b0:	b933      	cbnz	r3, 80254c0 <_free_r+0x2c>
 80254b2:	6063      	str	r3, [r4, #4]
 80254b4:	6014      	str	r4, [r2, #0]
 80254b6:	4628      	mov	r0, r5
 80254b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80254bc:	f000 b8e4 	b.w	8025688 <__malloc_unlock>
 80254c0:	42a3      	cmp	r3, r4
 80254c2:	d908      	bls.n	80254d6 <_free_r+0x42>
 80254c4:	6820      	ldr	r0, [r4, #0]
 80254c6:	1821      	adds	r1, r4, r0
 80254c8:	428b      	cmp	r3, r1
 80254ca:	bf01      	itttt	eq
 80254cc:	6819      	ldreq	r1, [r3, #0]
 80254ce:	685b      	ldreq	r3, [r3, #4]
 80254d0:	1809      	addeq	r1, r1, r0
 80254d2:	6021      	streq	r1, [r4, #0]
 80254d4:	e7ed      	b.n	80254b2 <_free_r+0x1e>
 80254d6:	461a      	mov	r2, r3
 80254d8:	685b      	ldr	r3, [r3, #4]
 80254da:	b10b      	cbz	r3, 80254e0 <_free_r+0x4c>
 80254dc:	42a3      	cmp	r3, r4
 80254de:	d9fa      	bls.n	80254d6 <_free_r+0x42>
 80254e0:	6811      	ldr	r1, [r2, #0]
 80254e2:	1850      	adds	r0, r2, r1
 80254e4:	42a0      	cmp	r0, r4
 80254e6:	d10b      	bne.n	8025500 <_free_r+0x6c>
 80254e8:	6820      	ldr	r0, [r4, #0]
 80254ea:	4401      	add	r1, r0
 80254ec:	1850      	adds	r0, r2, r1
 80254ee:	4283      	cmp	r3, r0
 80254f0:	6011      	str	r1, [r2, #0]
 80254f2:	d1e0      	bne.n	80254b6 <_free_r+0x22>
 80254f4:	6818      	ldr	r0, [r3, #0]
 80254f6:	685b      	ldr	r3, [r3, #4]
 80254f8:	6053      	str	r3, [r2, #4]
 80254fa:	4408      	add	r0, r1
 80254fc:	6010      	str	r0, [r2, #0]
 80254fe:	e7da      	b.n	80254b6 <_free_r+0x22>
 8025500:	d902      	bls.n	8025508 <_free_r+0x74>
 8025502:	230c      	movs	r3, #12
 8025504:	602b      	str	r3, [r5, #0]
 8025506:	e7d6      	b.n	80254b6 <_free_r+0x22>
 8025508:	6820      	ldr	r0, [r4, #0]
 802550a:	1821      	adds	r1, r4, r0
 802550c:	428b      	cmp	r3, r1
 802550e:	bf04      	itt	eq
 8025510:	6819      	ldreq	r1, [r3, #0]
 8025512:	685b      	ldreq	r3, [r3, #4]
 8025514:	6063      	str	r3, [r4, #4]
 8025516:	bf04      	itt	eq
 8025518:	1809      	addeq	r1, r1, r0
 802551a:	6021      	streq	r1, [r4, #0]
 802551c:	6054      	str	r4, [r2, #4]
 802551e:	e7ca      	b.n	80254b6 <_free_r+0x22>
 8025520:	bd38      	pop	{r3, r4, r5, pc}
 8025522:	bf00      	nop
 8025524:	20002f5c 	.word	0x20002f5c

08025528 <malloc>:
 8025528:	4b02      	ldr	r3, [pc, #8]	@ (8025534 <malloc+0xc>)
 802552a:	4601      	mov	r1, r0
 802552c:	6818      	ldr	r0, [r3, #0]
 802552e:	f000 b825 	b.w	802557c <_malloc_r>
 8025532:	bf00      	nop
 8025534:	20000164 	.word	0x20000164

08025538 <sbrk_aligned>:
 8025538:	b570      	push	{r4, r5, r6, lr}
 802553a:	4e0f      	ldr	r6, [pc, #60]	@ (8025578 <sbrk_aligned+0x40>)
 802553c:	460c      	mov	r4, r1
 802553e:	6831      	ldr	r1, [r6, #0]
 8025540:	4605      	mov	r5, r0
 8025542:	b911      	cbnz	r1, 802554a <sbrk_aligned+0x12>
 8025544:	f000 fc60 	bl	8025e08 <_sbrk_r>
 8025548:	6030      	str	r0, [r6, #0]
 802554a:	4621      	mov	r1, r4
 802554c:	4628      	mov	r0, r5
 802554e:	f000 fc5b 	bl	8025e08 <_sbrk_r>
 8025552:	1c43      	adds	r3, r0, #1
 8025554:	d103      	bne.n	802555e <sbrk_aligned+0x26>
 8025556:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802555a:	4620      	mov	r0, r4
 802555c:	bd70      	pop	{r4, r5, r6, pc}
 802555e:	1cc4      	adds	r4, r0, #3
 8025560:	f024 0403 	bic.w	r4, r4, #3
 8025564:	42a0      	cmp	r0, r4
 8025566:	d0f8      	beq.n	802555a <sbrk_aligned+0x22>
 8025568:	1a21      	subs	r1, r4, r0
 802556a:	4628      	mov	r0, r5
 802556c:	f000 fc4c 	bl	8025e08 <_sbrk_r>
 8025570:	3001      	adds	r0, #1
 8025572:	d1f2      	bne.n	802555a <sbrk_aligned+0x22>
 8025574:	e7ef      	b.n	8025556 <sbrk_aligned+0x1e>
 8025576:	bf00      	nop
 8025578:	20002f58 	.word	0x20002f58

0802557c <_malloc_r>:
 802557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025580:	1ccd      	adds	r5, r1, #3
 8025582:	f025 0503 	bic.w	r5, r5, #3
 8025586:	3508      	adds	r5, #8
 8025588:	2d0c      	cmp	r5, #12
 802558a:	bf38      	it	cc
 802558c:	250c      	movcc	r5, #12
 802558e:	2d00      	cmp	r5, #0
 8025590:	4606      	mov	r6, r0
 8025592:	db01      	blt.n	8025598 <_malloc_r+0x1c>
 8025594:	42a9      	cmp	r1, r5
 8025596:	d904      	bls.n	80255a2 <_malloc_r+0x26>
 8025598:	230c      	movs	r3, #12
 802559a:	6033      	str	r3, [r6, #0]
 802559c:	2000      	movs	r0, #0
 802559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80255a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025678 <_malloc_r+0xfc>
 80255a6:	f000 f869 	bl	802567c <__malloc_lock>
 80255aa:	f8d8 3000 	ldr.w	r3, [r8]
 80255ae:	461c      	mov	r4, r3
 80255b0:	bb44      	cbnz	r4, 8025604 <_malloc_r+0x88>
 80255b2:	4629      	mov	r1, r5
 80255b4:	4630      	mov	r0, r6
 80255b6:	f7ff ffbf 	bl	8025538 <sbrk_aligned>
 80255ba:	1c43      	adds	r3, r0, #1
 80255bc:	4604      	mov	r4, r0
 80255be:	d158      	bne.n	8025672 <_malloc_r+0xf6>
 80255c0:	f8d8 4000 	ldr.w	r4, [r8]
 80255c4:	4627      	mov	r7, r4
 80255c6:	2f00      	cmp	r7, #0
 80255c8:	d143      	bne.n	8025652 <_malloc_r+0xd6>
 80255ca:	2c00      	cmp	r4, #0
 80255cc:	d04b      	beq.n	8025666 <_malloc_r+0xea>
 80255ce:	6823      	ldr	r3, [r4, #0]
 80255d0:	4639      	mov	r1, r7
 80255d2:	4630      	mov	r0, r6
 80255d4:	eb04 0903 	add.w	r9, r4, r3
 80255d8:	f000 fc16 	bl	8025e08 <_sbrk_r>
 80255dc:	4581      	cmp	r9, r0
 80255de:	d142      	bne.n	8025666 <_malloc_r+0xea>
 80255e0:	6821      	ldr	r1, [r4, #0]
 80255e2:	1a6d      	subs	r5, r5, r1
 80255e4:	4629      	mov	r1, r5
 80255e6:	4630      	mov	r0, r6
 80255e8:	f7ff ffa6 	bl	8025538 <sbrk_aligned>
 80255ec:	3001      	adds	r0, #1
 80255ee:	d03a      	beq.n	8025666 <_malloc_r+0xea>
 80255f0:	6823      	ldr	r3, [r4, #0]
 80255f2:	442b      	add	r3, r5
 80255f4:	6023      	str	r3, [r4, #0]
 80255f6:	f8d8 3000 	ldr.w	r3, [r8]
 80255fa:	685a      	ldr	r2, [r3, #4]
 80255fc:	bb62      	cbnz	r2, 8025658 <_malloc_r+0xdc>
 80255fe:	f8c8 7000 	str.w	r7, [r8]
 8025602:	e00f      	b.n	8025624 <_malloc_r+0xa8>
 8025604:	6822      	ldr	r2, [r4, #0]
 8025606:	1b52      	subs	r2, r2, r5
 8025608:	d420      	bmi.n	802564c <_malloc_r+0xd0>
 802560a:	2a0b      	cmp	r2, #11
 802560c:	d917      	bls.n	802563e <_malloc_r+0xc2>
 802560e:	1961      	adds	r1, r4, r5
 8025610:	42a3      	cmp	r3, r4
 8025612:	6025      	str	r5, [r4, #0]
 8025614:	bf18      	it	ne
 8025616:	6059      	strne	r1, [r3, #4]
 8025618:	6863      	ldr	r3, [r4, #4]
 802561a:	bf08      	it	eq
 802561c:	f8c8 1000 	streq.w	r1, [r8]
 8025620:	5162      	str	r2, [r4, r5]
 8025622:	604b      	str	r3, [r1, #4]
 8025624:	4630      	mov	r0, r6
 8025626:	f000 f82f 	bl	8025688 <__malloc_unlock>
 802562a:	f104 000b 	add.w	r0, r4, #11
 802562e:	1d23      	adds	r3, r4, #4
 8025630:	f020 0007 	bic.w	r0, r0, #7
 8025634:	1ac2      	subs	r2, r0, r3
 8025636:	bf1c      	itt	ne
 8025638:	1a1b      	subne	r3, r3, r0
 802563a:	50a3      	strne	r3, [r4, r2]
 802563c:	e7af      	b.n	802559e <_malloc_r+0x22>
 802563e:	6862      	ldr	r2, [r4, #4]
 8025640:	42a3      	cmp	r3, r4
 8025642:	bf0c      	ite	eq
 8025644:	f8c8 2000 	streq.w	r2, [r8]
 8025648:	605a      	strne	r2, [r3, #4]
 802564a:	e7eb      	b.n	8025624 <_malloc_r+0xa8>
 802564c:	4623      	mov	r3, r4
 802564e:	6864      	ldr	r4, [r4, #4]
 8025650:	e7ae      	b.n	80255b0 <_malloc_r+0x34>
 8025652:	463c      	mov	r4, r7
 8025654:	687f      	ldr	r7, [r7, #4]
 8025656:	e7b6      	b.n	80255c6 <_malloc_r+0x4a>
 8025658:	461a      	mov	r2, r3
 802565a:	685b      	ldr	r3, [r3, #4]
 802565c:	42a3      	cmp	r3, r4
 802565e:	d1fb      	bne.n	8025658 <_malloc_r+0xdc>
 8025660:	2300      	movs	r3, #0
 8025662:	6053      	str	r3, [r2, #4]
 8025664:	e7de      	b.n	8025624 <_malloc_r+0xa8>
 8025666:	230c      	movs	r3, #12
 8025668:	6033      	str	r3, [r6, #0]
 802566a:	4630      	mov	r0, r6
 802566c:	f000 f80c 	bl	8025688 <__malloc_unlock>
 8025670:	e794      	b.n	802559c <_malloc_r+0x20>
 8025672:	6005      	str	r5, [r0, #0]
 8025674:	e7d6      	b.n	8025624 <_malloc_r+0xa8>
 8025676:	bf00      	nop
 8025678:	20002f5c 	.word	0x20002f5c

0802567c <__malloc_lock>:
 802567c:	4801      	ldr	r0, [pc, #4]	@ (8025684 <__malloc_lock+0x8>)
 802567e:	f7ff bee8 	b.w	8025452 <__retarget_lock_acquire_recursive>
 8025682:	bf00      	nop
 8025684:	20002f54 	.word	0x20002f54

08025688 <__malloc_unlock>:
 8025688:	4801      	ldr	r0, [pc, #4]	@ (8025690 <__malloc_unlock+0x8>)
 802568a:	f7ff bee3 	b.w	8025454 <__retarget_lock_release_recursive>
 802568e:	bf00      	nop
 8025690:	20002f54 	.word	0x20002f54

08025694 <__ssputs_r>:
 8025694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025698:	688e      	ldr	r6, [r1, #8]
 802569a:	461f      	mov	r7, r3
 802569c:	42be      	cmp	r6, r7
 802569e:	680b      	ldr	r3, [r1, #0]
 80256a0:	4682      	mov	sl, r0
 80256a2:	460c      	mov	r4, r1
 80256a4:	4690      	mov	r8, r2
 80256a6:	d82d      	bhi.n	8025704 <__ssputs_r+0x70>
 80256a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80256ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80256b0:	d026      	beq.n	8025700 <__ssputs_r+0x6c>
 80256b2:	6965      	ldr	r5, [r4, #20]
 80256b4:	6909      	ldr	r1, [r1, #16]
 80256b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80256ba:	eba3 0901 	sub.w	r9, r3, r1
 80256be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80256c2:	1c7b      	adds	r3, r7, #1
 80256c4:	444b      	add	r3, r9
 80256c6:	106d      	asrs	r5, r5, #1
 80256c8:	429d      	cmp	r5, r3
 80256ca:	bf38      	it	cc
 80256cc:	461d      	movcc	r5, r3
 80256ce:	0553      	lsls	r3, r2, #21
 80256d0:	d527      	bpl.n	8025722 <__ssputs_r+0x8e>
 80256d2:	4629      	mov	r1, r5
 80256d4:	f7ff ff52 	bl	802557c <_malloc_r>
 80256d8:	4606      	mov	r6, r0
 80256da:	b360      	cbz	r0, 8025736 <__ssputs_r+0xa2>
 80256dc:	6921      	ldr	r1, [r4, #16]
 80256de:	464a      	mov	r2, r9
 80256e0:	f000 fba2 	bl	8025e28 <memcpy>
 80256e4:	89a3      	ldrh	r3, [r4, #12]
 80256e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80256ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80256ee:	81a3      	strh	r3, [r4, #12]
 80256f0:	6126      	str	r6, [r4, #16]
 80256f2:	6165      	str	r5, [r4, #20]
 80256f4:	444e      	add	r6, r9
 80256f6:	eba5 0509 	sub.w	r5, r5, r9
 80256fa:	6026      	str	r6, [r4, #0]
 80256fc:	60a5      	str	r5, [r4, #8]
 80256fe:	463e      	mov	r6, r7
 8025700:	42be      	cmp	r6, r7
 8025702:	d900      	bls.n	8025706 <__ssputs_r+0x72>
 8025704:	463e      	mov	r6, r7
 8025706:	6820      	ldr	r0, [r4, #0]
 8025708:	4632      	mov	r2, r6
 802570a:	4641      	mov	r1, r8
 802570c:	f000 fb62 	bl	8025dd4 <memmove>
 8025710:	68a3      	ldr	r3, [r4, #8]
 8025712:	1b9b      	subs	r3, r3, r6
 8025714:	60a3      	str	r3, [r4, #8]
 8025716:	6823      	ldr	r3, [r4, #0]
 8025718:	4433      	add	r3, r6
 802571a:	6023      	str	r3, [r4, #0]
 802571c:	2000      	movs	r0, #0
 802571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025722:	462a      	mov	r2, r5
 8025724:	f000 fb95 	bl	8025e52 <_realloc_r>
 8025728:	4606      	mov	r6, r0
 802572a:	2800      	cmp	r0, #0
 802572c:	d1e0      	bne.n	80256f0 <__ssputs_r+0x5c>
 802572e:	6921      	ldr	r1, [r4, #16]
 8025730:	4650      	mov	r0, sl
 8025732:	f7ff feaf 	bl	8025494 <_free_r>
 8025736:	230c      	movs	r3, #12
 8025738:	f8ca 3000 	str.w	r3, [sl]
 802573c:	89a3      	ldrh	r3, [r4, #12]
 802573e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025742:	81a3      	strh	r3, [r4, #12]
 8025744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025748:	e7e9      	b.n	802571e <__ssputs_r+0x8a>
	...

0802574c <_svfiprintf_r>:
 802574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025750:	4698      	mov	r8, r3
 8025752:	898b      	ldrh	r3, [r1, #12]
 8025754:	061b      	lsls	r3, r3, #24
 8025756:	b09d      	sub	sp, #116	@ 0x74
 8025758:	4607      	mov	r7, r0
 802575a:	460d      	mov	r5, r1
 802575c:	4614      	mov	r4, r2
 802575e:	d510      	bpl.n	8025782 <_svfiprintf_r+0x36>
 8025760:	690b      	ldr	r3, [r1, #16]
 8025762:	b973      	cbnz	r3, 8025782 <_svfiprintf_r+0x36>
 8025764:	2140      	movs	r1, #64	@ 0x40
 8025766:	f7ff ff09 	bl	802557c <_malloc_r>
 802576a:	6028      	str	r0, [r5, #0]
 802576c:	6128      	str	r0, [r5, #16]
 802576e:	b930      	cbnz	r0, 802577e <_svfiprintf_r+0x32>
 8025770:	230c      	movs	r3, #12
 8025772:	603b      	str	r3, [r7, #0]
 8025774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025778:	b01d      	add	sp, #116	@ 0x74
 802577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802577e:	2340      	movs	r3, #64	@ 0x40
 8025780:	616b      	str	r3, [r5, #20]
 8025782:	2300      	movs	r3, #0
 8025784:	9309      	str	r3, [sp, #36]	@ 0x24
 8025786:	2320      	movs	r3, #32
 8025788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802578c:	f8cd 800c 	str.w	r8, [sp, #12]
 8025790:	2330      	movs	r3, #48	@ 0x30
 8025792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025930 <_svfiprintf_r+0x1e4>
 8025796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802579a:	f04f 0901 	mov.w	r9, #1
 802579e:	4623      	mov	r3, r4
 80257a0:	469a      	mov	sl, r3
 80257a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257a6:	b10a      	cbz	r2, 80257ac <_svfiprintf_r+0x60>
 80257a8:	2a25      	cmp	r2, #37	@ 0x25
 80257aa:	d1f9      	bne.n	80257a0 <_svfiprintf_r+0x54>
 80257ac:	ebba 0b04 	subs.w	fp, sl, r4
 80257b0:	d00b      	beq.n	80257ca <_svfiprintf_r+0x7e>
 80257b2:	465b      	mov	r3, fp
 80257b4:	4622      	mov	r2, r4
 80257b6:	4629      	mov	r1, r5
 80257b8:	4638      	mov	r0, r7
 80257ba:	f7ff ff6b 	bl	8025694 <__ssputs_r>
 80257be:	3001      	adds	r0, #1
 80257c0:	f000 80a7 	beq.w	8025912 <_svfiprintf_r+0x1c6>
 80257c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80257c6:	445a      	add	r2, fp
 80257c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80257ca:	f89a 3000 	ldrb.w	r3, [sl]
 80257ce:	2b00      	cmp	r3, #0
 80257d0:	f000 809f 	beq.w	8025912 <_svfiprintf_r+0x1c6>
 80257d4:	2300      	movs	r3, #0
 80257d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80257da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80257de:	f10a 0a01 	add.w	sl, sl, #1
 80257e2:	9304      	str	r3, [sp, #16]
 80257e4:	9307      	str	r3, [sp, #28]
 80257e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80257ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80257ec:	4654      	mov	r4, sl
 80257ee:	2205      	movs	r2, #5
 80257f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80257f4:	484e      	ldr	r0, [pc, #312]	@ (8025930 <_svfiprintf_r+0x1e4>)
 80257f6:	f7da fccb 	bl	8000190 <memchr>
 80257fa:	9a04      	ldr	r2, [sp, #16]
 80257fc:	b9d8      	cbnz	r0, 8025836 <_svfiprintf_r+0xea>
 80257fe:	06d0      	lsls	r0, r2, #27
 8025800:	bf44      	itt	mi
 8025802:	2320      	movmi	r3, #32
 8025804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025808:	0711      	lsls	r1, r2, #28
 802580a:	bf44      	itt	mi
 802580c:	232b      	movmi	r3, #43	@ 0x2b
 802580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025812:	f89a 3000 	ldrb.w	r3, [sl]
 8025816:	2b2a      	cmp	r3, #42	@ 0x2a
 8025818:	d015      	beq.n	8025846 <_svfiprintf_r+0xfa>
 802581a:	9a07      	ldr	r2, [sp, #28]
 802581c:	4654      	mov	r4, sl
 802581e:	2000      	movs	r0, #0
 8025820:	f04f 0c0a 	mov.w	ip, #10
 8025824:	4621      	mov	r1, r4
 8025826:	f811 3b01 	ldrb.w	r3, [r1], #1
 802582a:	3b30      	subs	r3, #48	@ 0x30
 802582c:	2b09      	cmp	r3, #9
 802582e:	d94b      	bls.n	80258c8 <_svfiprintf_r+0x17c>
 8025830:	b1b0      	cbz	r0, 8025860 <_svfiprintf_r+0x114>
 8025832:	9207      	str	r2, [sp, #28]
 8025834:	e014      	b.n	8025860 <_svfiprintf_r+0x114>
 8025836:	eba0 0308 	sub.w	r3, r0, r8
 802583a:	fa09 f303 	lsl.w	r3, r9, r3
 802583e:	4313      	orrs	r3, r2
 8025840:	9304      	str	r3, [sp, #16]
 8025842:	46a2      	mov	sl, r4
 8025844:	e7d2      	b.n	80257ec <_svfiprintf_r+0xa0>
 8025846:	9b03      	ldr	r3, [sp, #12]
 8025848:	1d19      	adds	r1, r3, #4
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	9103      	str	r1, [sp, #12]
 802584e:	2b00      	cmp	r3, #0
 8025850:	bfbb      	ittet	lt
 8025852:	425b      	neglt	r3, r3
 8025854:	f042 0202 	orrlt.w	r2, r2, #2
 8025858:	9307      	strge	r3, [sp, #28]
 802585a:	9307      	strlt	r3, [sp, #28]
 802585c:	bfb8      	it	lt
 802585e:	9204      	strlt	r2, [sp, #16]
 8025860:	7823      	ldrb	r3, [r4, #0]
 8025862:	2b2e      	cmp	r3, #46	@ 0x2e
 8025864:	d10a      	bne.n	802587c <_svfiprintf_r+0x130>
 8025866:	7863      	ldrb	r3, [r4, #1]
 8025868:	2b2a      	cmp	r3, #42	@ 0x2a
 802586a:	d132      	bne.n	80258d2 <_svfiprintf_r+0x186>
 802586c:	9b03      	ldr	r3, [sp, #12]
 802586e:	1d1a      	adds	r2, r3, #4
 8025870:	681b      	ldr	r3, [r3, #0]
 8025872:	9203      	str	r2, [sp, #12]
 8025874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025878:	3402      	adds	r4, #2
 802587a:	9305      	str	r3, [sp, #20]
 802587c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8025934 <_svfiprintf_r+0x1e8>
 8025880:	7821      	ldrb	r1, [r4, #0]
 8025882:	2203      	movs	r2, #3
 8025884:	4650      	mov	r0, sl
 8025886:	f7da fc83 	bl	8000190 <memchr>
 802588a:	b138      	cbz	r0, 802589c <_svfiprintf_r+0x150>
 802588c:	9b04      	ldr	r3, [sp, #16]
 802588e:	eba0 000a 	sub.w	r0, r0, sl
 8025892:	2240      	movs	r2, #64	@ 0x40
 8025894:	4082      	lsls	r2, r0
 8025896:	4313      	orrs	r3, r2
 8025898:	3401      	adds	r4, #1
 802589a:	9304      	str	r3, [sp, #16]
 802589c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80258a0:	4825      	ldr	r0, [pc, #148]	@ (8025938 <_svfiprintf_r+0x1ec>)
 80258a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80258a6:	2206      	movs	r2, #6
 80258a8:	f7da fc72 	bl	8000190 <memchr>
 80258ac:	2800      	cmp	r0, #0
 80258ae:	d036      	beq.n	802591e <_svfiprintf_r+0x1d2>
 80258b0:	4b22      	ldr	r3, [pc, #136]	@ (802593c <_svfiprintf_r+0x1f0>)
 80258b2:	bb1b      	cbnz	r3, 80258fc <_svfiprintf_r+0x1b0>
 80258b4:	9b03      	ldr	r3, [sp, #12]
 80258b6:	3307      	adds	r3, #7
 80258b8:	f023 0307 	bic.w	r3, r3, #7
 80258bc:	3308      	adds	r3, #8
 80258be:	9303      	str	r3, [sp, #12]
 80258c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258c2:	4433      	add	r3, r6
 80258c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80258c6:	e76a      	b.n	802579e <_svfiprintf_r+0x52>
 80258c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80258cc:	460c      	mov	r4, r1
 80258ce:	2001      	movs	r0, #1
 80258d0:	e7a8      	b.n	8025824 <_svfiprintf_r+0xd8>
 80258d2:	2300      	movs	r3, #0
 80258d4:	3401      	adds	r4, #1
 80258d6:	9305      	str	r3, [sp, #20]
 80258d8:	4619      	mov	r1, r3
 80258da:	f04f 0c0a 	mov.w	ip, #10
 80258de:	4620      	mov	r0, r4
 80258e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80258e4:	3a30      	subs	r2, #48	@ 0x30
 80258e6:	2a09      	cmp	r2, #9
 80258e8:	d903      	bls.n	80258f2 <_svfiprintf_r+0x1a6>
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d0c6      	beq.n	802587c <_svfiprintf_r+0x130>
 80258ee:	9105      	str	r1, [sp, #20]
 80258f0:	e7c4      	b.n	802587c <_svfiprintf_r+0x130>
 80258f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80258f6:	4604      	mov	r4, r0
 80258f8:	2301      	movs	r3, #1
 80258fa:	e7f0      	b.n	80258de <_svfiprintf_r+0x192>
 80258fc:	ab03      	add	r3, sp, #12
 80258fe:	9300      	str	r3, [sp, #0]
 8025900:	462a      	mov	r2, r5
 8025902:	4b0f      	ldr	r3, [pc, #60]	@ (8025940 <_svfiprintf_r+0x1f4>)
 8025904:	a904      	add	r1, sp, #16
 8025906:	4638      	mov	r0, r7
 8025908:	f3af 8000 	nop.w
 802590c:	1c42      	adds	r2, r0, #1
 802590e:	4606      	mov	r6, r0
 8025910:	d1d6      	bne.n	80258c0 <_svfiprintf_r+0x174>
 8025912:	89ab      	ldrh	r3, [r5, #12]
 8025914:	065b      	lsls	r3, r3, #25
 8025916:	f53f af2d 	bmi.w	8025774 <_svfiprintf_r+0x28>
 802591a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802591c:	e72c      	b.n	8025778 <_svfiprintf_r+0x2c>
 802591e:	ab03      	add	r3, sp, #12
 8025920:	9300      	str	r3, [sp, #0]
 8025922:	462a      	mov	r2, r5
 8025924:	4b06      	ldr	r3, [pc, #24]	@ (8025940 <_svfiprintf_r+0x1f4>)
 8025926:	a904      	add	r1, sp, #16
 8025928:	4638      	mov	r0, r7
 802592a:	f000 f879 	bl	8025a20 <_printf_i>
 802592e:	e7ed      	b.n	802590c <_svfiprintf_r+0x1c0>
 8025930:	08029b16 	.word	0x08029b16
 8025934:	08029b1c 	.word	0x08029b1c
 8025938:	08029b20 	.word	0x08029b20
 802593c:	00000000 	.word	0x00000000
 8025940:	08025695 	.word	0x08025695

08025944 <_printf_common>:
 8025944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025948:	4616      	mov	r6, r2
 802594a:	4698      	mov	r8, r3
 802594c:	688a      	ldr	r2, [r1, #8]
 802594e:	690b      	ldr	r3, [r1, #16]
 8025950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025954:	4293      	cmp	r3, r2
 8025956:	bfb8      	it	lt
 8025958:	4613      	movlt	r3, r2
 802595a:	6033      	str	r3, [r6, #0]
 802595c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025960:	4607      	mov	r7, r0
 8025962:	460c      	mov	r4, r1
 8025964:	b10a      	cbz	r2, 802596a <_printf_common+0x26>
 8025966:	3301      	adds	r3, #1
 8025968:	6033      	str	r3, [r6, #0]
 802596a:	6823      	ldr	r3, [r4, #0]
 802596c:	0699      	lsls	r1, r3, #26
 802596e:	bf42      	ittt	mi
 8025970:	6833      	ldrmi	r3, [r6, #0]
 8025972:	3302      	addmi	r3, #2
 8025974:	6033      	strmi	r3, [r6, #0]
 8025976:	6825      	ldr	r5, [r4, #0]
 8025978:	f015 0506 	ands.w	r5, r5, #6
 802597c:	d106      	bne.n	802598c <_printf_common+0x48>
 802597e:	f104 0a19 	add.w	sl, r4, #25
 8025982:	68e3      	ldr	r3, [r4, #12]
 8025984:	6832      	ldr	r2, [r6, #0]
 8025986:	1a9b      	subs	r3, r3, r2
 8025988:	42ab      	cmp	r3, r5
 802598a:	dc26      	bgt.n	80259da <_printf_common+0x96>
 802598c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025990:	6822      	ldr	r2, [r4, #0]
 8025992:	3b00      	subs	r3, #0
 8025994:	bf18      	it	ne
 8025996:	2301      	movne	r3, #1
 8025998:	0692      	lsls	r2, r2, #26
 802599a:	d42b      	bmi.n	80259f4 <_printf_common+0xb0>
 802599c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80259a0:	4641      	mov	r1, r8
 80259a2:	4638      	mov	r0, r7
 80259a4:	47c8      	blx	r9
 80259a6:	3001      	adds	r0, #1
 80259a8:	d01e      	beq.n	80259e8 <_printf_common+0xa4>
 80259aa:	6823      	ldr	r3, [r4, #0]
 80259ac:	6922      	ldr	r2, [r4, #16]
 80259ae:	f003 0306 	and.w	r3, r3, #6
 80259b2:	2b04      	cmp	r3, #4
 80259b4:	bf02      	ittt	eq
 80259b6:	68e5      	ldreq	r5, [r4, #12]
 80259b8:	6833      	ldreq	r3, [r6, #0]
 80259ba:	1aed      	subeq	r5, r5, r3
 80259bc:	68a3      	ldr	r3, [r4, #8]
 80259be:	bf0c      	ite	eq
 80259c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80259c4:	2500      	movne	r5, #0
 80259c6:	4293      	cmp	r3, r2
 80259c8:	bfc4      	itt	gt
 80259ca:	1a9b      	subgt	r3, r3, r2
 80259cc:	18ed      	addgt	r5, r5, r3
 80259ce:	2600      	movs	r6, #0
 80259d0:	341a      	adds	r4, #26
 80259d2:	42b5      	cmp	r5, r6
 80259d4:	d11a      	bne.n	8025a0c <_printf_common+0xc8>
 80259d6:	2000      	movs	r0, #0
 80259d8:	e008      	b.n	80259ec <_printf_common+0xa8>
 80259da:	2301      	movs	r3, #1
 80259dc:	4652      	mov	r2, sl
 80259de:	4641      	mov	r1, r8
 80259e0:	4638      	mov	r0, r7
 80259e2:	47c8      	blx	r9
 80259e4:	3001      	adds	r0, #1
 80259e6:	d103      	bne.n	80259f0 <_printf_common+0xac>
 80259e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80259ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80259f0:	3501      	adds	r5, #1
 80259f2:	e7c6      	b.n	8025982 <_printf_common+0x3e>
 80259f4:	18e1      	adds	r1, r4, r3
 80259f6:	1c5a      	adds	r2, r3, #1
 80259f8:	2030      	movs	r0, #48	@ 0x30
 80259fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80259fe:	4422      	add	r2, r4
 8025a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025a08:	3302      	adds	r3, #2
 8025a0a:	e7c7      	b.n	802599c <_printf_common+0x58>
 8025a0c:	2301      	movs	r3, #1
 8025a0e:	4622      	mov	r2, r4
 8025a10:	4641      	mov	r1, r8
 8025a12:	4638      	mov	r0, r7
 8025a14:	47c8      	blx	r9
 8025a16:	3001      	adds	r0, #1
 8025a18:	d0e6      	beq.n	80259e8 <_printf_common+0xa4>
 8025a1a:	3601      	adds	r6, #1
 8025a1c:	e7d9      	b.n	80259d2 <_printf_common+0x8e>
	...

08025a20 <_printf_i>:
 8025a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025a24:	7e0f      	ldrb	r7, [r1, #24]
 8025a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025a28:	2f78      	cmp	r7, #120	@ 0x78
 8025a2a:	4691      	mov	r9, r2
 8025a2c:	4680      	mov	r8, r0
 8025a2e:	460c      	mov	r4, r1
 8025a30:	469a      	mov	sl, r3
 8025a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025a36:	d807      	bhi.n	8025a48 <_printf_i+0x28>
 8025a38:	2f62      	cmp	r7, #98	@ 0x62
 8025a3a:	d80a      	bhi.n	8025a52 <_printf_i+0x32>
 8025a3c:	2f00      	cmp	r7, #0
 8025a3e:	f000 80d2 	beq.w	8025be6 <_printf_i+0x1c6>
 8025a42:	2f58      	cmp	r7, #88	@ 0x58
 8025a44:	f000 80b9 	beq.w	8025bba <_printf_i+0x19a>
 8025a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025a50:	e03a      	b.n	8025ac8 <_printf_i+0xa8>
 8025a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025a56:	2b15      	cmp	r3, #21
 8025a58:	d8f6      	bhi.n	8025a48 <_printf_i+0x28>
 8025a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8025a60 <_printf_i+0x40>)
 8025a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025a60:	08025ab9 	.word	0x08025ab9
 8025a64:	08025acd 	.word	0x08025acd
 8025a68:	08025a49 	.word	0x08025a49
 8025a6c:	08025a49 	.word	0x08025a49
 8025a70:	08025a49 	.word	0x08025a49
 8025a74:	08025a49 	.word	0x08025a49
 8025a78:	08025acd 	.word	0x08025acd
 8025a7c:	08025a49 	.word	0x08025a49
 8025a80:	08025a49 	.word	0x08025a49
 8025a84:	08025a49 	.word	0x08025a49
 8025a88:	08025a49 	.word	0x08025a49
 8025a8c:	08025bcd 	.word	0x08025bcd
 8025a90:	08025af7 	.word	0x08025af7
 8025a94:	08025b87 	.word	0x08025b87
 8025a98:	08025a49 	.word	0x08025a49
 8025a9c:	08025a49 	.word	0x08025a49
 8025aa0:	08025bef 	.word	0x08025bef
 8025aa4:	08025a49 	.word	0x08025a49
 8025aa8:	08025af7 	.word	0x08025af7
 8025aac:	08025a49 	.word	0x08025a49
 8025ab0:	08025a49 	.word	0x08025a49
 8025ab4:	08025b8f 	.word	0x08025b8f
 8025ab8:	6833      	ldr	r3, [r6, #0]
 8025aba:	1d1a      	adds	r2, r3, #4
 8025abc:	681b      	ldr	r3, [r3, #0]
 8025abe:	6032      	str	r2, [r6, #0]
 8025ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025ac8:	2301      	movs	r3, #1
 8025aca:	e09d      	b.n	8025c08 <_printf_i+0x1e8>
 8025acc:	6833      	ldr	r3, [r6, #0]
 8025ace:	6820      	ldr	r0, [r4, #0]
 8025ad0:	1d19      	adds	r1, r3, #4
 8025ad2:	6031      	str	r1, [r6, #0]
 8025ad4:	0606      	lsls	r6, r0, #24
 8025ad6:	d501      	bpl.n	8025adc <_printf_i+0xbc>
 8025ad8:	681d      	ldr	r5, [r3, #0]
 8025ada:	e003      	b.n	8025ae4 <_printf_i+0xc4>
 8025adc:	0645      	lsls	r5, r0, #25
 8025ade:	d5fb      	bpl.n	8025ad8 <_printf_i+0xb8>
 8025ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025ae4:	2d00      	cmp	r5, #0
 8025ae6:	da03      	bge.n	8025af0 <_printf_i+0xd0>
 8025ae8:	232d      	movs	r3, #45	@ 0x2d
 8025aea:	426d      	negs	r5, r5
 8025aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025af0:	4859      	ldr	r0, [pc, #356]	@ (8025c58 <_printf_i+0x238>)
 8025af2:	230a      	movs	r3, #10
 8025af4:	e011      	b.n	8025b1a <_printf_i+0xfa>
 8025af6:	6821      	ldr	r1, [r4, #0]
 8025af8:	6833      	ldr	r3, [r6, #0]
 8025afa:	0608      	lsls	r0, r1, #24
 8025afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8025b00:	d402      	bmi.n	8025b08 <_printf_i+0xe8>
 8025b02:	0649      	lsls	r1, r1, #25
 8025b04:	bf48      	it	mi
 8025b06:	b2ad      	uxthmi	r5, r5
 8025b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8025b0a:	4853      	ldr	r0, [pc, #332]	@ (8025c58 <_printf_i+0x238>)
 8025b0c:	6033      	str	r3, [r6, #0]
 8025b0e:	bf14      	ite	ne
 8025b10:	230a      	movne	r3, #10
 8025b12:	2308      	moveq	r3, #8
 8025b14:	2100      	movs	r1, #0
 8025b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025b1a:	6866      	ldr	r6, [r4, #4]
 8025b1c:	60a6      	str	r6, [r4, #8]
 8025b1e:	2e00      	cmp	r6, #0
 8025b20:	bfa2      	ittt	ge
 8025b22:	6821      	ldrge	r1, [r4, #0]
 8025b24:	f021 0104 	bicge.w	r1, r1, #4
 8025b28:	6021      	strge	r1, [r4, #0]
 8025b2a:	b90d      	cbnz	r5, 8025b30 <_printf_i+0x110>
 8025b2c:	2e00      	cmp	r6, #0
 8025b2e:	d04b      	beq.n	8025bc8 <_printf_i+0x1a8>
 8025b30:	4616      	mov	r6, r2
 8025b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8025b36:	fb03 5711 	mls	r7, r3, r1, r5
 8025b3a:	5dc7      	ldrb	r7, [r0, r7]
 8025b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025b40:	462f      	mov	r7, r5
 8025b42:	42bb      	cmp	r3, r7
 8025b44:	460d      	mov	r5, r1
 8025b46:	d9f4      	bls.n	8025b32 <_printf_i+0x112>
 8025b48:	2b08      	cmp	r3, #8
 8025b4a:	d10b      	bne.n	8025b64 <_printf_i+0x144>
 8025b4c:	6823      	ldr	r3, [r4, #0]
 8025b4e:	07df      	lsls	r7, r3, #31
 8025b50:	d508      	bpl.n	8025b64 <_printf_i+0x144>
 8025b52:	6923      	ldr	r3, [r4, #16]
 8025b54:	6861      	ldr	r1, [r4, #4]
 8025b56:	4299      	cmp	r1, r3
 8025b58:	bfde      	ittt	le
 8025b5a:	2330      	movle	r3, #48	@ 0x30
 8025b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025b60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8025b64:	1b92      	subs	r2, r2, r6
 8025b66:	6122      	str	r2, [r4, #16]
 8025b68:	f8cd a000 	str.w	sl, [sp]
 8025b6c:	464b      	mov	r3, r9
 8025b6e:	aa03      	add	r2, sp, #12
 8025b70:	4621      	mov	r1, r4
 8025b72:	4640      	mov	r0, r8
 8025b74:	f7ff fee6 	bl	8025944 <_printf_common>
 8025b78:	3001      	adds	r0, #1
 8025b7a:	d14a      	bne.n	8025c12 <_printf_i+0x1f2>
 8025b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b80:	b004      	add	sp, #16
 8025b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b86:	6823      	ldr	r3, [r4, #0]
 8025b88:	f043 0320 	orr.w	r3, r3, #32
 8025b8c:	6023      	str	r3, [r4, #0]
 8025b8e:	4833      	ldr	r0, [pc, #204]	@ (8025c5c <_printf_i+0x23c>)
 8025b90:	2778      	movs	r7, #120	@ 0x78
 8025b92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025b96:	6823      	ldr	r3, [r4, #0]
 8025b98:	6831      	ldr	r1, [r6, #0]
 8025b9a:	061f      	lsls	r7, r3, #24
 8025b9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8025ba0:	d402      	bmi.n	8025ba8 <_printf_i+0x188>
 8025ba2:	065f      	lsls	r7, r3, #25
 8025ba4:	bf48      	it	mi
 8025ba6:	b2ad      	uxthmi	r5, r5
 8025ba8:	6031      	str	r1, [r6, #0]
 8025baa:	07d9      	lsls	r1, r3, #31
 8025bac:	bf44      	itt	mi
 8025bae:	f043 0320 	orrmi.w	r3, r3, #32
 8025bb2:	6023      	strmi	r3, [r4, #0]
 8025bb4:	b11d      	cbz	r5, 8025bbe <_printf_i+0x19e>
 8025bb6:	2310      	movs	r3, #16
 8025bb8:	e7ac      	b.n	8025b14 <_printf_i+0xf4>
 8025bba:	4827      	ldr	r0, [pc, #156]	@ (8025c58 <_printf_i+0x238>)
 8025bbc:	e7e9      	b.n	8025b92 <_printf_i+0x172>
 8025bbe:	6823      	ldr	r3, [r4, #0]
 8025bc0:	f023 0320 	bic.w	r3, r3, #32
 8025bc4:	6023      	str	r3, [r4, #0]
 8025bc6:	e7f6      	b.n	8025bb6 <_printf_i+0x196>
 8025bc8:	4616      	mov	r6, r2
 8025bca:	e7bd      	b.n	8025b48 <_printf_i+0x128>
 8025bcc:	6833      	ldr	r3, [r6, #0]
 8025bce:	6825      	ldr	r5, [r4, #0]
 8025bd0:	6961      	ldr	r1, [r4, #20]
 8025bd2:	1d18      	adds	r0, r3, #4
 8025bd4:	6030      	str	r0, [r6, #0]
 8025bd6:	062e      	lsls	r6, r5, #24
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	d501      	bpl.n	8025be0 <_printf_i+0x1c0>
 8025bdc:	6019      	str	r1, [r3, #0]
 8025bde:	e002      	b.n	8025be6 <_printf_i+0x1c6>
 8025be0:	0668      	lsls	r0, r5, #25
 8025be2:	d5fb      	bpl.n	8025bdc <_printf_i+0x1bc>
 8025be4:	8019      	strh	r1, [r3, #0]
 8025be6:	2300      	movs	r3, #0
 8025be8:	6123      	str	r3, [r4, #16]
 8025bea:	4616      	mov	r6, r2
 8025bec:	e7bc      	b.n	8025b68 <_printf_i+0x148>
 8025bee:	6833      	ldr	r3, [r6, #0]
 8025bf0:	1d1a      	adds	r2, r3, #4
 8025bf2:	6032      	str	r2, [r6, #0]
 8025bf4:	681e      	ldr	r6, [r3, #0]
 8025bf6:	6862      	ldr	r2, [r4, #4]
 8025bf8:	2100      	movs	r1, #0
 8025bfa:	4630      	mov	r0, r6
 8025bfc:	f7da fac8 	bl	8000190 <memchr>
 8025c00:	b108      	cbz	r0, 8025c06 <_printf_i+0x1e6>
 8025c02:	1b80      	subs	r0, r0, r6
 8025c04:	6060      	str	r0, [r4, #4]
 8025c06:	6863      	ldr	r3, [r4, #4]
 8025c08:	6123      	str	r3, [r4, #16]
 8025c0a:	2300      	movs	r3, #0
 8025c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025c10:	e7aa      	b.n	8025b68 <_printf_i+0x148>
 8025c12:	6923      	ldr	r3, [r4, #16]
 8025c14:	4632      	mov	r2, r6
 8025c16:	4649      	mov	r1, r9
 8025c18:	4640      	mov	r0, r8
 8025c1a:	47d0      	blx	sl
 8025c1c:	3001      	adds	r0, #1
 8025c1e:	d0ad      	beq.n	8025b7c <_printf_i+0x15c>
 8025c20:	6823      	ldr	r3, [r4, #0]
 8025c22:	079b      	lsls	r3, r3, #30
 8025c24:	d413      	bmi.n	8025c4e <_printf_i+0x22e>
 8025c26:	68e0      	ldr	r0, [r4, #12]
 8025c28:	9b03      	ldr	r3, [sp, #12]
 8025c2a:	4298      	cmp	r0, r3
 8025c2c:	bfb8      	it	lt
 8025c2e:	4618      	movlt	r0, r3
 8025c30:	e7a6      	b.n	8025b80 <_printf_i+0x160>
 8025c32:	2301      	movs	r3, #1
 8025c34:	4632      	mov	r2, r6
 8025c36:	4649      	mov	r1, r9
 8025c38:	4640      	mov	r0, r8
 8025c3a:	47d0      	blx	sl
 8025c3c:	3001      	adds	r0, #1
 8025c3e:	d09d      	beq.n	8025b7c <_printf_i+0x15c>
 8025c40:	3501      	adds	r5, #1
 8025c42:	68e3      	ldr	r3, [r4, #12]
 8025c44:	9903      	ldr	r1, [sp, #12]
 8025c46:	1a5b      	subs	r3, r3, r1
 8025c48:	42ab      	cmp	r3, r5
 8025c4a:	dcf2      	bgt.n	8025c32 <_printf_i+0x212>
 8025c4c:	e7eb      	b.n	8025c26 <_printf_i+0x206>
 8025c4e:	2500      	movs	r5, #0
 8025c50:	f104 0619 	add.w	r6, r4, #25
 8025c54:	e7f5      	b.n	8025c42 <_printf_i+0x222>
 8025c56:	bf00      	nop
 8025c58:	08029b27 	.word	0x08029b27
 8025c5c:	08029b38 	.word	0x08029b38

08025c60 <__sflush_r>:
 8025c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c66:	0716      	lsls	r6, r2, #28
 8025c68:	4605      	mov	r5, r0
 8025c6a:	460c      	mov	r4, r1
 8025c6c:	d454      	bmi.n	8025d18 <__sflush_r+0xb8>
 8025c6e:	684b      	ldr	r3, [r1, #4]
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	dc02      	bgt.n	8025c7a <__sflush_r+0x1a>
 8025c74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025c76:	2b00      	cmp	r3, #0
 8025c78:	dd48      	ble.n	8025d0c <__sflush_r+0xac>
 8025c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025c7c:	2e00      	cmp	r6, #0
 8025c7e:	d045      	beq.n	8025d0c <__sflush_r+0xac>
 8025c80:	2300      	movs	r3, #0
 8025c82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025c86:	682f      	ldr	r7, [r5, #0]
 8025c88:	6a21      	ldr	r1, [r4, #32]
 8025c8a:	602b      	str	r3, [r5, #0]
 8025c8c:	d030      	beq.n	8025cf0 <__sflush_r+0x90>
 8025c8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025c90:	89a3      	ldrh	r3, [r4, #12]
 8025c92:	0759      	lsls	r1, r3, #29
 8025c94:	d505      	bpl.n	8025ca2 <__sflush_r+0x42>
 8025c96:	6863      	ldr	r3, [r4, #4]
 8025c98:	1ad2      	subs	r2, r2, r3
 8025c9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025c9c:	b10b      	cbz	r3, 8025ca2 <__sflush_r+0x42>
 8025c9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025ca0:	1ad2      	subs	r2, r2, r3
 8025ca2:	2300      	movs	r3, #0
 8025ca4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025ca6:	6a21      	ldr	r1, [r4, #32]
 8025ca8:	4628      	mov	r0, r5
 8025caa:	47b0      	blx	r6
 8025cac:	1c43      	adds	r3, r0, #1
 8025cae:	89a3      	ldrh	r3, [r4, #12]
 8025cb0:	d106      	bne.n	8025cc0 <__sflush_r+0x60>
 8025cb2:	6829      	ldr	r1, [r5, #0]
 8025cb4:	291d      	cmp	r1, #29
 8025cb6:	d82b      	bhi.n	8025d10 <__sflush_r+0xb0>
 8025cb8:	4a28      	ldr	r2, [pc, #160]	@ (8025d5c <__sflush_r+0xfc>)
 8025cba:	410a      	asrs	r2, r1
 8025cbc:	07d6      	lsls	r6, r2, #31
 8025cbe:	d427      	bmi.n	8025d10 <__sflush_r+0xb0>
 8025cc0:	2200      	movs	r2, #0
 8025cc2:	6062      	str	r2, [r4, #4]
 8025cc4:	04d9      	lsls	r1, r3, #19
 8025cc6:	6922      	ldr	r2, [r4, #16]
 8025cc8:	6022      	str	r2, [r4, #0]
 8025cca:	d504      	bpl.n	8025cd6 <__sflush_r+0x76>
 8025ccc:	1c42      	adds	r2, r0, #1
 8025cce:	d101      	bne.n	8025cd4 <__sflush_r+0x74>
 8025cd0:	682b      	ldr	r3, [r5, #0]
 8025cd2:	b903      	cbnz	r3, 8025cd6 <__sflush_r+0x76>
 8025cd4:	6560      	str	r0, [r4, #84]	@ 0x54
 8025cd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025cd8:	602f      	str	r7, [r5, #0]
 8025cda:	b1b9      	cbz	r1, 8025d0c <__sflush_r+0xac>
 8025cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025ce0:	4299      	cmp	r1, r3
 8025ce2:	d002      	beq.n	8025cea <__sflush_r+0x8a>
 8025ce4:	4628      	mov	r0, r5
 8025ce6:	f7ff fbd5 	bl	8025494 <_free_r>
 8025cea:	2300      	movs	r3, #0
 8025cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8025cee:	e00d      	b.n	8025d0c <__sflush_r+0xac>
 8025cf0:	2301      	movs	r3, #1
 8025cf2:	4628      	mov	r0, r5
 8025cf4:	47b0      	blx	r6
 8025cf6:	4602      	mov	r2, r0
 8025cf8:	1c50      	adds	r0, r2, #1
 8025cfa:	d1c9      	bne.n	8025c90 <__sflush_r+0x30>
 8025cfc:	682b      	ldr	r3, [r5, #0]
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d0c6      	beq.n	8025c90 <__sflush_r+0x30>
 8025d02:	2b1d      	cmp	r3, #29
 8025d04:	d001      	beq.n	8025d0a <__sflush_r+0xaa>
 8025d06:	2b16      	cmp	r3, #22
 8025d08:	d11d      	bne.n	8025d46 <__sflush_r+0xe6>
 8025d0a:	602f      	str	r7, [r5, #0]
 8025d0c:	2000      	movs	r0, #0
 8025d0e:	e021      	b.n	8025d54 <__sflush_r+0xf4>
 8025d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025d14:	b21b      	sxth	r3, r3
 8025d16:	e01a      	b.n	8025d4e <__sflush_r+0xee>
 8025d18:	690f      	ldr	r7, [r1, #16]
 8025d1a:	2f00      	cmp	r7, #0
 8025d1c:	d0f6      	beq.n	8025d0c <__sflush_r+0xac>
 8025d1e:	0793      	lsls	r3, r2, #30
 8025d20:	680e      	ldr	r6, [r1, #0]
 8025d22:	bf08      	it	eq
 8025d24:	694b      	ldreq	r3, [r1, #20]
 8025d26:	600f      	str	r7, [r1, #0]
 8025d28:	bf18      	it	ne
 8025d2a:	2300      	movne	r3, #0
 8025d2c:	1bf6      	subs	r6, r6, r7
 8025d2e:	608b      	str	r3, [r1, #8]
 8025d30:	2e00      	cmp	r6, #0
 8025d32:	ddeb      	ble.n	8025d0c <__sflush_r+0xac>
 8025d34:	6a21      	ldr	r1, [r4, #32]
 8025d36:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8025d3a:	4633      	mov	r3, r6
 8025d3c:	463a      	mov	r2, r7
 8025d3e:	4628      	mov	r0, r5
 8025d40:	47e0      	blx	ip
 8025d42:	2800      	cmp	r0, #0
 8025d44:	dc07      	bgt.n	8025d56 <__sflush_r+0xf6>
 8025d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025d4e:	81a3      	strh	r3, [r4, #12]
 8025d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d56:	4407      	add	r7, r0
 8025d58:	1a36      	subs	r6, r6, r0
 8025d5a:	e7e9      	b.n	8025d30 <__sflush_r+0xd0>
 8025d5c:	dfbffffe 	.word	0xdfbffffe

08025d60 <_fflush_r>:
 8025d60:	b538      	push	{r3, r4, r5, lr}
 8025d62:	690b      	ldr	r3, [r1, #16]
 8025d64:	4605      	mov	r5, r0
 8025d66:	460c      	mov	r4, r1
 8025d68:	b913      	cbnz	r3, 8025d70 <_fflush_r+0x10>
 8025d6a:	2500      	movs	r5, #0
 8025d6c:	4628      	mov	r0, r5
 8025d6e:	bd38      	pop	{r3, r4, r5, pc}
 8025d70:	b118      	cbz	r0, 8025d7a <_fflush_r+0x1a>
 8025d72:	6a03      	ldr	r3, [r0, #32]
 8025d74:	b90b      	cbnz	r3, 8025d7a <_fflush_r+0x1a>
 8025d76:	f7ff f9a5 	bl	80250c4 <__sinit>
 8025d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d0f3      	beq.n	8025d6a <_fflush_r+0xa>
 8025d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025d84:	07d0      	lsls	r0, r2, #31
 8025d86:	d404      	bmi.n	8025d92 <_fflush_r+0x32>
 8025d88:	0599      	lsls	r1, r3, #22
 8025d8a:	d402      	bmi.n	8025d92 <_fflush_r+0x32>
 8025d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025d8e:	f7ff fb60 	bl	8025452 <__retarget_lock_acquire_recursive>
 8025d92:	4628      	mov	r0, r5
 8025d94:	4621      	mov	r1, r4
 8025d96:	f7ff ff63 	bl	8025c60 <__sflush_r>
 8025d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025d9c:	07da      	lsls	r2, r3, #31
 8025d9e:	4605      	mov	r5, r0
 8025da0:	d4e4      	bmi.n	8025d6c <_fflush_r+0xc>
 8025da2:	89a3      	ldrh	r3, [r4, #12]
 8025da4:	059b      	lsls	r3, r3, #22
 8025da6:	d4e1      	bmi.n	8025d6c <_fflush_r+0xc>
 8025da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025daa:	f7ff fb53 	bl	8025454 <__retarget_lock_release_recursive>
 8025dae:	e7dd      	b.n	8025d6c <_fflush_r+0xc>

08025db0 <fiprintf>:
 8025db0:	b40e      	push	{r1, r2, r3}
 8025db2:	b503      	push	{r0, r1, lr}
 8025db4:	4601      	mov	r1, r0
 8025db6:	ab03      	add	r3, sp, #12
 8025db8:	4805      	ldr	r0, [pc, #20]	@ (8025dd0 <fiprintf+0x20>)
 8025dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8025dbe:	6800      	ldr	r0, [r0, #0]
 8025dc0:	9301      	str	r3, [sp, #4]
 8025dc2:	f000 f89b 	bl	8025efc <_vfiprintf_r>
 8025dc6:	b002      	add	sp, #8
 8025dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8025dcc:	b003      	add	sp, #12
 8025dce:	4770      	bx	lr
 8025dd0:	20000164 	.word	0x20000164

08025dd4 <memmove>:
 8025dd4:	4288      	cmp	r0, r1
 8025dd6:	b510      	push	{r4, lr}
 8025dd8:	eb01 0402 	add.w	r4, r1, r2
 8025ddc:	d902      	bls.n	8025de4 <memmove+0x10>
 8025dde:	4284      	cmp	r4, r0
 8025de0:	4623      	mov	r3, r4
 8025de2:	d807      	bhi.n	8025df4 <memmove+0x20>
 8025de4:	1e43      	subs	r3, r0, #1
 8025de6:	42a1      	cmp	r1, r4
 8025de8:	d008      	beq.n	8025dfc <memmove+0x28>
 8025dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025df2:	e7f8      	b.n	8025de6 <memmove+0x12>
 8025df4:	4402      	add	r2, r0
 8025df6:	4601      	mov	r1, r0
 8025df8:	428a      	cmp	r2, r1
 8025dfa:	d100      	bne.n	8025dfe <memmove+0x2a>
 8025dfc:	bd10      	pop	{r4, pc}
 8025dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025e06:	e7f7      	b.n	8025df8 <memmove+0x24>

08025e08 <_sbrk_r>:
 8025e08:	b538      	push	{r3, r4, r5, lr}
 8025e0a:	4d06      	ldr	r5, [pc, #24]	@ (8025e24 <_sbrk_r+0x1c>)
 8025e0c:	2300      	movs	r3, #0
 8025e0e:	4604      	mov	r4, r0
 8025e10:	4608      	mov	r0, r1
 8025e12:	602b      	str	r3, [r5, #0]
 8025e14:	f7dc fb5a 	bl	80024cc <_sbrk>
 8025e18:	1c43      	adds	r3, r0, #1
 8025e1a:	d102      	bne.n	8025e22 <_sbrk_r+0x1a>
 8025e1c:	682b      	ldr	r3, [r5, #0]
 8025e1e:	b103      	cbz	r3, 8025e22 <_sbrk_r+0x1a>
 8025e20:	6023      	str	r3, [r4, #0]
 8025e22:	bd38      	pop	{r3, r4, r5, pc}
 8025e24:	20002f50 	.word	0x20002f50

08025e28 <memcpy>:
 8025e28:	440a      	add	r2, r1
 8025e2a:	4291      	cmp	r1, r2
 8025e2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8025e30:	d100      	bne.n	8025e34 <memcpy+0xc>
 8025e32:	4770      	bx	lr
 8025e34:	b510      	push	{r4, lr}
 8025e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025e3e:	4291      	cmp	r1, r2
 8025e40:	d1f9      	bne.n	8025e36 <memcpy+0xe>
 8025e42:	bd10      	pop	{r4, pc}

08025e44 <abort>:
 8025e44:	b508      	push	{r3, lr}
 8025e46:	2006      	movs	r0, #6
 8025e48:	f000 fa2c 	bl	80262a4 <raise>
 8025e4c:	2001      	movs	r0, #1
 8025e4e:	f7dc fac8 	bl	80023e2 <_exit>

08025e52 <_realloc_r>:
 8025e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e56:	4680      	mov	r8, r0
 8025e58:	4615      	mov	r5, r2
 8025e5a:	460c      	mov	r4, r1
 8025e5c:	b921      	cbnz	r1, 8025e68 <_realloc_r+0x16>
 8025e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025e62:	4611      	mov	r1, r2
 8025e64:	f7ff bb8a 	b.w	802557c <_malloc_r>
 8025e68:	b92a      	cbnz	r2, 8025e76 <_realloc_r+0x24>
 8025e6a:	f7ff fb13 	bl	8025494 <_free_r>
 8025e6e:	2400      	movs	r4, #0
 8025e70:	4620      	mov	r0, r4
 8025e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e76:	f000 fa31 	bl	80262dc <_malloc_usable_size_r>
 8025e7a:	4285      	cmp	r5, r0
 8025e7c:	4606      	mov	r6, r0
 8025e7e:	d802      	bhi.n	8025e86 <_realloc_r+0x34>
 8025e80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8025e84:	d8f4      	bhi.n	8025e70 <_realloc_r+0x1e>
 8025e86:	4629      	mov	r1, r5
 8025e88:	4640      	mov	r0, r8
 8025e8a:	f7ff fb77 	bl	802557c <_malloc_r>
 8025e8e:	4607      	mov	r7, r0
 8025e90:	2800      	cmp	r0, #0
 8025e92:	d0ec      	beq.n	8025e6e <_realloc_r+0x1c>
 8025e94:	42b5      	cmp	r5, r6
 8025e96:	462a      	mov	r2, r5
 8025e98:	4621      	mov	r1, r4
 8025e9a:	bf28      	it	cs
 8025e9c:	4632      	movcs	r2, r6
 8025e9e:	f7ff ffc3 	bl	8025e28 <memcpy>
 8025ea2:	4621      	mov	r1, r4
 8025ea4:	4640      	mov	r0, r8
 8025ea6:	f7ff faf5 	bl	8025494 <_free_r>
 8025eaa:	463c      	mov	r4, r7
 8025eac:	e7e0      	b.n	8025e70 <_realloc_r+0x1e>

08025eae <__sfputc_r>:
 8025eae:	6893      	ldr	r3, [r2, #8]
 8025eb0:	3b01      	subs	r3, #1
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	b410      	push	{r4}
 8025eb6:	6093      	str	r3, [r2, #8]
 8025eb8:	da07      	bge.n	8025eca <__sfputc_r+0x1c>
 8025eba:	6994      	ldr	r4, [r2, #24]
 8025ebc:	42a3      	cmp	r3, r4
 8025ebe:	db01      	blt.n	8025ec4 <__sfputc_r+0x16>
 8025ec0:	290a      	cmp	r1, #10
 8025ec2:	d102      	bne.n	8025eca <__sfputc_r+0x1c>
 8025ec4:	bc10      	pop	{r4}
 8025ec6:	f000 b931 	b.w	802612c <__swbuf_r>
 8025eca:	6813      	ldr	r3, [r2, #0]
 8025ecc:	1c58      	adds	r0, r3, #1
 8025ece:	6010      	str	r0, [r2, #0]
 8025ed0:	7019      	strb	r1, [r3, #0]
 8025ed2:	4608      	mov	r0, r1
 8025ed4:	bc10      	pop	{r4}
 8025ed6:	4770      	bx	lr

08025ed8 <__sfputs_r>:
 8025ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025eda:	4606      	mov	r6, r0
 8025edc:	460f      	mov	r7, r1
 8025ede:	4614      	mov	r4, r2
 8025ee0:	18d5      	adds	r5, r2, r3
 8025ee2:	42ac      	cmp	r4, r5
 8025ee4:	d101      	bne.n	8025eea <__sfputs_r+0x12>
 8025ee6:	2000      	movs	r0, #0
 8025ee8:	e007      	b.n	8025efa <__sfputs_r+0x22>
 8025eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025eee:	463a      	mov	r2, r7
 8025ef0:	4630      	mov	r0, r6
 8025ef2:	f7ff ffdc 	bl	8025eae <__sfputc_r>
 8025ef6:	1c43      	adds	r3, r0, #1
 8025ef8:	d1f3      	bne.n	8025ee2 <__sfputs_r+0xa>
 8025efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025efc <_vfiprintf_r>:
 8025efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f00:	460d      	mov	r5, r1
 8025f02:	b09d      	sub	sp, #116	@ 0x74
 8025f04:	4614      	mov	r4, r2
 8025f06:	4698      	mov	r8, r3
 8025f08:	4606      	mov	r6, r0
 8025f0a:	b118      	cbz	r0, 8025f14 <_vfiprintf_r+0x18>
 8025f0c:	6a03      	ldr	r3, [r0, #32]
 8025f0e:	b90b      	cbnz	r3, 8025f14 <_vfiprintf_r+0x18>
 8025f10:	f7ff f8d8 	bl	80250c4 <__sinit>
 8025f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025f16:	07d9      	lsls	r1, r3, #31
 8025f18:	d405      	bmi.n	8025f26 <_vfiprintf_r+0x2a>
 8025f1a:	89ab      	ldrh	r3, [r5, #12]
 8025f1c:	059a      	lsls	r2, r3, #22
 8025f1e:	d402      	bmi.n	8025f26 <_vfiprintf_r+0x2a>
 8025f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025f22:	f7ff fa96 	bl	8025452 <__retarget_lock_acquire_recursive>
 8025f26:	89ab      	ldrh	r3, [r5, #12]
 8025f28:	071b      	lsls	r3, r3, #28
 8025f2a:	d501      	bpl.n	8025f30 <_vfiprintf_r+0x34>
 8025f2c:	692b      	ldr	r3, [r5, #16]
 8025f2e:	b99b      	cbnz	r3, 8025f58 <_vfiprintf_r+0x5c>
 8025f30:	4629      	mov	r1, r5
 8025f32:	4630      	mov	r0, r6
 8025f34:	f000 f938 	bl	80261a8 <__swsetup_r>
 8025f38:	b170      	cbz	r0, 8025f58 <_vfiprintf_r+0x5c>
 8025f3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025f3c:	07dc      	lsls	r4, r3, #31
 8025f3e:	d504      	bpl.n	8025f4a <_vfiprintf_r+0x4e>
 8025f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025f44:	b01d      	add	sp, #116	@ 0x74
 8025f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f4a:	89ab      	ldrh	r3, [r5, #12]
 8025f4c:	0598      	lsls	r0, r3, #22
 8025f4e:	d4f7      	bmi.n	8025f40 <_vfiprintf_r+0x44>
 8025f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025f52:	f7ff fa7f 	bl	8025454 <__retarget_lock_release_recursive>
 8025f56:	e7f3      	b.n	8025f40 <_vfiprintf_r+0x44>
 8025f58:	2300      	movs	r3, #0
 8025f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025f5c:	2320      	movs	r3, #32
 8025f5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8025f66:	2330      	movs	r3, #48	@ 0x30
 8025f68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026118 <_vfiprintf_r+0x21c>
 8025f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025f70:	f04f 0901 	mov.w	r9, #1
 8025f74:	4623      	mov	r3, r4
 8025f76:	469a      	mov	sl, r3
 8025f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025f7c:	b10a      	cbz	r2, 8025f82 <_vfiprintf_r+0x86>
 8025f7e:	2a25      	cmp	r2, #37	@ 0x25
 8025f80:	d1f9      	bne.n	8025f76 <_vfiprintf_r+0x7a>
 8025f82:	ebba 0b04 	subs.w	fp, sl, r4
 8025f86:	d00b      	beq.n	8025fa0 <_vfiprintf_r+0xa4>
 8025f88:	465b      	mov	r3, fp
 8025f8a:	4622      	mov	r2, r4
 8025f8c:	4629      	mov	r1, r5
 8025f8e:	4630      	mov	r0, r6
 8025f90:	f7ff ffa2 	bl	8025ed8 <__sfputs_r>
 8025f94:	3001      	adds	r0, #1
 8025f96:	f000 80a7 	beq.w	80260e8 <_vfiprintf_r+0x1ec>
 8025f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025f9c:	445a      	add	r2, fp
 8025f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	f000 809f 	beq.w	80260e8 <_vfiprintf_r+0x1ec>
 8025faa:	2300      	movs	r3, #0
 8025fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025fb4:	f10a 0a01 	add.w	sl, sl, #1
 8025fb8:	9304      	str	r3, [sp, #16]
 8025fba:	9307      	str	r3, [sp, #28]
 8025fbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025fc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8025fc2:	4654      	mov	r4, sl
 8025fc4:	2205      	movs	r2, #5
 8025fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025fca:	4853      	ldr	r0, [pc, #332]	@ (8026118 <_vfiprintf_r+0x21c>)
 8025fcc:	f7da f8e0 	bl	8000190 <memchr>
 8025fd0:	9a04      	ldr	r2, [sp, #16]
 8025fd2:	b9d8      	cbnz	r0, 802600c <_vfiprintf_r+0x110>
 8025fd4:	06d1      	lsls	r1, r2, #27
 8025fd6:	bf44      	itt	mi
 8025fd8:	2320      	movmi	r3, #32
 8025fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025fde:	0713      	lsls	r3, r2, #28
 8025fe0:	bf44      	itt	mi
 8025fe2:	232b      	movmi	r3, #43	@ 0x2b
 8025fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8025fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8025fee:	d015      	beq.n	802601c <_vfiprintf_r+0x120>
 8025ff0:	9a07      	ldr	r2, [sp, #28]
 8025ff2:	4654      	mov	r4, sl
 8025ff4:	2000      	movs	r0, #0
 8025ff6:	f04f 0c0a 	mov.w	ip, #10
 8025ffa:	4621      	mov	r1, r4
 8025ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026000:	3b30      	subs	r3, #48	@ 0x30
 8026002:	2b09      	cmp	r3, #9
 8026004:	d94b      	bls.n	802609e <_vfiprintf_r+0x1a2>
 8026006:	b1b0      	cbz	r0, 8026036 <_vfiprintf_r+0x13a>
 8026008:	9207      	str	r2, [sp, #28]
 802600a:	e014      	b.n	8026036 <_vfiprintf_r+0x13a>
 802600c:	eba0 0308 	sub.w	r3, r0, r8
 8026010:	fa09 f303 	lsl.w	r3, r9, r3
 8026014:	4313      	orrs	r3, r2
 8026016:	9304      	str	r3, [sp, #16]
 8026018:	46a2      	mov	sl, r4
 802601a:	e7d2      	b.n	8025fc2 <_vfiprintf_r+0xc6>
 802601c:	9b03      	ldr	r3, [sp, #12]
 802601e:	1d19      	adds	r1, r3, #4
 8026020:	681b      	ldr	r3, [r3, #0]
 8026022:	9103      	str	r1, [sp, #12]
 8026024:	2b00      	cmp	r3, #0
 8026026:	bfbb      	ittet	lt
 8026028:	425b      	neglt	r3, r3
 802602a:	f042 0202 	orrlt.w	r2, r2, #2
 802602e:	9307      	strge	r3, [sp, #28]
 8026030:	9307      	strlt	r3, [sp, #28]
 8026032:	bfb8      	it	lt
 8026034:	9204      	strlt	r2, [sp, #16]
 8026036:	7823      	ldrb	r3, [r4, #0]
 8026038:	2b2e      	cmp	r3, #46	@ 0x2e
 802603a:	d10a      	bne.n	8026052 <_vfiprintf_r+0x156>
 802603c:	7863      	ldrb	r3, [r4, #1]
 802603e:	2b2a      	cmp	r3, #42	@ 0x2a
 8026040:	d132      	bne.n	80260a8 <_vfiprintf_r+0x1ac>
 8026042:	9b03      	ldr	r3, [sp, #12]
 8026044:	1d1a      	adds	r2, r3, #4
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	9203      	str	r2, [sp, #12]
 802604a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802604e:	3402      	adds	r4, #2
 8026050:	9305      	str	r3, [sp, #20]
 8026052:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 802611c <_vfiprintf_r+0x220>
 8026056:	7821      	ldrb	r1, [r4, #0]
 8026058:	2203      	movs	r2, #3
 802605a:	4650      	mov	r0, sl
 802605c:	f7da f898 	bl	8000190 <memchr>
 8026060:	b138      	cbz	r0, 8026072 <_vfiprintf_r+0x176>
 8026062:	9b04      	ldr	r3, [sp, #16]
 8026064:	eba0 000a 	sub.w	r0, r0, sl
 8026068:	2240      	movs	r2, #64	@ 0x40
 802606a:	4082      	lsls	r2, r0
 802606c:	4313      	orrs	r3, r2
 802606e:	3401      	adds	r4, #1
 8026070:	9304      	str	r3, [sp, #16]
 8026072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026076:	482a      	ldr	r0, [pc, #168]	@ (8026120 <_vfiprintf_r+0x224>)
 8026078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802607c:	2206      	movs	r2, #6
 802607e:	f7da f887 	bl	8000190 <memchr>
 8026082:	2800      	cmp	r0, #0
 8026084:	d03f      	beq.n	8026106 <_vfiprintf_r+0x20a>
 8026086:	4b27      	ldr	r3, [pc, #156]	@ (8026124 <_vfiprintf_r+0x228>)
 8026088:	bb1b      	cbnz	r3, 80260d2 <_vfiprintf_r+0x1d6>
 802608a:	9b03      	ldr	r3, [sp, #12]
 802608c:	3307      	adds	r3, #7
 802608e:	f023 0307 	bic.w	r3, r3, #7
 8026092:	3308      	adds	r3, #8
 8026094:	9303      	str	r3, [sp, #12]
 8026096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026098:	443b      	add	r3, r7
 802609a:	9309      	str	r3, [sp, #36]	@ 0x24
 802609c:	e76a      	b.n	8025f74 <_vfiprintf_r+0x78>
 802609e:	fb0c 3202 	mla	r2, ip, r2, r3
 80260a2:	460c      	mov	r4, r1
 80260a4:	2001      	movs	r0, #1
 80260a6:	e7a8      	b.n	8025ffa <_vfiprintf_r+0xfe>
 80260a8:	2300      	movs	r3, #0
 80260aa:	3401      	adds	r4, #1
 80260ac:	9305      	str	r3, [sp, #20]
 80260ae:	4619      	mov	r1, r3
 80260b0:	f04f 0c0a 	mov.w	ip, #10
 80260b4:	4620      	mov	r0, r4
 80260b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80260ba:	3a30      	subs	r2, #48	@ 0x30
 80260bc:	2a09      	cmp	r2, #9
 80260be:	d903      	bls.n	80260c8 <_vfiprintf_r+0x1cc>
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	d0c6      	beq.n	8026052 <_vfiprintf_r+0x156>
 80260c4:	9105      	str	r1, [sp, #20]
 80260c6:	e7c4      	b.n	8026052 <_vfiprintf_r+0x156>
 80260c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80260cc:	4604      	mov	r4, r0
 80260ce:	2301      	movs	r3, #1
 80260d0:	e7f0      	b.n	80260b4 <_vfiprintf_r+0x1b8>
 80260d2:	ab03      	add	r3, sp, #12
 80260d4:	9300      	str	r3, [sp, #0]
 80260d6:	462a      	mov	r2, r5
 80260d8:	4b13      	ldr	r3, [pc, #76]	@ (8026128 <_vfiprintf_r+0x22c>)
 80260da:	a904      	add	r1, sp, #16
 80260dc:	4630      	mov	r0, r6
 80260de:	f3af 8000 	nop.w
 80260e2:	4607      	mov	r7, r0
 80260e4:	1c78      	adds	r0, r7, #1
 80260e6:	d1d6      	bne.n	8026096 <_vfiprintf_r+0x19a>
 80260e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80260ea:	07d9      	lsls	r1, r3, #31
 80260ec:	d405      	bmi.n	80260fa <_vfiprintf_r+0x1fe>
 80260ee:	89ab      	ldrh	r3, [r5, #12]
 80260f0:	059a      	lsls	r2, r3, #22
 80260f2:	d402      	bmi.n	80260fa <_vfiprintf_r+0x1fe>
 80260f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80260f6:	f7ff f9ad 	bl	8025454 <__retarget_lock_release_recursive>
 80260fa:	89ab      	ldrh	r3, [r5, #12]
 80260fc:	065b      	lsls	r3, r3, #25
 80260fe:	f53f af1f 	bmi.w	8025f40 <_vfiprintf_r+0x44>
 8026102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026104:	e71e      	b.n	8025f44 <_vfiprintf_r+0x48>
 8026106:	ab03      	add	r3, sp, #12
 8026108:	9300      	str	r3, [sp, #0]
 802610a:	462a      	mov	r2, r5
 802610c:	4b06      	ldr	r3, [pc, #24]	@ (8026128 <_vfiprintf_r+0x22c>)
 802610e:	a904      	add	r1, sp, #16
 8026110:	4630      	mov	r0, r6
 8026112:	f7ff fc85 	bl	8025a20 <_printf_i>
 8026116:	e7e4      	b.n	80260e2 <_vfiprintf_r+0x1e6>
 8026118:	08029b16 	.word	0x08029b16
 802611c:	08029b1c 	.word	0x08029b1c
 8026120:	08029b20 	.word	0x08029b20
 8026124:	00000000 	.word	0x00000000
 8026128:	08025ed9 	.word	0x08025ed9

0802612c <__swbuf_r>:
 802612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802612e:	460e      	mov	r6, r1
 8026130:	4614      	mov	r4, r2
 8026132:	4605      	mov	r5, r0
 8026134:	b118      	cbz	r0, 802613e <__swbuf_r+0x12>
 8026136:	6a03      	ldr	r3, [r0, #32]
 8026138:	b90b      	cbnz	r3, 802613e <__swbuf_r+0x12>
 802613a:	f7fe ffc3 	bl	80250c4 <__sinit>
 802613e:	69a3      	ldr	r3, [r4, #24]
 8026140:	60a3      	str	r3, [r4, #8]
 8026142:	89a3      	ldrh	r3, [r4, #12]
 8026144:	071a      	lsls	r2, r3, #28
 8026146:	d501      	bpl.n	802614c <__swbuf_r+0x20>
 8026148:	6923      	ldr	r3, [r4, #16]
 802614a:	b943      	cbnz	r3, 802615e <__swbuf_r+0x32>
 802614c:	4621      	mov	r1, r4
 802614e:	4628      	mov	r0, r5
 8026150:	f000 f82a 	bl	80261a8 <__swsetup_r>
 8026154:	b118      	cbz	r0, 802615e <__swbuf_r+0x32>
 8026156:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802615a:	4638      	mov	r0, r7
 802615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802615e:	6823      	ldr	r3, [r4, #0]
 8026160:	6922      	ldr	r2, [r4, #16]
 8026162:	1a98      	subs	r0, r3, r2
 8026164:	6963      	ldr	r3, [r4, #20]
 8026166:	b2f6      	uxtb	r6, r6
 8026168:	4283      	cmp	r3, r0
 802616a:	4637      	mov	r7, r6
 802616c:	dc05      	bgt.n	802617a <__swbuf_r+0x4e>
 802616e:	4621      	mov	r1, r4
 8026170:	4628      	mov	r0, r5
 8026172:	f7ff fdf5 	bl	8025d60 <_fflush_r>
 8026176:	2800      	cmp	r0, #0
 8026178:	d1ed      	bne.n	8026156 <__swbuf_r+0x2a>
 802617a:	68a3      	ldr	r3, [r4, #8]
 802617c:	3b01      	subs	r3, #1
 802617e:	60a3      	str	r3, [r4, #8]
 8026180:	6823      	ldr	r3, [r4, #0]
 8026182:	1c5a      	adds	r2, r3, #1
 8026184:	6022      	str	r2, [r4, #0]
 8026186:	701e      	strb	r6, [r3, #0]
 8026188:	6962      	ldr	r2, [r4, #20]
 802618a:	1c43      	adds	r3, r0, #1
 802618c:	429a      	cmp	r2, r3
 802618e:	d004      	beq.n	802619a <__swbuf_r+0x6e>
 8026190:	89a3      	ldrh	r3, [r4, #12]
 8026192:	07db      	lsls	r3, r3, #31
 8026194:	d5e1      	bpl.n	802615a <__swbuf_r+0x2e>
 8026196:	2e0a      	cmp	r6, #10
 8026198:	d1df      	bne.n	802615a <__swbuf_r+0x2e>
 802619a:	4621      	mov	r1, r4
 802619c:	4628      	mov	r0, r5
 802619e:	f7ff fddf 	bl	8025d60 <_fflush_r>
 80261a2:	2800      	cmp	r0, #0
 80261a4:	d0d9      	beq.n	802615a <__swbuf_r+0x2e>
 80261a6:	e7d6      	b.n	8026156 <__swbuf_r+0x2a>

080261a8 <__swsetup_r>:
 80261a8:	b538      	push	{r3, r4, r5, lr}
 80261aa:	4b29      	ldr	r3, [pc, #164]	@ (8026250 <__swsetup_r+0xa8>)
 80261ac:	4605      	mov	r5, r0
 80261ae:	6818      	ldr	r0, [r3, #0]
 80261b0:	460c      	mov	r4, r1
 80261b2:	b118      	cbz	r0, 80261bc <__swsetup_r+0x14>
 80261b4:	6a03      	ldr	r3, [r0, #32]
 80261b6:	b90b      	cbnz	r3, 80261bc <__swsetup_r+0x14>
 80261b8:	f7fe ff84 	bl	80250c4 <__sinit>
 80261bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261c0:	0719      	lsls	r1, r3, #28
 80261c2:	d422      	bmi.n	802620a <__swsetup_r+0x62>
 80261c4:	06da      	lsls	r2, r3, #27
 80261c6:	d407      	bmi.n	80261d8 <__swsetup_r+0x30>
 80261c8:	2209      	movs	r2, #9
 80261ca:	602a      	str	r2, [r5, #0]
 80261cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80261d0:	81a3      	strh	r3, [r4, #12]
 80261d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80261d6:	e033      	b.n	8026240 <__swsetup_r+0x98>
 80261d8:	0758      	lsls	r0, r3, #29
 80261da:	d512      	bpl.n	8026202 <__swsetup_r+0x5a>
 80261dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80261de:	b141      	cbz	r1, 80261f2 <__swsetup_r+0x4a>
 80261e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80261e4:	4299      	cmp	r1, r3
 80261e6:	d002      	beq.n	80261ee <__swsetup_r+0x46>
 80261e8:	4628      	mov	r0, r5
 80261ea:	f7ff f953 	bl	8025494 <_free_r>
 80261ee:	2300      	movs	r3, #0
 80261f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80261f2:	89a3      	ldrh	r3, [r4, #12]
 80261f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80261f8:	81a3      	strh	r3, [r4, #12]
 80261fa:	2300      	movs	r3, #0
 80261fc:	6063      	str	r3, [r4, #4]
 80261fe:	6923      	ldr	r3, [r4, #16]
 8026200:	6023      	str	r3, [r4, #0]
 8026202:	89a3      	ldrh	r3, [r4, #12]
 8026204:	f043 0308 	orr.w	r3, r3, #8
 8026208:	81a3      	strh	r3, [r4, #12]
 802620a:	6923      	ldr	r3, [r4, #16]
 802620c:	b94b      	cbnz	r3, 8026222 <__swsetup_r+0x7a>
 802620e:	89a3      	ldrh	r3, [r4, #12]
 8026210:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026218:	d003      	beq.n	8026222 <__swsetup_r+0x7a>
 802621a:	4621      	mov	r1, r4
 802621c:	4628      	mov	r0, r5
 802621e:	f000 f88b 	bl	8026338 <__smakebuf_r>
 8026222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026226:	f013 0201 	ands.w	r2, r3, #1
 802622a:	d00a      	beq.n	8026242 <__swsetup_r+0x9a>
 802622c:	2200      	movs	r2, #0
 802622e:	60a2      	str	r2, [r4, #8]
 8026230:	6962      	ldr	r2, [r4, #20]
 8026232:	4252      	negs	r2, r2
 8026234:	61a2      	str	r2, [r4, #24]
 8026236:	6922      	ldr	r2, [r4, #16]
 8026238:	b942      	cbnz	r2, 802624c <__swsetup_r+0xa4>
 802623a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802623e:	d1c5      	bne.n	80261cc <__swsetup_r+0x24>
 8026240:	bd38      	pop	{r3, r4, r5, pc}
 8026242:	0799      	lsls	r1, r3, #30
 8026244:	bf58      	it	pl
 8026246:	6962      	ldrpl	r2, [r4, #20]
 8026248:	60a2      	str	r2, [r4, #8]
 802624a:	e7f4      	b.n	8026236 <__swsetup_r+0x8e>
 802624c:	2000      	movs	r0, #0
 802624e:	e7f7      	b.n	8026240 <__swsetup_r+0x98>
 8026250:	20000164 	.word	0x20000164

08026254 <_raise_r>:
 8026254:	291f      	cmp	r1, #31
 8026256:	b538      	push	{r3, r4, r5, lr}
 8026258:	4605      	mov	r5, r0
 802625a:	460c      	mov	r4, r1
 802625c:	d904      	bls.n	8026268 <_raise_r+0x14>
 802625e:	2316      	movs	r3, #22
 8026260:	6003      	str	r3, [r0, #0]
 8026262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026266:	bd38      	pop	{r3, r4, r5, pc}
 8026268:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802626a:	b112      	cbz	r2, 8026272 <_raise_r+0x1e>
 802626c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026270:	b94b      	cbnz	r3, 8026286 <_raise_r+0x32>
 8026272:	4628      	mov	r0, r5
 8026274:	f000 f830 	bl	80262d8 <_getpid_r>
 8026278:	4622      	mov	r2, r4
 802627a:	4601      	mov	r1, r0
 802627c:	4628      	mov	r0, r5
 802627e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026282:	f000 b817 	b.w	80262b4 <_kill_r>
 8026286:	2b01      	cmp	r3, #1
 8026288:	d00a      	beq.n	80262a0 <_raise_r+0x4c>
 802628a:	1c59      	adds	r1, r3, #1
 802628c:	d103      	bne.n	8026296 <_raise_r+0x42>
 802628e:	2316      	movs	r3, #22
 8026290:	6003      	str	r3, [r0, #0]
 8026292:	2001      	movs	r0, #1
 8026294:	e7e7      	b.n	8026266 <_raise_r+0x12>
 8026296:	2100      	movs	r1, #0
 8026298:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802629c:	4620      	mov	r0, r4
 802629e:	4798      	blx	r3
 80262a0:	2000      	movs	r0, #0
 80262a2:	e7e0      	b.n	8026266 <_raise_r+0x12>

080262a4 <raise>:
 80262a4:	4b02      	ldr	r3, [pc, #8]	@ (80262b0 <raise+0xc>)
 80262a6:	4601      	mov	r1, r0
 80262a8:	6818      	ldr	r0, [r3, #0]
 80262aa:	f7ff bfd3 	b.w	8026254 <_raise_r>
 80262ae:	bf00      	nop
 80262b0:	20000164 	.word	0x20000164

080262b4 <_kill_r>:
 80262b4:	b538      	push	{r3, r4, r5, lr}
 80262b6:	4d07      	ldr	r5, [pc, #28]	@ (80262d4 <_kill_r+0x20>)
 80262b8:	2300      	movs	r3, #0
 80262ba:	4604      	mov	r4, r0
 80262bc:	4608      	mov	r0, r1
 80262be:	4611      	mov	r1, r2
 80262c0:	602b      	str	r3, [r5, #0]
 80262c2:	f7dc f87e 	bl	80023c2 <_kill>
 80262c6:	1c43      	adds	r3, r0, #1
 80262c8:	d102      	bne.n	80262d0 <_kill_r+0x1c>
 80262ca:	682b      	ldr	r3, [r5, #0]
 80262cc:	b103      	cbz	r3, 80262d0 <_kill_r+0x1c>
 80262ce:	6023      	str	r3, [r4, #0]
 80262d0:	bd38      	pop	{r3, r4, r5, pc}
 80262d2:	bf00      	nop
 80262d4:	20002f50 	.word	0x20002f50

080262d8 <_getpid_r>:
 80262d8:	f7dc b86c 	b.w	80023b4 <_getpid>

080262dc <_malloc_usable_size_r>:
 80262dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80262e0:	1f18      	subs	r0, r3, #4
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	bfbc      	itt	lt
 80262e6:	580b      	ldrlt	r3, [r1, r0]
 80262e8:	18c0      	addlt	r0, r0, r3
 80262ea:	4770      	bx	lr

080262ec <__swhatbuf_r>:
 80262ec:	b570      	push	{r4, r5, r6, lr}
 80262ee:	460c      	mov	r4, r1
 80262f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262f4:	2900      	cmp	r1, #0
 80262f6:	b096      	sub	sp, #88	@ 0x58
 80262f8:	4615      	mov	r5, r2
 80262fa:	461e      	mov	r6, r3
 80262fc:	da0d      	bge.n	802631a <__swhatbuf_r+0x2e>
 80262fe:	89a3      	ldrh	r3, [r4, #12]
 8026300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026304:	f04f 0100 	mov.w	r1, #0
 8026308:	bf14      	ite	ne
 802630a:	2340      	movne	r3, #64	@ 0x40
 802630c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026310:	2000      	movs	r0, #0
 8026312:	6031      	str	r1, [r6, #0]
 8026314:	602b      	str	r3, [r5, #0]
 8026316:	b016      	add	sp, #88	@ 0x58
 8026318:	bd70      	pop	{r4, r5, r6, pc}
 802631a:	466a      	mov	r2, sp
 802631c:	f000 f848 	bl	80263b0 <_fstat_r>
 8026320:	2800      	cmp	r0, #0
 8026322:	dbec      	blt.n	80262fe <__swhatbuf_r+0x12>
 8026324:	9901      	ldr	r1, [sp, #4]
 8026326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802632a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802632e:	4259      	negs	r1, r3
 8026330:	4159      	adcs	r1, r3
 8026332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026336:	e7eb      	b.n	8026310 <__swhatbuf_r+0x24>

08026338 <__smakebuf_r>:
 8026338:	898b      	ldrh	r3, [r1, #12]
 802633a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802633c:	079d      	lsls	r5, r3, #30
 802633e:	4606      	mov	r6, r0
 8026340:	460c      	mov	r4, r1
 8026342:	d507      	bpl.n	8026354 <__smakebuf_r+0x1c>
 8026344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026348:	6023      	str	r3, [r4, #0]
 802634a:	6123      	str	r3, [r4, #16]
 802634c:	2301      	movs	r3, #1
 802634e:	6163      	str	r3, [r4, #20]
 8026350:	b003      	add	sp, #12
 8026352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026354:	ab01      	add	r3, sp, #4
 8026356:	466a      	mov	r2, sp
 8026358:	f7ff ffc8 	bl	80262ec <__swhatbuf_r>
 802635c:	9f00      	ldr	r7, [sp, #0]
 802635e:	4605      	mov	r5, r0
 8026360:	4639      	mov	r1, r7
 8026362:	4630      	mov	r0, r6
 8026364:	f7ff f90a 	bl	802557c <_malloc_r>
 8026368:	b948      	cbnz	r0, 802637e <__smakebuf_r+0x46>
 802636a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802636e:	059a      	lsls	r2, r3, #22
 8026370:	d4ee      	bmi.n	8026350 <__smakebuf_r+0x18>
 8026372:	f023 0303 	bic.w	r3, r3, #3
 8026376:	f043 0302 	orr.w	r3, r3, #2
 802637a:	81a3      	strh	r3, [r4, #12]
 802637c:	e7e2      	b.n	8026344 <__smakebuf_r+0xc>
 802637e:	89a3      	ldrh	r3, [r4, #12]
 8026380:	6020      	str	r0, [r4, #0]
 8026382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026386:	81a3      	strh	r3, [r4, #12]
 8026388:	9b01      	ldr	r3, [sp, #4]
 802638a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802638e:	b15b      	cbz	r3, 80263a8 <__smakebuf_r+0x70>
 8026390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026394:	4630      	mov	r0, r6
 8026396:	f000 f81d 	bl	80263d4 <_isatty_r>
 802639a:	b128      	cbz	r0, 80263a8 <__smakebuf_r+0x70>
 802639c:	89a3      	ldrh	r3, [r4, #12]
 802639e:	f023 0303 	bic.w	r3, r3, #3
 80263a2:	f043 0301 	orr.w	r3, r3, #1
 80263a6:	81a3      	strh	r3, [r4, #12]
 80263a8:	89a3      	ldrh	r3, [r4, #12]
 80263aa:	431d      	orrs	r5, r3
 80263ac:	81a5      	strh	r5, [r4, #12]
 80263ae:	e7cf      	b.n	8026350 <__smakebuf_r+0x18>

080263b0 <_fstat_r>:
 80263b0:	b538      	push	{r3, r4, r5, lr}
 80263b2:	4d07      	ldr	r5, [pc, #28]	@ (80263d0 <_fstat_r+0x20>)
 80263b4:	2300      	movs	r3, #0
 80263b6:	4604      	mov	r4, r0
 80263b8:	4608      	mov	r0, r1
 80263ba:	4611      	mov	r1, r2
 80263bc:	602b      	str	r3, [r5, #0]
 80263be:	f7dc f85f 	bl	8002480 <_fstat>
 80263c2:	1c43      	adds	r3, r0, #1
 80263c4:	d102      	bne.n	80263cc <_fstat_r+0x1c>
 80263c6:	682b      	ldr	r3, [r5, #0]
 80263c8:	b103      	cbz	r3, 80263cc <_fstat_r+0x1c>
 80263ca:	6023      	str	r3, [r4, #0]
 80263cc:	bd38      	pop	{r3, r4, r5, pc}
 80263ce:	bf00      	nop
 80263d0:	20002f50 	.word	0x20002f50

080263d4 <_isatty_r>:
 80263d4:	b538      	push	{r3, r4, r5, lr}
 80263d6:	4d06      	ldr	r5, [pc, #24]	@ (80263f0 <_isatty_r+0x1c>)
 80263d8:	2300      	movs	r3, #0
 80263da:	4604      	mov	r4, r0
 80263dc:	4608      	mov	r0, r1
 80263de:	602b      	str	r3, [r5, #0]
 80263e0:	f7dc f85d 	bl	800249e <_isatty>
 80263e4:	1c43      	adds	r3, r0, #1
 80263e6:	d102      	bne.n	80263ee <_isatty_r+0x1a>
 80263e8:	682b      	ldr	r3, [r5, #0]
 80263ea:	b103      	cbz	r3, 80263ee <_isatty_r+0x1a>
 80263ec:	6023      	str	r3, [r4, #0]
 80263ee:	bd38      	pop	{r3, r4, r5, pc}
 80263f0:	20002f50 	.word	0x20002f50
 80263f4:	00000000 	.word	0x00000000

080263f8 <floor>:
 80263f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80263fc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8026400:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8026404:	2e13      	cmp	r6, #19
 8026406:	4602      	mov	r2, r0
 8026408:	460b      	mov	r3, r1
 802640a:	460c      	mov	r4, r1
 802640c:	4605      	mov	r5, r0
 802640e:	4680      	mov	r8, r0
 8026410:	dc35      	bgt.n	802647e <floor+0x86>
 8026412:	2e00      	cmp	r6, #0
 8026414:	da17      	bge.n	8026446 <floor+0x4e>
 8026416:	a334      	add	r3, pc, #208	@ (adr r3, 80264e8 <floor+0xf0>)
 8026418:	e9d3 2300 	ldrd	r2, r3, [r3]
 802641c:	f7d9 ff0e 	bl	800023c <__adddf3>
 8026420:	2200      	movs	r2, #0
 8026422:	2300      	movs	r3, #0
 8026424:	f7da f93e 	bl	80006a4 <__aeabi_dcmpgt>
 8026428:	b150      	cbz	r0, 8026440 <floor+0x48>
 802642a:	2c00      	cmp	r4, #0
 802642c:	da57      	bge.n	80264de <floor+0xe6>
 802642e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8026432:	432c      	orrs	r4, r5
 8026434:	2500      	movs	r5, #0
 8026436:	42ac      	cmp	r4, r5
 8026438:	4c2d      	ldr	r4, [pc, #180]	@ (80264f0 <floor+0xf8>)
 802643a:	bf08      	it	eq
 802643c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8026440:	4623      	mov	r3, r4
 8026442:	462a      	mov	r2, r5
 8026444:	e024      	b.n	8026490 <floor+0x98>
 8026446:	4f2b      	ldr	r7, [pc, #172]	@ (80264f4 <floor+0xfc>)
 8026448:	4137      	asrs	r7, r6
 802644a:	ea01 0c07 	and.w	ip, r1, r7
 802644e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8026452:	d01d      	beq.n	8026490 <floor+0x98>
 8026454:	a324      	add	r3, pc, #144	@ (adr r3, 80264e8 <floor+0xf0>)
 8026456:	e9d3 2300 	ldrd	r2, r3, [r3]
 802645a:	f7d9 feef 	bl	800023c <__adddf3>
 802645e:	2200      	movs	r2, #0
 8026460:	2300      	movs	r3, #0
 8026462:	f7da f91f 	bl	80006a4 <__aeabi_dcmpgt>
 8026466:	2800      	cmp	r0, #0
 8026468:	d0ea      	beq.n	8026440 <floor+0x48>
 802646a:	2c00      	cmp	r4, #0
 802646c:	bfbe      	ittt	lt
 802646e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8026472:	4133      	asrlt	r3, r6
 8026474:	18e4      	addlt	r4, r4, r3
 8026476:	ea24 0407 	bic.w	r4, r4, r7
 802647a:	2500      	movs	r5, #0
 802647c:	e7e0      	b.n	8026440 <floor+0x48>
 802647e:	2e33      	cmp	r6, #51	@ 0x33
 8026480:	dd0a      	ble.n	8026498 <floor+0xa0>
 8026482:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8026486:	d103      	bne.n	8026490 <floor+0x98>
 8026488:	f7d9 fed8 	bl	800023c <__adddf3>
 802648c:	4602      	mov	r2, r0
 802648e:	460b      	mov	r3, r1
 8026490:	4610      	mov	r0, r2
 8026492:	4619      	mov	r1, r3
 8026494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026498:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 802649c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80264a0:	fa2c f707 	lsr.w	r7, ip, r7
 80264a4:	4207      	tst	r7, r0
 80264a6:	d0f3      	beq.n	8026490 <floor+0x98>
 80264a8:	a30f      	add	r3, pc, #60	@ (adr r3, 80264e8 <floor+0xf0>)
 80264aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264ae:	f7d9 fec5 	bl	800023c <__adddf3>
 80264b2:	2200      	movs	r2, #0
 80264b4:	2300      	movs	r3, #0
 80264b6:	f7da f8f5 	bl	80006a4 <__aeabi_dcmpgt>
 80264ba:	2800      	cmp	r0, #0
 80264bc:	d0c0      	beq.n	8026440 <floor+0x48>
 80264be:	2c00      	cmp	r4, #0
 80264c0:	da0a      	bge.n	80264d8 <floor+0xe0>
 80264c2:	2e14      	cmp	r6, #20
 80264c4:	d101      	bne.n	80264ca <floor+0xd2>
 80264c6:	3401      	adds	r4, #1
 80264c8:	e006      	b.n	80264d8 <floor+0xe0>
 80264ca:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80264ce:	2301      	movs	r3, #1
 80264d0:	40b3      	lsls	r3, r6
 80264d2:	441d      	add	r5, r3
 80264d4:	4545      	cmp	r5, r8
 80264d6:	d3f6      	bcc.n	80264c6 <floor+0xce>
 80264d8:	ea25 0507 	bic.w	r5, r5, r7
 80264dc:	e7b0      	b.n	8026440 <floor+0x48>
 80264de:	2500      	movs	r5, #0
 80264e0:	462c      	mov	r4, r5
 80264e2:	e7ad      	b.n	8026440 <floor+0x48>
 80264e4:	f3af 8000 	nop.w
 80264e8:	8800759c 	.word	0x8800759c
 80264ec:	7e37e43c 	.word	0x7e37e43c
 80264f0:	bff00000 	.word	0xbff00000
 80264f4:	000fffff 	.word	0x000fffff

080264f8 <_init>:
 80264f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264fa:	bf00      	nop
 80264fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80264fe:	bc08      	pop	{r3}
 8026500:	469e      	mov	lr, r3
 8026502:	4770      	bx	lr

08026504 <_fini>:
 8026504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026506:	bf00      	nop
 8026508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802650a:	bc08      	pop	{r3}
 802650c:	469e      	mov	lr, r3
 802650e:	4770      	bx	lr
